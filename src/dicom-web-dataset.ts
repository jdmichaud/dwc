/* eslint-disable */
import { Dataset } from '@jdmichaud/dicom-model';

import { DICOMWebResponse, Element } from './dicom-web-response';
import { Requester } from './requester';

/**
 * Implements a Dataset. All the fields are optional and can thus be undefined.
 */
export class DICOMWebDataset implements Dataset {
  constructor(public readonly dwResponse: DICOMWebResponse, protected readonly requester: Requester) {
    if (dwResponse === undefined) {
      throw new Error('DICOMWebDataset requires a DICOM valid DICOMWeb response as parameter');
    }
  }

  get link(): string {
    return this.dwResponse.link;
  }

  private async retrieveWideField<T>(element: string): Promise<Response> {
    return await (async () => {
      const response = await this.requester.qido({
        path: element,
      });
      return await response;
    })();
  }

  // Metadata ------------------------------------------------------------------

  // File Meta Information Group Length
  get FileMetaInformationGroupLength(): number | undefined {
    return this.x00020000;
  }

  get x00020000(): number | undefined {
    const element = this.dwResponse['00020000'];
    return this.dwResponse['00020000']?.Value[0];
  }

  // Media Storage SOP Class UID
  get MediaStorageSOPClassUID(): string | undefined {
    return this.x00020002;
  }

  get x00020002(): string | undefined {
    const element = this.dwResponse['00020002'];
    return this.dwResponse['00020002']?.Value[0];
  }

  // Media Storage SOP Instance UID
  get MediaStorageSOPInstanceUID(): string | undefined {
    return this.x00020003;
  }

  get x00020003(): string | undefined {
    const element = this.dwResponse['00020003'];
    return this.dwResponse['00020003']?.Value[0];
  }

  // Transfer Syntax UID
  get TransferSyntaxUID(): string | undefined {
    return this.x00020010;
  }

  get x00020010(): string | undefined {
    const element = this.dwResponse['00020010'];
    return this.dwResponse['00020010']?.Value[0];
  }

  // Implementation Class UID
  get ImplementationClassUID(): string | undefined {
    return this.x00020012;
  }

  get x00020012(): string | undefined {
    const element = this.dwResponse['00020012'];
    return this.dwResponse['00020012']?.Value[0];
  }

  // Implementation Version Name
  get ImplementationVersionName(): string | undefined {
    return this.x00020013;
  }

  get x00020013(): string | undefined {
    const element = this.dwResponse['00020013'];
    return this.dwResponse['00020013']?.Value[0];
  }

  // Source Application Entity Title
  get SourceApplicationEntityTitle(): string | undefined {
    return this.x00020016;
  }

  get x00020016(): string | undefined {
    const element = this.dwResponse['00020016'];
    return this.dwResponse['00020016']?.Value[0];
  }

  // Sending Application Entity Title
  get SendingApplicationEntityTitle(): string | undefined {
    return this.x00020017;
  }

  get x00020017(): string | undefined {
    const element = this.dwResponse['00020017'];
    return this.dwResponse['00020017']?.Value[0];
  }

  // Receiving Application Entity Title
  get ReceivingApplicationEntityTitle(): string | undefined {
    return this.x00020018;
  }

  get x00020018(): string | undefined {
    const element = this.dwResponse['00020018'];
    return this.dwResponse['00020018']?.Value[0];
  }

  // Private Information Creator UID
  get PrivateInformationCreatorUID(): string | undefined {
    return this.x00020100;
  }

  get x00020100(): string | undefined {
    const element = this.dwResponse['00020100'];
    return this.dwResponse['00020100']?.Value[0];
  }

  // File-set ID
  get FileSetID(): string | undefined {
    return this.x00041130;
  }

  get x00041130(): string | undefined {
    const element = this.dwResponse['00041130'];
    return this.dwResponse['00041130']?.Value[0];
  }

  // File-set Descriptor File ID
  get FileSetDescriptorFileID(): Array<string> | undefined {
    return this.x00041141;
  }

  get x00041141(): Array<string> | undefined {
    const element = this.dwResponse['00041141'];
    return this.dwResponse['00041141']?.Value;
  }

  // Specific Character Set of File-set Descriptor File
  get SpecificCharacterSetOfFileSetDescriptorFile(): string | undefined {
    return this.x00041142;
  }

  get x00041142(): string | undefined {
    const element = this.dwResponse['00041142'];
    return this.dwResponse['00041142']?.Value[0];
  }

  // Offset of the First Directory Record of the Root Directory Entity
  get OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity(): number | undefined {
    return this.x00041200;
  }

  get x00041200(): number | undefined {
    const element = this.dwResponse['00041200'];
    return this.dwResponse['00041200']?.Value[0];
  }

  // Offset of the Last Directory Record of the Root Directory Entity
  get OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity(): number | undefined {
    return this.x00041202;
  }

  get x00041202(): number | undefined {
    const element = this.dwResponse['00041202'];
    return this.dwResponse['00041202']?.Value[0];
  }

  // File-set Consistency Flag
  get FileSetConsistencyFlag(): number | undefined {
    return this.x00041212;
  }

  get x00041212(): number | undefined {
    const element = this.dwResponse['00041212'];
    return this.dwResponse['00041212']?.Value[0];
  }

  // Directory Record Sequence
  get DirectoryRecordSequence(): Array<Dataset> | undefined {
    return this.x00041220;
  }

  get x00041220(): Array<Dataset> | undefined {
    const element = this.dwResponse['00041220'];
    return this.dwResponse['00041220']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Offset of the Next Directory Record
  get OffsetOfTheNextDirectoryRecord(): number | undefined {
    return this.x00041400;
  }

  get x00041400(): number | undefined {
    const element = this.dwResponse['00041400'];
    return this.dwResponse['00041400']?.Value[0];
  }

  // Record In-use Flag
  get RecordInUseFlag(): number | undefined {
    return this.x00041410;
  }

  get x00041410(): number | undefined {
    const element = this.dwResponse['00041410'];
    return this.dwResponse['00041410']?.Value[0];
  }

  // Offset of Referenced Lower-Level Directory Entity
  get OffsetOfReferencedLowerLevelDirectoryEntity(): number | undefined {
    return this.x00041420;
  }

  get x00041420(): number | undefined {
    const element = this.dwResponse['00041420'];
    return this.dwResponse['00041420']?.Value[0];
  }

  // Directory Record Type
  get DirectoryRecordType(): string | undefined {
    return this.x00041430;
  }

  get x00041430(): string | undefined {
    const element = this.dwResponse['00041430'];
    return this.dwResponse['00041430']?.Value[0];
  }

  // Private Record UID
  get PrivateRecordUID(): string | undefined {
    return this.x00041432;
  }

  get x00041432(): string | undefined {
    const element = this.dwResponse['00041432'];
    return this.dwResponse['00041432']?.Value[0];
  }

  // Referenced File ID
  get ReferencedFileID(): Array<string> | undefined {
    return this.x00041500;
  }

  get x00041500(): Array<string> | undefined {
    const element = this.dwResponse['00041500'];
    return this.dwResponse['00041500']?.Value;
  }

  // MRDR Directory Record Offset
  get MRDRDirectoryRecordOffset(): number | undefined {
    return this.x00041504;
  }

  get x00041504(): number | undefined {
    const element = this.dwResponse['00041504'];
    return this.dwResponse['00041504']?.Value[0];
  }

  // Referenced SOP Class UID in File
  get ReferencedSOPClassUIDInFile(): string | undefined {
    return this.x00041510;
  }

  get x00041510(): string | undefined {
    const element = this.dwResponse['00041510'];
    return this.dwResponse['00041510']?.Value[0];
  }

  // Referenced SOP Instance UID in File
  get ReferencedSOPInstanceUIDInFile(): string | undefined {
    return this.x00041511;
  }

  get x00041511(): string | undefined {
    const element = this.dwResponse['00041511'];
    return this.dwResponse['00041511']?.Value[0];
  }

  // Referenced Transfer Syntax UID in File
  get ReferencedTransferSyntaxUIDInFile(): string | undefined {
    return this.x00041512;
  }

  get x00041512(): string | undefined {
    const element = this.dwResponse['00041512'];
    return this.dwResponse['00041512']?.Value[0];
  }

  // Referenced Related General SOP Class UID in File
  get ReferencedRelatedGeneralSOPClassUIDInFile(): Array<string> | undefined {
    return this.x0004151a;
  }

  get x0004151a(): Array<string> | undefined {
    const element = this.dwResponse['0004151a'];
    return this.dwResponse['0004151a']?.Value;
  }

  // Number of References
  get NumberOfReferences(): number | undefined {
    return this.x00041600;
  }

  get x00041600(): number | undefined {
    const element = this.dwResponse['00041600'];
    return this.dwResponse['00041600']?.Value[0];
  }

  // Length to End
  get LengthToEnd(): number | undefined {
    return this.x00080001;
  }

  get x00080001(): number | undefined {
    const element = this.dwResponse['00080001'];
    return this.dwResponse['00080001']?.Value[0];
  }

  // Specific Character Set
  get SpecificCharacterSet(): Array<string> | undefined {
    return this.x00080005;
  }

  get x00080005(): Array<string> | undefined {
    const element = this.dwResponse['00080005'];
    return this.dwResponse['00080005']?.Value;
  }

  // Language Code Sequence
  get LanguageCodeSequence(): Array<Dataset> | undefined {
    return this.x00080006;
  }

  get x00080006(): Array<Dataset> | undefined {
    const element = this.dwResponse['00080006'];
    return this.dwResponse['00080006']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Image Type
  get ImageType(): Array<string> | undefined {
    return this.x00080008;
  }

  get x00080008(): Array<string> | undefined {
    const element = this.dwResponse['00080008'];
    return this.dwResponse['00080008']?.Value;
  }

  // Recognition Code
  get RecognitionCode(): string | undefined {
    return this.x00080010;
  }

  get x00080010(): string | undefined {
    const element = this.dwResponse['00080010'];
    return this.dwResponse['00080010']?.Value[0];
  }

  // Instance Creation Date
  get InstanceCreationDate(): Date | undefined {
    return this.x00080012;
  }

  get x00080012(): Date | undefined {
    const element = this.dwResponse['00080012'];
    return this.dwResponse['00080012']?.Value[0];
  }

  // Instance Creation Time
  get InstanceCreationTime(): string | undefined {
    return this.x00080013;
  }

  get x00080013(): string | undefined {
    const element = this.dwResponse['00080013'];
    return this.dwResponse['00080013']?.Value[0];
  }

  // Instance Creator UID
  get InstanceCreatorUID(): string | undefined {
    return this.x00080014;
  }

  get x00080014(): string | undefined {
    const element = this.dwResponse['00080014'];
    return this.dwResponse['00080014']?.Value[0];
  }

  // Instance Coercion DateTime
  get InstanceCoercionDateTime(): string | undefined {
    return this.x00080015;
  }

  get x00080015(): string | undefined {
    const element = this.dwResponse['00080015'];
    return this.dwResponse['00080015']?.Value[0];
  }

  // SOP Class UID
  get SOPClassUID(): string | undefined {
    return this.x00080016;
  }

  get x00080016(): string | undefined {
    const element = this.dwResponse['00080016'];
    return this.dwResponse['00080016']?.Value[0];
  }

  // SOP Instance UID
  get SOPInstanceUID(): string | undefined {
    return this.x00080018;
  }

  get x00080018(): string | undefined {
    const element = this.dwResponse['00080018'];
    return this.dwResponse['00080018']?.Value[0];
  }

  // Related General SOP Class UID
  get RelatedGeneralSOPClassUID(): Array<string> | undefined {
    return this.x0008001a;
  }

  get x0008001a(): Array<string> | undefined {
    const element = this.dwResponse['0008001a'];
    return this.dwResponse['0008001a']?.Value;
  }

  // Original Specialized SOP Class UID
  get OriginalSpecializedSOPClassUID(): string | undefined {
    return this.x0008001b;
  }

  get x0008001b(): string | undefined {
    const element = this.dwResponse['0008001b'];
    return this.dwResponse['0008001b']?.Value[0];
  }

  // Study Date
  get StudyDate(): Date | undefined {
    return this.x00080020;
  }

  get x00080020(): Date | undefined {
    const element = this.dwResponse['00080020'];
    return this.dwResponse['00080020']?.Value[0];
  }

  // Series Date
  get SeriesDate(): Date | undefined {
    return this.x00080021;
  }

  get x00080021(): Date | undefined {
    const element = this.dwResponse['00080021'];
    return this.dwResponse['00080021']?.Value[0];
  }

  // Acquisition Date
  get AcquisitionDate(): Date | undefined {
    return this.x00080022;
  }

  get x00080022(): Date | undefined {
    const element = this.dwResponse['00080022'];
    return this.dwResponse['00080022']?.Value[0];
  }

  // Content Date
  get ContentDate(): Date | undefined {
    return this.x00080023;
  }

  get x00080023(): Date | undefined {
    const element = this.dwResponse['00080023'];
    return this.dwResponse['00080023']?.Value[0];
  }

  // Overlay Date
  get OverlayDate(): Date | undefined {
    return this.x00080024;
  }

  get x00080024(): Date | undefined {
    const element = this.dwResponse['00080024'];
    return this.dwResponse['00080024']?.Value[0];
  }

  // Curve Date
  get CurveDate(): Date | undefined {
    return this.x00080025;
  }

  get x00080025(): Date | undefined {
    const element = this.dwResponse['00080025'];
    return this.dwResponse['00080025']?.Value[0];
  }

  // Acquisition DateTime
  get AcquisitionDateTime(): string | undefined {
    return this.x0008002a;
  }

  get x0008002a(): string | undefined {
    const element = this.dwResponse['0008002a'];
    return this.dwResponse['0008002a']?.Value[0];
  }

  // Study Time
  get StudyTime(): string | undefined {
    return this.x00080030;
  }

  get x00080030(): string | undefined {
    const element = this.dwResponse['00080030'];
    return this.dwResponse['00080030']?.Value[0];
  }

  // Series Time
  get SeriesTime(): string | undefined {
    return this.x00080031;
  }

  get x00080031(): string | undefined {
    const element = this.dwResponse['00080031'];
    return this.dwResponse['00080031']?.Value[0];
  }

  // Acquisition Time
  get AcquisitionTime(): string | undefined {
    return this.x00080032;
  }

  get x00080032(): string | undefined {
    const element = this.dwResponse['00080032'];
    return this.dwResponse['00080032']?.Value[0];
  }

  // Content Time
  get ContentTime(): string | undefined {
    return this.x00080033;
  }

  get x00080033(): string | undefined {
    const element = this.dwResponse['00080033'];
    return this.dwResponse['00080033']?.Value[0];
  }

  // Overlay Time
  get OverlayTime(): string | undefined {
    return this.x00080034;
  }

  get x00080034(): string | undefined {
    const element = this.dwResponse['00080034'];
    return this.dwResponse['00080034']?.Value[0];
  }

  // Curve Time
  get CurveTime(): string | undefined {
    return this.x00080035;
  }

  get x00080035(): string | undefined {
    const element = this.dwResponse['00080035'];
    return this.dwResponse['00080035']?.Value[0];
  }

  // Data Set Type
  get DataSetType(): number | undefined {
    return this.x00080040;
  }

  get x00080040(): number | undefined {
    const element = this.dwResponse['00080040'];
    return this.dwResponse['00080040']?.Value[0];
  }

  // Data Set Subtype
  get DataSetSubtype(): string | undefined {
    return this.x00080041;
  }

  get x00080041(): string | undefined {
    const element = this.dwResponse['00080041'];
    return this.dwResponse['00080041']?.Value[0];
  }

  // Nuclear Medicine Series Type
  get NuclearMedicineSeriesType(): string | undefined {
    return this.x00080042;
  }

  get x00080042(): string | undefined {
    const element = this.dwResponse['00080042'];
    return this.dwResponse['00080042']?.Value[0];
  }

  // Accession Number
  get AccessionNumber(): string | undefined {
    return this.x00080050;
  }

  get x00080050(): string | undefined {
    const element = this.dwResponse['00080050'];
    return this.dwResponse['00080050']?.Value[0];
  }

  // Issuer of Accession Number Sequence
  get IssuerOfAccessionNumberSequence(): Array<Dataset> | undefined {
    return this.x00080051;
  }

  get x00080051(): Array<Dataset> | undefined {
    const element = this.dwResponse['00080051'];
    return this.dwResponse['00080051']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Query/Retrieve Level
  get QueryRetrieveLevel(): string | undefined {
    return this.x00080052;
  }

  get x00080052(): string | undefined {
    const element = this.dwResponse['00080052'];
    return this.dwResponse['00080052']?.Value[0];
  }

  // Query/Retrieve View
  get QueryRetrieveView(): string | undefined {
    return this.x00080053;
  }

  get x00080053(): string | undefined {
    const element = this.dwResponse['00080053'];
    return this.dwResponse['00080053']?.Value[0];
  }

  // Retrieve AE Title
  get RetrieveAETitle(): Array<string> | undefined {
    return this.x00080054;
  }

  get x00080054(): Array<string> | undefined {
    const element = this.dwResponse['00080054'];
    return this.dwResponse['00080054']?.Value;
  }

  // Instance Availability
  get InstanceAvailability(): string | undefined {
    return this.x00080056;
  }

  get x00080056(): string | undefined {
    const element = this.dwResponse['00080056'];
    return this.dwResponse['00080056']?.Value[0];
  }

  // Failed SOP Instance UID List
  get FailedSOPInstanceUIDList(): Array<string> | undefined {
    return this.x00080058;
  }

  get x00080058(): Array<string> | undefined {
    const element = this.dwResponse['00080058'];
    return this.dwResponse['00080058']?.Value;
  }

  // Modality
  get Modality(): string | undefined {
    return this.x00080060;
  }

  get x00080060(): string | undefined {
    const element = this.dwResponse['00080060'];
    return this.dwResponse['00080060']?.Value[0];
  }

  // Modalities in Study
  get ModalitiesInStudy(): Array<string> | undefined {
    return this.x00080061;
  }

  get x00080061(): Array<string> | undefined {
    const element = this.dwResponse['00080061'];
    return this.dwResponse['00080061']?.Value;
  }

  // SOP Classes in Study
  get SOPClassesInStudy(): Array<string> | undefined {
    return this.x00080062;
  }

  get x00080062(): Array<string> | undefined {
    const element = this.dwResponse['00080062'];
    return this.dwResponse['00080062']?.Value;
  }

  // Conversion Type
  get ConversionType(): string | undefined {
    return this.x00080064;
  }

  get x00080064(): string | undefined {
    const element = this.dwResponse['00080064'];
    return this.dwResponse['00080064']?.Value[0];
  }

  // Presentation Intent Type
  get PresentationIntentType(): string | undefined {
    return this.x00080068;
  }

  get x00080068(): string | undefined {
    const element = this.dwResponse['00080068'];
    return this.dwResponse['00080068']?.Value[0];
  }

  // Manufacturer
  get Manufacturer(): string | undefined {
    return this.x00080070;
  }

  get x00080070(): string | undefined {
    const element = this.dwResponse['00080070'];
    return this.dwResponse['00080070']?.Value[0];
  }

  // Institution Name
  get InstitutionName(): string | undefined {
    return this.x00080080;
  }

  get x00080080(): string | undefined {
    const element = this.dwResponse['00080080'];
    return this.dwResponse['00080080']?.Value[0];
  }

  // Institution Code Sequence
  get InstitutionCodeSequence(): Array<Dataset> | undefined {
    return this.x00080082;
  }

  get x00080082(): Array<Dataset> | undefined {
    const element = this.dwResponse['00080082'];
    return this.dwResponse['00080082']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referring Physician's Name
  get ReferringPhysicianName(): any | undefined {
    return this.x00080090;
  }

  get x00080090(): any | undefined {
    const element = this.dwResponse['00080090'];
    return this.dwResponse['00080090']?.Value[0];
  }

  // Referring Physician's Telephone Numbers
  get ReferringPhysicianTelephoneNumbers(): Array<string> | undefined {
    return this.x00080094;
  }

  get x00080094(): Array<string> | undefined {
    const element = this.dwResponse['00080094'];
    return this.dwResponse['00080094']?.Value;
  }

  // Referring Physician Identification Sequence
  get ReferringPhysicianIdentificationSequence(): Array<Dataset> | undefined {
    return this.x00080096;
  }

  get x00080096(): Array<Dataset> | undefined {
    const element = this.dwResponse['00080096'];
    return this.dwResponse['00080096']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Code Value
  get CodeValue(): string | undefined {
    return this.x00080100;
  }

  get x00080100(): string | undefined {
    const element = this.dwResponse['00080100'];
    return this.dwResponse['00080100']?.Value[0];
  }

  // Extended Code Value
  get ExtendedCodeValue(): string | undefined {
    return this.x00080101;
  }

  get x00080101(): string | undefined {
    const element = this.dwResponse['00080101'];
    return this.dwResponse['00080101']?.Value[0];
  }

  // Coding Scheme Designator
  get CodingSchemeDesignator(): string | undefined {
    return this.x00080102;
  }

  get x00080102(): string | undefined {
    const element = this.dwResponse['00080102'];
    return this.dwResponse['00080102']?.Value[0];
  }

  // Coding Scheme Version
  get CodingSchemeVersion(): string | undefined {
    return this.x00080103;
  }

  get x00080103(): string | undefined {
    const element = this.dwResponse['00080103'];
    return this.dwResponse['00080103']?.Value[0];
  }

  // Code Meaning
  get CodeMeaning(): string | undefined {
    return this.x00080104;
  }

  get x00080104(): string | undefined {
    const element = this.dwResponse['00080104'];
    return this.dwResponse['00080104']?.Value[0];
  }

  // Mapping Resource
  get MappingResource(): string | undefined {
    return this.x00080105;
  }

  get x00080105(): string | undefined {
    const element = this.dwResponse['00080105'];
    return this.dwResponse['00080105']?.Value[0];
  }

  // Context Group Version
  get ContextGroupVersion(): string | undefined {
    return this.x00080106;
  }

  get x00080106(): string | undefined {
    const element = this.dwResponse['00080106'];
    return this.dwResponse['00080106']?.Value[0];
  }

  // Context Group Local Version
  get ContextGroupLocalVersion(): string | undefined {
    return this.x00080107;
  }

  get x00080107(): string | undefined {
    const element = this.dwResponse['00080107'];
    return this.dwResponse['00080107']?.Value[0];
  }

  // Context Group Extension Flag
  get ContextGroupExtensionFlag(): string | undefined {
    return this.x0008010b;
  }

  get x0008010b(): string | undefined {
    const element = this.dwResponse['0008010b'];
    return this.dwResponse['0008010b']?.Value[0];
  }

  // Coding Scheme UID
  get CodingSchemeUID(): string | undefined {
    return this.x0008010c;
  }

  get x0008010c(): string | undefined {
    const element = this.dwResponse['0008010c'];
    return this.dwResponse['0008010c']?.Value[0];
  }

  // Context Group Extension Creator UID
  get ContextGroupExtensionCreatorUID(): string | undefined {
    return this.x0008010d;
  }

  get x0008010d(): string | undefined {
    const element = this.dwResponse['0008010d'];
    return this.dwResponse['0008010d']?.Value[0];
  }

  // Context Identifier
  get ContextIdentifier(): string | undefined {
    return this.x0008010f;
  }

  get x0008010f(): string | undefined {
    const element = this.dwResponse['0008010f'];
    return this.dwResponse['0008010f']?.Value[0];
  }

  // Coding Scheme Identification Sequence
  get CodingSchemeIdentificationSequence(): Array<Dataset> | undefined {
    return this.x00080110;
  }

  get x00080110(): Array<Dataset> | undefined {
    const element = this.dwResponse['00080110'];
    return this.dwResponse['00080110']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Coding Scheme Registry
  get CodingSchemeRegistry(): string | undefined {
    return this.x00080112;
  }

  get x00080112(): string | undefined {
    const element = this.dwResponse['00080112'];
    return this.dwResponse['00080112']?.Value[0];
  }

  // Context UID
  get ContextUID(): string | undefined {
    return this.x00080117;
  }

  get x00080117(): string | undefined {
    const element = this.dwResponse['00080117'];
    return this.dwResponse['00080117']?.Value[0];
  }

  // Timezone Offset From UTC
  get TimezoneOffsetFromUTC(): string | undefined {
    return this.x00080201;
  }

  get x00080201(): string | undefined {
    const element = this.dwResponse['00080201'];
    return this.dwResponse['00080201']?.Value[0];
  }

  // Network ID
  get NetworkID(): string | undefined {
    return this.x00081000;
  }

  get x00081000(): string | undefined {
    const element = this.dwResponse['00081000'];
    return this.dwResponse['00081000']?.Value[0];
  }

  // Station Name
  get StationName(): string | undefined {
    return this.x00081010;
  }

  get x00081010(): string | undefined {
    const element = this.dwResponse['00081010'];
    return this.dwResponse['00081010']?.Value[0];
  }

  // Study Description
  get StudyDescription(): string | undefined {
    return this.x00081030;
  }

  get x00081030(): string | undefined {
    const element = this.dwResponse['00081030'];
    return this.dwResponse['00081030']?.Value[0];
  }

  // Procedure Code Sequence
  get ProcedureCodeSequence(): Array<Dataset> | undefined {
    return this.x00081032;
  }

  get x00081032(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081032'];
    return this.dwResponse['00081032']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Series Description
  get SeriesDescription(): string | undefined {
    return this.x0008103e;
  }

  get x0008103e(): string | undefined {
    const element = this.dwResponse['0008103e'];
    return this.dwResponse['0008103e']?.Value[0];
  }

  // Series Description Code Sequence
  get SeriesDescriptionCodeSequence(): Array<Dataset> | undefined {
    return this.x0008103f;
  }

  get x0008103f(): Array<Dataset> | undefined {
    const element = this.dwResponse['0008103f'];
    return this.dwResponse['0008103f']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Institutional Department Name
  get InstitutionalDepartmentName(): string | undefined {
    return this.x00081040;
  }

  get x00081040(): string | undefined {
    const element = this.dwResponse['00081040'];
    return this.dwResponse['00081040']?.Value[0];
  }

  // Physician(s) of Record
  get PhysiciansOfRecord(): Array<any> | undefined {
    return this.x00081048;
  }

  get x00081048(): Array<any> | undefined {
    const element = this.dwResponse['00081048'];
    return this.dwResponse['00081048']?.Value;
  }

  // Physician(s) of Record Identification Sequence
  get PhysiciansOfRecordIdentificationSequence(): Array<Dataset> | undefined {
    return this.x00081049;
  }

  get x00081049(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081049'];
    return this.dwResponse['00081049']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Performing Physician's Name
  get PerformingPhysicianName(): Array<any> | undefined {
    return this.x00081050;
  }

  get x00081050(): Array<any> | undefined {
    const element = this.dwResponse['00081050'];
    return this.dwResponse['00081050']?.Value;
  }

  // Performing Physician Identification Sequence
  get PerformingPhysicianIdentificationSequence(): Array<Dataset> | undefined {
    return this.x00081052;
  }

  get x00081052(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081052'];
    return this.dwResponse['00081052']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Name of Physician(s) Reading Study
  get NameOfPhysiciansReadingStudy(): Array<any> | undefined {
    return this.x00081060;
  }

  get x00081060(): Array<any> | undefined {
    const element = this.dwResponse['00081060'];
    return this.dwResponse['00081060']?.Value;
  }

  // Physician(s) Reading Study Identification Sequence
  get PhysiciansReadingStudyIdentificationSequence(): Array<Dataset> | undefined {
    return this.x00081062;
  }

  get x00081062(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081062'];
    return this.dwResponse['00081062']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Operators' Name
  get OperatorsName(): Array<any> | undefined {
    return this.x00081070;
  }

  get x00081070(): Array<any> | undefined {
    const element = this.dwResponse['00081070'];
    return this.dwResponse['00081070']?.Value;
  }

  // Operator Identification Sequence
  get OperatorIdentificationSequence(): Array<Dataset> | undefined {
    return this.x00081072;
  }

  get x00081072(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081072'];
    return this.dwResponse['00081072']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Admitting Diagnoses Description
  get AdmittingDiagnosesDescription(): Array<string> | undefined {
    return this.x00081080;
  }

  get x00081080(): Array<string> | undefined {
    const element = this.dwResponse['00081080'];
    return this.dwResponse['00081080']?.Value;
  }

  // Admitting Diagnoses Code Sequence
  get AdmittingDiagnosesCodeSequence(): Array<Dataset> | undefined {
    return this.x00081084;
  }

  get x00081084(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081084'];
    return this.dwResponse['00081084']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Manufacturer's Model Name
  get ManufacturerModelName(): string | undefined {
    return this.x00081090;
  }

  get x00081090(): string | undefined {
    const element = this.dwResponse['00081090'];
    return this.dwResponse['00081090']?.Value[0];
  }

  // Referenced Results Sequence
  get ReferencedResultsSequence(): Array<Dataset> | undefined {
    return this.x00081100;
  }

  get x00081100(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081100'];
    return this.dwResponse['00081100']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Study Sequence
  get ReferencedStudySequence(): Array<Dataset> | undefined {
    return this.x00081110;
  }

  get x00081110(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081110'];
    return this.dwResponse['00081110']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Performed Procedure Step Sequence
  get ReferencedPerformedProcedureStepSequence(): Array<Dataset> | undefined {
    return this.x00081111;
  }

  get x00081111(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081111'];
    return this.dwResponse['00081111']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Series Sequence
  get ReferencedSeriesSequence(): Array<Dataset> | undefined {
    return this.x00081115;
  }

  get x00081115(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081115'];
    return this.dwResponse['00081115']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Patient Sequence
  get ReferencedPatientSequence(): Array<Dataset> | undefined {
    return this.x00081120;
  }

  get x00081120(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081120'];
    return this.dwResponse['00081120']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Visit Sequence
  get ReferencedVisitSequence(): Array<Dataset> | undefined {
    return this.x00081125;
  }

  get x00081125(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081125'];
    return this.dwResponse['00081125']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Overlay Sequence
  get ReferencedOverlaySequence(): Array<Dataset> | undefined {
    return this.x00081130;
  }

  get x00081130(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081130'];
    return this.dwResponse['00081130']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Stereometric Instance Sequence
  get ReferencedStereometricInstanceSequence(): Array<Dataset> | undefined {
    return this.x00081134;
  }

  get x00081134(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081134'];
    return this.dwResponse['00081134']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Waveform Sequence
  get ReferencedWaveformSequence(): Array<Dataset> | undefined {
    return this.x0008113a;
  }

  get x0008113a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0008113a'];
    return this.dwResponse['0008113a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Image Sequence
  get ReferencedImageSequence(): Array<Dataset> | undefined {
    return this.x00081140;
  }

  get x00081140(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081140'];
    return this.dwResponse['00081140']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Curve Sequence
  get ReferencedCurveSequence(): Array<Dataset> | undefined {
    return this.x00081145;
  }

  get x00081145(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081145'];
    return this.dwResponse['00081145']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Instance Sequence
  get ReferencedInstanceSequence(): Array<Dataset> | undefined {
    return this.x0008114a;
  }

  get x0008114a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0008114a'];
    return this.dwResponse['0008114a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Real World Value Mapping Instance Sequence
  get ReferencedRealWorldValueMappingInstanceSequence(): Array<Dataset> | undefined {
    return this.x0008114b;
  }

  get x0008114b(): Array<Dataset> | undefined {
    const element = this.dwResponse['0008114b'];
    return this.dwResponse['0008114b']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced SOP Class UID
  get ReferencedSOPClassUID(): string | undefined {
    return this.x00081150;
  }

  get x00081150(): string | undefined {
    const element = this.dwResponse['00081150'];
    return this.dwResponse['00081150']?.Value[0];
  }

  // Referenced SOP Instance UID
  get ReferencedSOPInstanceUID(): string | undefined {
    return this.x00081155;
  }

  get x00081155(): string | undefined {
    const element = this.dwResponse['00081155'];
    return this.dwResponse['00081155']?.Value[0];
  }

  // SOP Classes Supported
  get SOPClassesSupported(): Array<string> | undefined {
    return this.x0008115a;
  }

  get x0008115a(): Array<string> | undefined {
    const element = this.dwResponse['0008115a'];
    return this.dwResponse['0008115a']?.Value;
  }

  // Referenced Frame Number
  get ReferencedFrameNumber(): Array<number> | undefined {
    return this.x00081160;
  }

  get x00081160(): Array<number> | undefined {
    const element = this.dwResponse['00081160'];
    return this.dwResponse['00081160']?.Value;
  }

  // Simple Frame List
  get SimpleFrameList(): Array<number> | undefined {
    return this.x00081161;
  }

  get x00081161(): Array<number> | undefined {
    const element = this.dwResponse['00081161'];
    return this.dwResponse['00081161']?.Value;
  }

  // Calculated Frame List
  get CalculatedFrameList(): Array<number> | undefined {
    return this.x00081162;
  }

  get x00081162(): Array<number> | undefined {
    const element = this.dwResponse['00081162'];
    return this.dwResponse['00081162']?.Value;
  }

  // Time Range
  get TimeRange(): Array<number> | undefined {
    return this.x00081163;
  }

  get x00081163(): Array<number> | undefined {
    const element = this.dwResponse['00081163'];
    return this.dwResponse['00081163']?.Value;
  }

  // Frame Extraction Sequence
  get FrameExtractionSequence(): Array<Dataset> | undefined {
    return this.x00081164;
  }

  get x00081164(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081164'];
    return this.dwResponse['00081164']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Multi-frame Source SOP Instance UID
  get MultiFrameSourceSOPInstanceUID(): string | undefined {
    return this.x00081167;
  }

  get x00081167(): string | undefined {
    const element = this.dwResponse['00081167'];
    return this.dwResponse['00081167']?.Value[0];
  }

  // Transaction UID
  get TransactionUID(): string | undefined {
    return this.x00081195;
  }

  get x00081195(): string | undefined {
    const element = this.dwResponse['00081195'];
    return this.dwResponse['00081195']?.Value[0];
  }

  // Warning Reason
  get WarningReason(): number | undefined {
    return this.x00081196;
  }

  get x00081196(): number | undefined {
    const element = this.dwResponse['00081196'];
    return this.dwResponse['00081196']?.Value[0];
  }

  // Failure Reason
  get FailureReason(): number | undefined {
    return this.x00081197;
  }

  get x00081197(): number | undefined {
    const element = this.dwResponse['00081197'];
    return this.dwResponse['00081197']?.Value[0];
  }

  // Failed SOP Sequence
  get FailedSOPSequence(): Array<Dataset> | undefined {
    return this.x00081198;
  }

  get x00081198(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081198'];
    return this.dwResponse['00081198']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced SOP Sequence
  get ReferencedSOPSequence(): Array<Dataset> | undefined {
    return this.x00081199;
  }

  get x00081199(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081199'];
    return this.dwResponse['00081199']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Studies Containing Other Referenced Instances Sequence
  get StudiesContainingOtherReferencedInstancesSequence(): Array<Dataset> | undefined {
    return this.x00081200;
  }

  get x00081200(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081200'];
    return this.dwResponse['00081200']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Related Series Sequence
  get RelatedSeriesSequence(): Array<Dataset> | undefined {
    return this.x00081250;
  }

  get x00081250(): Array<Dataset> | undefined {
    const element = this.dwResponse['00081250'];
    return this.dwResponse['00081250']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Lossy Image Compression (Retired)
  get LossyImageCompressionRetired(): string | undefined {
    return this.x00082110;
  }

  get x00082110(): string | undefined {
    const element = this.dwResponse['00082110'];
    return this.dwResponse['00082110']?.Value[0];
  }

  // Source Image Sequence
  get SourceImageSequence(): Array<Dataset> | undefined {
    return this.x00082112;
  }

  get x00082112(): Array<Dataset> | undefined {
    const element = this.dwResponse['00082112'];
    return this.dwResponse['00082112']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Stage Name
  get StageName(): string | undefined {
    return this.x00082120;
  }

  get x00082120(): string | undefined {
    const element = this.dwResponse['00082120'];
    return this.dwResponse['00082120']?.Value[0];
  }

  // Stage Number
  get StageNumber(): number | undefined {
    return this.x00082122;
  }

  get x00082122(): number | undefined {
    const element = this.dwResponse['00082122'];
    return this.dwResponse['00082122']?.Value[0];
  }

  // Number of Stages
  get NumberOfStages(): number | undefined {
    return this.x00082124;
  }

  get x00082124(): number | undefined {
    const element = this.dwResponse['00082124'];
    return this.dwResponse['00082124']?.Value[0];
  }

  // View Name
  get ViewName(): string | undefined {
    return this.x00082127;
  }

  get x00082127(): string | undefined {
    const element = this.dwResponse['00082127'];
    return this.dwResponse['00082127']?.Value[0];
  }

  // View Number
  get ViewNumber(): number | undefined {
    return this.x00082128;
  }

  get x00082128(): number | undefined {
    const element = this.dwResponse['00082128'];
    return this.dwResponse['00082128']?.Value[0];
  }

  // Number of Event Timers
  get NumberOfEventTimers(): number | undefined {
    return this.x00082129;
  }

  get x00082129(): number | undefined {
    const element = this.dwResponse['00082129'];
    return this.dwResponse['00082129']?.Value[0];
  }

  // Number of Views in Stage
  get NumberOfViewsInStage(): number | undefined {
    return this.x0008212a;
  }

  get x0008212a(): number | undefined {
    const element = this.dwResponse['0008212a'];
    return this.dwResponse['0008212a']?.Value[0];
  }

  // Event Elapsed Time(s)
  get EventElapsedTimes(): Array<number> | undefined {
    return this.x00082130;
  }

  get x00082130(): Array<number> | undefined {
    const element = this.dwResponse['00082130'];
    return this.dwResponse['00082130']?.Value;
  }

  // Event Timer Name(s)
  get EventTimerNames(): Array<string> | undefined {
    return this.x00082132;
  }

  get x00082132(): Array<string> | undefined {
    const element = this.dwResponse['00082132'];
    return this.dwResponse['00082132']?.Value;
  }

  // Event Timer Sequence
  get EventTimerSequence(): Array<Dataset> | undefined {
    return this.x00082133;
  }

  get x00082133(): Array<Dataset> | undefined {
    const element = this.dwResponse['00082133'];
    return this.dwResponse['00082133']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Event Time Offset
  get EventTimeOffset(): number | undefined {
    return this.x00082134;
  }

  get x00082134(): number | undefined {
    const element = this.dwResponse['00082134'];
    return this.dwResponse['00082134']?.Value[0];
  }

  // Event Code Sequence
  get EventCodeSequence(): Array<Dataset> | undefined {
    return this.x00082135;
  }

  get x00082135(): Array<Dataset> | undefined {
    const element = this.dwResponse['00082135'];
    return this.dwResponse['00082135']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Start Trim
  get StartTrim(): number | undefined {
    return this.x00082142;
  }

  get x00082142(): number | undefined {
    const element = this.dwResponse['00082142'];
    return this.dwResponse['00082142']?.Value[0];
  }

  // Stop Trim
  get StopTrim(): number | undefined {
    return this.x00082143;
  }

  get x00082143(): number | undefined {
    const element = this.dwResponse['00082143'];
    return this.dwResponse['00082143']?.Value[0];
  }

  // Recommended Display Frame Rate
  get RecommendedDisplayFrameRate(): number | undefined {
    return this.x00082144;
  }

  get x00082144(): number | undefined {
    const element = this.dwResponse['00082144'];
    return this.dwResponse['00082144']?.Value[0];
  }

  // Transducer Position
  get TransducerPosition(): string | undefined {
    return this.x00082200;
  }

  get x00082200(): string | undefined {
    const element = this.dwResponse['00082200'];
    return this.dwResponse['00082200']?.Value[0];
  }

  // Transducer Orientation
  get TransducerOrientation(): string | undefined {
    return this.x00082204;
  }

  get x00082204(): string | undefined {
    const element = this.dwResponse['00082204'];
    return this.dwResponse['00082204']?.Value[0];
  }

  // Anatomic Structure
  get AnatomicStructure(): string | undefined {
    return this.x00082208;
  }

  get x00082208(): string | undefined {
    const element = this.dwResponse['00082208'];
    return this.dwResponse['00082208']?.Value[0];
  }

  // Anatomic Region Sequence
  get AnatomicRegionSequence(): Array<Dataset> | undefined {
    return this.x00082218;
  }

  get x00082218(): Array<Dataset> | undefined {
    const element = this.dwResponse['00082218'];
    return this.dwResponse['00082218']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Anatomic Region Modifier Sequence
  get AnatomicRegionModifierSequence(): Array<Dataset> | undefined {
    return this.x00082220;
  }

  get x00082220(): Array<Dataset> | undefined {
    const element = this.dwResponse['00082220'];
    return this.dwResponse['00082220']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Primary Anatomic Structure Sequence
  get PrimaryAnatomicStructureSequence(): Array<Dataset> | undefined {
    return this.x00082228;
  }

  get x00082228(): Array<Dataset> | undefined {
    const element = this.dwResponse['00082228'];
    return this.dwResponse['00082228']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Anatomic Structure
  get AnatomicStructureSpaceOrRegionSequence(): Array<Dataset> | undefined {
    return this.x00082229;
  }

  get x00082229(): Array<Dataset> | undefined {
    const element = this.dwResponse['00082229'];
    return this.dwResponse['00082229']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Primary Anatomic Structure Modifier Sequence
  get PrimaryAnatomicStructureModifierSequence(): Array<Dataset> | undefined {
    return this.x00082230;
  }

  get x00082230(): Array<Dataset> | undefined {
    const element = this.dwResponse['00082230'];
    return this.dwResponse['00082230']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Transducer Position Sequence
  get TransducerPositionSequence(): Array<Dataset> | undefined {
    return this.x00082240;
  }

  get x00082240(): Array<Dataset> | undefined {
    const element = this.dwResponse['00082240'];
    return this.dwResponse['00082240']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Transducer Position Modifier Sequence
  get TransducerPositionModifierSequence(): Array<Dataset> | undefined {
    return this.x00082242;
  }

  get x00082242(): Array<Dataset> | undefined {
    const element = this.dwResponse['00082242'];
    return this.dwResponse['00082242']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Transducer Orientation Sequence
  get TransducerOrientationSequence(): Array<Dataset> | undefined {
    return this.x00082244;
  }

  get x00082244(): Array<Dataset> | undefined {
    const element = this.dwResponse['00082244'];
    return this.dwResponse['00082244']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Transducer Orientation Modifier Sequence
  get TransducerOrientationModifierSequence(): Array<Dataset> | undefined {
    return this.x00082246;
  }

  get x00082246(): Array<Dataset> | undefined {
    const element = this.dwResponse['00082246'];
    return this.dwResponse['00082246']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Anatomic Structure Space Or Region Code Sequence (Trial)
  get AnatomicStructureSpaceOrRegionCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x00082251;
  }

  get x00082251(): Array<Dataset> | undefined {
    const element = this.dwResponse['00082251'];
    return this.dwResponse['00082251']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Anatomic Portal Of Entrance Code Sequence (Trial)
  get AnatomicPortalOfEntranceCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x00082253;
  }

  get x00082253(): Array<Dataset> | undefined {
    const element = this.dwResponse['00082253'];
    return this.dwResponse['00082253']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Anatomic Approach Direction Code Sequence (Trial)
  get AnatomicApproachDirectionCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x00082255;
  }

  get x00082255(): Array<Dataset> | undefined {
    const element = this.dwResponse['00082255'];
    return this.dwResponse['00082255']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Anatomic Perspective Code Sequence (Trial)
  get AnatomicPerspectiveCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x00082257;
  }

  get x00082257(): Array<Dataset> | undefined {
    const element = this.dwResponse['00082257'];
    return this.dwResponse['00082257']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Anatomic Location Of Examining Instrument Code Sequence (Trial)
  get AnatomicLocationOfExaminingInstrumentCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x00082259;
  }

  get x00082259(): Array<Dataset> | undefined {
    const element = this.dwResponse['00082259'];
    return this.dwResponse['00082259']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Anatomic Structure Space Or Region Modifier Code Sequence (Trial)
  get AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x0008225a;
  }

  get x0008225a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0008225a'];
    return this.dwResponse['0008225a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // OnAxis Background Anatomic Structure Code Sequence (Trial)
  get OnAxisBackgroundAnatomicStructureCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x0008225c;
  }

  get x0008225c(): Array<Dataset> | undefined {
    const element = this.dwResponse['0008225c'];
    return this.dwResponse['0008225c']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Alternate Representation Sequence
  get AlternateRepresentationSequence(): Array<Dataset> | undefined {
    return this.x00083001;
  }

  get x00083001(): Array<Dataset> | undefined {
    const element = this.dwResponse['00083001'];
    return this.dwResponse['00083001']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Irradiation Event UID
  get IrradiationEventUID(): Array<string> | undefined {
    return this.x00083010;
  }

  get x00083010(): Array<string> | undefined {
    const element = this.dwResponse['00083010'];
    return this.dwResponse['00083010']?.Value;
  }

  // Source Irradiation Event Sequence
  get SourceIrradiationEventSequence(): Array<Dataset> | undefined {
    return this.x00083011;
  }

  get x00083011(): Array<Dataset> | undefined {
    const element = this.dwResponse['00083011'];
    return this.dwResponse['00083011']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Radiopharmaceutical Administration Event UID
  get RadiopharmaceuticalAdministrationEventUID(): string | undefined {
    return this.x00083012;
  }

  get x00083012(): string | undefined {
    const element = this.dwResponse['00083012'];
    return this.dwResponse['00083012']?.Value[0];
  }

  // Frame Type
  get FrameType(): Array<string> | undefined {
    return this.x00089007;
  }

  get x00089007(): Array<string> | undefined {
    const element = this.dwResponse['00089007'];
    return this.dwResponse['00089007']?.Value;
  }

  // Referenced Image Evidence Sequence
  get ReferencedImageEvidenceSequence(): Array<Dataset> | undefined {
    return this.x00089092;
  }

  get x00089092(): Array<Dataset> | undefined {
    const element = this.dwResponse['00089092'];
    return this.dwResponse['00089092']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Raw Data Sequence
  get ReferencedRawDataSequence(): Array<Dataset> | undefined {
    return this.x00089121;
  }

  get x00089121(): Array<Dataset> | undefined {
    const element = this.dwResponse['00089121'];
    return this.dwResponse['00089121']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Creator-Version UID
  get CreatorVersionUID(): string | undefined {
    return this.x00089123;
  }

  get x00089123(): string | undefined {
    const element = this.dwResponse['00089123'];
    return this.dwResponse['00089123']?.Value[0];
  }

  // Derivation Image Sequence
  get DerivationImageSequence(): Array<Dataset> | undefined {
    return this.x00089124;
  }

  get x00089124(): Array<Dataset> | undefined {
    const element = this.dwResponse['00089124'];
    return this.dwResponse['00089124']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Source Image Evidence Sequence
  get SourceImageEvidenceSequence(): Array<Dataset> | undefined {
    return this.x00089154;
  }

  get x00089154(): Array<Dataset> | undefined {
    const element = this.dwResponse['00089154'];
    return this.dwResponse['00089154']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Pixel Presentation
  get PixelPresentation(): string | undefined {
    return this.x00089205;
  }

  get x00089205(): string | undefined {
    const element = this.dwResponse['00089205'];
    return this.dwResponse['00089205']?.Value[0];
  }

  // Volumetric Properties
  get VolumetricProperties(): string | undefined {
    return this.x00089206;
  }

  get x00089206(): string | undefined {
    const element = this.dwResponse['00089206'];
    return this.dwResponse['00089206']?.Value[0];
  }

  // Volume Based Calculation Technique
  get VolumeBasedCalculationTechnique(): string | undefined {
    return this.x00089207;
  }

  get x00089207(): string | undefined {
    const element = this.dwResponse['00089207'];
    return this.dwResponse['00089207']?.Value[0];
  }

  // Complex Image Component
  get ComplexImageComponent(): string | undefined {
    return this.x00089208;
  }

  get x00089208(): string | undefined {
    const element = this.dwResponse['00089208'];
    return this.dwResponse['00089208']?.Value[0];
  }

  // Acquisition Contrast
  get AcquisitionContrast(): string | undefined {
    return this.x00089209;
  }

  get x00089209(): string | undefined {
    const element = this.dwResponse['00089209'];
    return this.dwResponse['00089209']?.Value[0];
  }

  // Derivation Code Sequence
  get DerivationCodeSequence(): Array<Dataset> | undefined {
    return this.x00089215;
  }

  get x00089215(): Array<Dataset> | undefined {
    const element = this.dwResponse['00089215'];
    return this.dwResponse['00089215']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Presentation State Sequence
  get ReferencedPresentationStateSequence(): Array<Dataset> | undefined {
    return this.x00089237;
  }

  get x00089237(): Array<Dataset> | undefined {
    const element = this.dwResponse['00089237'];
    return this.dwResponse['00089237']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Other Plane Sequence
  get ReferencedOtherPlaneSequence(): Array<Dataset> | undefined {
    return this.x00089410;
  }

  get x00089410(): Array<Dataset> | undefined {
    const element = this.dwResponse['00089410'];
    return this.dwResponse['00089410']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Frame Display Sequence
  get FrameDisplaySequence(): Array<Dataset> | undefined {
    return this.x00089458;
  }

  get x00089458(): Array<Dataset> | undefined {
    const element = this.dwResponse['00089458'];
    return this.dwResponse['00089458']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Recommended Display Frame Rate in Float
  get RecommendedDisplayFrameRateInFloat(): number | undefined {
    return this.x00089459;
  }

  get x00089459(): number | undefined {
    const element = this.dwResponse['00089459'];
    return this.dwResponse['00089459']?.Value[0];
  }

  // Skip Frame Range Flag
  get SkipFrameRangeFlag(): string | undefined {
    return this.x00089460;
  }

  get x00089460(): string | undefined {
    const element = this.dwResponse['00089460'];
    return this.dwResponse['00089460']?.Value[0];
  }

  // Patient's Name
  get PatientName(): any | undefined {
    return this.x00100010;
  }

  get x00100010(): any | undefined {
    const element = this.dwResponse['00100010'];
    return this.dwResponse['00100010']?.Value[0];
  }

  // Patient ID
  get PatientID(): string | undefined {
    return this.x00100020;
  }

  get x00100020(): string | undefined {
    const element = this.dwResponse['00100020'];
    return this.dwResponse['00100020']?.Value[0];
  }

  // Issuer of Patient ID
  get IssuerOfPatientID(): string | undefined {
    return this.x00100021;
  }

  get x00100021(): string | undefined {
    const element = this.dwResponse['00100021'];
    return this.dwResponse['00100021']?.Value[0];
  }

  // Type of Patient ID
  get TypeOfPatientID(): string | undefined {
    return this.x00100022;
  }

  get x00100022(): string | undefined {
    const element = this.dwResponse['00100022'];
    return this.dwResponse['00100022']?.Value[0];
  }

  // Issuer of Patient ID Qualifiers Sequence
  get IssuerOfPatientIDQualifiersSequence(): Array<Dataset> | undefined {
    return this.x00100024;
  }

  get x00100024(): Array<Dataset> | undefined {
    const element = this.dwResponse['00100024'];
    return this.dwResponse['00100024']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Patient's Birth Date
  get PatientBirthDate(): Date | undefined {
    return this.x00100030;
  }

  get x00100030(): Date | undefined {
    const element = this.dwResponse['00100030'];
    return this.dwResponse['00100030']?.Value[0];
  }

  // Patient's Birth Time
  get PatientBirthTime(): string | undefined {
    return this.x00100032;
  }

  get x00100032(): string | undefined {
    const element = this.dwResponse['00100032'];
    return this.dwResponse['00100032']?.Value[0];
  }

  // Patient's Sex
  get PatientSex(): string | undefined {
    return this.x00100040;
  }

  get x00100040(): string | undefined {
    const element = this.dwResponse['00100040'];
    return this.dwResponse['00100040']?.Value[0];
  }

  // Patient's Insurance Plan Code Sequence
  get PatientInsurancePlanCodeSequence(): Array<Dataset> | undefined {
    return this.x00100050;
  }

  get x00100050(): Array<Dataset> | undefined {
    const element = this.dwResponse['00100050'];
    return this.dwResponse['00100050']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Patient's Primary Language Code Sequence
  get PatientPrimaryLanguageCodeSequence(): Array<Dataset> | undefined {
    return this.x00100101;
  }

  get x00100101(): Array<Dataset> | undefined {
    const element = this.dwResponse['00100101'];
    return this.dwResponse['00100101']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Patient's Primary Language Modifier Code Sequence
  get PatientPrimaryLanguageModifierCodeSequence(): Array<Dataset> | undefined {
    return this.x00100102;
  }

  get x00100102(): Array<Dataset> | undefined {
    const element = this.dwResponse['00100102'];
    return this.dwResponse['00100102']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Quality Control Subject
  get QualityControlSubject(): string | undefined {
    return this.x00100200;
  }

  get x00100200(): string | undefined {
    const element = this.dwResponse['00100200'];
    return this.dwResponse['00100200']?.Value[0];
  }

  // Quality Control Subject Type Code Sequence
  get QualityControlSubjectTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x00100201;
  }

  get x00100201(): Array<Dataset> | undefined {
    const element = this.dwResponse['00100201'];
    return this.dwResponse['00100201']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Other Patient IDs
  get OtherPatientIDs(): Array<string> | undefined {
    return this.x00101000;
  }

  get x00101000(): Array<string> | undefined {
    const element = this.dwResponse['00101000'];
    return this.dwResponse['00101000']?.Value;
  }

  // Other Patient Names
  get OtherPatientNames(): Array<any> | undefined {
    return this.x00101001;
  }

  get x00101001(): Array<any> | undefined {
    const element = this.dwResponse['00101001'];
    return this.dwResponse['00101001']?.Value;
  }

  // Other Patient IDs Sequence
  get OtherPatientIDsSequence(): Array<Dataset> | undefined {
    return this.x00101002;
  }

  get x00101002(): Array<Dataset> | undefined {
    const element = this.dwResponse['00101002'];
    return this.dwResponse['00101002']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Patient's Birth Name
  get PatientBirthName(): any | undefined {
    return this.x00101005;
  }

  get x00101005(): any | undefined {
    const element = this.dwResponse['00101005'];
    return this.dwResponse['00101005']?.Value[0];
  }

  // Patient's Age
  get PatientAge(): string | undefined {
    return this.x00101010;
  }

  get x00101010(): string | undefined {
    const element = this.dwResponse['00101010'];
    return this.dwResponse['00101010']?.Value[0];
  }

  // Patient's Size
  get PatientSize(): number | undefined {
    return this.x00101020;
  }

  get x00101020(): number | undefined {
    const element = this.dwResponse['00101020'];
    return this.dwResponse['00101020']?.Value[0];
  }

  // Patient's Size Code Sequence
  get PatientSizeCodeSequence(): Array<Dataset> | undefined {
    return this.x00101021;
  }

  get x00101021(): Array<Dataset> | undefined {
    const element = this.dwResponse['00101021'];
    return this.dwResponse['00101021']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Patient's Weight
  get PatientWeight(): number | undefined {
    return this.x00101030;
  }

  get x00101030(): number | undefined {
    const element = this.dwResponse['00101030'];
    return this.dwResponse['00101030']?.Value[0];
  }

  // Patient's Address
  get PatientAddress(): string | undefined {
    return this.x00101040;
  }

  get x00101040(): string | undefined {
    const element = this.dwResponse['00101040'];
    return this.dwResponse['00101040']?.Value[0];
  }

  // Insurance Plan Identification
  get InsurancePlanIdentification(): Array<string> | undefined {
    return this.x00101050;
  }

  get x00101050(): Array<string> | undefined {
    const element = this.dwResponse['00101050'];
    return this.dwResponse['00101050']?.Value;
  }

  // Patient's Mother's Birth Name
  get PatientMotherBirthName(): any | undefined {
    return this.x00101060;
  }

  get x00101060(): any | undefined {
    const element = this.dwResponse['00101060'];
    return this.dwResponse['00101060']?.Value[0];
  }

  // Military Rank
  get MilitaryRank(): string | undefined {
    return this.x00101080;
  }

  get x00101080(): string | undefined {
    const element = this.dwResponse['00101080'];
    return this.dwResponse['00101080']?.Value[0];
  }

  // Branch of Service
  get BranchOfService(): string | undefined {
    return this.x00101081;
  }

  get x00101081(): string | undefined {
    const element = this.dwResponse['00101081'];
    return this.dwResponse['00101081']?.Value[0];
  }

  // Medical Record Locator
  get MedicalRecordLocator(): string | undefined {
    return this.x00101090;
  }

  get x00101090(): string | undefined {
    const element = this.dwResponse['00101090'];
    return this.dwResponse['00101090']?.Value[0];
  }

  // Referenced Patient Photo Sequence
  get ReferencedPatientPhotoSequence(): Array<Dataset> | undefined {
    return this.x00101100;
  }

  get x00101100(): Array<Dataset> | undefined {
    const element = this.dwResponse['00101100'];
    return this.dwResponse['00101100']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Medical Alerts
  get MedicalAlerts(): Array<string> | undefined {
    return this.x00102000;
  }

  get x00102000(): Array<string> | undefined {
    const element = this.dwResponse['00102000'];
    return this.dwResponse['00102000']?.Value;
  }

  // Allergies
  get Allergies(): Array<string> | undefined {
    return this.x00102110;
  }

  get x00102110(): Array<string> | undefined {
    const element = this.dwResponse['00102110'];
    return this.dwResponse['00102110']?.Value;
  }

  // Country of Residence
  get CountryOfResidence(): string | undefined {
    return this.x00102150;
  }

  get x00102150(): string | undefined {
    const element = this.dwResponse['00102150'];
    return this.dwResponse['00102150']?.Value[0];
  }

  // Region of Residence
  get RegionOfResidence(): string | undefined {
    return this.x00102152;
  }

  get x00102152(): string | undefined {
    const element = this.dwResponse['00102152'];
    return this.dwResponse['00102152']?.Value[0];
  }

  // Patient's Telephone Numbers
  get PatientTelephoneNumbers(): Array<string> | undefined {
    return this.x00102154;
  }

  get x00102154(): Array<string> | undefined {
    const element = this.dwResponse['00102154'];
    return this.dwResponse['00102154']?.Value;
  }

  // Ethnic Group
  get EthnicGroup(): string | undefined {
    return this.x00102160;
  }

  get x00102160(): string | undefined {
    const element = this.dwResponse['00102160'];
    return this.dwResponse['00102160']?.Value[0];
  }

  // Occupation
  get Occupation(): string | undefined {
    return this.x00102180;
  }

  get x00102180(): string | undefined {
    const element = this.dwResponse['00102180'];
    return this.dwResponse['00102180']?.Value[0];
  }

  // Smoking Status
  get SmokingStatus(): string | undefined {
    return this.x001021a0;
  }

  get x001021a0(): string | undefined {
    const element = this.dwResponse['001021a0'];
    return this.dwResponse['001021a0']?.Value[0];
  }

  // Pregnancy Status
  get PregnancyStatus(): number | undefined {
    return this.x001021c0;
  }

  get x001021c0(): number | undefined {
    const element = this.dwResponse['001021c0'];
    return this.dwResponse['001021c0']?.Value[0];
  }

  // Last Menstrual Date
  get LastMenstrualDate(): Date | undefined {
    return this.x001021d0;
  }

  get x001021d0(): Date | undefined {
    const element = this.dwResponse['001021d0'];
    return this.dwResponse['001021d0']?.Value[0];
  }

  // Patient's Religious Preference
  get PatientReligiousPreference(): string | undefined {
    return this.x001021f0;
  }

  get x001021f0(): string | undefined {
    const element = this.dwResponse['001021f0'];
    return this.dwResponse['001021f0']?.Value[0];
  }

  // Patient Species Description
  get PatientSpeciesDescription(): string | undefined {
    return this.x00102201;
  }

  get x00102201(): string | undefined {
    const element = this.dwResponse['00102201'];
    return this.dwResponse['00102201']?.Value[0];
  }

  // Patient Species Code Sequence
  get PatientSpeciesCodeSequence(): Array<Dataset> | undefined {
    return this.x00102202;
  }

  get x00102202(): Array<Dataset> | undefined {
    const element = this.dwResponse['00102202'];
    return this.dwResponse['00102202']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Patient's Sex Neutered
  get PatientSexNeutered(): string | undefined {
    return this.x00102203;
  }

  get x00102203(): string | undefined {
    const element = this.dwResponse['00102203'];
    return this.dwResponse['00102203']?.Value[0];
  }

  // Anatomical Orientation Type
  get AnatomicalOrientationType(): string | undefined {
    return this.x00102210;
  }

  get x00102210(): string | undefined {
    const element = this.dwResponse['00102210'];
    return this.dwResponse['00102210']?.Value[0];
  }

  // Patient Breed Description
  get PatientBreedDescription(): string | undefined {
    return this.x00102292;
  }

  get x00102292(): string | undefined {
    const element = this.dwResponse['00102292'];
    return this.dwResponse['00102292']?.Value[0];
  }

  // Patient Breed Code Sequence
  get PatientBreedCodeSequence(): Array<Dataset> | undefined {
    return this.x00102293;
  }

  get x00102293(): Array<Dataset> | undefined {
    const element = this.dwResponse['00102293'];
    return this.dwResponse['00102293']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Breed Registration Sequence
  get BreedRegistrationSequence(): Array<Dataset> | undefined {
    return this.x00102294;
  }

  get x00102294(): Array<Dataset> | undefined {
    const element = this.dwResponse['00102294'];
    return this.dwResponse['00102294']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Breed Registration Number
  get BreedRegistrationNumber(): string | undefined {
    return this.x00102295;
  }

  get x00102295(): string | undefined {
    const element = this.dwResponse['00102295'];
    return this.dwResponse['00102295']?.Value[0];
  }

  // Breed Registry Code Sequence
  get BreedRegistryCodeSequence(): Array<Dataset> | undefined {
    return this.x00102296;
  }

  get x00102296(): Array<Dataset> | undefined {
    const element = this.dwResponse['00102296'];
    return this.dwResponse['00102296']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Responsible Person
  get ResponsiblePerson(): any | undefined {
    return this.x00102297;
  }

  get x00102297(): any | undefined {
    const element = this.dwResponse['00102297'];
    return this.dwResponse['00102297']?.Value[0];
  }

  // Responsible Person Role
  get ResponsiblePersonRole(): string | undefined {
    return this.x00102298;
  }

  get x00102298(): string | undefined {
    const element = this.dwResponse['00102298'];
    return this.dwResponse['00102298']?.Value[0];
  }

  // Responsible Organization
  get ResponsibleOrganization(): string | undefined {
    return this.x00102299;
  }

  get x00102299(): string | undefined {
    const element = this.dwResponse['00102299'];
    return this.dwResponse['00102299']?.Value[0];
  }

  // Examined Body Thickness
  get ExaminedBodyThickness(): number | undefined {
    return this.x00109431;
  }

  get x00109431(): number | undefined {
    const element = this.dwResponse['00109431'];
    return this.dwResponse['00109431']?.Value[0];
  }

  // Clinical Trial Sponsor Name
  get ClinicalTrialSponsorName(): string | undefined {
    return this.x00120010;
  }

  get x00120010(): string | undefined {
    const element = this.dwResponse['00120010'];
    return this.dwResponse['00120010']?.Value[0];
  }

  // Clinical Trial Protocol ID
  get ClinicalTrialProtocolID(): string | undefined {
    return this.x00120020;
  }

  get x00120020(): string | undefined {
    const element = this.dwResponse['00120020'];
    return this.dwResponse['00120020']?.Value[0];
  }

  // Clinical Trial Protocol Name
  get ClinicalTrialProtocolName(): string | undefined {
    return this.x00120021;
  }

  get x00120021(): string | undefined {
    const element = this.dwResponse['00120021'];
    return this.dwResponse['00120021']?.Value[0];
  }

  // Clinical Trial Site ID
  get ClinicalTrialSiteID(): string | undefined {
    return this.x00120030;
  }

  get x00120030(): string | undefined {
    const element = this.dwResponse['00120030'];
    return this.dwResponse['00120030']?.Value[0];
  }

  // Clinical Trial Site Name
  get ClinicalTrialSiteName(): string | undefined {
    return this.x00120031;
  }

  get x00120031(): string | undefined {
    const element = this.dwResponse['00120031'];
    return this.dwResponse['00120031']?.Value[0];
  }

  // Clinical Trial Subject ID
  get ClinicalTrialSubjectID(): string | undefined {
    return this.x00120040;
  }

  get x00120040(): string | undefined {
    const element = this.dwResponse['00120040'];
    return this.dwResponse['00120040']?.Value[0];
  }

  // Clinical Trial Subject Reading ID
  get ClinicalTrialSubjectReadingID(): string | undefined {
    return this.x00120042;
  }

  get x00120042(): string | undefined {
    const element = this.dwResponse['00120042'];
    return this.dwResponse['00120042']?.Value[0];
  }

  // Clinical Trial Time Point ID
  get ClinicalTrialTimePointID(): string | undefined {
    return this.x00120050;
  }

  get x00120050(): string | undefined {
    const element = this.dwResponse['00120050'];
    return this.dwResponse['00120050']?.Value[0];
  }

  // Clinical Trial Coordinating Center Name
  get ClinicalTrialCoordinatingCenterName(): string | undefined {
    return this.x00120060;
  }

  get x00120060(): string | undefined {
    const element = this.dwResponse['00120060'];
    return this.dwResponse['00120060']?.Value[0];
  }

  // Patient Identity Removed
  get PatientIdentityRemoved(): string | undefined {
    return this.x00120062;
  }

  get x00120062(): string | undefined {
    const element = this.dwResponse['00120062'];
    return this.dwResponse['00120062']?.Value[0];
  }

  // De-identification Method
  get DeidentificationMethod(): Array<string> | undefined {
    return this.x00120063;
  }

  get x00120063(): Array<string> | undefined {
    const element = this.dwResponse['00120063'];
    return this.dwResponse['00120063']?.Value;
  }

  // De-identification Method Code Sequence
  get DeidentificationMethodCodeSequence(): Array<Dataset> | undefined {
    return this.x00120064;
  }

  get x00120064(): Array<Dataset> | undefined {
    const element = this.dwResponse['00120064'];
    return this.dwResponse['00120064']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Clinical Trial Series ID
  get ClinicalTrialSeriesID(): string | undefined {
    return this.x00120071;
  }

  get x00120071(): string | undefined {
    const element = this.dwResponse['00120071'];
    return this.dwResponse['00120071']?.Value[0];
  }

  // Clinical Trial Series Description
  get ClinicalTrialSeriesDescription(): string | undefined {
    return this.x00120072;
  }

  get x00120072(): string | undefined {
    const element = this.dwResponse['00120072'];
    return this.dwResponse['00120072']?.Value[0];
  }

  // Clinical Trial Protocol Ethics Committee Name
  get ClinicalTrialProtocolEthicsCommitteeName(): string | undefined {
    return this.x00120081;
  }

  get x00120081(): string | undefined {
    const element = this.dwResponse['00120081'];
    return this.dwResponse['00120081']?.Value[0];
  }

  // Clinical Trial Protocol Ethics Committee Approval Number
  get ClinicalTrialProtocolEthicsCommitteeApprovalNumber(): string | undefined {
    return this.x00120082;
  }

  get x00120082(): string | undefined {
    const element = this.dwResponse['00120082'];
    return this.dwResponse['00120082']?.Value[0];
  }

  // Consent for Clinical Trial Use Sequence
  get ConsentForClinicalTrialUseSequence(): Array<Dataset> | undefined {
    return this.x00120083;
  }

  get x00120083(): Array<Dataset> | undefined {
    const element = this.dwResponse['00120083'];
    return this.dwResponse['00120083']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Distribution Type
  get DistributionType(): string | undefined {
    return this.x00120084;
  }

  get x00120084(): string | undefined {
    const element = this.dwResponse['00120084'];
    return this.dwResponse['00120084']?.Value[0];
  }

  // Consent for Distribution Flag
  get ConsentForDistributionFlag(): string | undefined {
    return this.x00120085;
  }

  get x00120085(): string | undefined {
    const element = this.dwResponse['00120085'];
    return this.dwResponse['00120085']?.Value[0];
  }

  // Material Thickness
  get MaterialThickness(): Array<number> | undefined {
    return this.x00140030;
  }

  get x00140030(): Array<number> | undefined {
    const element = this.dwResponse['00140030'];
    return this.dwResponse['00140030']?.Value;
  }

  // Material Pipe Diameter
  get MaterialPipeDiameter(): Array<number> | undefined {
    return this.x00140032;
  }

  get x00140032(): Array<number> | undefined {
    const element = this.dwResponse['00140032'];
    return this.dwResponse['00140032']?.Value;
  }

  // Material Isolation Diameter
  get MaterialIsolationDiameter(): Array<number> | undefined {
    return this.x00140034;
  }

  get x00140034(): Array<number> | undefined {
    const element = this.dwResponse['00140034'];
    return this.dwResponse['00140034']?.Value;
  }

  // Component Shape
  get ComponentShape(): string | undefined {
    return this.x00140050;
  }

  get x00140050(): string | undefined {
    const element = this.dwResponse['00140050'];
    return this.dwResponse['00140050']?.Value[0];
  }

  // Curvature Type
  get CurvatureType(): string | undefined {
    return this.x00140052;
  }

  get x00140052(): string | undefined {
    const element = this.dwResponse['00140052'];
    return this.dwResponse['00140052']?.Value[0];
  }

  // Outer Diameter
  get OuterDiameter(): number | undefined {
    return this.x00140054;
  }

  get x00140054(): number | undefined {
    const element = this.dwResponse['00140054'];
    return this.dwResponse['00140054']?.Value[0];
  }

  // Inner Diameter
  get InnerDiameter(): number | undefined {
    return this.x00140056;
  }

  get x00140056(): number | undefined {
    const element = this.dwResponse['00140056'];
    return this.dwResponse['00140056']?.Value[0];
  }

  // Expiry Date
  get ExpiryDate(): Date | undefined {
    return this.x00141020;
  }

  get x00141020(): Date | undefined {
    const element = this.dwResponse['00141020'];
    return this.dwResponse['00141020']?.Value[0];
  }

  // Evaluator Sequence
  get EvaluatorSequence(): Array<Dataset> | undefined {
    return this.x00142002;
  }

  get x00142002(): Array<Dataset> | undefined {
    const element = this.dwResponse['00142002'];
    return this.dwResponse['00142002']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Evaluator Number
  get EvaluatorNumber(): number | undefined {
    return this.x00142004;
  }

  get x00142004(): number | undefined {
    const element = this.dwResponse['00142004'];
    return this.dwResponse['00142004']?.Value[0];
  }

  // Evaluator Name
  get EvaluatorName(): any | undefined {
    return this.x00142006;
  }

  get x00142006(): any | undefined {
    const element = this.dwResponse['00142006'];
    return this.dwResponse['00142006']?.Value[0];
  }

  // Evaluation Attempt
  get EvaluationAttempt(): number | undefined {
    return this.x00142008;
  }

  get x00142008(): number | undefined {
    const element = this.dwResponse['00142008'];
    return this.dwResponse['00142008']?.Value[0];
  }

  // Indication Sequence
  get IndicationSequence(): Array<Dataset> | undefined {
    return this.x00142012;
  }

  get x00142012(): Array<Dataset> | undefined {
    const element = this.dwResponse['00142012'];
    return this.dwResponse['00142012']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Indication Number
  get IndicationNumber(): number | undefined {
    return this.x00142014;
  }

  get x00142014(): number | undefined {
    const element = this.dwResponse['00142014'];
    return this.dwResponse['00142014']?.Value[0];
  }

  // Indication Label
  get IndicationLabel(): string | undefined {
    return this.x00142016;
  }

  get x00142016(): string | undefined {
    const element = this.dwResponse['00142016'];
    return this.dwResponse['00142016']?.Value[0];
  }

  // Indication Type
  get IndicationType(): Array<string> | undefined {
    return this.x0014201a;
  }

  get x0014201a(): Array<string> | undefined {
    const element = this.dwResponse['0014201a'];
    return this.dwResponse['0014201a']?.Value;
  }

  // Indication Disposition
  get IndicationDisposition(): string | undefined {
    return this.x0014201c;
  }

  get x0014201c(): string | undefined {
    const element = this.dwResponse['0014201c'];
    return this.dwResponse['0014201c']?.Value[0];
  }

  // Indication ROI Sequence
  get IndicationROISequence(): Array<Dataset> | undefined {
    return this.x0014201e;
  }

  get x0014201e(): Array<Dataset> | undefined {
    const element = this.dwResponse['0014201e'];
    return this.dwResponse['0014201e']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Indication Physical Property Sequence
  get IndicationPhysicalPropertySequence(): Array<Dataset> | undefined {
    return this.x00142030;
  }

  get x00142030(): Array<Dataset> | undefined {
    const element = this.dwResponse['00142030'];
    return this.dwResponse['00142030']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Property Label
  get PropertyLabel(): string | undefined {
    return this.x00142032;
  }

  get x00142032(): string | undefined {
    const element = this.dwResponse['00142032'];
    return this.dwResponse['00142032']?.Value[0];
  }

  // Coordinate System Number of Axes
  get CoordinateSystemNumberOfAxes(): number | undefined {
    return this.x00142202;
  }

  get x00142202(): number | undefined {
    const element = this.dwResponse['00142202'];
    return this.dwResponse['00142202']?.Value[0];
  }

  // Coordinate System Axes Sequence
  get CoordinateSystemAxesSequence(): Array<Dataset> | undefined {
    return this.x00142204;
  }

  get x00142204(): Array<Dataset> | undefined {
    const element = this.dwResponse['00142204'];
    return this.dwResponse['00142204']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Coordinate System Data Set Mapping
  get CoordinateSystemDataSetMapping(): string | undefined {
    return this.x00142208;
  }

  get x00142208(): string | undefined {
    const element = this.dwResponse['00142208'];
    return this.dwResponse['00142208']?.Value[0];
  }

  // Coordinate System Axis Number
  get CoordinateSystemAxisNumber(): number | undefined {
    return this.x0014220a;
  }

  get x0014220a(): number | undefined {
    const element = this.dwResponse['0014220a'];
    return this.dwResponse['0014220a']?.Value[0];
  }

  // Coordinate System Axis Type
  get CoordinateSystemAxisType(): string | undefined {
    return this.x0014220c;
  }

  get x0014220c(): string | undefined {
    const element = this.dwResponse['0014220c'];
    return this.dwResponse['0014220c']?.Value[0];
  }

  // Coordinate System Axis Units
  get CoordinateSystemAxisUnits(): string | undefined {
    return this.x0014220e;
  }

  get x0014220e(): string | undefined {
    const element = this.dwResponse['0014220e'];
    return this.dwResponse['0014220e']?.Value[0];
  }

  // Coordinate System Transform Sequence
  get CoordinateSystemTransformSequence(): Array<Dataset> | undefined {
    return this.x00142220;
  }

  get x00142220(): Array<Dataset> | undefined {
    const element = this.dwResponse['00142220'];
    return this.dwResponse['00142220']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Transform Number of Axes
  get TransformNumberOfAxes(): number | undefined {
    return this.x00142224;
  }

  get x00142224(): number | undefined {
    const element = this.dwResponse['00142224'];
    return this.dwResponse['00142224']?.Value[0];
  }

  // Transform Order of Axes
  get TransformOrderOfAxes(): Array<number> | undefined {
    return this.x00142226;
  }

  get x00142226(): Array<number> | undefined {
    const element = this.dwResponse['00142226'];
    return this.dwResponse['00142226']?.Value;
  }

  // Transformed Axis Units
  get TransformedAxisUnits(): string | undefined {
    return this.x00142228;
  }

  get x00142228(): string | undefined {
    const element = this.dwResponse['00142228'];
    return this.dwResponse['00142228']?.Value[0];
  }

  // Coordinate System Transform Rotation and Scale Matrix
  get CoordinateSystemTransformRotationAndScaleMatrix(): Array<number> | undefined {
    return this.x0014222a;
  }

  get x0014222a(): Array<number> | undefined {
    const element = this.dwResponse['0014222a'];
    return this.dwResponse['0014222a']?.Value;
  }

  // Coordinate System Transform Translation Matrix
  get CoordinateSystemTransformTranslationMatrix(): Array<number> | undefined {
    return this.x0014222c;
  }

  get x0014222c(): Array<number> | undefined {
    const element = this.dwResponse['0014222c'];
    return this.dwResponse['0014222c']?.Value;
  }

  // Internal Detector Frame Time
  get InternalDetectorFrameTime(): number | undefined {
    return this.x00143011;
  }

  get x00143011(): number | undefined {
    const element = this.dwResponse['00143011'];
    return this.dwResponse['00143011']?.Value[0];
  }

  // Number of Frames Integrated
  get NumberOfFramesIntegrated(): number | undefined {
    return this.x00143012;
  }

  get x00143012(): number | undefined {
    const element = this.dwResponse['00143012'];
    return this.dwResponse['00143012']?.Value[0];
  }

  // Detector Temperature Sequence
  get DetectorTemperatureSequence(): Array<Dataset> | undefined {
    return this.x00143020;
  }

  get x00143020(): Array<Dataset> | undefined {
    const element = this.dwResponse['00143020'];
    return this.dwResponse['00143020']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Horizontal Offset of Sensor
  get HorizontalOffsetOfSensor(): number | undefined {
    return this.x00143024;
  }

  get x00143024(): number | undefined {
    const element = this.dwResponse['00143024'];
    return this.dwResponse['00143024']?.Value[0];
  }

  // Vertical Offset of Sensor
  get VerticalOffsetOfSensor(): number | undefined {
    return this.x00143026;
  }

  get x00143026(): number | undefined {
    const element = this.dwResponse['00143026'];
    return this.dwResponse['00143026']?.Value[0];
  }

  // Sensor Temperature
  get SensorTemperature(): number | undefined {
    return this.x00143028;
  }

  get x00143028(): number | undefined {
    const element = this.dwResponse['00143028'];
    return this.dwResponse['00143028']?.Value[0];
  }

  // Dark Current Sequence
  get DarkCurrentSequence(): Array<Dataset> | undefined {
    return this.x00143040;
  }

  get x00143040(): Array<Dataset> | undefined {
    const element = this.dwResponse['00143040'];
    return this.dwResponse['00143040']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Gain Correction Reference Sequence
  get GainCorrectionReferenceSequence(): Array<Dataset> | undefined {
    return this.x00143060;
  }

  get x00143060(): Array<Dataset> | undefined {
    const element = this.dwResponse['00143060'];
    return this.dwResponse['00143060']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // KV Used in Gain Calibration
  get KVUsedInGainCalibration(): number | undefined {
    return this.x00143071;
  }

  get x00143071(): number | undefined {
    const element = this.dwResponse['00143071'];
    return this.dwResponse['00143071']?.Value[0];
  }

  // MA Used in Gain Calibration
  get MAUsedInGainCalibration(): number | undefined {
    return this.x00143072;
  }

  get x00143072(): number | undefined {
    const element = this.dwResponse['00143072'];
    return this.dwResponse['00143072']?.Value[0];
  }

  // Number of Frames Used for Integration
  get NumberOfFramesUsedForIntegration(): number | undefined {
    return this.x00143073;
  }

  get x00143073(): number | undefined {
    const element = this.dwResponse['00143073'];
    return this.dwResponse['00143073']?.Value[0];
  }

  // Filter Material Used in Gain Calibration
  get FilterMaterialUsedInGainCalibration(): string | undefined {
    return this.x00143074;
  }

  get x00143074(): string | undefined {
    const element = this.dwResponse['00143074'];
    return this.dwResponse['00143074']?.Value[0];
  }

  // Filter Thickness Used in Gain Calibration
  get FilterThicknessUsedInGainCalibration(): number | undefined {
    return this.x00143075;
  }

  get x00143075(): number | undefined {
    const element = this.dwResponse['00143075'];
    return this.dwResponse['00143075']?.Value[0];
  }

  // Date of Gain Calibration
  get DateOfGainCalibration(): Date | undefined {
    return this.x00143076;
  }

  get x00143076(): Date | undefined {
    const element = this.dwResponse['00143076'];
    return this.dwResponse['00143076']?.Value[0];
  }

  // Time of Gain Calibration
  get TimeOfGainCalibration(): string | undefined {
    return this.x00143077;
  }

  get x00143077(): string | undefined {
    const element = this.dwResponse['00143077'];
    return this.dwResponse['00143077']?.Value[0];
  }

  // Pulser Equipment Sequence
  get PulserEquipmentSequence(): Array<Dataset> | undefined {
    return this.x00144002;
  }

  get x00144002(): Array<Dataset> | undefined {
    const element = this.dwResponse['00144002'];
    return this.dwResponse['00144002']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Pulser Type
  get PulserType(): string | undefined {
    return this.x00144004;
  }

  get x00144004(): string | undefined {
    const element = this.dwResponse['00144004'];
    return this.dwResponse['00144004']?.Value[0];
  }

  // Receiver Equipment Sequence
  get ReceiverEquipmentSequence(): Array<Dataset> | undefined {
    return this.x00144008;
  }

  get x00144008(): Array<Dataset> | undefined {
    const element = this.dwResponse['00144008'];
    return this.dwResponse['00144008']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Amplifier Type
  get AmplifierType(): string | undefined {
    return this.x0014400a;
  }

  get x0014400a(): string | undefined {
    const element = this.dwResponse['0014400a'];
    return this.dwResponse['0014400a']?.Value[0];
  }

  // Pre-Amplifier Equipment Sequence
  get PreAmplifierEquipmentSequence(): Array<Dataset> | undefined {
    return this.x0014400e;
  }

  get x0014400e(): Array<Dataset> | undefined {
    const element = this.dwResponse['0014400e'];
    return this.dwResponse['0014400e']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Transmit Transducer Sequence
  get TransmitTransducerSequence(): Array<Dataset> | undefined {
    return this.x00144010;
  }

  get x00144010(): Array<Dataset> | undefined {
    const element = this.dwResponse['00144010'];
    return this.dwResponse['00144010']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Receive Transducer Sequence
  get ReceiveTransducerSequence(): Array<Dataset> | undefined {
    return this.x00144011;
  }

  get x00144011(): Array<Dataset> | undefined {
    const element = this.dwResponse['00144011'];
    return this.dwResponse['00144011']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Number of Elements
  get NumberOfElements(): number | undefined {
    return this.x00144012;
  }

  get x00144012(): number | undefined {
    const element = this.dwResponse['00144012'];
    return this.dwResponse['00144012']?.Value[0];
  }

  // Element Shape
  get ElementShape(): string | undefined {
    return this.x00144013;
  }

  get x00144013(): string | undefined {
    const element = this.dwResponse['00144013'];
    return this.dwResponse['00144013']?.Value[0];
  }

  // Element Dimension A
  get ElementDimensionA(): number | undefined {
    return this.x00144014;
  }

  get x00144014(): number | undefined {
    const element = this.dwResponse['00144014'];
    return this.dwResponse['00144014']?.Value[0];
  }

  // Element Dimension B
  get ElementDimensionB(): number | undefined {
    return this.x00144015;
  }

  get x00144015(): number | undefined {
    const element = this.dwResponse['00144015'];
    return this.dwResponse['00144015']?.Value[0];
  }

  // Element Pitch A
  get ElementPitchA(): number | undefined {
    return this.x00144016;
  }

  get x00144016(): number | undefined {
    const element = this.dwResponse['00144016'];
    return this.dwResponse['00144016']?.Value[0];
  }

  // Measured Beam Dimension A
  get MeasuredBeamDimensionA(): number | undefined {
    return this.x00144017;
  }

  get x00144017(): number | undefined {
    const element = this.dwResponse['00144017'];
    return this.dwResponse['00144017']?.Value[0];
  }

  // Measured Beam Dimension B
  get MeasuredBeamDimensionB(): number | undefined {
    return this.x00144018;
  }

  get x00144018(): number | undefined {
    const element = this.dwResponse['00144018'];
    return this.dwResponse['00144018']?.Value[0];
  }

  // Location of Measured Beam Diameter
  get LocationOfMeasuredBeamDiameter(): number | undefined {
    return this.x00144019;
  }

  get x00144019(): number | undefined {
    const element = this.dwResponse['00144019'];
    return this.dwResponse['00144019']?.Value[0];
  }

  // Nominal Frequency
  get NominalFrequency(): number | undefined {
    return this.x0014401a;
  }

  get x0014401a(): number | undefined {
    const element = this.dwResponse['0014401a'];
    return this.dwResponse['0014401a']?.Value[0];
  }

  // Measured Center Frequency
  get MeasuredCenterFrequency(): number | undefined {
    return this.x0014401b;
  }

  get x0014401b(): number | undefined {
    const element = this.dwResponse['0014401b'];
    return this.dwResponse['0014401b']?.Value[0];
  }

  // Measured Bandwidth
  get MeasuredBandwidth(): number | undefined {
    return this.x0014401c;
  }

  get x0014401c(): number | undefined {
    const element = this.dwResponse['0014401c'];
    return this.dwResponse['0014401c']?.Value[0];
  }

  // Element Pitch B
  get ElementPitchB(): number | undefined {
    return this.x0014401d;
  }

  get x0014401d(): number | undefined {
    const element = this.dwResponse['0014401d'];
    return this.dwResponse['0014401d']?.Value[0];
  }

  // Pulser Settings Sequence
  get PulserSettingsSequence(): Array<Dataset> | undefined {
    return this.x00144020;
  }

  get x00144020(): Array<Dataset> | undefined {
    const element = this.dwResponse['00144020'];
    return this.dwResponse['00144020']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Pulse Width
  get PulseWidth(): number | undefined {
    return this.x00144022;
  }

  get x00144022(): number | undefined {
    const element = this.dwResponse['00144022'];
    return this.dwResponse['00144022']?.Value[0];
  }

  // Excitation Frequency
  get ExcitationFrequency(): number | undefined {
    return this.x00144024;
  }

  get x00144024(): number | undefined {
    const element = this.dwResponse['00144024'];
    return this.dwResponse['00144024']?.Value[0];
  }

  // Modulation Type
  get ModulationType(): string | undefined {
    return this.x00144026;
  }

  get x00144026(): string | undefined {
    const element = this.dwResponse['00144026'];
    return this.dwResponse['00144026']?.Value[0];
  }

  // Damping
  get Damping(): number | undefined {
    return this.x00144028;
  }

  get x00144028(): number | undefined {
    const element = this.dwResponse['00144028'];
    return this.dwResponse['00144028']?.Value[0];
  }

  // Receiver Settings Sequence
  get ReceiverSettingsSequence(): Array<Dataset> | undefined {
    return this.x00144030;
  }

  get x00144030(): Array<Dataset> | undefined {
    const element = this.dwResponse['00144030'];
    return this.dwResponse['00144030']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Acquired Soundpath Length
  get AcquiredSoundpathLength(): number | undefined {
    return this.x00144031;
  }

  get x00144031(): number | undefined {
    const element = this.dwResponse['00144031'];
    return this.dwResponse['00144031']?.Value[0];
  }

  // Acquisition Compression Type
  get AcquisitionCompressionType(): string | undefined {
    return this.x00144032;
  }

  get x00144032(): string | undefined {
    const element = this.dwResponse['00144032'];
    return this.dwResponse['00144032']?.Value[0];
  }

  // Acquisition Sample Size
  get AcquisitionSampleSize(): number | undefined {
    return this.x00144033;
  }

  get x00144033(): number | undefined {
    const element = this.dwResponse['00144033'];
    return this.dwResponse['00144033']?.Value[0];
  }

  // Rectifier Smoothing
  get RectifierSmoothing(): number | undefined {
    return this.x00144034;
  }

  get x00144034(): number | undefined {
    const element = this.dwResponse['00144034'];
    return this.dwResponse['00144034']?.Value[0];
  }

  // DAC Sequence
  get DACSequence(): Array<Dataset> | undefined {
    return this.x00144035;
  }

  get x00144035(): Array<Dataset> | undefined {
    const element = this.dwResponse['00144035'];
    return this.dwResponse['00144035']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // DAC Type
  get DACType(): string | undefined {
    return this.x00144036;
  }

  get x00144036(): string | undefined {
    const element = this.dwResponse['00144036'];
    return this.dwResponse['00144036']?.Value[0];
  }

  // DAC Gain Points
  get DACGainPoints(): Array<number> | undefined {
    return this.x00144038;
  }

  get x00144038(): Array<number> | undefined {
    const element = this.dwResponse['00144038'];
    return this.dwResponse['00144038']?.Value;
  }

  // DAC Time Points
  get DACTimePoints(): Array<number> | undefined {
    return this.x0014403a;
  }

  get x0014403a(): Array<number> | undefined {
    const element = this.dwResponse['0014403a'];
    return this.dwResponse['0014403a']?.Value;
  }

  // DAC Amplitude
  get DACAmplitude(): Array<number> | undefined {
    return this.x0014403c;
  }

  get x0014403c(): Array<number> | undefined {
    const element = this.dwResponse['0014403c'];
    return this.dwResponse['0014403c']?.Value;
  }

  // Pre-Amplifier Settings Sequence
  get PreAmplifierSettingsSequence(): Array<Dataset> | undefined {
    return this.x00144040;
  }

  get x00144040(): Array<Dataset> | undefined {
    const element = this.dwResponse['00144040'];
    return this.dwResponse['00144040']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Transmit Transducer Settings Sequence
  get TransmitTransducerSettingsSequence(): Array<Dataset> | undefined {
    return this.x00144050;
  }

  get x00144050(): Array<Dataset> | undefined {
    const element = this.dwResponse['00144050'];
    return this.dwResponse['00144050']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Receive Transducer Settings Sequence
  get ReceiveTransducerSettingsSequence(): Array<Dataset> | undefined {
    return this.x00144051;
  }

  get x00144051(): Array<Dataset> | undefined {
    const element = this.dwResponse['00144051'];
    return this.dwResponse['00144051']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Incident Angle
  get IncidentAngle(): number | undefined {
    return this.x00144052;
  }

  get x00144052(): number | undefined {
    const element = this.dwResponse['00144052'];
    return this.dwResponse['00144052']?.Value[0];
  }

  // Coupling Velocity
  get CouplingVelocity(): number | undefined {
    return this.x00144057;
  }

  get x00144057(): number | undefined {
    const element = this.dwResponse['00144057'];
    return this.dwResponse['00144057']?.Value[0];
  }

  // Probe Center Location X
  get ProbeCenterLocationX(): number | undefined {
    return this.x00144058;
  }

  get x00144058(): number | undefined {
    const element = this.dwResponse['00144058'];
    return this.dwResponse['00144058']?.Value[0];
  }

  // Probe Center Location Z
  get ProbeCenterLocationZ(): number | undefined {
    return this.x00144059;
  }

  get x00144059(): number | undefined {
    const element = this.dwResponse['00144059'];
    return this.dwResponse['00144059']?.Value[0];
  }

  // Sound Path Length
  get SoundPathLength(): number | undefined {
    return this.x0014405a;
  }

  get x0014405a(): number | undefined {
    const element = this.dwResponse['0014405a'];
    return this.dwResponse['0014405a']?.Value[0];
  }

  // Gate Settings Sequence
  get GateSettingsSequence(): Array<Dataset> | undefined {
    return this.x00144060;
  }

  get x00144060(): Array<Dataset> | undefined {
    const element = this.dwResponse['00144060'];
    return this.dwResponse['00144060']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Gate Threshold
  get GateThreshold(): number | undefined {
    return this.x00144062;
  }

  get x00144062(): number | undefined {
    const element = this.dwResponse['00144062'];
    return this.dwResponse['00144062']?.Value[0];
  }

  // Velocity of Sound
  get VelocityOfSound(): number | undefined {
    return this.x00144064;
  }

  get x00144064(): number | undefined {
    const element = this.dwResponse['00144064'];
    return this.dwResponse['00144064']?.Value[0];
  }

  // Calibration Settings Sequence
  get CalibrationSettingsSequence(): Array<Dataset> | undefined {
    return this.x00144070;
  }

  get x00144070(): Array<Dataset> | undefined {
    const element = this.dwResponse['00144070'];
    return this.dwResponse['00144070']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Procedure Version
  get ProcedureVersion(): string | undefined {
    return this.x00144074;
  }

  get x00144074(): string | undefined {
    const element = this.dwResponse['00144074'];
    return this.dwResponse['00144074']?.Value[0];
  }

  // Procedure Creation Date
  get ProcedureCreationDate(): Date | undefined {
    return this.x00144076;
  }

  get x00144076(): Date | undefined {
    const element = this.dwResponse['00144076'];
    return this.dwResponse['00144076']?.Value[0];
  }

  // Procedure Expiration Date
  get ProcedureExpirationDate(): Date | undefined {
    return this.x00144078;
  }

  get x00144078(): Date | undefined {
    const element = this.dwResponse['00144078'];
    return this.dwResponse['00144078']?.Value[0];
  }

  // Procedure Last Modified Date
  get ProcedureLastModifiedDate(): Date | undefined {
    return this.x0014407a;
  }

  get x0014407a(): Date | undefined {
    const element = this.dwResponse['0014407a'];
    return this.dwResponse['0014407a']?.Value[0];
  }

  // Calibration Time
  get CalibrationTime(): Array<string> | undefined {
    return this.x0014407c;
  }

  get x0014407c(): Array<string> | undefined {
    const element = this.dwResponse['0014407c'];
    return this.dwResponse['0014407c']?.Value;
  }

  // Calibration Date
  get CalibrationDate(): Array<Date> | undefined {
    return this.x0014407e;
  }

  get x0014407e(): Array<Date> | undefined {
    const element = this.dwResponse['0014407e'];
    return this.dwResponse['0014407e']?.Value;
  }

  // Probe Drive Equipment Sequence
  get ProbeDriveEquipmentSequence(): Array<Dataset> | undefined {
    return this.x00144080;
  }

  get x00144080(): Array<Dataset> | undefined {
    const element = this.dwResponse['00144080'];
    return this.dwResponse['00144080']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Drive Type
  get DriveType(): string | undefined {
    return this.x00144081;
  }

  get x00144081(): string | undefined {
    const element = this.dwResponse['00144081'];
    return this.dwResponse['00144081']?.Value[0];
  }

  // Drive Probe Sequence
  get DriveProbeSequence(): Array<Dataset> | undefined {
    return this.x00144083;
  }

  get x00144083(): Array<Dataset> | undefined {
    const element = this.dwResponse['00144083'];
    return this.dwResponse['00144083']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Probe Inductance
  get ProbeInductance(): number | undefined {
    return this.x00144084;
  }

  get x00144084(): number | undefined {
    const element = this.dwResponse['00144084'];
    return this.dwResponse['00144084']?.Value[0];
  }

  // Probe Resistance
  get ProbeResistance(): number | undefined {
    return this.x00144085;
  }

  get x00144085(): number | undefined {
    const element = this.dwResponse['00144085'];
    return this.dwResponse['00144085']?.Value[0];
  }

  // Receive Probe Sequence
  get ReceiveProbeSequence(): Array<Dataset> | undefined {
    return this.x00144086;
  }

  get x00144086(): Array<Dataset> | undefined {
    const element = this.dwResponse['00144086'];
    return this.dwResponse['00144086']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Probe Drive Settings Sequence
  get ProbeDriveSettingsSequence(): Array<Dataset> | undefined {
    return this.x00144087;
  }

  get x00144087(): Array<Dataset> | undefined {
    const element = this.dwResponse['00144087'];
    return this.dwResponse['00144087']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Bridge Resistors
  get BridgeResistors(): number | undefined {
    return this.x00144088;
  }

  get x00144088(): number | undefined {
    const element = this.dwResponse['00144088'];
    return this.dwResponse['00144088']?.Value[0];
  }

  // Probe Orientation Angle
  get ProbeOrientationAngle(): number | undefined {
    return this.x00144089;
  }

  get x00144089(): number | undefined {
    const element = this.dwResponse['00144089'];
    return this.dwResponse['00144089']?.Value[0];
  }

  // User Selected Gain Y
  get UserSelectedGainY(): number | undefined {
    return this.x0014408b;
  }

  get x0014408b(): number | undefined {
    const element = this.dwResponse['0014408b'];
    return this.dwResponse['0014408b']?.Value[0];
  }

  // User Selected Phase
  get UserSelectedPhase(): number | undefined {
    return this.x0014408c;
  }

  get x0014408c(): number | undefined {
    const element = this.dwResponse['0014408c'];
    return this.dwResponse['0014408c']?.Value[0];
  }

  // User Selected Offset X
  get UserSelectedOffsetX(): number | undefined {
    return this.x0014408d;
  }

  get x0014408d(): number | undefined {
    const element = this.dwResponse['0014408d'];
    return this.dwResponse['0014408d']?.Value[0];
  }

  // User Selected Offset Y
  get UserSelectedOffsetY(): number | undefined {
    return this.x0014408e;
  }

  get x0014408e(): number | undefined {
    const element = this.dwResponse['0014408e'];
    return this.dwResponse['0014408e']?.Value[0];
  }

  // Channel Settings Sequence
  get ChannelSettingsSequence(): Array<Dataset> | undefined {
    return this.x00144091;
  }

  get x00144091(): Array<Dataset> | undefined {
    const element = this.dwResponse['00144091'];
    return this.dwResponse['00144091']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Channel Threshold
  get ChannelThreshold(): number | undefined {
    return this.x00144092;
  }

  get x00144092(): number | undefined {
    const element = this.dwResponse['00144092'];
    return this.dwResponse['00144092']?.Value[0];
  }

  // Scanner Settings Sequence
  get ScannerSettingsSequence(): Array<Dataset> | undefined {
    return this.x0014409a;
  }

  get x0014409a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0014409a'];
    return this.dwResponse['0014409a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Translation Rate X
  get TranslationRateX(): number | undefined {
    return this.x0014409c;
  }

  get x0014409c(): number | undefined {
    const element = this.dwResponse['0014409c'];
    return this.dwResponse['0014409c']?.Value[0];
  }

  // Translation Rate Y
  get TranslationRateY(): number | undefined {
    return this.x0014409d;
  }

  get x0014409d(): number | undefined {
    const element = this.dwResponse['0014409d'];
    return this.dwResponse['0014409d']?.Value[0];
  }

  // Channel Overlap
  get ChannelOverlap(): number | undefined {
    return this.x0014409f;
  }

  get x0014409f(): number | undefined {
    const element = this.dwResponse['0014409f'];
    return this.dwResponse['0014409f']?.Value[0];
  }

  // Image Quality Indicator Type
  get ImageQualityIndicatorType(): string | undefined {
    return this.x001440a0;
  }

  get x001440a0(): string | undefined {
    const element = this.dwResponse['001440a0'];
    return this.dwResponse['001440a0']?.Value[0];
  }

  // Image Quality Indicator Material
  get ImageQualityIndicatorMaterial(): string | undefined {
    return this.x001440a1;
  }

  get x001440a1(): string | undefined {
    const element = this.dwResponse['001440a1'];
    return this.dwResponse['001440a1']?.Value[0];
  }

  // Image Quality Indicator Size
  get ImageQualityIndicatorSize(): string | undefined {
    return this.x001440a2;
  }

  get x001440a2(): string | undefined {
    const element = this.dwResponse['001440a2'];
    return this.dwResponse['001440a2']?.Value[0];
  }

  // LINAC Energy
  get LINACEnergy(): number | undefined {
    return this.x00145002;
  }

  get x00145002(): number | undefined {
    const element = this.dwResponse['00145002'];
    return this.dwResponse['00145002']?.Value[0];
  }

  // LINAC Output
  get LINACOutput(): number | undefined {
    return this.x00145004;
  }

  get x00145004(): number | undefined {
    const element = this.dwResponse['00145004'];
    return this.dwResponse['00145004']?.Value[0];
  }

  // Contrast/Bolus Agent
  get ContrastBolusAgent(): string | undefined {
    return this.x00180010;
  }

  get x00180010(): string | undefined {
    const element = this.dwResponse['00180010'];
    return this.dwResponse['00180010']?.Value[0];
  }

  // Contrast/Bolus Agent Sequence
  get ContrastBolusAgentSequence(): Array<Dataset> | undefined {
    return this.x00180012;
  }

  get x00180012(): Array<Dataset> | undefined {
    const element = this.dwResponse['00180012'];
    return this.dwResponse['00180012']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Contrast/Bolus T1 Relaxivity
  get ContrastBolusT1Relaxivity(): number | undefined {
    return this.x00180013;
  }

  get x00180013(): number | undefined {
    const element = this.dwResponse['00180013'];
    return this.dwResponse['00180013']?.Value[0];
  }

  // Contrast/Bolus Administration Route Sequence
  get ContrastBolusAdministrationRouteSequence(): Array<Dataset> | undefined {
    return this.x00180014;
  }

  get x00180014(): Array<Dataset> | undefined {
    const element = this.dwResponse['00180014'];
    return this.dwResponse['00180014']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Body Part Examined
  get BodyPartExamined(): string | undefined {
    return this.x00180015;
  }

  get x00180015(): string | undefined {
    const element = this.dwResponse['00180015'];
    return this.dwResponse['00180015']?.Value[0];
  }

  // Scanning Sequence
  get ScanningSequence(): Array<string> | undefined {
    return this.x00180020;
  }

  get x00180020(): Array<string> | undefined {
    const element = this.dwResponse['00180020'];
    return this.dwResponse['00180020']?.Value;
  }

  // Sequence Variant
  get SequenceVariant(): Array<string> | undefined {
    return this.x00180021;
  }

  get x00180021(): Array<string> | undefined {
    const element = this.dwResponse['00180021'];
    return this.dwResponse['00180021']?.Value;
  }

  // Scan Options
  get ScanOptions(): Array<string> | undefined {
    return this.x00180022;
  }

  get x00180022(): Array<string> | undefined {
    const element = this.dwResponse['00180022'];
    return this.dwResponse['00180022']?.Value;
  }

  // MR Acquisition Type
  get MRAcquisitionType(): string | undefined {
    return this.x00180023;
  }

  get x00180023(): string | undefined {
    const element = this.dwResponse['00180023'];
    return this.dwResponse['00180023']?.Value[0];
  }

  // Sequence Name
  get SequenceName(): string | undefined {
    return this.x00180024;
  }

  get x00180024(): string | undefined {
    const element = this.dwResponse['00180024'];
    return this.dwResponse['00180024']?.Value[0];
  }

  // Angio Flag
  get AngioFlag(): string | undefined {
    return this.x00180025;
  }

  get x00180025(): string | undefined {
    const element = this.dwResponse['00180025'];
    return this.dwResponse['00180025']?.Value[0];
  }

  // Intervention Drug Information Sequence
  get InterventionDrugInformationSequence(): Array<Dataset> | undefined {
    return this.x00180026;
  }

  get x00180026(): Array<Dataset> | undefined {
    const element = this.dwResponse['00180026'];
    return this.dwResponse['00180026']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Intervention Drug Stop Time
  get InterventionDrugStopTime(): string | undefined {
    return this.x00180027;
  }

  get x00180027(): string | undefined {
    const element = this.dwResponse['00180027'];
    return this.dwResponse['00180027']?.Value[0];
  }

  // Intervention Drug Dose
  get InterventionDrugDose(): number | undefined {
    return this.x00180028;
  }

  get x00180028(): number | undefined {
    const element = this.dwResponse['00180028'];
    return this.dwResponse['00180028']?.Value[0];
  }

  // Intervention Drug Code Sequence
  get InterventionDrugCodeSequence(): Array<Dataset> | undefined {
    return this.x00180029;
  }

  get x00180029(): Array<Dataset> | undefined {
    const element = this.dwResponse['00180029'];
    return this.dwResponse['00180029']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Additional Drug Sequence
  get AdditionalDrugSequence(): Array<Dataset> | undefined {
    return this.x0018002a;
  }

  get x0018002a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0018002a'];
    return this.dwResponse['0018002a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Radionuclide
  get Radionuclide(): Array<string> | undefined {
    return this.x00180030;
  }

  get x00180030(): Array<string> | undefined {
    const element = this.dwResponse['00180030'];
    return this.dwResponse['00180030']?.Value;
  }

  // Radiopharmaceutical
  get Radiopharmaceutical(): string | undefined {
    return this.x00180031;
  }

  get x00180031(): string | undefined {
    const element = this.dwResponse['00180031'];
    return this.dwResponse['00180031']?.Value[0];
  }

  // Energy Window Centerline
  get EnergyWindowCenterline(): number | undefined {
    return this.x00180032;
  }

  get x00180032(): number | undefined {
    const element = this.dwResponse['00180032'];
    return this.dwResponse['00180032']?.Value[0];
  }

  // Energy Window Total Width
  get EnergyWindowTotalWidth(): Array<number> | undefined {
    return this.x00180033;
  }

  get x00180033(): Array<number> | undefined {
    const element = this.dwResponse['00180033'];
    return this.dwResponse['00180033']?.Value;
  }

  // Intervention Drug Name
  get InterventionDrugName(): string | undefined {
    return this.x00180034;
  }

  get x00180034(): string | undefined {
    const element = this.dwResponse['00180034'];
    return this.dwResponse['00180034']?.Value[0];
  }

  // Intervention Drug Start Time
  get InterventionDrugStartTime(): string | undefined {
    return this.x00180035;
  }

  get x00180035(): string | undefined {
    const element = this.dwResponse['00180035'];
    return this.dwResponse['00180035']?.Value[0];
  }

  // Intervention Sequence
  get InterventionSequence(): Array<Dataset> | undefined {
    return this.x00180036;
  }

  get x00180036(): Array<Dataset> | undefined {
    const element = this.dwResponse['00180036'];
    return this.dwResponse['00180036']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Therapy Type
  get TherapyType(): string | undefined {
    return this.x00180037;
  }

  get x00180037(): string | undefined {
    const element = this.dwResponse['00180037'];
    return this.dwResponse['00180037']?.Value[0];
  }

  // Intervention Status
  get InterventionStatus(): string | undefined {
    return this.x00180038;
  }

  get x00180038(): string | undefined {
    const element = this.dwResponse['00180038'];
    return this.dwResponse['00180038']?.Value[0];
  }

  // Therapy Description
  get TherapyDescription(): string | undefined {
    return this.x00180039;
  }

  get x00180039(): string | undefined {
    const element = this.dwResponse['00180039'];
    return this.dwResponse['00180039']?.Value[0];
  }

  // Cine Rate
  get CineRate(): number | undefined {
    return this.x00180040;
  }

  get x00180040(): number | undefined {
    const element = this.dwResponse['00180040'];
    return this.dwResponse['00180040']?.Value[0];
  }

  // Initial Cine Run State
  get InitialCineRunState(): string | undefined {
    return this.x00180042;
  }

  get x00180042(): string | undefined {
    const element = this.dwResponse['00180042'];
    return this.dwResponse['00180042']?.Value[0];
  }

  // Slice Thickness
  get SliceThickness(): number | undefined {
    return this.x00180050;
  }

  get x00180050(): number | undefined {
    const element = this.dwResponse['00180050'];
    return this.dwResponse['00180050']?.Value[0];
  }

  // KVP
  get KVP(): number | undefined {
    return this.x00180060;
  }

  get x00180060(): number | undefined {
    const element = this.dwResponse['00180060'];
    return this.dwResponse['00180060']?.Value[0];
  }

  // Counts Accumulated
  get CountsAccumulated(): number | undefined {
    return this.x00180070;
  }

  get x00180070(): number | undefined {
    const element = this.dwResponse['00180070'];
    return this.dwResponse['00180070']?.Value[0];
  }

  // Acquisition Termination Condition
  get AcquisitionTerminationCondition(): string | undefined {
    return this.x00180071;
  }

  get x00180071(): string | undefined {
    const element = this.dwResponse['00180071'];
    return this.dwResponse['00180071']?.Value[0];
  }

  // Effective Duration
  get EffectiveDuration(): number | undefined {
    return this.x00180072;
  }

  get x00180072(): number | undefined {
    const element = this.dwResponse['00180072'];
    return this.dwResponse['00180072']?.Value[0];
  }

  // Acquisition Start Condition
  get AcquisitionStartCondition(): string | undefined {
    return this.x00180073;
  }

  get x00180073(): string | undefined {
    const element = this.dwResponse['00180073'];
    return this.dwResponse['00180073']?.Value[0];
  }

  // Acquisition Start Condition Data
  get AcquisitionStartConditionData(): number | undefined {
    return this.x00180074;
  }

  get x00180074(): number | undefined {
    const element = this.dwResponse['00180074'];
    return this.dwResponse['00180074']?.Value[0];
  }

  // Acquisition Termination Condition Data
  get AcquisitionTerminationConditionData(): number | undefined {
    return this.x00180075;
  }

  get x00180075(): number | undefined {
    const element = this.dwResponse['00180075'];
    return this.dwResponse['00180075']?.Value[0];
  }

  // Repetition Time
  get RepetitionTime(): number | undefined {
    return this.x00180080;
  }

  get x00180080(): number | undefined {
    const element = this.dwResponse['00180080'];
    return this.dwResponse['00180080']?.Value[0];
  }

  // Echo Time
  get EchoTime(): number | undefined {
    return this.x00180081;
  }

  get x00180081(): number | undefined {
    const element = this.dwResponse['00180081'];
    return this.dwResponse['00180081']?.Value[0];
  }

  // Inversion Time
  get InversionTime(): number | undefined {
    return this.x00180082;
  }

  get x00180082(): number | undefined {
    const element = this.dwResponse['00180082'];
    return this.dwResponse['00180082']?.Value[0];
  }

  // Number of Averages
  get NumberOfAverages(): number | undefined {
    return this.x00180083;
  }

  get x00180083(): number | undefined {
    const element = this.dwResponse['00180083'];
    return this.dwResponse['00180083']?.Value[0];
  }

  // Imaging Frequency
  get ImagingFrequency(): number | undefined {
    return this.x00180084;
  }

  get x00180084(): number | undefined {
    const element = this.dwResponse['00180084'];
    return this.dwResponse['00180084']?.Value[0];
  }

  // Imaged Nucleus
  get ImagedNucleus(): string | undefined {
    return this.x00180085;
  }

  get x00180085(): string | undefined {
    const element = this.dwResponse['00180085'];
    return this.dwResponse['00180085']?.Value[0];
  }

  // Echo Number(s)
  get EchoNumbers(): Array<number> | undefined {
    return this.x00180086;
  }

  get x00180086(): Array<number> | undefined {
    const element = this.dwResponse['00180086'];
    return this.dwResponse['00180086']?.Value;
  }

  // Magnetic Field Strength
  get MagneticFieldStrength(): number | undefined {
    return this.x00180087;
  }

  get x00180087(): number | undefined {
    const element = this.dwResponse['00180087'];
    return this.dwResponse['00180087']?.Value[0];
  }

  // Spacing Between Slices
  get SpacingBetweenSlices(): number | undefined {
    return this.x00180088;
  }

  get x00180088(): number | undefined {
    const element = this.dwResponse['00180088'];
    return this.dwResponse['00180088']?.Value[0];
  }

  // Number of Phase Encoding Steps
  get NumberOfPhaseEncodingSteps(): number | undefined {
    return this.x00180089;
  }

  get x00180089(): number | undefined {
    const element = this.dwResponse['00180089'];
    return this.dwResponse['00180089']?.Value[0];
  }

  // Data Collection Diameter
  get DataCollectionDiameter(): number | undefined {
    return this.x00180090;
  }

  get x00180090(): number | undefined {
    const element = this.dwResponse['00180090'];
    return this.dwResponse['00180090']?.Value[0];
  }

  // Echo Train Length
  get EchoTrainLength(): number | undefined {
    return this.x00180091;
  }

  get x00180091(): number | undefined {
    const element = this.dwResponse['00180091'];
    return this.dwResponse['00180091']?.Value[0];
  }

  // Percent Sampling
  get PercentSampling(): number | undefined {
    return this.x00180093;
  }

  get x00180093(): number | undefined {
    const element = this.dwResponse['00180093'];
    return this.dwResponse['00180093']?.Value[0];
  }

  // Percent Phase Field of View
  get PercentPhaseFieldOfView(): number | undefined {
    return this.x00180094;
  }

  get x00180094(): number | undefined {
    const element = this.dwResponse['00180094'];
    return this.dwResponse['00180094']?.Value[0];
  }

  // Pixel Bandwidth
  get PixelBandwidth(): number | undefined {
    return this.x00180095;
  }

  get x00180095(): number | undefined {
    const element = this.dwResponse['00180095'];
    return this.dwResponse['00180095']?.Value[0];
  }

  // Device Serial Number
  get DeviceSerialNumber(): string | undefined {
    return this.x00181000;
  }

  get x00181000(): string | undefined {
    const element = this.dwResponse['00181000'];
    return this.dwResponse['00181000']?.Value[0];
  }

  // Device UID
  get DeviceUID(): string | undefined {
    return this.x00181002;
  }

  get x00181002(): string | undefined {
    const element = this.dwResponse['00181002'];
    return this.dwResponse['00181002']?.Value[0];
  }

  // Device ID
  get DeviceID(): string | undefined {
    return this.x00181003;
  }

  get x00181003(): string | undefined {
    const element = this.dwResponse['00181003'];
    return this.dwResponse['00181003']?.Value[0];
  }

  // Plate ID
  get PlateID(): string | undefined {
    return this.x00181004;
  }

  get x00181004(): string | undefined {
    const element = this.dwResponse['00181004'];
    return this.dwResponse['00181004']?.Value[0];
  }

  // Generator ID
  get GeneratorID(): string | undefined {
    return this.x00181005;
  }

  get x00181005(): string | undefined {
    const element = this.dwResponse['00181005'];
    return this.dwResponse['00181005']?.Value[0];
  }

  // Grid ID
  get GridID(): string | undefined {
    return this.x00181006;
  }

  get x00181006(): string | undefined {
    const element = this.dwResponse['00181006'];
    return this.dwResponse['00181006']?.Value[0];
  }

  // Cassette ID
  get CassetteID(): string | undefined {
    return this.x00181007;
  }

  get x00181007(): string | undefined {
    const element = this.dwResponse['00181007'];
    return this.dwResponse['00181007']?.Value[0];
  }

  // Gantry ID
  get GantryID(): string | undefined {
    return this.x00181008;
  }

  get x00181008(): string | undefined {
    const element = this.dwResponse['00181008'];
    return this.dwResponse['00181008']?.Value[0];
  }

  // Secondary Capture Device ID
  get SecondaryCaptureDeviceID(): string | undefined {
    return this.x00181010;
  }

  get x00181010(): string | undefined {
    const element = this.dwResponse['00181010'];
    return this.dwResponse['00181010']?.Value[0];
  }

  // Hardcopy Creation Device ID
  get HardcopyCreationDeviceID(): string | undefined {
    return this.x00181011;
  }

  get x00181011(): string | undefined {
    const element = this.dwResponse['00181011'];
    return this.dwResponse['00181011']?.Value[0];
  }

  // Date of Secondary Capture
  get DateOfSecondaryCapture(): Date | undefined {
    return this.x00181012;
  }

  get x00181012(): Date | undefined {
    const element = this.dwResponse['00181012'];
    return this.dwResponse['00181012']?.Value[0];
  }

  // Time of Secondary Capture
  get TimeOfSecondaryCapture(): string | undefined {
    return this.x00181014;
  }

  get x00181014(): string | undefined {
    const element = this.dwResponse['00181014'];
    return this.dwResponse['00181014']?.Value[0];
  }

  // Secondary Capture Device Manufacturer
  get SecondaryCaptureDeviceManufacturer(): string | undefined {
    return this.x00181016;
  }

  get x00181016(): string | undefined {
    const element = this.dwResponse['00181016'];
    return this.dwResponse['00181016']?.Value[0];
  }

  // Hardcopy Device Manufacturer
  get HardcopyDeviceManufacturer(): string | undefined {
    return this.x00181017;
  }

  get x00181017(): string | undefined {
    const element = this.dwResponse['00181017'];
    return this.dwResponse['00181017']?.Value[0];
  }

  // Secondary Capture Device Manufacturer's Model Name
  get SecondaryCaptureDeviceManufacturerModelName(): string | undefined {
    return this.x00181018;
  }

  get x00181018(): string | undefined {
    const element = this.dwResponse['00181018'];
    return this.dwResponse['00181018']?.Value[0];
  }

  // Secondary Capture Device Software Versions
  get SecondaryCaptureDeviceSoftwareVersions(): Array<string> | undefined {
    return this.x00181019;
  }

  get x00181019(): Array<string> | undefined {
    const element = this.dwResponse['00181019'];
    return this.dwResponse['00181019']?.Value;
  }

  // Hardcopy Device Software Version
  get HardcopyDeviceSoftwareVersion(): Array<string> | undefined {
    return this.x0018101a;
  }

  get x0018101a(): Array<string> | undefined {
    const element = this.dwResponse['0018101a'];
    return this.dwResponse['0018101a']?.Value;
  }

  // Hardcopy Device Manufacturer's Model Name
  get HardcopyDeviceManufacturerModelName(): string | undefined {
    return this.x0018101b;
  }

  get x0018101b(): string | undefined {
    const element = this.dwResponse['0018101b'];
    return this.dwResponse['0018101b']?.Value[0];
  }

  // Software Version(s)
  get SoftwareVersions(): Array<string> | undefined {
    return this.x00181020;
  }

  get x00181020(): Array<string> | undefined {
    const element = this.dwResponse['00181020'];
    return this.dwResponse['00181020']?.Value;
  }

  // Video Image Format Acquired
  get VideoImageFormatAcquired(): string | undefined {
    return this.x00181022;
  }

  get x00181022(): string | undefined {
    const element = this.dwResponse['00181022'];
    return this.dwResponse['00181022']?.Value[0];
  }

  // Digital Image Format Acquired
  get DigitalImageFormatAcquired(): string | undefined {
    return this.x00181023;
  }

  get x00181023(): string | undefined {
    const element = this.dwResponse['00181023'];
    return this.dwResponse['00181023']?.Value[0];
  }

  // Protocol Name
  get ProtocolName(): string | undefined {
    return this.x00181030;
  }

  get x00181030(): string | undefined {
    const element = this.dwResponse['00181030'];
    return this.dwResponse['00181030']?.Value[0];
  }

  // Contrast/Bolus Route
  get ContrastBolusRoute(): string | undefined {
    return this.x00181040;
  }

  get x00181040(): string | undefined {
    const element = this.dwResponse['00181040'];
    return this.dwResponse['00181040']?.Value[0];
  }

  // Contrast/Bolus Volume
  get ContrastBolusVolume(): number | undefined {
    return this.x00181041;
  }

  get x00181041(): number | undefined {
    const element = this.dwResponse['00181041'];
    return this.dwResponse['00181041']?.Value[0];
  }

  // Contrast/Bolus Start Time
  get ContrastBolusStartTime(): string | undefined {
    return this.x00181042;
  }

  get x00181042(): string | undefined {
    const element = this.dwResponse['00181042'];
    return this.dwResponse['00181042']?.Value[0];
  }

  // Contrast/Bolus Stop Time
  get ContrastBolusStopTime(): string | undefined {
    return this.x00181043;
  }

  get x00181043(): string | undefined {
    const element = this.dwResponse['00181043'];
    return this.dwResponse['00181043']?.Value[0];
  }

  // Contrast/Bolus Total Dose
  get ContrastBolusTotalDose(): number | undefined {
    return this.x00181044;
  }

  get x00181044(): number | undefined {
    const element = this.dwResponse['00181044'];
    return this.dwResponse['00181044']?.Value[0];
  }

  // Syringe Counts
  get SyringeCounts(): number | undefined {
    return this.x00181045;
  }

  get x00181045(): number | undefined {
    const element = this.dwResponse['00181045'];
    return this.dwResponse['00181045']?.Value[0];
  }

  // Contrast Flow Rate
  get ContrastFlowRate(): Array<number> | undefined {
    return this.x00181046;
  }

  get x00181046(): Array<number> | undefined {
    const element = this.dwResponse['00181046'];
    return this.dwResponse['00181046']?.Value;
  }

  // Contrast Flow Duration
  get ContrastFlowDuration(): Array<number> | undefined {
    return this.x00181047;
  }

  get x00181047(): Array<number> | undefined {
    const element = this.dwResponse['00181047'];
    return this.dwResponse['00181047']?.Value;
  }

  // Contrast/Bolus Ingredient
  get ContrastBolusIngredient(): string | undefined {
    return this.x00181048;
  }

  get x00181048(): string | undefined {
    const element = this.dwResponse['00181048'];
    return this.dwResponse['00181048']?.Value[0];
  }

  // Contrast/Bolus Ingredient Concentration
  get ContrastBolusIngredientConcentration(): number | undefined {
    return this.x00181049;
  }

  get x00181049(): number | undefined {
    const element = this.dwResponse['00181049'];
    return this.dwResponse['00181049']?.Value[0];
  }

  // Spatial Resolution
  get SpatialResolution(): number | undefined {
    return this.x00181050;
  }

  get x00181050(): number | undefined {
    const element = this.dwResponse['00181050'];
    return this.dwResponse['00181050']?.Value[0];
  }

  // Trigger Time
  get TriggerTime(): number | undefined {
    return this.x00181060;
  }

  get x00181060(): number | undefined {
    const element = this.dwResponse['00181060'];
    return this.dwResponse['00181060']?.Value[0];
  }

  // Trigger Source or Type
  get TriggerSourceOrType(): string | undefined {
    return this.x00181061;
  }

  get x00181061(): string | undefined {
    const element = this.dwResponse['00181061'];
    return this.dwResponse['00181061']?.Value[0];
  }

  // Nominal Interval
  get NominalInterval(): number | undefined {
    return this.x00181062;
  }

  get x00181062(): number | undefined {
    const element = this.dwResponse['00181062'];
    return this.dwResponse['00181062']?.Value[0];
  }

  // Frame Time
  get FrameTime(): number | undefined {
    return this.x00181063;
  }

  get x00181063(): number | undefined {
    const element = this.dwResponse['00181063'];
    return this.dwResponse['00181063']?.Value[0];
  }

  // Cardiac Framing Type
  get CardiacFramingType(): string | undefined {
    return this.x00181064;
  }

  get x00181064(): string | undefined {
    const element = this.dwResponse['00181064'];
    return this.dwResponse['00181064']?.Value[0];
  }

  // Frame Time Vector
  get FrameTimeVector(): Array<number> | undefined {
    return this.x00181065;
  }

  get x00181065(): Array<number> | undefined {
    const element = this.dwResponse['00181065'];
    return this.dwResponse['00181065']?.Value;
  }

  // Frame Delay
  get FrameDelay(): number | undefined {
    return this.x00181066;
  }

  get x00181066(): number | undefined {
    const element = this.dwResponse['00181066'];
    return this.dwResponse['00181066']?.Value[0];
  }

  // Image Trigger Delay
  get ImageTriggerDelay(): number | undefined {
    return this.x00181067;
  }

  get x00181067(): number | undefined {
    const element = this.dwResponse['00181067'];
    return this.dwResponse['00181067']?.Value[0];
  }

  // Multiplex Group Time Offset
  get MultiplexGroupTimeOffset(): number | undefined {
    return this.x00181068;
  }

  get x00181068(): number | undefined {
    const element = this.dwResponse['00181068'];
    return this.dwResponse['00181068']?.Value[0];
  }

  // Trigger Time Offset
  get TriggerTimeOffset(): number | undefined {
    return this.x00181069;
  }

  get x00181069(): number | undefined {
    const element = this.dwResponse['00181069'];
    return this.dwResponse['00181069']?.Value[0];
  }

  // Synchronization Trigger
  get SynchronizationTrigger(): string | undefined {
    return this.x0018106a;
  }

  get x0018106a(): string | undefined {
    const element = this.dwResponse['0018106a'];
    return this.dwResponse['0018106a']?.Value[0];
  }

  // Synchronization Channel
  get SynchronizationChannel(): Array<number> | undefined {
    return this.x0018106c;
  }

  get x0018106c(): Array<number> | undefined {
    const element = this.dwResponse['0018106c'];
    return this.dwResponse['0018106c']?.Value;
  }

  // Trigger Sample Position
  get TriggerSamplePosition(): number | undefined {
    return this.x0018106e;
  }

  get x0018106e(): number | undefined {
    const element = this.dwResponse['0018106e'];
    return this.dwResponse['0018106e']?.Value[0];
  }

  // Radiopharmaceutical Route
  get RadiopharmaceuticalRoute(): string | undefined {
    return this.x00181070;
  }

  get x00181070(): string | undefined {
    const element = this.dwResponse['00181070'];
    return this.dwResponse['00181070']?.Value[0];
  }

  // Radiopharmaceutical Volume
  get RadiopharmaceuticalVolume(): number | undefined {
    return this.x00181071;
  }

  get x00181071(): number | undefined {
    const element = this.dwResponse['00181071'];
    return this.dwResponse['00181071']?.Value[0];
  }

  // Radiopharmaceutical Start Time
  get RadiopharmaceuticalStartTime(): string | undefined {
    return this.x00181072;
  }

  get x00181072(): string | undefined {
    const element = this.dwResponse['00181072'];
    return this.dwResponse['00181072']?.Value[0];
  }

  // Radiopharmaceutical Stop Time
  get RadiopharmaceuticalStopTime(): string | undefined {
    return this.x00181073;
  }

  get x00181073(): string | undefined {
    const element = this.dwResponse['00181073'];
    return this.dwResponse['00181073']?.Value[0];
  }

  // Radionuclide Total Dose
  get RadionuclideTotalDose(): number | undefined {
    return this.x00181074;
  }

  get x00181074(): number | undefined {
    const element = this.dwResponse['00181074'];
    return this.dwResponse['00181074']?.Value[0];
  }

  // Radionuclide Half Life
  get RadionuclideHalfLife(): number | undefined {
    return this.x00181075;
  }

  get x00181075(): number | undefined {
    const element = this.dwResponse['00181075'];
    return this.dwResponse['00181075']?.Value[0];
  }

  // Radionuclide Positron Fraction
  get RadionuclidePositronFraction(): number | undefined {
    return this.x00181076;
  }

  get x00181076(): number | undefined {
    const element = this.dwResponse['00181076'];
    return this.dwResponse['00181076']?.Value[0];
  }

  // Radiopharmaceutical Specific Activity
  get RadiopharmaceuticalSpecificActivity(): number | undefined {
    return this.x00181077;
  }

  get x00181077(): number | undefined {
    const element = this.dwResponse['00181077'];
    return this.dwResponse['00181077']?.Value[0];
  }

  // Radiopharmaceutical Start DateTime
  get RadiopharmaceuticalStartDateTime(): string | undefined {
    return this.x00181078;
  }

  get x00181078(): string | undefined {
    const element = this.dwResponse['00181078'];
    return this.dwResponse['00181078']?.Value[0];
  }

  // Radiopharmaceutical Stop DateTime
  get RadiopharmaceuticalStopDateTime(): string | undefined {
    return this.x00181079;
  }

  get x00181079(): string | undefined {
    const element = this.dwResponse['00181079'];
    return this.dwResponse['00181079']?.Value[0];
  }

  // Beat Rejection Flag
  get BeatRejectionFlag(): string | undefined {
    return this.x00181080;
  }

  get x00181080(): string | undefined {
    const element = this.dwResponse['00181080'];
    return this.dwResponse['00181080']?.Value[0];
  }

  // Low R-R Value
  get LowRRValue(): number | undefined {
    return this.x00181081;
  }

  get x00181081(): number | undefined {
    const element = this.dwResponse['00181081'];
    return this.dwResponse['00181081']?.Value[0];
  }

  // High R-R Value
  get HighRRValue(): number | undefined {
    return this.x00181082;
  }

  get x00181082(): number | undefined {
    const element = this.dwResponse['00181082'];
    return this.dwResponse['00181082']?.Value[0];
  }

  // Intervals Acquired
  get IntervalsAcquired(): number | undefined {
    return this.x00181083;
  }

  get x00181083(): number | undefined {
    const element = this.dwResponse['00181083'];
    return this.dwResponse['00181083']?.Value[0];
  }

  // Intervals Rejected
  get IntervalsRejected(): number | undefined {
    return this.x00181084;
  }

  get x00181084(): number | undefined {
    const element = this.dwResponse['00181084'];
    return this.dwResponse['00181084']?.Value[0];
  }

  // PVC Rejection
  get PVCRejection(): string | undefined {
    return this.x00181085;
  }

  get x00181085(): string | undefined {
    const element = this.dwResponse['00181085'];
    return this.dwResponse['00181085']?.Value[0];
  }

  // Skip Beats
  get SkipBeats(): number | undefined {
    return this.x00181086;
  }

  get x00181086(): number | undefined {
    const element = this.dwResponse['00181086'];
    return this.dwResponse['00181086']?.Value[0];
  }

  // Heart Rate
  get HeartRate(): number | undefined {
    return this.x00181088;
  }

  get x00181088(): number | undefined {
    const element = this.dwResponse['00181088'];
    return this.dwResponse['00181088']?.Value[0];
  }

  // Cardiac Number of Images
  get CardiacNumberOfImages(): number | undefined {
    return this.x00181090;
  }

  get x00181090(): number | undefined {
    const element = this.dwResponse['00181090'];
    return this.dwResponse['00181090']?.Value[0];
  }

  // Trigger Window
  get TriggerWindow(): number | undefined {
    return this.x00181094;
  }

  get x00181094(): number | undefined {
    const element = this.dwResponse['00181094'];
    return this.dwResponse['00181094']?.Value[0];
  }

  // Reconstruction Diameter
  get ReconstructionDiameter(): number | undefined {
    return this.x00181100;
  }

  get x00181100(): number | undefined {
    const element = this.dwResponse['00181100'];
    return this.dwResponse['00181100']?.Value[0];
  }

  // Distance Source to Detector
  get DistanceSourceToDetector(): number | undefined {
    return this.x00181110;
  }

  get x00181110(): number | undefined {
    const element = this.dwResponse['00181110'];
    return this.dwResponse['00181110']?.Value[0];
  }

  // Distance Source to Patient
  get DistanceSourceToPatient(): number | undefined {
    return this.x00181111;
  }

  get x00181111(): number | undefined {
    const element = this.dwResponse['00181111'];
    return this.dwResponse['00181111']?.Value[0];
  }

  // Estimated Radiographic Magnification Factor
  get EstimatedRadiographicMagnificationFactor(): number | undefined {
    return this.x00181114;
  }

  get x00181114(): number | undefined {
    const element = this.dwResponse['00181114'];
    return this.dwResponse['00181114']?.Value[0];
  }

  // Gantry/Detector Tilt
  get GantryDetectorTilt(): number | undefined {
    return this.x00181120;
  }

  get x00181120(): number | undefined {
    const element = this.dwResponse['00181120'];
    return this.dwResponse['00181120']?.Value[0];
  }

  // Gantry/Detector Slew
  get GantryDetectorSlew(): number | undefined {
    return this.x00181121;
  }

  get x00181121(): number | undefined {
    const element = this.dwResponse['00181121'];
    return this.dwResponse['00181121']?.Value[0];
  }

  // Table Height
  get TableHeight(): number | undefined {
    return this.x00181130;
  }

  get x00181130(): number | undefined {
    const element = this.dwResponse['00181130'];
    return this.dwResponse['00181130']?.Value[0];
  }

  // Table Traverse
  get TableTraverse(): number | undefined {
    return this.x00181131;
  }

  get x00181131(): number | undefined {
    const element = this.dwResponse['00181131'];
    return this.dwResponse['00181131']?.Value[0];
  }

  // Table Motion
  get TableMotion(): string | undefined {
    return this.x00181134;
  }

  get x00181134(): string | undefined {
    const element = this.dwResponse['00181134'];
    return this.dwResponse['00181134']?.Value[0];
  }

  // Table Vertical Increment
  get TableVerticalIncrement(): Array<number> | undefined {
    return this.x00181135;
  }

  get x00181135(): Array<number> | undefined {
    const element = this.dwResponse['00181135'];
    return this.dwResponse['00181135']?.Value;
  }

  // Table Lateral Increment
  get TableLateralIncrement(): Array<number> | undefined {
    return this.x00181136;
  }

  get x00181136(): Array<number> | undefined {
    const element = this.dwResponse['00181136'];
    return this.dwResponse['00181136']?.Value;
  }

  // Table Longitudinal Increment
  get TableLongitudinalIncrement(): Array<number> | undefined {
    return this.x00181137;
  }

  get x00181137(): Array<number> | undefined {
    const element = this.dwResponse['00181137'];
    return this.dwResponse['00181137']?.Value;
  }

  // Table Angle
  get TableAngle(): number | undefined {
    return this.x00181138;
  }

  get x00181138(): number | undefined {
    const element = this.dwResponse['00181138'];
    return this.dwResponse['00181138']?.Value[0];
  }

  // Table Type
  get TableType(): string | undefined {
    return this.x0018113a;
  }

  get x0018113a(): string | undefined {
    const element = this.dwResponse['0018113a'];
    return this.dwResponse['0018113a']?.Value[0];
  }

  // Rotation Direction
  get RotationDirection(): string | undefined {
    return this.x00181140;
  }

  get x00181140(): string | undefined {
    const element = this.dwResponse['00181140'];
    return this.dwResponse['00181140']?.Value[0];
  }

  // Angular Position
  get AngularPosition(): number | undefined {
    return this.x00181141;
  }

  get x00181141(): number | undefined {
    const element = this.dwResponse['00181141'];
    return this.dwResponse['00181141']?.Value[0];
  }

  // Radial Position
  get RadialPosition(): Array<number> | undefined {
    return this.x00181142;
  }

  get x00181142(): Array<number> | undefined {
    const element = this.dwResponse['00181142'];
    return this.dwResponse['00181142']?.Value;
  }

  // Scan Arc
  get ScanArc(): number | undefined {
    return this.x00181143;
  }

  get x00181143(): number | undefined {
    const element = this.dwResponse['00181143'];
    return this.dwResponse['00181143']?.Value[0];
  }

  // Angular Step
  get AngularStep(): number | undefined {
    return this.x00181144;
  }

  get x00181144(): number | undefined {
    const element = this.dwResponse['00181144'];
    return this.dwResponse['00181144']?.Value[0];
  }

  // Center of Rotation Offset
  get CenterOfRotationOffset(): number | undefined {
    return this.x00181145;
  }

  get x00181145(): number | undefined {
    const element = this.dwResponse['00181145'];
    return this.dwResponse['00181145']?.Value[0];
  }

  // Rotation Offset
  get RotationOffset(): Array<number> | undefined {
    return this.x00181146;
  }

  get x00181146(): Array<number> | undefined {
    const element = this.dwResponse['00181146'];
    return this.dwResponse['00181146']?.Value;
  }

  // Field of View Shape
  get FieldOfViewShape(): string | undefined {
    return this.x00181147;
  }

  get x00181147(): string | undefined {
    const element = this.dwResponse['00181147'];
    return this.dwResponse['00181147']?.Value[0];
  }

  // Field of View Dimension(s)
  get FieldOfViewDimensions(): Array<number> | undefined {
    return this.x00181149;
  }

  get x00181149(): Array<number> | undefined {
    const element = this.dwResponse['00181149'];
    return this.dwResponse['00181149']?.Value;
  }

  // Exposure Time
  get ExposureTime(): number | undefined {
    return this.x00181150;
  }

  get x00181150(): number | undefined {
    const element = this.dwResponse['00181150'];
    return this.dwResponse['00181150']?.Value[0];
  }

  // X-Ray Tube Current
  get XRayTubeCurrent(): number | undefined {
    return this.x00181151;
  }

  get x00181151(): number | undefined {
    const element = this.dwResponse['00181151'];
    return this.dwResponse['00181151']?.Value[0];
  }

  // Exposure
  get Exposure(): number | undefined {
    return this.x00181152;
  }

  get x00181152(): number | undefined {
    const element = this.dwResponse['00181152'];
    return this.dwResponse['00181152']?.Value[0];
  }

  // Exposure in µAs
  get ExposureInuAs(): number | undefined {
    return this.x00181153;
  }

  get x00181153(): number | undefined {
    const element = this.dwResponse['00181153'];
    return this.dwResponse['00181153']?.Value[0];
  }

  // Average Pulse Width
  get AveragePulseWidth(): number | undefined {
    return this.x00181154;
  }

  get x00181154(): number | undefined {
    const element = this.dwResponse['00181154'];
    return this.dwResponse['00181154']?.Value[0];
  }

  // Radiation Setting
  get RadiationSetting(): string | undefined {
    return this.x00181155;
  }

  get x00181155(): string | undefined {
    const element = this.dwResponse['00181155'];
    return this.dwResponse['00181155']?.Value[0];
  }

  // Rectification Type
  get RectificationType(): string | undefined {
    return this.x00181156;
  }

  get x00181156(): string | undefined {
    const element = this.dwResponse['00181156'];
    return this.dwResponse['00181156']?.Value[0];
  }

  // Radiation Mode
  get RadiationMode(): string | undefined {
    return this.x0018115a;
  }

  get x0018115a(): string | undefined {
    const element = this.dwResponse['0018115a'];
    return this.dwResponse['0018115a']?.Value[0];
  }

  // Image and Fluoroscopy Area Dose Product
  get ImageAndFluoroscopyAreaDoseProduct(): number | undefined {
    return this.x0018115e;
  }

  get x0018115e(): number | undefined {
    const element = this.dwResponse['0018115e'];
    return this.dwResponse['0018115e']?.Value[0];
  }

  // Filter Type
  get FilterType(): string | undefined {
    return this.x00181160;
  }

  get x00181160(): string | undefined {
    const element = this.dwResponse['00181160'];
    return this.dwResponse['00181160']?.Value[0];
  }

  // Type of Filters
  get TypeOfFilters(): Array<string> | undefined {
    return this.x00181161;
  }

  get x00181161(): Array<string> | undefined {
    const element = this.dwResponse['00181161'];
    return this.dwResponse['00181161']?.Value;
  }

  // Intensifier Size
  get IntensifierSize(): number | undefined {
    return this.x00181162;
  }

  get x00181162(): number | undefined {
    const element = this.dwResponse['00181162'];
    return this.dwResponse['00181162']?.Value[0];
  }

  // Imager Pixel Spacing
  get ImagerPixelSpacing(): Array<number> | undefined {
    return this.x00181164;
  }

  get x00181164(): Array<number> | undefined {
    const element = this.dwResponse['00181164'];
    return this.dwResponse['00181164']?.Value;
  }

  // Grid
  get Grid(): Array<string> | undefined {
    return this.x00181166;
  }

  get x00181166(): Array<string> | undefined {
    const element = this.dwResponse['00181166'];
    return this.dwResponse['00181166']?.Value;
  }

  // Generator Power
  get GeneratorPower(): number | undefined {
    return this.x00181170;
  }

  get x00181170(): number | undefined {
    const element = this.dwResponse['00181170'];
    return this.dwResponse['00181170']?.Value[0];
  }

  // Collimator/grid Name
  get CollimatorGridName(): string | undefined {
    return this.x00181180;
  }

  get x00181180(): string | undefined {
    const element = this.dwResponse['00181180'];
    return this.dwResponse['00181180']?.Value[0];
  }

  // Collimator Type
  get CollimatorType(): string | undefined {
    return this.x00181181;
  }

  get x00181181(): string | undefined {
    const element = this.dwResponse['00181181'];
    return this.dwResponse['00181181']?.Value[0];
  }

  // Focal Distance
  get FocalDistance(): Array<number> | undefined {
    return this.x00181182;
  }

  get x00181182(): Array<number> | undefined {
    const element = this.dwResponse['00181182'];
    return this.dwResponse['00181182']?.Value;
  }

  // X Focus Center
  get XFocusCenter(): Array<number> | undefined {
    return this.x00181183;
  }

  get x00181183(): Array<number> | undefined {
    const element = this.dwResponse['00181183'];
    return this.dwResponse['00181183']?.Value;
  }

  // Y Focus Center
  get YFocusCenter(): Array<number> | undefined {
    return this.x00181184;
  }

  get x00181184(): Array<number> | undefined {
    const element = this.dwResponse['00181184'];
    return this.dwResponse['00181184']?.Value;
  }

  // Focal Spot(s)
  get FocalSpots(): Array<number> | undefined {
    return this.x00181190;
  }

  get x00181190(): Array<number> | undefined {
    const element = this.dwResponse['00181190'];
    return this.dwResponse['00181190']?.Value;
  }

  // Anode Target Material
  get AnodeTargetMaterial(): string | undefined {
    return this.x00181191;
  }

  get x00181191(): string | undefined {
    const element = this.dwResponse['00181191'];
    return this.dwResponse['00181191']?.Value[0];
  }

  // Body Part Thickness
  get BodyPartThickness(): number | undefined {
    return this.x001811a0;
  }

  get x001811a0(): number | undefined {
    const element = this.dwResponse['001811a0'];
    return this.dwResponse['001811a0']?.Value[0];
  }

  // Compression Force
  get CompressionForce(): number | undefined {
    return this.x001811a2;
  }

  get x001811a2(): number | undefined {
    const element = this.dwResponse['001811a2'];
    return this.dwResponse['001811a2']?.Value[0];
  }

  // Paddle Description
  get PaddleDescription(): string | undefined {
    return this.x001811a4;
  }

  get x001811a4(): string | undefined {
    const element = this.dwResponse['001811a4'];
    return this.dwResponse['001811a4']?.Value[0];
  }

  // Date of Last Calibration
  get DateOfLastCalibration(): Array<Date> | undefined {
    return this.x00181200;
  }

  get x00181200(): Array<Date> | undefined {
    const element = this.dwResponse['00181200'];
    return this.dwResponse['00181200']?.Value;
  }

  // Time of Last Calibration
  get TimeOfLastCalibration(): Array<string> | undefined {
    return this.x00181201;
  }

  get x00181201(): Array<string> | undefined {
    const element = this.dwResponse['00181201'];
    return this.dwResponse['00181201']?.Value;
  }

  // DateTime of Last Calibration
  get DateTimeOfLastCalibration(): string | undefined {
    return this.x00181202;
  }

  get x00181202(): string | undefined {
    const element = this.dwResponse['00181202'];
    return this.dwResponse['00181202']?.Value[0];
  }

  // Convolution Kernel
  get ConvolutionKernel(): Array<string> | undefined {
    return this.x00181210;
  }

  get x00181210(): Array<string> | undefined {
    const element = this.dwResponse['00181210'];
    return this.dwResponse['00181210']?.Value;
  }

  // Upper/Lower Pixel Values
  get UpperLowerPixelValues(): Array<number> | undefined {
    return this.x00181240;
  }

  get x00181240(): Array<number> | undefined {
    const element = this.dwResponse['00181240'];
    return this.dwResponse['00181240']?.Value;
  }

  // Actual Frame Duration
  get ActualFrameDuration(): number | undefined {
    return this.x00181242;
  }

  get x00181242(): number | undefined {
    const element = this.dwResponse['00181242'];
    return this.dwResponse['00181242']?.Value[0];
  }

  // Count Rate
  get CountRate(): number | undefined {
    return this.x00181243;
  }

  get x00181243(): number | undefined {
    const element = this.dwResponse['00181243'];
    return this.dwResponse['00181243']?.Value[0];
  }

  // Preferred Playback Sequencing
  get PreferredPlaybackSequencing(): number | undefined {
    return this.x00181244;
  }

  get x00181244(): number | undefined {
    const element = this.dwResponse['00181244'];
    return this.dwResponse['00181244']?.Value[0];
  }

  // Receive Coil Name
  get ReceiveCoilName(): string | undefined {
    return this.x00181250;
  }

  get x00181250(): string | undefined {
    const element = this.dwResponse['00181250'];
    return this.dwResponse['00181250']?.Value[0];
  }

  // Transmit Coil Name
  get TransmitCoilName(): string | undefined {
    return this.x00181251;
  }

  get x00181251(): string | undefined {
    const element = this.dwResponse['00181251'];
    return this.dwResponse['00181251']?.Value[0];
  }

  // Plate Type
  get PlateType(): string | undefined {
    return this.x00181260;
  }

  get x00181260(): string | undefined {
    const element = this.dwResponse['00181260'];
    return this.dwResponse['00181260']?.Value[0];
  }

  // Phosphor Type
  get PhosphorType(): string | undefined {
    return this.x00181261;
  }

  get x00181261(): string | undefined {
    const element = this.dwResponse['00181261'];
    return this.dwResponse['00181261']?.Value[0];
  }

  // Scan Velocity
  get ScanVelocity(): number | undefined {
    return this.x00181300;
  }

  get x00181300(): number | undefined {
    const element = this.dwResponse['00181300'];
    return this.dwResponse['00181300']?.Value[0];
  }

  // Whole Body Technique
  get WholeBodyTechnique(): Array<string> | undefined {
    return this.x00181301;
  }

  get x00181301(): Array<string> | undefined {
    const element = this.dwResponse['00181301'];
    return this.dwResponse['00181301']?.Value;
  }

  // Scan Length
  get ScanLength(): number | undefined {
    return this.x00181302;
  }

  get x00181302(): number | undefined {
    const element = this.dwResponse['00181302'];
    return this.dwResponse['00181302']?.Value[0];
  }

  // Acquisition Matrix
  get AcquisitionMatrix(): Array<number> | undefined {
    return this.x00181310;
  }

  get x00181310(): Array<number> | undefined {
    const element = this.dwResponse['00181310'];
    return this.dwResponse['00181310']?.Value;
  }

  // In-plane Phase Encoding Direction
  get InPlanePhaseEncodingDirection(): string | undefined {
    return this.x00181312;
  }

  get x00181312(): string | undefined {
    const element = this.dwResponse['00181312'];
    return this.dwResponse['00181312']?.Value[0];
  }

  // Flip Angle
  get FlipAngle(): number | undefined {
    return this.x00181314;
  }

  get x00181314(): number | undefined {
    const element = this.dwResponse['00181314'];
    return this.dwResponse['00181314']?.Value[0];
  }

  // Variable Flip Angle Flag
  get VariableFlipAngleFlag(): string | undefined {
    return this.x00181315;
  }

  get x00181315(): string | undefined {
    const element = this.dwResponse['00181315'];
    return this.dwResponse['00181315']?.Value[0];
  }

  // SAR
  get SAR(): number | undefined {
    return this.x00181316;
  }

  get x00181316(): number | undefined {
    const element = this.dwResponse['00181316'];
    return this.dwResponse['00181316']?.Value[0];
  }

  // dB/dt
  get dBdt(): number | undefined {
    return this.x00181318;
  }

  get x00181318(): number | undefined {
    const element = this.dwResponse['00181318'];
    return this.dwResponse['00181318']?.Value[0];
  }

  // Acquisition Device Processing Description
  get AcquisitionDeviceProcessingDescription(): string | undefined {
    return this.x00181400;
  }

  get x00181400(): string | undefined {
    const element = this.dwResponse['00181400'];
    return this.dwResponse['00181400']?.Value[0];
  }

  // Acquisition Device Processing Code
  get AcquisitionDeviceProcessingCode(): string | undefined {
    return this.x00181401;
  }

  get x00181401(): string | undefined {
    const element = this.dwResponse['00181401'];
    return this.dwResponse['00181401']?.Value[0];
  }

  // Cassette Orientation
  get CassetteOrientation(): string | undefined {
    return this.x00181402;
  }

  get x00181402(): string | undefined {
    const element = this.dwResponse['00181402'];
    return this.dwResponse['00181402']?.Value[0];
  }

  // Cassette Size
  get CassetteSize(): string | undefined {
    return this.x00181403;
  }

  get x00181403(): string | undefined {
    const element = this.dwResponse['00181403'];
    return this.dwResponse['00181403']?.Value[0];
  }

  // Exposures on Plate
  get ExposuresOnPlate(): number | undefined {
    return this.x00181404;
  }

  get x00181404(): number | undefined {
    const element = this.dwResponse['00181404'];
    return this.dwResponse['00181404']?.Value[0];
  }

  // Relative X-Ray Exposure
  get RelativeXRayExposure(): number | undefined {
    return this.x00181405;
  }

  get x00181405(): number | undefined {
    const element = this.dwResponse['00181405'];
    return this.dwResponse['00181405']?.Value[0];
  }

  // Exposure Index
  get ExposureIndex(): number | undefined {
    return this.x00181411;
  }

  get x00181411(): number | undefined {
    const element = this.dwResponse['00181411'];
    return this.dwResponse['00181411']?.Value[0];
  }

  // Target Exposure Index
  get TargetExposureIndex(): number | undefined {
    return this.x00181412;
  }

  get x00181412(): number | undefined {
    const element = this.dwResponse['00181412'];
    return this.dwResponse['00181412']?.Value[0];
  }

  // Deviation Index
  get DeviationIndex(): number | undefined {
    return this.x00181413;
  }

  get x00181413(): number | undefined {
    const element = this.dwResponse['00181413'];
    return this.dwResponse['00181413']?.Value[0];
  }

  // Column Angulation
  get ColumnAngulation(): number | undefined {
    return this.x00181450;
  }

  get x00181450(): number | undefined {
    const element = this.dwResponse['00181450'];
    return this.dwResponse['00181450']?.Value[0];
  }

  // Tomo Layer Height
  get TomoLayerHeight(): number | undefined {
    return this.x00181460;
  }

  get x00181460(): number | undefined {
    const element = this.dwResponse['00181460'];
    return this.dwResponse['00181460']?.Value[0];
  }

  // Tomo Angle
  get TomoAngle(): number | undefined {
    return this.x00181470;
  }

  get x00181470(): number | undefined {
    const element = this.dwResponse['00181470'];
    return this.dwResponse['00181470']?.Value[0];
  }

  // Tomo Time
  get TomoTime(): number | undefined {
    return this.x00181480;
  }

  get x00181480(): number | undefined {
    const element = this.dwResponse['00181480'];
    return this.dwResponse['00181480']?.Value[0];
  }

  // Tomo Type
  get TomoType(): string | undefined {
    return this.x00181490;
  }

  get x00181490(): string | undefined {
    const element = this.dwResponse['00181490'];
    return this.dwResponse['00181490']?.Value[0];
  }

  // Tomo Class
  get TomoClass(): string | undefined {
    return this.x00181491;
  }

  get x00181491(): string | undefined {
    const element = this.dwResponse['00181491'];
    return this.dwResponse['00181491']?.Value[0];
  }

  // Number of Tomosynthesis Source Images
  get NumberOfTomosynthesisSourceImages(): number | undefined {
    return this.x00181495;
  }

  get x00181495(): number | undefined {
    const element = this.dwResponse['00181495'];
    return this.dwResponse['00181495']?.Value[0];
  }

  // Positioner Motion
  get PositionerMotion(): string | undefined {
    return this.x00181500;
  }

  get x00181500(): string | undefined {
    const element = this.dwResponse['00181500'];
    return this.dwResponse['00181500']?.Value[0];
  }

  // Positioner Type
  get PositionerType(): string | undefined {
    return this.x00181508;
  }

  get x00181508(): string | undefined {
    const element = this.dwResponse['00181508'];
    return this.dwResponse['00181508']?.Value[0];
  }

  // Positioner Primary Angle
  get PositionerPrimaryAngle(): number | undefined {
    return this.x00181510;
  }

  get x00181510(): number | undefined {
    const element = this.dwResponse['00181510'];
    return this.dwResponse['00181510']?.Value[0];
  }

  // Positioner Secondary Angle
  get PositionerSecondaryAngle(): number | undefined {
    return this.x00181511;
  }

  get x00181511(): number | undefined {
    const element = this.dwResponse['00181511'];
    return this.dwResponse['00181511']?.Value[0];
  }

  // Positioner Primary Angle Increment
  get PositionerPrimaryAngleIncrement(): Array<number> | undefined {
    return this.x00181520;
  }

  get x00181520(): Array<number> | undefined {
    const element = this.dwResponse['00181520'];
    return this.dwResponse['00181520']?.Value;
  }

  // Positioner Secondary Angle Increment
  get PositionerSecondaryAngleIncrement(): Array<number> | undefined {
    return this.x00181521;
  }

  get x00181521(): Array<number> | undefined {
    const element = this.dwResponse['00181521'];
    return this.dwResponse['00181521']?.Value;
  }

  // Detector Primary Angle
  get DetectorPrimaryAngle(): number | undefined {
    return this.x00181530;
  }

  get x00181530(): number | undefined {
    const element = this.dwResponse['00181530'];
    return this.dwResponse['00181530']?.Value[0];
  }

  // Detector Secondary Angle
  get DetectorSecondaryAngle(): number | undefined {
    return this.x00181531;
  }

  get x00181531(): number | undefined {
    const element = this.dwResponse['00181531'];
    return this.dwResponse['00181531']?.Value[0];
  }

  // Shutter Shape
  get ShutterShape(): Array<string> | undefined {
    return this.x00181600;
  }

  get x00181600(): Array<string> | undefined {
    const element = this.dwResponse['00181600'];
    return this.dwResponse['00181600']?.Value;
  }

  // Shutter Left Vertical Edge
  get ShutterLeftVerticalEdge(): number | undefined {
    return this.x00181602;
  }

  get x00181602(): number | undefined {
    const element = this.dwResponse['00181602'];
    return this.dwResponse['00181602']?.Value[0];
  }

  // Shutter Right Vertical Edge
  get ShutterRightVerticalEdge(): number | undefined {
    return this.x00181604;
  }

  get x00181604(): number | undefined {
    const element = this.dwResponse['00181604'];
    return this.dwResponse['00181604']?.Value[0];
  }

  // Shutter Upper Horizontal Edge
  get ShutterUpperHorizontalEdge(): number | undefined {
    return this.x00181606;
  }

  get x00181606(): number | undefined {
    const element = this.dwResponse['00181606'];
    return this.dwResponse['00181606']?.Value[0];
  }

  // Shutter Lower Horizontal Edge
  get ShutterLowerHorizontalEdge(): number | undefined {
    return this.x00181608;
  }

  get x00181608(): number | undefined {
    const element = this.dwResponse['00181608'];
    return this.dwResponse['00181608']?.Value[0];
  }

  // Center of Circular Shutter
  get CenterOfCircularShutter(): Array<number> | undefined {
    return this.x00181610;
  }

  get x00181610(): Array<number> | undefined {
    const element = this.dwResponse['00181610'];
    return this.dwResponse['00181610']?.Value;
  }

  // Radius of Circular Shutter
  get RadiusOfCircularShutter(): number | undefined {
    return this.x00181612;
  }

  get x00181612(): number | undefined {
    const element = this.dwResponse['00181612'];
    return this.dwResponse['00181612']?.Value[0];
  }

  // Vertices of the Polygonal Shutter
  get VerticesOfThePolygonalShutter(): Array<number> | undefined {
    return this.x00181620;
  }

  get x00181620(): Array<number> | undefined {
    const element = this.dwResponse['00181620'];
    return this.dwResponse['00181620']?.Value;
  }

  // Shutter Presentation Value
  get ShutterPresentationValue(): number | undefined {
    return this.x00181622;
  }

  get x00181622(): number | undefined {
    const element = this.dwResponse['00181622'];
    return this.dwResponse['00181622']?.Value[0];
  }

  // Shutter Overlay Group
  get ShutterOverlayGroup(): number | undefined {
    return this.x00181623;
  }

  get x00181623(): number | undefined {
    const element = this.dwResponse['00181623'];
    return this.dwResponse['00181623']?.Value[0];
  }

  // Shutter Presentation Color CIELab Value
  get ShutterPresentationColorCIELabValue(): Array<number> | undefined {
    return this.x00181624;
  }

  get x00181624(): Array<number> | undefined {
    const element = this.dwResponse['00181624'];
    return this.dwResponse['00181624']?.Value;
  }

  // Collimator Shape
  get CollimatorShape(): Array<string> | undefined {
    return this.x00181700;
  }

  get x00181700(): Array<string> | undefined {
    const element = this.dwResponse['00181700'];
    return this.dwResponse['00181700']?.Value;
  }

  // Collimator Left Vertical Edge
  get CollimatorLeftVerticalEdge(): number | undefined {
    return this.x00181702;
  }

  get x00181702(): number | undefined {
    const element = this.dwResponse['00181702'];
    return this.dwResponse['00181702']?.Value[0];
  }

  // Collimator Right Vertical Edge
  get CollimatorRightVerticalEdge(): number | undefined {
    return this.x00181704;
  }

  get x00181704(): number | undefined {
    const element = this.dwResponse['00181704'];
    return this.dwResponse['00181704']?.Value[0];
  }

  // Collimator Upper Horizontal Edge
  get CollimatorUpperHorizontalEdge(): number | undefined {
    return this.x00181706;
  }

  get x00181706(): number | undefined {
    const element = this.dwResponse['00181706'];
    return this.dwResponse['00181706']?.Value[0];
  }

  // Collimator Lower Horizontal Edge
  get CollimatorLowerHorizontalEdge(): number | undefined {
    return this.x00181708;
  }

  get x00181708(): number | undefined {
    const element = this.dwResponse['00181708'];
    return this.dwResponse['00181708']?.Value[0];
  }

  // Center of Circular Collimator
  get CenterOfCircularCollimator(): Array<number> | undefined {
    return this.x00181710;
  }

  get x00181710(): Array<number> | undefined {
    const element = this.dwResponse['00181710'];
    return this.dwResponse['00181710']?.Value;
  }

  // Radius of Circular Collimator
  get RadiusOfCircularCollimator(): number | undefined {
    return this.x00181712;
  }

  get x00181712(): number | undefined {
    const element = this.dwResponse['00181712'];
    return this.dwResponse['00181712']?.Value[0];
  }

  // Vertices of the Polygonal Collimator
  get VerticesOfThePolygonalCollimator(): Array<number> | undefined {
    return this.x00181720;
  }

  get x00181720(): Array<number> | undefined {
    const element = this.dwResponse['00181720'];
    return this.dwResponse['00181720']?.Value;
  }

  // Acquisition Time Synchronized
  get AcquisitionTimeSynchronized(): string | undefined {
    return this.x00181800;
  }

  get x00181800(): string | undefined {
    const element = this.dwResponse['00181800'];
    return this.dwResponse['00181800']?.Value[0];
  }

  // Time Source
  get TimeSource(): string | undefined {
    return this.x00181801;
  }

  get x00181801(): string | undefined {
    const element = this.dwResponse['00181801'];
    return this.dwResponse['00181801']?.Value[0];
  }

  // Time Distribution Protocol
  get TimeDistributionProtocol(): string | undefined {
    return this.x00181802;
  }

  get x00181802(): string | undefined {
    const element = this.dwResponse['00181802'];
    return this.dwResponse['00181802']?.Value[0];
  }

  // NTP Source Address
  get NTPSourceAddress(): string | undefined {
    return this.x00181803;
  }

  get x00181803(): string | undefined {
    const element = this.dwResponse['00181803'];
    return this.dwResponse['00181803']?.Value[0];
  }

  // Page Number Vector
  get PageNumberVector(): Array<number> | undefined {
    return this.x00182001;
  }

  get x00182001(): Array<number> | undefined {
    const element = this.dwResponse['00182001'];
    return this.dwResponse['00182001']?.Value;
  }

  // Frame Label Vector
  get FrameLabelVector(): Array<string> | undefined {
    return this.x00182002;
  }

  get x00182002(): Array<string> | undefined {
    const element = this.dwResponse['00182002'];
    return this.dwResponse['00182002']?.Value;
  }

  // Frame Primary Angle Vector
  get FramePrimaryAngleVector(): Array<number> | undefined {
    return this.x00182003;
  }

  get x00182003(): Array<number> | undefined {
    const element = this.dwResponse['00182003'];
    return this.dwResponse['00182003']?.Value;
  }

  // Frame Secondary Angle Vector
  get FrameSecondaryAngleVector(): Array<number> | undefined {
    return this.x00182004;
  }

  get x00182004(): Array<number> | undefined {
    const element = this.dwResponse['00182004'];
    return this.dwResponse['00182004']?.Value;
  }

  // Slice Location Vector
  get SliceLocationVector(): Array<number> | undefined {
    return this.x00182005;
  }

  get x00182005(): Array<number> | undefined {
    const element = this.dwResponse['00182005'];
    return this.dwResponse['00182005']?.Value;
  }

  // Display Window Label Vector
  get DisplayWindowLabelVector(): Array<string> | undefined {
    return this.x00182006;
  }

  get x00182006(): Array<string> | undefined {
    const element = this.dwResponse['00182006'];
    return this.dwResponse['00182006']?.Value;
  }

  // Nominal Scanned Pixel Spacing
  get NominalScannedPixelSpacing(): Array<number> | undefined {
    return this.x00182010;
  }

  get x00182010(): Array<number> | undefined {
    const element = this.dwResponse['00182010'];
    return this.dwResponse['00182010']?.Value;
  }

  // Digitizing Device Transport Direction
  get DigitizingDeviceTransportDirection(): string | undefined {
    return this.x00182020;
  }

  get x00182020(): string | undefined {
    const element = this.dwResponse['00182020'];
    return this.dwResponse['00182020']?.Value[0];
  }

  // Rotation of Scanned Film
  get RotationOfScannedFilm(): number | undefined {
    return this.x00182030;
  }

  get x00182030(): number | undefined {
    const element = this.dwResponse['00182030'];
    return this.dwResponse['00182030']?.Value[0];
  }

  // Biopsy Target Sequence
  get BiopsyTargetSequence(): Array<Dataset> | undefined {
    return this.x00182041;
  }

  get x00182041(): Array<Dataset> | undefined {
    const element = this.dwResponse['00182041'];
    return this.dwResponse['00182041']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Target UID
  get TargetUID(): string | undefined {
    return this.x00182042;
  }

  get x00182042(): string | undefined {
    const element = this.dwResponse['00182042'];
    return this.dwResponse['00182042']?.Value[0];
  }

  // Localizing Cursor Position
  get LocalizingCursorPosition(): Array<number> | undefined {
    return this.x00182043;
  }

  get x00182043(): Array<number> | undefined {
    const element = this.dwResponse['00182043'];
    return this.dwResponse['00182043']?.Value;
  }

  // Calculated Target Position
  get CalculatedTargetPosition(): Array<number> | undefined {
    return this.x00182044;
  }

  get x00182044(): Array<number> | undefined {
    const element = this.dwResponse['00182044'];
    return this.dwResponse['00182044']?.Value;
  }

  // Target Label
  get TargetLabel(): string | undefined {
    return this.x00182045;
  }

  get x00182045(): string | undefined {
    const element = this.dwResponse['00182045'];
    return this.dwResponse['00182045']?.Value[0];
  }

  // Displayed Z Value
  get DisplayedZValue(): number | undefined {
    return this.x00182046;
  }

  get x00182046(): number | undefined {
    const element = this.dwResponse['00182046'];
    return this.dwResponse['00182046']?.Value[0];
  }

  // IVUS Acquisition
  get IVUSAcquisition(): string | undefined {
    return this.x00183100;
  }

  get x00183100(): string | undefined {
    const element = this.dwResponse['00183100'];
    return this.dwResponse['00183100']?.Value[0];
  }

  // IVUS Pullback Rate
  get IVUSPullbackRate(): number | undefined {
    return this.x00183101;
  }

  get x00183101(): number | undefined {
    const element = this.dwResponse['00183101'];
    return this.dwResponse['00183101']?.Value[0];
  }

  // IVUS Gated Rate
  get IVUSGatedRate(): number | undefined {
    return this.x00183102;
  }

  get x00183102(): number | undefined {
    const element = this.dwResponse['00183102'];
    return this.dwResponse['00183102']?.Value[0];
  }

  // IVUS Pullback Start Frame Number
  get IVUSPullbackStartFrameNumber(): number | undefined {
    return this.x00183103;
  }

  get x00183103(): number | undefined {
    const element = this.dwResponse['00183103'];
    return this.dwResponse['00183103']?.Value[0];
  }

  // IVUS Pullback Stop Frame Number
  get IVUSPullbackStopFrameNumber(): number | undefined {
    return this.x00183104;
  }

  get x00183104(): number | undefined {
    const element = this.dwResponse['00183104'];
    return this.dwResponse['00183104']?.Value[0];
  }

  // Lesion Number
  get LesionNumber(): Array<number> | undefined {
    return this.x00183105;
  }

  get x00183105(): Array<number> | undefined {
    const element = this.dwResponse['00183105'];
    return this.dwResponse['00183105']?.Value;
  }

  // Output Power
  get OutputPower(): Array<string> | undefined {
    return this.x00185000;
  }

  get x00185000(): Array<string> | undefined {
    const element = this.dwResponse['00185000'];
    return this.dwResponse['00185000']?.Value;
  }

  // Transducer Data
  get TransducerData(): Array<string> | undefined {
    return this.x00185010;
  }

  get x00185010(): Array<string> | undefined {
    const element = this.dwResponse['00185010'];
    return this.dwResponse['00185010']?.Value;
  }

  // Focus Depth
  get FocusDepth(): number | undefined {
    return this.x00185012;
  }

  get x00185012(): number | undefined {
    const element = this.dwResponse['00185012'];
    return this.dwResponse['00185012']?.Value[0];
  }

  // Processing Function
  get ProcessingFunction(): string | undefined {
    return this.x00185020;
  }

  get x00185020(): string | undefined {
    const element = this.dwResponse['00185020'];
    return this.dwResponse['00185020']?.Value[0];
  }

  // Postprocessing Function
  get PostprocessingFunction(): string | undefined {
    return this.x00185021;
  }

  get x00185021(): string | undefined {
    const element = this.dwResponse['00185021'];
    return this.dwResponse['00185021']?.Value[0];
  }

  // Mechanical Index
  get MechanicalIndex(): number | undefined {
    return this.x00185022;
  }

  get x00185022(): number | undefined {
    const element = this.dwResponse['00185022'];
    return this.dwResponse['00185022']?.Value[0];
  }

  // Bone Thermal Index
  get BoneThermalIndex(): number | undefined {
    return this.x00185024;
  }

  get x00185024(): number | undefined {
    const element = this.dwResponse['00185024'];
    return this.dwResponse['00185024']?.Value[0];
  }

  // Cranial Thermal Index
  get CranialThermalIndex(): number | undefined {
    return this.x00185026;
  }

  get x00185026(): number | undefined {
    const element = this.dwResponse['00185026'];
    return this.dwResponse['00185026']?.Value[0];
  }

  // Soft Tissue Thermal Index
  get SoftTissueThermalIndex(): number | undefined {
    return this.x00185027;
  }

  get x00185027(): number | undefined {
    const element = this.dwResponse['00185027'];
    return this.dwResponse['00185027']?.Value[0];
  }

  // Soft Tissue-focus Thermal Index
  get SoftTissueFocusThermalIndex(): number | undefined {
    return this.x00185028;
  }

  get x00185028(): number | undefined {
    const element = this.dwResponse['00185028'];
    return this.dwResponse['00185028']?.Value[0];
  }

  // Soft Tissue-surface Thermal Index
  get SoftTissueSurfaceThermalIndex(): number | undefined {
    return this.x00185029;
  }

  get x00185029(): number | undefined {
    const element = this.dwResponse['00185029'];
    return this.dwResponse['00185029']?.Value[0];
  }

  // Dynamic Range
  get DynamicRange(): number | undefined {
    return this.x00185030;
  }

  get x00185030(): number | undefined {
    const element = this.dwResponse['00185030'];
    return this.dwResponse['00185030']?.Value[0];
  }

  // Total Gain
  get TotalGain(): number | undefined {
    return this.x00185040;
  }

  get x00185040(): number | undefined {
    const element = this.dwResponse['00185040'];
    return this.dwResponse['00185040']?.Value[0];
  }

  // Depth of Scan Field
  get DepthOfScanField(): number | undefined {
    return this.x00185050;
  }

  get x00185050(): number | undefined {
    const element = this.dwResponse['00185050'];
    return this.dwResponse['00185050']?.Value[0];
  }

  // Patient Position
  get PatientPosition(): string | undefined {
    return this.x00185100;
  }

  get x00185100(): string | undefined {
    const element = this.dwResponse['00185100'];
    return this.dwResponse['00185100']?.Value[0];
  }

  // View Position
  get ViewPosition(): string | undefined {
    return this.x00185101;
  }

  get x00185101(): string | undefined {
    const element = this.dwResponse['00185101'];
    return this.dwResponse['00185101']?.Value[0];
  }

  // Projection Eponymous Name Code Sequence
  get ProjectionEponymousNameCodeSequence(): Array<Dataset> | undefined {
    return this.x00185104;
  }

  get x00185104(): Array<Dataset> | undefined {
    const element = this.dwResponse['00185104'];
    return this.dwResponse['00185104']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Image Transformation Matrix
  get ImageTransformationMatrix(): Array<number> | undefined {
    return this.x00185210;
  }

  get x00185210(): Array<number> | undefined {
    const element = this.dwResponse['00185210'];
    return this.dwResponse['00185210']?.Value;
  }

  // Image Translation Vector
  get ImageTranslationVector(): Array<number> | undefined {
    return this.x00185212;
  }

  get x00185212(): Array<number> | undefined {
    const element = this.dwResponse['00185212'];
    return this.dwResponse['00185212']?.Value;
  }

  // Sensitivity
  get Sensitivity(): number | undefined {
    return this.x00186000;
  }

  get x00186000(): number | undefined {
    const element = this.dwResponse['00186000'];
    return this.dwResponse['00186000']?.Value[0];
  }

  // Sequence of Ultrasound Regions
  get SequenceOfUltrasoundRegions(): Array<Dataset> | undefined {
    return this.x00186011;
  }

  get x00186011(): Array<Dataset> | undefined {
    const element = this.dwResponse['00186011'];
    return this.dwResponse['00186011']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Region Spatial Format
  get RegionSpatialFormat(): number | undefined {
    return this.x00186012;
  }

  get x00186012(): number | undefined {
    const element = this.dwResponse['00186012'];
    return this.dwResponse['00186012']?.Value[0];
  }

  // Region Data Type
  get RegionDataType(): number | undefined {
    return this.x00186014;
  }

  get x00186014(): number | undefined {
    const element = this.dwResponse['00186014'];
    return this.dwResponse['00186014']?.Value[0];
  }

  // Region Flags
  get RegionFlags(): number | undefined {
    return this.x00186016;
  }

  get x00186016(): number | undefined {
    const element = this.dwResponse['00186016'];
    return this.dwResponse['00186016']?.Value[0];
  }

  // Region Location Min X0
  get RegionLocationMinX0(): number | undefined {
    return this.x00186018;
  }

  get x00186018(): number | undefined {
    const element = this.dwResponse['00186018'];
    return this.dwResponse['00186018']?.Value[0];
  }

  // Region Location Min Y0
  get RegionLocationMinY0(): number | undefined {
    return this.x0018601a;
  }

  get x0018601a(): number | undefined {
    const element = this.dwResponse['0018601a'];
    return this.dwResponse['0018601a']?.Value[0];
  }

  // Region Location Max X1
  get RegionLocationMaxX1(): number | undefined {
    return this.x0018601c;
  }

  get x0018601c(): number | undefined {
    const element = this.dwResponse['0018601c'];
    return this.dwResponse['0018601c']?.Value[0];
  }

  // Region Location Max Y1
  get RegionLocationMaxY1(): number | undefined {
    return this.x0018601e;
  }

  get x0018601e(): number | undefined {
    const element = this.dwResponse['0018601e'];
    return this.dwResponse['0018601e']?.Value[0];
  }

  // Reference Pixel X0
  get ReferencePixelX0(): number | undefined {
    return this.x00186020;
  }

  get x00186020(): number | undefined {
    const element = this.dwResponse['00186020'];
    return this.dwResponse['00186020']?.Value[0];
  }

  // Reference Pixel Y0
  get ReferencePixelY0(): number | undefined {
    return this.x00186022;
  }

  get x00186022(): number | undefined {
    const element = this.dwResponse['00186022'];
    return this.dwResponse['00186022']?.Value[0];
  }

  // Physical Units X Direction
  get PhysicalUnitsXDirection(): number | undefined {
    return this.x00186024;
  }

  get x00186024(): number | undefined {
    const element = this.dwResponse['00186024'];
    return this.dwResponse['00186024']?.Value[0];
  }

  // Physical Units Y Direction
  get PhysicalUnitsYDirection(): number | undefined {
    return this.x00186026;
  }

  get x00186026(): number | undefined {
    const element = this.dwResponse['00186026'];
    return this.dwResponse['00186026']?.Value[0];
  }

  // Reference Pixel Physical Value X
  get ReferencePixelPhysicalValueX(): number | undefined {
    return this.x00186028;
  }

  get x00186028(): number | undefined {
    const element = this.dwResponse['00186028'];
    return this.dwResponse['00186028']?.Value[0];
  }

  // Reference Pixel Physical Value Y
  get ReferencePixelPhysicalValueY(): number | undefined {
    return this.x0018602a;
  }

  get x0018602a(): number | undefined {
    const element = this.dwResponse['0018602a'];
    return this.dwResponse['0018602a']?.Value[0];
  }

  // Physical Delta X
  get PhysicalDeltaX(): number | undefined {
    return this.x0018602c;
  }

  get x0018602c(): number | undefined {
    const element = this.dwResponse['0018602c'];
    return this.dwResponse['0018602c']?.Value[0];
  }

  // Physical Delta Y
  get PhysicalDeltaY(): number | undefined {
    return this.x0018602e;
  }

  get x0018602e(): number | undefined {
    const element = this.dwResponse['0018602e'];
    return this.dwResponse['0018602e']?.Value[0];
  }

  // Transducer Frequency
  get TransducerFrequency(): number | undefined {
    return this.x00186030;
  }

  get x00186030(): number | undefined {
    const element = this.dwResponse['00186030'];
    return this.dwResponse['00186030']?.Value[0];
  }

  // Transducer Type
  get TransducerType(): string | undefined {
    return this.x00186031;
  }

  get x00186031(): string | undefined {
    const element = this.dwResponse['00186031'];
    return this.dwResponse['00186031']?.Value[0];
  }

  // Pulse Repetition Frequency
  get PulseRepetitionFrequency(): number | undefined {
    return this.x00186032;
  }

  get x00186032(): number | undefined {
    const element = this.dwResponse['00186032'];
    return this.dwResponse['00186032']?.Value[0];
  }

  // Doppler Correction Angle
  get DopplerCorrectionAngle(): number | undefined {
    return this.x00186034;
  }

  get x00186034(): number | undefined {
    const element = this.dwResponse['00186034'];
    return this.dwResponse['00186034']?.Value[0];
  }

  // Steering Angle
  get SteeringAngle(): number | undefined {
    return this.x00186036;
  }

  get x00186036(): number | undefined {
    const element = this.dwResponse['00186036'];
    return this.dwResponse['00186036']?.Value[0];
  }

  // Doppler Sample Volume X Position (Retired)
  get DopplerSampleVolumeXPositionRetired(): number | undefined {
    return this.x00186038;
  }

  get x00186038(): number | undefined {
    const element = this.dwResponse['00186038'];
    return this.dwResponse['00186038']?.Value[0];
  }

  // Doppler Sample Volume X Position
  get DopplerSampleVolumeXPosition(): number | undefined {
    return this.x00186039;
  }

  get x00186039(): number | undefined {
    const element = this.dwResponse['00186039'];
    return this.dwResponse['00186039']?.Value[0];
  }

  // Doppler Sample Volume Y Position (Retired)
  get DopplerSampleVolumeYPositionRetired(): number | undefined {
    return this.x0018603a;
  }

  get x0018603a(): number | undefined {
    const element = this.dwResponse['0018603a'];
    return this.dwResponse['0018603a']?.Value[0];
  }

  // Doppler Sample Volume Y Position
  get DopplerSampleVolumeYPosition(): number | undefined {
    return this.x0018603b;
  }

  get x0018603b(): number | undefined {
    const element = this.dwResponse['0018603b'];
    return this.dwResponse['0018603b']?.Value[0];
  }

  // TM-Line Position X0 (Retired)
  get TMLinePositionX0Retired(): number | undefined {
    return this.x0018603c;
  }

  get x0018603c(): number | undefined {
    const element = this.dwResponse['0018603c'];
    return this.dwResponse['0018603c']?.Value[0];
  }

  // TM-Line Position X0
  get TMLinePositionX0(): number | undefined {
    return this.x0018603d;
  }

  get x0018603d(): number | undefined {
    const element = this.dwResponse['0018603d'];
    return this.dwResponse['0018603d']?.Value[0];
  }

  // TM-Line Position Y0 (Retired)
  get TMLinePositionY0Retired(): number | undefined {
    return this.x0018603e;
  }

  get x0018603e(): number | undefined {
    const element = this.dwResponse['0018603e'];
    return this.dwResponse['0018603e']?.Value[0];
  }

  // TM-Line Position Y0
  get TMLinePositionY0(): number | undefined {
    return this.x0018603f;
  }

  get x0018603f(): number | undefined {
    const element = this.dwResponse['0018603f'];
    return this.dwResponse['0018603f']?.Value[0];
  }

  // TM-Line Position X1 (Retired)
  get TMLinePositionX1Retired(): number | undefined {
    return this.x00186040;
  }

  get x00186040(): number | undefined {
    const element = this.dwResponse['00186040'];
    return this.dwResponse['00186040']?.Value[0];
  }

  // TM-Line Position X1
  get TMLinePositionX1(): number | undefined {
    return this.x00186041;
  }

  get x00186041(): number | undefined {
    const element = this.dwResponse['00186041'];
    return this.dwResponse['00186041']?.Value[0];
  }

  // TM-Line Position Y1 (Retired)
  get TMLinePositionY1Retired(): number | undefined {
    return this.x00186042;
  }

  get x00186042(): number | undefined {
    const element = this.dwResponse['00186042'];
    return this.dwResponse['00186042']?.Value[0];
  }

  // TM-Line Position Y1
  get TMLinePositionY1(): number | undefined {
    return this.x00186043;
  }

  get x00186043(): number | undefined {
    const element = this.dwResponse['00186043'];
    return this.dwResponse['00186043']?.Value[0];
  }

  // Pixel Component Organization
  get PixelComponentOrganization(): number | undefined {
    return this.x00186044;
  }

  get x00186044(): number | undefined {
    const element = this.dwResponse['00186044'];
    return this.dwResponse['00186044']?.Value[0];
  }

  // Pixel Component Mask
  get PixelComponentMask(): number | undefined {
    return this.x00186046;
  }

  get x00186046(): number | undefined {
    const element = this.dwResponse['00186046'];
    return this.dwResponse['00186046']?.Value[0];
  }

  // Pixel Component Range Start
  get PixelComponentRangeStart(): number | undefined {
    return this.x00186048;
  }

  get x00186048(): number | undefined {
    const element = this.dwResponse['00186048'];
    return this.dwResponse['00186048']?.Value[0];
  }

  // Pixel Component Range Stop
  get PixelComponentRangeStop(): number | undefined {
    return this.x0018604a;
  }

  get x0018604a(): number | undefined {
    const element = this.dwResponse['0018604a'];
    return this.dwResponse['0018604a']?.Value[0];
  }

  // Pixel Component Physical Units
  get PixelComponentPhysicalUnits(): number | undefined {
    return this.x0018604c;
  }

  get x0018604c(): number | undefined {
    const element = this.dwResponse['0018604c'];
    return this.dwResponse['0018604c']?.Value[0];
  }

  // Pixel Component Data Type
  get PixelComponentDataType(): number | undefined {
    return this.x0018604e;
  }

  get x0018604e(): number | undefined {
    const element = this.dwResponse['0018604e'];
    return this.dwResponse['0018604e']?.Value[0];
  }

  // Number of Table Break Points
  get NumberOfTableBreakPoints(): number | undefined {
    return this.x00186050;
  }

  get x00186050(): number | undefined {
    const element = this.dwResponse['00186050'];
    return this.dwResponse['00186050']?.Value[0];
  }

  // Table of X Break Points
  get TableOfXBreakPoints(): Array<number> | undefined {
    return this.x00186052;
  }

  get x00186052(): Array<number> | undefined {
    const element = this.dwResponse['00186052'];
    return this.dwResponse['00186052']?.Value;
  }

  // Table of Y Break Points
  get TableOfYBreakPoints(): Array<number> | undefined {
    return this.x00186054;
  }

  get x00186054(): Array<number> | undefined {
    const element = this.dwResponse['00186054'];
    return this.dwResponse['00186054']?.Value;
  }

  // Number of Table Entries
  get NumberOfTableEntries(): number | undefined {
    return this.x00186056;
  }

  get x00186056(): number | undefined {
    const element = this.dwResponse['00186056'];
    return this.dwResponse['00186056']?.Value[0];
  }

  // Table of Pixel Values
  get TableOfPixelValues(): Array<number> | undefined {
    return this.x00186058;
  }

  get x00186058(): Array<number> | undefined {
    const element = this.dwResponse['00186058'];
    return this.dwResponse['00186058']?.Value;
  }

  // Table of Parameter Values
  get TableOfParameterValues(): Array<number> | undefined {
    return this.x0018605a;
  }

  get x0018605a(): Array<number> | undefined {
    const element = this.dwResponse['0018605a'];
    return this.dwResponse['0018605a']?.Value;
  }

  // R Wave Time Vector
  get RWaveTimeVector(): Array<number> | undefined {
    return this.x00186060;
  }

  get x00186060(): Array<number> | undefined {
    const element = this.dwResponse['00186060'];
    return this.dwResponse['00186060']?.Value;
  }

  // Detector Conditions Nominal Flag
  get DetectorConditionsNominalFlag(): string | undefined {
    return this.x00187000;
  }

  get x00187000(): string | undefined {
    const element = this.dwResponse['00187000'];
    return this.dwResponse['00187000']?.Value[0];
  }

  // Detector Temperature
  get DetectorTemperature(): number | undefined {
    return this.x00187001;
  }

  get x00187001(): number | undefined {
    const element = this.dwResponse['00187001'];
    return this.dwResponse['00187001']?.Value[0];
  }

  // Detector Type
  get DetectorType(): string | undefined {
    return this.x00187004;
  }

  get x00187004(): string | undefined {
    const element = this.dwResponse['00187004'];
    return this.dwResponse['00187004']?.Value[0];
  }

  // Detector Configuration
  get DetectorConfiguration(): string | undefined {
    return this.x00187005;
  }

  get x00187005(): string | undefined {
    const element = this.dwResponse['00187005'];
    return this.dwResponse['00187005']?.Value[0];
  }

  // Detector ID
  get DetectorID(): string | undefined {
    return this.x0018700a;
  }

  get x0018700a(): string | undefined {
    const element = this.dwResponse['0018700a'];
    return this.dwResponse['0018700a']?.Value[0];
  }

  // Date of Last Detector Calibration
  get DateOfLastDetectorCalibration(): Date | undefined {
    return this.x0018700c;
  }

  get x0018700c(): Date | undefined {
    const element = this.dwResponse['0018700c'];
    return this.dwResponse['0018700c']?.Value[0];
  }

  // Time of Last Detector Calibration
  get TimeOfLastDetectorCalibration(): string | undefined {
    return this.x0018700e;
  }

  get x0018700e(): string | undefined {
    const element = this.dwResponse['0018700e'];
    return this.dwResponse['0018700e']?.Value[0];
  }

  // Exposures on Detector Since Last Calibration
  get ExposuresOnDetectorSinceLastCalibration(): number | undefined {
    return this.x00187010;
  }

  get x00187010(): number | undefined {
    const element = this.dwResponse['00187010'];
    return this.dwResponse['00187010']?.Value[0];
  }

  // Exposures on Detector Since Manufactured
  get ExposuresOnDetectorSinceManufactured(): number | undefined {
    return this.x00187011;
  }

  get x00187011(): number | undefined {
    const element = this.dwResponse['00187011'];
    return this.dwResponse['00187011']?.Value[0];
  }

  // Detector Time Since Last Exposure
  get DetectorTimeSinceLastExposure(): number | undefined {
    return this.x00187012;
  }

  get x00187012(): number | undefined {
    const element = this.dwResponse['00187012'];
    return this.dwResponse['00187012']?.Value[0];
  }

  // Detector Active Time
  get DetectorActiveTime(): number | undefined {
    return this.x00187014;
  }

  get x00187014(): number | undefined {
    const element = this.dwResponse['00187014'];
    return this.dwResponse['00187014']?.Value[0];
  }

  // Detector Activation Offset From Exposure
  get DetectorActivationOffsetFromExposure(): number | undefined {
    return this.x00187016;
  }

  get x00187016(): number | undefined {
    const element = this.dwResponse['00187016'];
    return this.dwResponse['00187016']?.Value[0];
  }

  // Detector Binning
  get DetectorBinning(): Array<number> | undefined {
    return this.x0018701a;
  }

  get x0018701a(): Array<number> | undefined {
    const element = this.dwResponse['0018701a'];
    return this.dwResponse['0018701a']?.Value;
  }

  // Detector Element Physical Size
  get DetectorElementPhysicalSize(): Array<number> | undefined {
    return this.x00187020;
  }

  get x00187020(): Array<number> | undefined {
    const element = this.dwResponse['00187020'];
    return this.dwResponse['00187020']?.Value;
  }

  // Detector Element Spacing
  get DetectorElementSpacing(): Array<number> | undefined {
    return this.x00187022;
  }

  get x00187022(): Array<number> | undefined {
    const element = this.dwResponse['00187022'];
    return this.dwResponse['00187022']?.Value;
  }

  // Detector Active Shape
  get DetectorActiveShape(): string | undefined {
    return this.x00187024;
  }

  get x00187024(): string | undefined {
    const element = this.dwResponse['00187024'];
    return this.dwResponse['00187024']?.Value[0];
  }

  // Detector Active Dimension(s)
  get DetectorActiveDimensions(): Array<number> | undefined {
    return this.x00187026;
  }

  get x00187026(): Array<number> | undefined {
    const element = this.dwResponse['00187026'];
    return this.dwResponse['00187026']?.Value;
  }

  // Detector Active Origin
  get DetectorActiveOrigin(): Array<number> | undefined {
    return this.x00187028;
  }

  get x00187028(): Array<number> | undefined {
    const element = this.dwResponse['00187028'];
    return this.dwResponse['00187028']?.Value;
  }

  // Detector Manufacturer Name
  get DetectorManufacturerName(): string | undefined {
    return this.x0018702a;
  }

  get x0018702a(): string | undefined {
    const element = this.dwResponse['0018702a'];
    return this.dwResponse['0018702a']?.Value[0];
  }

  // Detector Manufacturer's Model Name
  get DetectorManufacturerModelName(): string | undefined {
    return this.x0018702b;
  }

  get x0018702b(): string | undefined {
    const element = this.dwResponse['0018702b'];
    return this.dwResponse['0018702b']?.Value[0];
  }

  // Field of View Origin
  get FieldOfViewOrigin(): Array<number> | undefined {
    return this.x00187030;
  }

  get x00187030(): Array<number> | undefined {
    const element = this.dwResponse['00187030'];
    return this.dwResponse['00187030']?.Value;
  }

  // Field of View Rotation
  get FieldOfViewRotation(): number | undefined {
    return this.x00187032;
  }

  get x00187032(): number | undefined {
    const element = this.dwResponse['00187032'];
    return this.dwResponse['00187032']?.Value[0];
  }

  // Field of View Horizontal Flip
  get FieldOfViewHorizontalFlip(): string | undefined {
    return this.x00187034;
  }

  get x00187034(): string | undefined {
    const element = this.dwResponse['00187034'];
    return this.dwResponse['00187034']?.Value[0];
  }

  // Pixel Data Area Origin Relative To FOV
  get PixelDataAreaOriginRelativeToFOV(): Array<number> | undefined {
    return this.x00187036;
  }

  get x00187036(): Array<number> | undefined {
    const element = this.dwResponse['00187036'];
    return this.dwResponse['00187036']?.Value;
  }

  // Pixel Data Area Rotation Angle Relative To FOV
  get PixelDataAreaRotationAngleRelativeToFOV(): number | undefined {
    return this.x00187038;
  }

  get x00187038(): number | undefined {
    const element = this.dwResponse['00187038'];
    return this.dwResponse['00187038']?.Value[0];
  }

  // Grid Thickness
  get GridThickness(): number | undefined {
    return this.x00187042;
  }

  get x00187042(): number | undefined {
    const element = this.dwResponse['00187042'];
    return this.dwResponse['00187042']?.Value[0];
  }

  // Grid Pitch
  get GridPitch(): number | undefined {
    return this.x00187044;
  }

  get x00187044(): number | undefined {
    const element = this.dwResponse['00187044'];
    return this.dwResponse['00187044']?.Value[0];
  }

  // Grid Aspect Ratio
  get GridAspectRatio(): Array<number> | undefined {
    return this.x00187046;
  }

  get x00187046(): Array<number> | undefined {
    const element = this.dwResponse['00187046'];
    return this.dwResponse['00187046']?.Value;
  }

  // Grid Period
  get GridPeriod(): number | undefined {
    return this.x00187048;
  }

  get x00187048(): number | undefined {
    const element = this.dwResponse['00187048'];
    return this.dwResponse['00187048']?.Value[0];
  }

  // Grid Focal Distance
  get GridFocalDistance(): number | undefined {
    return this.x0018704c;
  }

  get x0018704c(): number | undefined {
    const element = this.dwResponse['0018704c'];
    return this.dwResponse['0018704c']?.Value[0];
  }

  // Filter Material
  get FilterMaterial(): Array<string> | undefined {
    return this.x00187050;
  }

  get x00187050(): Array<string> | undefined {
    const element = this.dwResponse['00187050'];
    return this.dwResponse['00187050']?.Value;
  }

  // Filter Thickness Minimum
  get FilterThicknessMinimum(): Array<number> | undefined {
    return this.x00187052;
  }

  get x00187052(): Array<number> | undefined {
    const element = this.dwResponse['00187052'];
    return this.dwResponse['00187052']?.Value;
  }

  // Filter Thickness Maximum
  get FilterThicknessMaximum(): Array<number> | undefined {
    return this.x00187054;
  }

  get x00187054(): Array<number> | undefined {
    const element = this.dwResponse['00187054'];
    return this.dwResponse['00187054']?.Value;
  }

  // Filter Beam Path Length Minimum
  get FilterBeamPathLengthMinimum(): Array<number> | undefined {
    return this.x00187056;
  }

  get x00187056(): Array<number> | undefined {
    const element = this.dwResponse['00187056'];
    return this.dwResponse['00187056']?.Value;
  }

  // Filter Beam Path Length Maximum
  get FilterBeamPathLengthMaximum(): Array<number> | undefined {
    return this.x00187058;
  }

  get x00187058(): Array<number> | undefined {
    const element = this.dwResponse['00187058'];
    return this.dwResponse['00187058']?.Value;
  }

  // Exposure Control Mode
  get ExposureControlMode(): string | undefined {
    return this.x00187060;
  }

  get x00187060(): string | undefined {
    const element = this.dwResponse['00187060'];
    return this.dwResponse['00187060']?.Value[0];
  }

  // Exposure Status
  get ExposureStatus(): string | undefined {
    return this.x00187064;
  }

  get x00187064(): string | undefined {
    const element = this.dwResponse['00187064'];
    return this.dwResponse['00187064']?.Value[0];
  }

  // Phototimer Setting
  get PhototimerSetting(): number | undefined {
    return this.x00187065;
  }

  get x00187065(): number | undefined {
    const element = this.dwResponse['00187065'];
    return this.dwResponse['00187065']?.Value[0];
  }

  // Exposure Time in µS
  get ExposureTimeInuS(): number | undefined {
    return this.x00188150;
  }

  get x00188150(): number | undefined {
    const element = this.dwResponse['00188150'];
    return this.dwResponse['00188150']?.Value[0];
  }

  // X-Ray Tube Current in µA
  get XRayTubeCurrentInuA(): number | undefined {
    return this.x00188151;
  }

  get x00188151(): number | undefined {
    const element = this.dwResponse['00188151'];
    return this.dwResponse['00188151']?.Value[0];
  }

  // Content Qualification
  get ContentQualification(): string | undefined {
    return this.x00189004;
  }

  get x00189004(): string | undefined {
    const element = this.dwResponse['00189004'];
    return this.dwResponse['00189004']?.Value[0];
  }

  // Pulse Sequence Name
  get PulseSequenceName(): string | undefined {
    return this.x00189005;
  }

  get x00189005(): string | undefined {
    const element = this.dwResponse['00189005'];
    return this.dwResponse['00189005']?.Value[0];
  }

  // MR Imaging Modifier Sequence
  get MRImagingModifierSequence(): Array<Dataset> | undefined {
    return this.x00189006;
  }

  get x00189006(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189006'];
    return this.dwResponse['00189006']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Echo Pulse Sequence
  get EchoPulseSequence(): string | undefined {
    return this.x00189008;
  }

  get x00189008(): string | undefined {
    const element = this.dwResponse['00189008'];
    return this.dwResponse['00189008']?.Value[0];
  }

  // Inversion Recovery
  get InversionRecovery(): string | undefined {
    return this.x00189009;
  }

  get x00189009(): string | undefined {
    const element = this.dwResponse['00189009'];
    return this.dwResponse['00189009']?.Value[0];
  }

  // Flow Compensation
  get FlowCompensation(): string | undefined {
    return this.x00189010;
  }

  get x00189010(): string | undefined {
    const element = this.dwResponse['00189010'];
    return this.dwResponse['00189010']?.Value[0];
  }

  // Multiple Spin Echo
  get MultipleSpinEcho(): string | undefined {
    return this.x00189011;
  }

  get x00189011(): string | undefined {
    const element = this.dwResponse['00189011'];
    return this.dwResponse['00189011']?.Value[0];
  }

  // Multi-planar Excitation
  get MultiPlanarExcitation(): string | undefined {
    return this.x00189012;
  }

  get x00189012(): string | undefined {
    const element = this.dwResponse['00189012'];
    return this.dwResponse['00189012']?.Value[0];
  }

  // Phase Contrast
  get PhaseContrast(): string | undefined {
    return this.x00189014;
  }

  get x00189014(): string | undefined {
    const element = this.dwResponse['00189014'];
    return this.dwResponse['00189014']?.Value[0];
  }

  // Time of Flight Contrast
  get TimeOfFlightContrast(): string | undefined {
    return this.x00189015;
  }

  get x00189015(): string | undefined {
    const element = this.dwResponse['00189015'];
    return this.dwResponse['00189015']?.Value[0];
  }

  // Spoiling
  get Spoiling(): string | undefined {
    return this.x00189016;
  }

  get x00189016(): string | undefined {
    const element = this.dwResponse['00189016'];
    return this.dwResponse['00189016']?.Value[0];
  }

  // Steady State Pulse Sequence
  get SteadyStatePulseSequence(): string | undefined {
    return this.x00189017;
  }

  get x00189017(): string | undefined {
    const element = this.dwResponse['00189017'];
    return this.dwResponse['00189017']?.Value[0];
  }

  // Echo Planar Pulse Sequence
  get EchoPlanarPulseSequence(): string | undefined {
    return this.x00189018;
  }

  get x00189018(): string | undefined {
    const element = this.dwResponse['00189018'];
    return this.dwResponse['00189018']?.Value[0];
  }

  // Tag Angle First Axis
  get TagAngleFirstAxis(): number | undefined {
    return this.x00189019;
  }

  get x00189019(): number | undefined {
    const element = this.dwResponse['00189019'];
    return this.dwResponse['00189019']?.Value[0];
  }

  // Magnetization Transfer
  get MagnetizationTransfer(): string | undefined {
    return this.x00189020;
  }

  get x00189020(): string | undefined {
    const element = this.dwResponse['00189020'];
    return this.dwResponse['00189020']?.Value[0];
  }

  // T2 Preparation
  get T2Preparation(): string | undefined {
    return this.x00189021;
  }

  get x00189021(): string | undefined {
    const element = this.dwResponse['00189021'];
    return this.dwResponse['00189021']?.Value[0];
  }

  // Blood Signal Nulling
  get BloodSignalNulling(): string | undefined {
    return this.x00189022;
  }

  get x00189022(): string | undefined {
    const element = this.dwResponse['00189022'];
    return this.dwResponse['00189022']?.Value[0];
  }

  // Saturation Recovery
  get SaturationRecovery(): string | undefined {
    return this.x00189024;
  }

  get x00189024(): string | undefined {
    const element = this.dwResponse['00189024'];
    return this.dwResponse['00189024']?.Value[0];
  }

  // Spectrally Selected Suppression
  get SpectrallySelectedSuppression(): string | undefined {
    return this.x00189025;
  }

  get x00189025(): string | undefined {
    const element = this.dwResponse['00189025'];
    return this.dwResponse['00189025']?.Value[0];
  }

  // Spectrally Selected Excitation
  get SpectrallySelectedExcitation(): string | undefined {
    return this.x00189026;
  }

  get x00189026(): string | undefined {
    const element = this.dwResponse['00189026'];
    return this.dwResponse['00189026']?.Value[0];
  }

  // Spatial Pre-saturation
  get SpatialPresaturation(): string | undefined {
    return this.x00189027;
  }

  get x00189027(): string | undefined {
    const element = this.dwResponse['00189027'];
    return this.dwResponse['00189027']?.Value[0];
  }

  // Tagging
  get Tagging(): string | undefined {
    return this.x00189028;
  }

  get x00189028(): string | undefined {
    const element = this.dwResponse['00189028'];
    return this.dwResponse['00189028']?.Value[0];
  }

  // Oversampling Phase
  get OversamplingPhase(): string | undefined {
    return this.x00189029;
  }

  get x00189029(): string | undefined {
    const element = this.dwResponse['00189029'];
    return this.dwResponse['00189029']?.Value[0];
  }

  // Tag Spacing First Dimension
  get TagSpacingFirstDimension(): number | undefined {
    return this.x00189030;
  }

  get x00189030(): number | undefined {
    const element = this.dwResponse['00189030'];
    return this.dwResponse['00189030']?.Value[0];
  }

  // Geometry of k-Space Traversal
  get GeometryOfKSpaceTraversal(): string | undefined {
    return this.x00189032;
  }

  get x00189032(): string | undefined {
    const element = this.dwResponse['00189032'];
    return this.dwResponse['00189032']?.Value[0];
  }

  // Segmented k-Space Traversal
  get SegmentedKSpaceTraversal(): string | undefined {
    return this.x00189033;
  }

  get x00189033(): string | undefined {
    const element = this.dwResponse['00189033'];
    return this.dwResponse['00189033']?.Value[0];
  }

  // Rectilinear Phase Encode Reordering
  get RectilinearPhaseEncodeReordering(): string | undefined {
    return this.x00189034;
  }

  get x00189034(): string | undefined {
    const element = this.dwResponse['00189034'];
    return this.dwResponse['00189034']?.Value[0];
  }

  // Tag Thickness
  get TagThickness(): number | undefined {
    return this.x00189035;
  }

  get x00189035(): number | undefined {
    const element = this.dwResponse['00189035'];
    return this.dwResponse['00189035']?.Value[0];
  }

  // Partial Fourier Direction
  get PartialFourierDirection(): string | undefined {
    return this.x00189036;
  }

  get x00189036(): string | undefined {
    const element = this.dwResponse['00189036'];
    return this.dwResponse['00189036']?.Value[0];
  }

  // Cardiac Synchronization Technique
  get CardiacSynchronizationTechnique(): string | undefined {
    return this.x00189037;
  }

  get x00189037(): string | undefined {
    const element = this.dwResponse['00189037'];
    return this.dwResponse['00189037']?.Value[0];
  }

  // Receive Coil Manufacturer Name
  get ReceiveCoilManufacturerName(): string | undefined {
    return this.x00189041;
  }

  get x00189041(): string | undefined {
    const element = this.dwResponse['00189041'];
    return this.dwResponse['00189041']?.Value[0];
  }

  // MR Receive Coil Sequence
  get MRReceiveCoilSequence(): Array<Dataset> | undefined {
    return this.x00189042;
  }

  get x00189042(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189042'];
    return this.dwResponse['00189042']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Receive Coil Type
  get ReceiveCoilType(): string | undefined {
    return this.x00189043;
  }

  get x00189043(): string | undefined {
    const element = this.dwResponse['00189043'];
    return this.dwResponse['00189043']?.Value[0];
  }

  // Quadrature Receive Coil
  get QuadratureReceiveCoil(): string | undefined {
    return this.x00189044;
  }

  get x00189044(): string | undefined {
    const element = this.dwResponse['00189044'];
    return this.dwResponse['00189044']?.Value[0];
  }

  // Multi-Coil Definition Sequence
  get MultiCoilDefinitionSequence(): Array<Dataset> | undefined {
    return this.x00189045;
  }

  get x00189045(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189045'];
    return this.dwResponse['00189045']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Multi-Coil Configuration
  get MultiCoilConfiguration(): string | undefined {
    return this.x00189046;
  }

  get x00189046(): string | undefined {
    const element = this.dwResponse['00189046'];
    return this.dwResponse['00189046']?.Value[0];
  }

  // Multi-Coil Element Name
  get MultiCoilElementName(): string | undefined {
    return this.x00189047;
  }

  get x00189047(): string | undefined {
    const element = this.dwResponse['00189047'];
    return this.dwResponse['00189047']?.Value[0];
  }

  // Multi-Coil Element Used
  get MultiCoilElementUsed(): string | undefined {
    return this.x00189048;
  }

  get x00189048(): string | undefined {
    const element = this.dwResponse['00189048'];
    return this.dwResponse['00189048']?.Value[0];
  }

  // MR Transmit Coil Sequence
  get MRTransmitCoilSequence(): Array<Dataset> | undefined {
    return this.x00189049;
  }

  get x00189049(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189049'];
    return this.dwResponse['00189049']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Transmit Coil Manufacturer Name
  get TransmitCoilManufacturerName(): string | undefined {
    return this.x00189050;
  }

  get x00189050(): string | undefined {
    const element = this.dwResponse['00189050'];
    return this.dwResponse['00189050']?.Value[0];
  }

  // Transmit Coil Type
  get TransmitCoilType(): string | undefined {
    return this.x00189051;
  }

  get x00189051(): string | undefined {
    const element = this.dwResponse['00189051'];
    return this.dwResponse['00189051']?.Value[0];
  }

  // Spectral Width
  get SpectralWidth(): Array<number> | undefined {
    return this.x00189052;
  }

  get x00189052(): Array<number> | undefined {
    const element = this.dwResponse['00189052'];
    return this.dwResponse['00189052']?.Value;
  }

  // Chemical Shift Reference
  get ChemicalShiftReference(): Array<number> | undefined {
    return this.x00189053;
  }

  get x00189053(): Array<number> | undefined {
    const element = this.dwResponse['00189053'];
    return this.dwResponse['00189053']?.Value;
  }

  // Volume Localization Technique
  get VolumeLocalizationTechnique(): string | undefined {
    return this.x00189054;
  }

  get x00189054(): string | undefined {
    const element = this.dwResponse['00189054'];
    return this.dwResponse['00189054']?.Value[0];
  }

  // MR Acquisition Frequency Encoding Steps
  get MRAcquisitionFrequencyEncodingSteps(): number | undefined {
    return this.x00189058;
  }

  get x00189058(): number | undefined {
    const element = this.dwResponse['00189058'];
    return this.dwResponse['00189058']?.Value[0];
  }

  // De-coupling
  get Decoupling(): string | undefined {
    return this.x00189059;
  }

  get x00189059(): string | undefined {
    const element = this.dwResponse['00189059'];
    return this.dwResponse['00189059']?.Value[0];
  }

  // De-coupled Nucleus
  get DecoupledNucleus(): Array<string> | undefined {
    return this.x00189060;
  }

  get x00189060(): Array<string> | undefined {
    const element = this.dwResponse['00189060'];
    return this.dwResponse['00189060']?.Value;
  }

  // De-coupling Frequency
  get DecouplingFrequency(): Array<number> | undefined {
    return this.x00189061;
  }

  get x00189061(): Array<number> | undefined {
    const element = this.dwResponse['00189061'];
    return this.dwResponse['00189061']?.Value;
  }

  // De-coupling Method
  get DecouplingMethod(): string | undefined {
    return this.x00189062;
  }

  get x00189062(): string | undefined {
    const element = this.dwResponse['00189062'];
    return this.dwResponse['00189062']?.Value[0];
  }

  // De-coupling Chemical Shift Reference
  get DecouplingChemicalShiftReference(): Array<number> | undefined {
    return this.x00189063;
  }

  get x00189063(): Array<number> | undefined {
    const element = this.dwResponse['00189063'];
    return this.dwResponse['00189063']?.Value;
  }

  // k-space Filtering
  get KSpaceFiltering(): string | undefined {
    return this.x00189064;
  }

  get x00189064(): string | undefined {
    const element = this.dwResponse['00189064'];
    return this.dwResponse['00189064']?.Value[0];
  }

  // Time Domain Filtering
  get TimeDomainFiltering(): Array<string> | undefined {
    return this.x00189065;
  }

  get x00189065(): Array<string> | undefined {
    const element = this.dwResponse['00189065'];
    return this.dwResponse['00189065']?.Value;
  }

  // Number of Zero Fills
  get NumberOfZeroFills(): Array<number> | undefined {
    return this.x00189066;
  }

  get x00189066(): Array<number> | undefined {
    const element = this.dwResponse['00189066'];
    return this.dwResponse['00189066']?.Value;
  }

  // Baseline Correction
  get BaselineCorrection(): string | undefined {
    return this.x00189067;
  }

  get x00189067(): string | undefined {
    const element = this.dwResponse['00189067'];
    return this.dwResponse['00189067']?.Value[0];
  }

  // Parallel Reduction Factor In-plane
  get ParallelReductionFactorInPlane(): number | undefined {
    return this.x00189069;
  }

  get x00189069(): number | undefined {
    const element = this.dwResponse['00189069'];
    return this.dwResponse['00189069']?.Value[0];
  }

  // Cardiac R-R Interval Specified
  get CardiacRRIntervalSpecified(): number | undefined {
    return this.x00189070;
  }

  get x00189070(): number | undefined {
    const element = this.dwResponse['00189070'];
    return this.dwResponse['00189070']?.Value[0];
  }

  // Acquisition Duration
  get AcquisitionDuration(): number | undefined {
    return this.x00189073;
  }

  get x00189073(): number | undefined {
    const element = this.dwResponse['00189073'];
    return this.dwResponse['00189073']?.Value[0];
  }

  // Frame Acquisition DateTime
  get FrameAcquisitionDateTime(): string | undefined {
    return this.x00189074;
  }

  get x00189074(): string | undefined {
    const element = this.dwResponse['00189074'];
    return this.dwResponse['00189074']?.Value[0];
  }

  // Diffusion Directionality
  get DiffusionDirectionality(): string | undefined {
    return this.x00189075;
  }

  get x00189075(): string | undefined {
    const element = this.dwResponse['00189075'];
    return this.dwResponse['00189075']?.Value[0];
  }

  // Diffusion Gradient Direction Sequence
  get DiffusionGradientDirectionSequence(): Array<Dataset> | undefined {
    return this.x00189076;
  }

  get x00189076(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189076'];
    return this.dwResponse['00189076']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Parallel Acquisition
  get ParallelAcquisition(): string | undefined {
    return this.x00189077;
  }

  get x00189077(): string | undefined {
    const element = this.dwResponse['00189077'];
    return this.dwResponse['00189077']?.Value[0];
  }

  // Parallel Acquisition Technique
  get ParallelAcquisitionTechnique(): string | undefined {
    return this.x00189078;
  }

  get x00189078(): string | undefined {
    const element = this.dwResponse['00189078'];
    return this.dwResponse['00189078']?.Value[0];
  }

  // Inversion Times
  get InversionTimes(): Array<number> | undefined {
    return this.x00189079;
  }

  get x00189079(): Array<number> | undefined {
    const element = this.dwResponse['00189079'];
    return this.dwResponse['00189079']?.Value;
  }

  // Partial Fourier
  get PartialFourier(): string | undefined {
    return this.x00189081;
  }

  get x00189081(): string | undefined {
    const element = this.dwResponse['00189081'];
    return this.dwResponse['00189081']?.Value[0];
  }

  // Effective Echo Time
  get EffectiveEchoTime(): number | undefined {
    return this.x00189082;
  }

  get x00189082(): number | undefined {
    const element = this.dwResponse['00189082'];
    return this.dwResponse['00189082']?.Value[0];
  }

  // Metabolite Map Code Sequence
  get MetaboliteMapCodeSequence(): Array<Dataset> | undefined {
    return this.x00189083;
  }

  get x00189083(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189083'];
    return this.dwResponse['00189083']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Chemical Shift Sequence
  get ChemicalShiftSequence(): Array<Dataset> | undefined {
    return this.x00189084;
  }

  get x00189084(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189084'];
    return this.dwResponse['00189084']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Cardiac Signal Source
  get CardiacSignalSource(): string | undefined {
    return this.x00189085;
  }

  get x00189085(): string | undefined {
    const element = this.dwResponse['00189085'];
    return this.dwResponse['00189085']?.Value[0];
  }

  // Diffusion b-value
  get DiffusionBValue(): number | undefined {
    return this.x00189087;
  }

  get x00189087(): number | undefined {
    const element = this.dwResponse['00189087'];
    return this.dwResponse['00189087']?.Value[0];
  }

  // Diffusion Gradient Orientation
  get DiffusionGradientOrientation(): Array<number> | undefined {
    return this.x00189089;
  }

  get x00189089(): Array<number> | undefined {
    const element = this.dwResponse['00189089'];
    return this.dwResponse['00189089']?.Value;
  }

  // Velocity Encoding Direction
  get VelocityEncodingDirection(): Array<number> | undefined {
    return this.x00189090;
  }

  get x00189090(): Array<number> | undefined {
    const element = this.dwResponse['00189090'];
    return this.dwResponse['00189090']?.Value;
  }

  // Velocity Encoding Minimum Value
  get VelocityEncodingMinimumValue(): number | undefined {
    return this.x00189091;
  }

  get x00189091(): number | undefined {
    const element = this.dwResponse['00189091'];
    return this.dwResponse['00189091']?.Value[0];
  }

  // Velocity Encoding Acquisition Sequence
  get VelocityEncodingAcquisitionSequence(): Array<Dataset> | undefined {
    return this.x00189092;
  }

  get x00189092(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189092'];
    return this.dwResponse['00189092']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Number of k-Space Trajectories
  get NumberOfKSpaceTrajectories(): number | undefined {
    return this.x00189093;
  }

  get x00189093(): number | undefined {
    const element = this.dwResponse['00189093'];
    return this.dwResponse['00189093']?.Value[0];
  }

  // Coverage of k-Space
  get CoverageOfKSpace(): string | undefined {
    return this.x00189094;
  }

  get x00189094(): string | undefined {
    const element = this.dwResponse['00189094'];
    return this.dwResponse['00189094']?.Value[0];
  }

  // Spectroscopy Acquisition Phase Rows
  get SpectroscopyAcquisitionPhaseRows(): number | undefined {
    return this.x00189095;
  }

  get x00189095(): number | undefined {
    const element = this.dwResponse['00189095'];
    return this.dwResponse['00189095']?.Value[0];
  }

  // Parallel Reduction Factor In-plane (Retired)
  get ParallelReductionFactorInPlaneRetired(): number | undefined {
    return this.x00189096;
  }

  get x00189096(): number | undefined {
    const element = this.dwResponse['00189096'];
    return this.dwResponse['00189096']?.Value[0];
  }

  // Transmitter Frequency
  get TransmitterFrequency(): Array<number> | undefined {
    return this.x00189098;
  }

  get x00189098(): Array<number> | undefined {
    const element = this.dwResponse['00189098'];
    return this.dwResponse['00189098']?.Value;
  }

  // Resonant Nucleus
  get ResonantNucleus(): Array<string> | undefined {
    return this.x00189100;
  }

  get x00189100(): Array<string> | undefined {
    const element = this.dwResponse['00189100'];
    return this.dwResponse['00189100']?.Value;
  }

  // Frequency Correction
  get FrequencyCorrection(): string | undefined {
    return this.x00189101;
  }

  get x00189101(): string | undefined {
    const element = this.dwResponse['00189101'];
    return this.dwResponse['00189101']?.Value[0];
  }

  // MR Spectroscopy FOV/Geometry Sequence
  get MRSpectroscopyFOVGeometrySequence(): Array<Dataset> | undefined {
    return this.x00189103;
  }

  get x00189103(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189103'];
    return this.dwResponse['00189103']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Slab Thickness
  get SlabThickness(): number | undefined {
    return this.x00189104;
  }

  get x00189104(): number | undefined {
    const element = this.dwResponse['00189104'];
    return this.dwResponse['00189104']?.Value[0];
  }

  // Slab Orientation
  get SlabOrientation(): Array<number> | undefined {
    return this.x00189105;
  }

  get x00189105(): Array<number> | undefined {
    const element = this.dwResponse['00189105'];
    return this.dwResponse['00189105']?.Value;
  }

  // Mid Slab Position
  get MidSlabPosition(): Array<number> | undefined {
    return this.x00189106;
  }

  get x00189106(): Array<number> | undefined {
    const element = this.dwResponse['00189106'];
    return this.dwResponse['00189106']?.Value;
  }

  // MR Spatial Saturation Sequence
  get MRSpatialSaturationSequence(): Array<Dataset> | undefined {
    return this.x00189107;
  }

  get x00189107(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189107'];
    return this.dwResponse['00189107']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // MR Timing and Related Parameters Sequence
  get MRTimingAndRelatedParametersSequence(): Array<Dataset> | undefined {
    return this.x00189112;
  }

  get x00189112(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189112'];
    return this.dwResponse['00189112']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // MR Echo Sequence
  get MREchoSequence(): Array<Dataset> | undefined {
    return this.x00189114;
  }

  get x00189114(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189114'];
    return this.dwResponse['00189114']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // MR Modifier Sequence
  get MRModifierSequence(): Array<Dataset> | undefined {
    return this.x00189115;
  }

  get x00189115(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189115'];
    return this.dwResponse['00189115']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // MR Diffusion Sequence
  get MRDiffusionSequence(): Array<Dataset> | undefined {
    return this.x00189117;
  }

  get x00189117(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189117'];
    return this.dwResponse['00189117']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Cardiac Synchronization Sequence
  get CardiacSynchronizationSequence(): Array<Dataset> | undefined {
    return this.x00189118;
  }

  get x00189118(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189118'];
    return this.dwResponse['00189118']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // MR Averages Sequence
  get MRAveragesSequence(): Array<Dataset> | undefined {
    return this.x00189119;
  }

  get x00189119(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189119'];
    return this.dwResponse['00189119']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // MR FOV/Geometry Sequence
  get MRFOVGeometrySequence(): Array<Dataset> | undefined {
    return this.x00189125;
  }

  get x00189125(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189125'];
    return this.dwResponse['00189125']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Volume Localization Sequence
  get VolumeLocalizationSequence(): Array<Dataset> | undefined {
    return this.x00189126;
  }

  get x00189126(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189126'];
    return this.dwResponse['00189126']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Spectroscopy Acquisition Data Columns
  get SpectroscopyAcquisitionDataColumns(): number | undefined {
    return this.x00189127;
  }

  get x00189127(): number | undefined {
    const element = this.dwResponse['00189127'];
    return this.dwResponse['00189127']?.Value[0];
  }

  // Diffusion Anisotropy Type
  get DiffusionAnisotropyType(): string | undefined {
    return this.x00189147;
  }

  get x00189147(): string | undefined {
    const element = this.dwResponse['00189147'];
    return this.dwResponse['00189147']?.Value[0];
  }

  // Frame Reference DateTime
  get FrameReferenceDateTime(): string | undefined {
    return this.x00189151;
  }

  get x00189151(): string | undefined {
    const element = this.dwResponse['00189151'];
    return this.dwResponse['00189151']?.Value[0];
  }

  // MR Metabolite Map Sequence
  get MRMetaboliteMapSequence(): Array<Dataset> | undefined {
    return this.x00189152;
  }

  get x00189152(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189152'];
    return this.dwResponse['00189152']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Parallel Reduction Factor out-of-plane
  get ParallelReductionFactorOutOfPlane(): number | undefined {
    return this.x00189155;
  }

  get x00189155(): number | undefined {
    const element = this.dwResponse['00189155'];
    return this.dwResponse['00189155']?.Value[0];
  }

  // Spectroscopy Acquisition Out-of-plane Phase Steps
  get SpectroscopyAcquisitionOutOfPlanePhaseSteps(): number | undefined {
    return this.x00189159;
  }

  get x00189159(): number | undefined {
    const element = this.dwResponse['00189159'];
    return this.dwResponse['00189159']?.Value[0];
  }

  // Bulk Motion Status
  get BulkMotionStatus(): string | undefined {
    return this.x00189166;
  }

  get x00189166(): string | undefined {
    const element = this.dwResponse['00189166'];
    return this.dwResponse['00189166']?.Value[0];
  }

  // Parallel Reduction Factor Second In-plane
  get ParallelReductionFactorSecondInPlane(): number | undefined {
    return this.x00189168;
  }

  get x00189168(): number | undefined {
    const element = this.dwResponse['00189168'];
    return this.dwResponse['00189168']?.Value[0];
  }

  // Cardiac Beat Rejection Technique
  get CardiacBeatRejectionTechnique(): string | undefined {
    return this.x00189169;
  }

  get x00189169(): string | undefined {
    const element = this.dwResponse['00189169'];
    return this.dwResponse['00189169']?.Value[0];
  }

  // Respiratory Motion Compensation Technique
  get RespiratoryMotionCompensationTechnique(): string | undefined {
    return this.x00189170;
  }

  get x00189170(): string | undefined {
    const element = this.dwResponse['00189170'];
    return this.dwResponse['00189170']?.Value[0];
  }

  // Respiratory Signal Source
  get RespiratorySignalSource(): string | undefined {
    return this.x00189171;
  }

  get x00189171(): string | undefined {
    const element = this.dwResponse['00189171'];
    return this.dwResponse['00189171']?.Value[0];
  }

  // Bulk Motion Compensation Technique
  get BulkMotionCompensationTechnique(): string | undefined {
    return this.x00189172;
  }

  get x00189172(): string | undefined {
    const element = this.dwResponse['00189172'];
    return this.dwResponse['00189172']?.Value[0];
  }

  // Bulk Motion Signal Source
  get BulkMotionSignalSource(): string | undefined {
    return this.x00189173;
  }

  get x00189173(): string | undefined {
    const element = this.dwResponse['00189173'];
    return this.dwResponse['00189173']?.Value[0];
  }

  // Applicable Safety Standard Agency
  get ApplicableSafetyStandardAgency(): string | undefined {
    return this.x00189174;
  }

  get x00189174(): string | undefined {
    const element = this.dwResponse['00189174'];
    return this.dwResponse['00189174']?.Value[0];
  }

  // Applicable Safety Standard Description
  get ApplicableSafetyStandardDescription(): string | undefined {
    return this.x00189175;
  }

  get x00189175(): string | undefined {
    const element = this.dwResponse['00189175'];
    return this.dwResponse['00189175']?.Value[0];
  }

  // Operating Mode Sequence
  get OperatingModeSequence(): Array<Dataset> | undefined {
    return this.x00189176;
  }

  get x00189176(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189176'];
    return this.dwResponse['00189176']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Operating Mode Type
  get OperatingModeType(): string | undefined {
    return this.x00189177;
  }

  get x00189177(): string | undefined {
    const element = this.dwResponse['00189177'];
    return this.dwResponse['00189177']?.Value[0];
  }

  // Operating Mode
  get OperatingMode(): string | undefined {
    return this.x00189178;
  }

  get x00189178(): string | undefined {
    const element = this.dwResponse['00189178'];
    return this.dwResponse['00189178']?.Value[0];
  }

  // Specific Absorption Rate Definition
  get SpecificAbsorptionRateDefinition(): string | undefined {
    return this.x00189179;
  }

  get x00189179(): string | undefined {
    const element = this.dwResponse['00189179'];
    return this.dwResponse['00189179']?.Value[0];
  }

  // Gradient Output Type
  get GradientOutputType(): string | undefined {
    return this.x00189180;
  }

  get x00189180(): string | undefined {
    const element = this.dwResponse['00189180'];
    return this.dwResponse['00189180']?.Value[0];
  }

  // Specific Absorption Rate Value
  get SpecificAbsorptionRateValue(): number | undefined {
    return this.x00189181;
  }

  get x00189181(): number | undefined {
    const element = this.dwResponse['00189181'];
    return this.dwResponse['00189181']?.Value[0];
  }

  // Gradient Output
  get GradientOutput(): number | undefined {
    return this.x00189182;
  }

  get x00189182(): number | undefined {
    const element = this.dwResponse['00189182'];
    return this.dwResponse['00189182']?.Value[0];
  }

  // Flow Compensation Direction
  get FlowCompensationDirection(): string | undefined {
    return this.x00189183;
  }

  get x00189183(): string | undefined {
    const element = this.dwResponse['00189183'];
    return this.dwResponse['00189183']?.Value[0];
  }

  // Tagging Delay
  get TaggingDelay(): number | undefined {
    return this.x00189184;
  }

  get x00189184(): number | undefined {
    const element = this.dwResponse['00189184'];
    return this.dwResponse['00189184']?.Value[0];
  }

  // Respiratory Signal Source ID
  get RespiratorySignalSourceID(): string | undefined {
    return this.x00189186;
  }

  get x00189186(): string | undefined {
    const element = this.dwResponse['00189186'];
    return this.dwResponse['00189186']?.Value[0];
  }

  // Chemical Shift Minimum Integration Limit in Hz
  get ChemicalShiftMinimumIntegrationLimitInHz(): number | undefined {
    return this.x00189195;
  }

  get x00189195(): number | undefined {
    const element = this.dwResponse['00189195'];
    return this.dwResponse['00189195']?.Value[0];
  }

  // Chemical Shift Maximum Integration Limit in Hz
  get ChemicalShiftMaximumIntegrationLimitInHz(): number | undefined {
    return this.x00189196;
  }

  get x00189196(): number | undefined {
    const element = this.dwResponse['00189196'];
    return this.dwResponse['00189196']?.Value[0];
  }

  // MR Velocity Encoding Sequence
  get MRVelocityEncodingSequence(): Array<Dataset> | undefined {
    return this.x00189197;
  }

  get x00189197(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189197'];
    return this.dwResponse['00189197']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // First Order Phase Correction
  get FirstOrderPhaseCorrection(): string | undefined {
    return this.x00189198;
  }

  get x00189198(): string | undefined {
    const element = this.dwResponse['00189198'];
    return this.dwResponse['00189198']?.Value[0];
  }

  // Water Referenced Phase Correction
  get WaterReferencedPhaseCorrection(): string | undefined {
    return this.x00189199;
  }

  get x00189199(): string | undefined {
    const element = this.dwResponse['00189199'];
    return this.dwResponse['00189199']?.Value[0];
  }

  // MR Spectroscopy Acquisition Type
  get MRSpectroscopyAcquisitionType(): string | undefined {
    return this.x00189200;
  }

  get x00189200(): string | undefined {
    const element = this.dwResponse['00189200'];
    return this.dwResponse['00189200']?.Value[0];
  }

  // Respiratory Cycle Position
  get RespiratoryCyclePosition(): string | undefined {
    return this.x00189214;
  }

  get x00189214(): string | undefined {
    const element = this.dwResponse['00189214'];
    return this.dwResponse['00189214']?.Value[0];
  }

  // Velocity Encoding Maximum Value
  get VelocityEncodingMaximumValue(): number | undefined {
    return this.x00189217;
  }

  get x00189217(): number | undefined {
    const element = this.dwResponse['00189217'];
    return this.dwResponse['00189217']?.Value[0];
  }

  // Tag Spacing Second Dimension
  get TagSpacingSecondDimension(): number | undefined {
    return this.x00189218;
  }

  get x00189218(): number | undefined {
    const element = this.dwResponse['00189218'];
    return this.dwResponse['00189218']?.Value[0];
  }

  // Tag Angle Second Axis
  get TagAngleSecondAxis(): Uint8Array | undefined {
    return this.x00189219;
  }

  get x00189219(): Uint8Array | undefined {
    const element = this.dwResponse['00189219'];
    return this.dwResponse['00189219']?.Value[0];
  }

  // Frame Acquisition Duration
  get FrameAcquisitionDuration(): number | undefined {
    return this.x00189220;
  }

  get x00189220(): number | undefined {
    const element = this.dwResponse['00189220'];
    return this.dwResponse['00189220']?.Value[0];
  }

  // MR Image Frame Type Sequence
  get MRImageFrameTypeSequence(): Array<Dataset> | undefined {
    return this.x00189226;
  }

  get x00189226(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189226'];
    return this.dwResponse['00189226']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // MR Spectroscopy Frame Type Sequence
  get MRSpectroscopyFrameTypeSequence(): Array<Dataset> | undefined {
    return this.x00189227;
  }

  get x00189227(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189227'];
    return this.dwResponse['00189227']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // MR Acquisition Phase Encoding Steps in-plane
  get MRAcquisitionPhaseEncodingStepsInPlane(): number | undefined {
    return this.x00189231;
  }

  get x00189231(): number | undefined {
    const element = this.dwResponse['00189231'];
    return this.dwResponse['00189231']?.Value[0];
  }

  // MR Acquisition Phase Encoding Steps out-of-plane
  get MRAcquisitionPhaseEncodingStepsOutOfPlane(): number | undefined {
    return this.x00189232;
  }

  get x00189232(): number | undefined {
    const element = this.dwResponse['00189232'];
    return this.dwResponse['00189232']?.Value[0];
  }

  // Spectroscopy Acquisition Phase Columns
  get SpectroscopyAcquisitionPhaseColumns(): number | undefined {
    return this.x00189234;
  }

  get x00189234(): number | undefined {
    const element = this.dwResponse['00189234'];
    return this.dwResponse['00189234']?.Value[0];
  }

  // Cardiac Cycle Position
  get CardiacCyclePosition(): string | undefined {
    return this.x00189236;
  }

  get x00189236(): string | undefined {
    const element = this.dwResponse['00189236'];
    return this.dwResponse['00189236']?.Value[0];
  }

  // Specific Absorption Rate Sequence
  get SpecificAbsorptionRateSequence(): Array<Dataset> | undefined {
    return this.x00189239;
  }

  get x00189239(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189239'];
    return this.dwResponse['00189239']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // RF Echo Train Length
  get RFEchoTrainLength(): number | undefined {
    return this.x00189240;
  }

  get x00189240(): number | undefined {
    const element = this.dwResponse['00189240'];
    return this.dwResponse['00189240']?.Value[0];
  }

  // Gradient Echo Train Length
  get GradientEchoTrainLength(): number | undefined {
    return this.x00189241;
  }

  get x00189241(): number | undefined {
    const element = this.dwResponse['00189241'];
    return this.dwResponse['00189241']?.Value[0];
  }

  // Arterial Spin Labeling Contrast
  get ArterialSpinLabelingContrast(): string | undefined {
    return this.x00189250;
  }

  get x00189250(): string | undefined {
    const element = this.dwResponse['00189250'];
    return this.dwResponse['00189250']?.Value[0];
  }

  // MR Arterial Spin Labeling Sequence
  get MRArterialSpinLabelingSequence(): Array<Dataset> | undefined {
    return this.x00189251;
  }

  get x00189251(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189251'];
    return this.dwResponse['00189251']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // ASL Technique Description
  get ASLTechniqueDescription(): string | undefined {
    return this.x00189252;
  }

  get x00189252(): string | undefined {
    const element = this.dwResponse['00189252'];
    return this.dwResponse['00189252']?.Value[0];
  }

  // ASL Slab Number
  get ASLSlabNumber(): number | undefined {
    return this.x00189253;
  }

  get x00189253(): number | undefined {
    const element = this.dwResponse['00189253'];
    return this.dwResponse['00189253']?.Value[0];
  }

  // ASL Slab Thickness
  get ASLSlabThickness(): number | undefined {
    return this.x00189254;
  }

  get x00189254(): number | undefined {
    const element = this.dwResponse['00189254'];
    return this.dwResponse['00189254']?.Value[0];
  }

  // ASL Slab Orientation
  get ASLSlabOrientation(): Array<number> | undefined {
    return this.x00189255;
  }

  get x00189255(): Array<number> | undefined {
    const element = this.dwResponse['00189255'];
    return this.dwResponse['00189255']?.Value;
  }

  // ASL Mid Slab Position
  get ASLMidSlabPosition(): Array<number> | undefined {
    return this.x00189256;
  }

  get x00189256(): Array<number> | undefined {
    const element = this.dwResponse['00189256'];
    return this.dwResponse['00189256']?.Value;
  }

  // ASL Context
  get ASLContext(): string | undefined {
    return this.x00189257;
  }

  get x00189257(): string | undefined {
    const element = this.dwResponse['00189257'];
    return this.dwResponse['00189257']?.Value[0];
  }

  // ASL Pulse Train Duration
  get ASLPulseTrainDuration(): number | undefined {
    return this.x00189258;
  }

  get x00189258(): number | undefined {
    const element = this.dwResponse['00189258'];
    return this.dwResponse['00189258']?.Value[0];
  }

  // ASL Crusher Flag
  get ASLCrusherFlag(): string | undefined {
    return this.x00189259;
  }

  get x00189259(): string | undefined {
    const element = this.dwResponse['00189259'];
    return this.dwResponse['00189259']?.Value[0];
  }

  // ASL Crusher Flow Limit
  get ASLCrusherFlowLimit(): number | undefined {
    return this.x0018925a;
  }

  get x0018925a(): number | undefined {
    const element = this.dwResponse['0018925a'];
    return this.dwResponse['0018925a']?.Value[0];
  }

  // ASL Crusher Description
  get ASLCrusherDescription(): string | undefined {
    return this.x0018925b;
  }

  get x0018925b(): string | undefined {
    const element = this.dwResponse['0018925b'];
    return this.dwResponse['0018925b']?.Value[0];
  }

  // ASL Bolus Cut-off Flag
  get ASLBolusCutoffFlag(): string | undefined {
    return this.x0018925c;
  }

  get x0018925c(): string | undefined {
    const element = this.dwResponse['0018925c'];
    return this.dwResponse['0018925c']?.Value[0];
  }

  // ASL Bolus Cut-off Timing Sequence
  get ASLBolusCutoffTimingSequence(): Array<Dataset> | undefined {
    return this.x0018925d;
  }

  get x0018925d(): Array<Dataset> | undefined {
    const element = this.dwResponse['0018925d'];
    return this.dwResponse['0018925d']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // ASL Bolus Cut-off Technique
  get ASLBolusCutoffTechnique(): string | undefined {
    return this.x0018925e;
  }

  get x0018925e(): string | undefined {
    const element = this.dwResponse['0018925e'];
    return this.dwResponse['0018925e']?.Value[0];
  }

  // ASL Bolus Cut-off Delay Time
  get ASLBolusCutoffDelayTime(): number | undefined {
    return this.x0018925f;
  }

  get x0018925f(): number | undefined {
    const element = this.dwResponse['0018925f'];
    return this.dwResponse['0018925f']?.Value[0];
  }

  // ASL Slab Sequence
  get ASLSlabSequence(): Array<Dataset> | undefined {
    return this.x00189260;
  }

  get x00189260(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189260'];
    return this.dwResponse['00189260']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Chemical Shift Minimum Integration Limit in ppm
  get ChemicalShiftMinimumIntegrationLimitInppm(): number | undefined {
    return this.x00189295;
  }

  get x00189295(): number | undefined {
    const element = this.dwResponse['00189295'];
    return this.dwResponse['00189295']?.Value[0];
  }

  // Chemical Shift Maximum Integration Limit in ppm
  get ChemicalShiftMaximumIntegrationLimitInppm(): number | undefined {
    return this.x00189296;
  }

  get x00189296(): number | undefined {
    const element = this.dwResponse['00189296'];
    return this.dwResponse['00189296']?.Value[0];
  }

  // Water Reference Acquisition
  get WaterReferenceAcquisition(): string | undefined {
    return this.x00189297;
  }

  get x00189297(): string | undefined {
    const element = this.dwResponse['00189297'];
    return this.dwResponse['00189297']?.Value[0];
  }

  // Echo Peak Position
  get EchoPeakPosition(): number | undefined {
    return this.x00189298;
  }

  get x00189298(): number | undefined {
    const element = this.dwResponse['00189298'];
    return this.dwResponse['00189298']?.Value[0];
  }

  // CT Acquisition Type Sequence
  get CTAcquisitionTypeSequence(): Array<Dataset> | undefined {
    return this.x00189301;
  }

  get x00189301(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189301'];
    return this.dwResponse['00189301']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Acquisition Type
  get AcquisitionType(): string | undefined {
    return this.x00189302;
  }

  get x00189302(): string | undefined {
    const element = this.dwResponse['00189302'];
    return this.dwResponse['00189302']?.Value[0];
  }

  // Tube Angle
  get TubeAngle(): number | undefined {
    return this.x00189303;
  }

  get x00189303(): number | undefined {
    const element = this.dwResponse['00189303'];
    return this.dwResponse['00189303']?.Value[0];
  }

  // CT Acquisition Details Sequence
  get CTAcquisitionDetailsSequence(): Array<Dataset> | undefined {
    return this.x00189304;
  }

  get x00189304(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189304'];
    return this.dwResponse['00189304']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Revolution Time
  get RevolutionTime(): number | undefined {
    return this.x00189305;
  }

  get x00189305(): number | undefined {
    const element = this.dwResponse['00189305'];
    return this.dwResponse['00189305']?.Value[0];
  }

  // Single Collimation Width
  get SingleCollimationWidth(): number | undefined {
    return this.x00189306;
  }

  get x00189306(): number | undefined {
    const element = this.dwResponse['00189306'];
    return this.dwResponse['00189306']?.Value[0];
  }

  // Total Collimation Width
  get TotalCollimationWidth(): number | undefined {
    return this.x00189307;
  }

  get x00189307(): number | undefined {
    const element = this.dwResponse['00189307'];
    return this.dwResponse['00189307']?.Value[0];
  }

  // CT Table Dynamics Sequence
  get CTTableDynamicsSequence(): Array<Dataset> | undefined {
    return this.x00189308;
  }

  get x00189308(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189308'];
    return this.dwResponse['00189308']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Table Speed
  get TableSpeed(): number | undefined {
    return this.x00189309;
  }

  get x00189309(): number | undefined {
    const element = this.dwResponse['00189309'];
    return this.dwResponse['00189309']?.Value[0];
  }

  // Table Feed per Rotation
  get TableFeedPerRotation(): number | undefined {
    return this.x00189310;
  }

  get x00189310(): number | undefined {
    const element = this.dwResponse['00189310'];
    return this.dwResponse['00189310']?.Value[0];
  }

  // Spiral Pitch Factor
  get SpiralPitchFactor(): number | undefined {
    return this.x00189311;
  }

  get x00189311(): number | undefined {
    const element = this.dwResponse['00189311'];
    return this.dwResponse['00189311']?.Value[0];
  }

  // CT Geometry Sequence
  get CTGeometrySequence(): Array<Dataset> | undefined {
    return this.x00189312;
  }

  get x00189312(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189312'];
    return this.dwResponse['00189312']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Data Collection Center (Patient)
  get DataCollectionCenterPatient(): Array<number> | undefined {
    return this.x00189313;
  }

  get x00189313(): Array<number> | undefined {
    const element = this.dwResponse['00189313'];
    return this.dwResponse['00189313']?.Value;
  }

  // CT Reconstruction Sequence
  get CTReconstructionSequence(): Array<Dataset> | undefined {
    return this.x00189314;
  }

  get x00189314(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189314'];
    return this.dwResponse['00189314']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Reconstruction Algorithm
  get ReconstructionAlgorithm(): string | undefined {
    return this.x00189315;
  }

  get x00189315(): string | undefined {
    const element = this.dwResponse['00189315'];
    return this.dwResponse['00189315']?.Value[0];
  }

  // Convolution Kernel Group
  get ConvolutionKernelGroup(): string | undefined {
    return this.x00189316;
  }

  get x00189316(): string | undefined {
    const element = this.dwResponse['00189316'];
    return this.dwResponse['00189316']?.Value[0];
  }

  // Reconstruction Field of View
  get ReconstructionFieldOfView(): Array<number> | undefined {
    return this.x00189317;
  }

  get x00189317(): Array<number> | undefined {
    const element = this.dwResponse['00189317'];
    return this.dwResponse['00189317']?.Value;
  }

  // Reconstruction Target Center (Patient)
  get ReconstructionTargetCenterPatient(): Array<number> | undefined {
    return this.x00189318;
  }

  get x00189318(): Array<number> | undefined {
    const element = this.dwResponse['00189318'];
    return this.dwResponse['00189318']?.Value;
  }

  // Reconstruction Angle
  get ReconstructionAngle(): number | undefined {
    return this.x00189319;
  }

  get x00189319(): number | undefined {
    const element = this.dwResponse['00189319'];
    return this.dwResponse['00189319']?.Value[0];
  }

  // Image Filter
  get ImageFilter(): string | undefined {
    return this.x00189320;
  }

  get x00189320(): string | undefined {
    const element = this.dwResponse['00189320'];
    return this.dwResponse['00189320']?.Value[0];
  }

  // CT Exposure Sequence
  get CTExposureSequence(): Array<Dataset> | undefined {
    return this.x00189321;
  }

  get x00189321(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189321'];
    return this.dwResponse['00189321']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Reconstruction Pixel Spacing
  get ReconstructionPixelSpacing(): Array<number> | undefined {
    return this.x00189322;
  }

  get x00189322(): Array<number> | undefined {
    const element = this.dwResponse['00189322'];
    return this.dwResponse['00189322']?.Value;
  }

  // Exposure Modulation Type
  get ExposureModulationType(): string | undefined {
    return this.x00189323;
  }

  get x00189323(): string | undefined {
    const element = this.dwResponse['00189323'];
    return this.dwResponse['00189323']?.Value[0];
  }

  // Estimated Dose Saving
  get EstimatedDoseSaving(): number | undefined {
    return this.x00189324;
  }

  get x00189324(): number | undefined {
    const element = this.dwResponse['00189324'];
    return this.dwResponse['00189324']?.Value[0];
  }

  // CT X-Ray Details Sequence
  get CTXRayDetailsSequence(): Array<Dataset> | undefined {
    return this.x00189325;
  }

  get x00189325(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189325'];
    return this.dwResponse['00189325']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // CT Position Sequence
  get CTPositionSequence(): Array<Dataset> | undefined {
    return this.x00189326;
  }

  get x00189326(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189326'];
    return this.dwResponse['00189326']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Table Position
  get TablePosition(): number | undefined {
    return this.x00189327;
  }

  get x00189327(): number | undefined {
    const element = this.dwResponse['00189327'];
    return this.dwResponse['00189327']?.Value[0];
  }

  // Exposure Time in ms
  get ExposureTimeInms(): number | undefined {
    return this.x00189328;
  }

  get x00189328(): number | undefined {
    const element = this.dwResponse['00189328'];
    return this.dwResponse['00189328']?.Value[0];
  }

  // CT Image Frame Type Sequence
  get CTImageFrameTypeSequence(): Array<Dataset> | undefined {
    return this.x00189329;
  }

  get x00189329(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189329'];
    return this.dwResponse['00189329']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // X-Ray Tube Current in mA
  get XRayTubeCurrentInmA(): number | undefined {
    return this.x00189330;
  }

  get x00189330(): number | undefined {
    const element = this.dwResponse['00189330'];
    return this.dwResponse['00189330']?.Value[0];
  }

  // Exposure in mAs
  get ExposureInmAs(): number | undefined {
    return this.x00189332;
  }

  get x00189332(): number | undefined {
    const element = this.dwResponse['00189332'];
    return this.dwResponse['00189332']?.Value[0];
  }

  // Constant Volume Flag
  get ConstantVolumeFlag(): string | undefined {
    return this.x00189333;
  }

  get x00189333(): string | undefined {
    const element = this.dwResponse['00189333'];
    return this.dwResponse['00189333']?.Value[0];
  }

  // Fluoroscopy Flag
  get FluoroscopyFlag(): string | undefined {
    return this.x00189334;
  }

  get x00189334(): string | undefined {
    const element = this.dwResponse['00189334'];
    return this.dwResponse['00189334']?.Value[0];
  }

  // Distance Source to Data Collection Center
  get DistanceSourceToDataCollectionCenter(): number | undefined {
    return this.x00189335;
  }

  get x00189335(): number | undefined {
    const element = this.dwResponse['00189335'];
    return this.dwResponse['00189335']?.Value[0];
  }

  // Contrast/Bolus Agent Number
  get ContrastBolusAgentNumber(): number | undefined {
    return this.x00189337;
  }

  get x00189337(): number | undefined {
    const element = this.dwResponse['00189337'];
    return this.dwResponse['00189337']?.Value[0];
  }

  // Contrast/Bolus Ingredient Code Sequence
  get ContrastBolusIngredientCodeSequence(): Array<Dataset> | undefined {
    return this.x00189338;
  }

  get x00189338(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189338'];
    return this.dwResponse['00189338']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Contrast Administration Profile Sequence
  get ContrastAdministrationProfileSequence(): Array<Dataset> | undefined {
    return this.x00189340;
  }

  get x00189340(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189340'];
    return this.dwResponse['00189340']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Contrast/Bolus Usage Sequence
  get ContrastBolusUsageSequence(): Array<Dataset> | undefined {
    return this.x00189341;
  }

  get x00189341(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189341'];
    return this.dwResponse['00189341']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Contrast/Bolus Agent Administered
  get ContrastBolusAgentAdministered(): string | undefined {
    return this.x00189342;
  }

  get x00189342(): string | undefined {
    const element = this.dwResponse['00189342'];
    return this.dwResponse['00189342']?.Value[0];
  }

  // Contrast/Bolus Agent Detected
  get ContrastBolusAgentDetected(): string | undefined {
    return this.x00189343;
  }

  get x00189343(): string | undefined {
    const element = this.dwResponse['00189343'];
    return this.dwResponse['00189343']?.Value[0];
  }

  // Contrast/Bolus Agent Phase
  get ContrastBolusAgentPhase(): string | undefined {
    return this.x00189344;
  }

  get x00189344(): string | undefined {
    const element = this.dwResponse['00189344'];
    return this.dwResponse['00189344']?.Value[0];
  }

  // CTDIvol
  get CTDIvol(): number | undefined {
    return this.x00189345;
  }

  get x00189345(): number | undefined {
    const element = this.dwResponse['00189345'];
    return this.dwResponse['00189345']?.Value[0];
  }

  // CTDI Phantom Type Code Sequence
  get CTDIPhantomTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x00189346;
  }

  get x00189346(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189346'];
    return this.dwResponse['00189346']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Calcium Scoring Mass Factor Patient
  get CalciumScoringMassFactorPatient(): number | undefined {
    return this.x00189351;
  }

  get x00189351(): number | undefined {
    const element = this.dwResponse['00189351'];
    return this.dwResponse['00189351']?.Value[0];
  }

  // Calcium Scoring Mass Factor Device
  get CalciumScoringMassFactorDevice(): Array<number> | undefined {
    return this.x00189352;
  }

  get x00189352(): Array<number> | undefined {
    const element = this.dwResponse['00189352'];
    return this.dwResponse['00189352']?.Value;
  }

  // Energy Weighting Factor
  get EnergyWeightingFactor(): number | undefined {
    return this.x00189353;
  }

  get x00189353(): number | undefined {
    const element = this.dwResponse['00189353'];
    return this.dwResponse['00189353']?.Value[0];
  }

  // CT Additional X-Ray Source Sequence
  get CTAdditionalXRaySourceSequence(): Array<Dataset> | undefined {
    return this.x00189360;
  }

  get x00189360(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189360'];
    return this.dwResponse['00189360']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Projection Pixel Calibration Sequence
  get ProjectionPixelCalibrationSequence(): Array<Dataset> | undefined {
    return this.x00189401;
  }

  get x00189401(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189401'];
    return this.dwResponse['00189401']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Distance Source to Isocenter
  get DistanceSourceToIsocenter(): number | undefined {
    return this.x00189402;
  }

  get x00189402(): number | undefined {
    const element = this.dwResponse['00189402'];
    return this.dwResponse['00189402']?.Value[0];
  }

  // Distance Object to Table Top
  get DistanceObjectToTableTop(): number | undefined {
    return this.x00189403;
  }

  get x00189403(): number | undefined {
    const element = this.dwResponse['00189403'];
    return this.dwResponse['00189403']?.Value[0];
  }

  // Object Pixel Spacing in Center of Beam
  get ObjectPixelSpacingInCenterOfBeam(): Array<number> | undefined {
    return this.x00189404;
  }

  get x00189404(): Array<number> | undefined {
    const element = this.dwResponse['00189404'];
    return this.dwResponse['00189404']?.Value;
  }

  // Positioner Position Sequence
  get PositionerPositionSequence(): Array<Dataset> | undefined {
    return this.x00189405;
  }

  get x00189405(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189405'];
    return this.dwResponse['00189405']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Table Position Sequence
  get TablePositionSequence(): Array<Dataset> | undefined {
    return this.x00189406;
  }

  get x00189406(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189406'];
    return this.dwResponse['00189406']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Collimator Shape Sequence
  get CollimatorShapeSequence(): Array<Dataset> | undefined {
    return this.x00189407;
  }

  get x00189407(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189407'];
    return this.dwResponse['00189407']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Planes in Acquisition
  get PlanesInAcquisition(): string | undefined {
    return this.x00189410;
  }

  get x00189410(): string | undefined {
    const element = this.dwResponse['00189410'];
    return this.dwResponse['00189410']?.Value[0];
  }

  // XA/XRF Frame Characteristics Sequence
  get XAXRFFrameCharacteristicsSequence(): Array<Dataset> | undefined {
    return this.x00189412;
  }

  get x00189412(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189412'];
    return this.dwResponse['00189412']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Frame Acquisition Sequence
  get FrameAcquisitionSequence(): Array<Dataset> | undefined {
    return this.x00189417;
  }

  get x00189417(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189417'];
    return this.dwResponse['00189417']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // X-Ray Receptor Type
  get XRayReceptorType(): string | undefined {
    return this.x00189420;
  }

  get x00189420(): string | undefined {
    const element = this.dwResponse['00189420'];
    return this.dwResponse['00189420']?.Value[0];
  }

  // Acquisition Protocol Name
  get AcquisitionProtocolName(): string | undefined {
    return this.x00189423;
  }

  get x00189423(): string | undefined {
    const element = this.dwResponse['00189423'];
    return this.dwResponse['00189423']?.Value[0];
  }

  // Contrast/Bolus Ingredient Opaque
  get ContrastBolusIngredientOpaque(): string | undefined {
    return this.x00189425;
  }

  get x00189425(): string | undefined {
    const element = this.dwResponse['00189425'];
    return this.dwResponse['00189425']?.Value[0];
  }

  // Distance Receptor Plane to Detector Housing
  get DistanceReceptorPlaneToDetectorHousing(): number | undefined {
    return this.x00189426;
  }

  get x00189426(): number | undefined {
    const element = this.dwResponse['00189426'];
    return this.dwResponse['00189426']?.Value[0];
  }

  // Intensifier Active Shape
  get IntensifierActiveShape(): string | undefined {
    return this.x00189427;
  }

  get x00189427(): string | undefined {
    const element = this.dwResponse['00189427'];
    return this.dwResponse['00189427']?.Value[0];
  }

  // Intensifier Active Dimension(s)
  get IntensifierActiveDimensions(): Array<number> | undefined {
    return this.x00189428;
  }

  get x00189428(): Array<number> | undefined {
    const element = this.dwResponse['00189428'];
    return this.dwResponse['00189428']?.Value;
  }

  // Physical Detector Size
  get PhysicalDetectorSize(): Array<number> | undefined {
    return this.x00189429;
  }

  get x00189429(): Array<number> | undefined {
    const element = this.dwResponse['00189429'];
    return this.dwResponse['00189429']?.Value;
  }

  // Position of Isocenter Projection
  get PositionOfIsocenterProjection(): Array<number> | undefined {
    return this.x00189430;
  }

  get x00189430(): Array<number> | undefined {
    const element = this.dwResponse['00189430'];
    return this.dwResponse['00189430']?.Value;
  }

  // Field of View Sequence
  get FieldOfViewSequence(): Array<Dataset> | undefined {
    return this.x00189432;
  }

  get x00189432(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189432'];
    return this.dwResponse['00189432']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Field of View Description
  get FieldOfViewDescription(): string | undefined {
    return this.x00189433;
  }

  get x00189433(): string | undefined {
    const element = this.dwResponse['00189433'];
    return this.dwResponse['00189433']?.Value[0];
  }

  // Exposure Control Sensing Regions Sequence
  get ExposureControlSensingRegionsSequence(): Array<Dataset> | undefined {
    return this.x00189434;
  }

  get x00189434(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189434'];
    return this.dwResponse['00189434']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Exposure Control Sensing Region Shape
  get ExposureControlSensingRegionShape(): string | undefined {
    return this.x00189435;
  }

  get x00189435(): string | undefined {
    const element = this.dwResponse['00189435'];
    return this.dwResponse['00189435']?.Value[0];
  }

  // Exposure Control Sensing Region Left Vertical Edge
  get ExposureControlSensingRegionLeftVerticalEdge(): Uint8Array | undefined {
    return this.x00189436;
  }

  get x00189436(): Uint8Array | undefined {
    const element = this.dwResponse['00189436'];
    return this.dwResponse['00189436']?.Value[0];
  }

  // Exposure Control Sensing Region Right Vertical Edge
  get ExposureControlSensingRegionRightVerticalEdge(): Uint8Array | undefined {
    return this.x00189437;
  }

  get x00189437(): Uint8Array | undefined {
    const element = this.dwResponse['00189437'];
    return this.dwResponse['00189437']?.Value[0];
  }

  // Exposure Control Sensing Region Upper Horizontal Edge
  get ExposureControlSensingRegionUpperHorizontalEdge(): Uint8Array | undefined {
    return this.x00189438;
  }

  get x00189438(): Uint8Array | undefined {
    const element = this.dwResponse['00189438'];
    return this.dwResponse['00189438']?.Value[0];
  }

  // Exposure Control Sensing Region Lower Horizontal Edge
  get ExposureControlSensingRegionLowerHorizontalEdge(): Uint8Array | undefined {
    return this.x00189439;
  }

  get x00189439(): Uint8Array | undefined {
    const element = this.dwResponse['00189439'];
    return this.dwResponse['00189439']?.Value[0];
  }

  // Center of Circular Exposure Control Sensing Region
  get CenterOfCircularExposureControlSensingRegion(): Array<Uint8Array> | undefined {
    return this.x00189440;
  }

  get x00189440(): Array<Uint8Array> | undefined {
    const element = this.dwResponse['00189440'];
    return this.dwResponse['00189440']?.Value;
  }

  // Radius of Circular Exposure Control Sensing Region
  get RadiusOfCircularExposureControlSensingRegion(): number | undefined {
    return this.x00189441;
  }

  get x00189441(): number | undefined {
    const element = this.dwResponse['00189441'];
    return this.dwResponse['00189441']?.Value[0];
  }

  // Vertices of the Polygonal Exposure Control Sensing Region
  get VerticesOfThePolygonalExposureControlSensingRegion(): Array<Uint8Array> | undefined {
    return this.x00189442;
  }

  get x00189442(): Array<Uint8Array> | undefined {
    const element = this.dwResponse['00189442'];
    return this.dwResponse['00189442']?.Value;
  }

  // Column Angulation (Patient)
  get ColumnAngulationPatient(): number | undefined {
    return this.x00189447;
  }

  get x00189447(): number | undefined {
    const element = this.dwResponse['00189447'];
    return this.dwResponse['00189447']?.Value[0];
  }

  // Beam Angle
  get BeamAngle(): number | undefined {
    return this.x00189449;
  }

  get x00189449(): number | undefined {
    const element = this.dwResponse['00189449'];
    return this.dwResponse['00189449']?.Value[0];
  }

  // Frame Detector Parameters Sequence
  get FrameDetectorParametersSequence(): Array<Dataset> | undefined {
    return this.x00189451;
  }

  get x00189451(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189451'];
    return this.dwResponse['00189451']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Calculated Anatomy Thickness
  get CalculatedAnatomyThickness(): number | undefined {
    return this.x00189452;
  }

  get x00189452(): number | undefined {
    const element = this.dwResponse['00189452'];
    return this.dwResponse['00189452']?.Value[0];
  }

  // Calibration Sequence
  get CalibrationSequence(): Array<Dataset> | undefined {
    return this.x00189455;
  }

  get x00189455(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189455'];
    return this.dwResponse['00189455']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Object Thickness Sequence
  get ObjectThicknessSequence(): Array<Dataset> | undefined {
    return this.x00189456;
  }

  get x00189456(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189456'];
    return this.dwResponse['00189456']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Plane Identification
  get PlaneIdentification(): string | undefined {
    return this.x00189457;
  }

  get x00189457(): string | undefined {
    const element = this.dwResponse['00189457'];
    return this.dwResponse['00189457']?.Value[0];
  }

  // Field of View Dimension(s) in Float
  get FieldOfViewDimensionsInFloat(): Array<number> | undefined {
    return this.x00189461;
  }

  get x00189461(): Array<number> | undefined {
    const element = this.dwResponse['00189461'];
    return this.dwResponse['00189461']?.Value;
  }

  // Isocenter Reference System Sequence
  get IsocenterReferenceSystemSequence(): Array<Dataset> | undefined {
    return this.x00189462;
  }

  get x00189462(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189462'];
    return this.dwResponse['00189462']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Positioner Isocenter Primary Angle
  get PositionerIsocenterPrimaryAngle(): number | undefined {
    return this.x00189463;
  }

  get x00189463(): number | undefined {
    const element = this.dwResponse['00189463'];
    return this.dwResponse['00189463']?.Value[0];
  }

  // Positioner Isocenter Secondary Angle
  get PositionerIsocenterSecondaryAngle(): number | undefined {
    return this.x00189464;
  }

  get x00189464(): number | undefined {
    const element = this.dwResponse['00189464'];
    return this.dwResponse['00189464']?.Value[0];
  }

  // Positioner Isocenter Detector Rotation Angle
  get PositionerIsocenterDetectorRotationAngle(): number | undefined {
    return this.x00189465;
  }

  get x00189465(): number | undefined {
    const element = this.dwResponse['00189465'];
    return this.dwResponse['00189465']?.Value[0];
  }

  // Table X Position to Isocenter
  get TableXPositionToIsocenter(): number | undefined {
    return this.x00189466;
  }

  get x00189466(): number | undefined {
    const element = this.dwResponse['00189466'];
    return this.dwResponse['00189466']?.Value[0];
  }

  // Table Y Position to Isocenter
  get TableYPositionToIsocenter(): number | undefined {
    return this.x00189467;
  }

  get x00189467(): number | undefined {
    const element = this.dwResponse['00189467'];
    return this.dwResponse['00189467']?.Value[0];
  }

  // Table Z Position to Isocenter
  get TableZPositionToIsocenter(): number | undefined {
    return this.x00189468;
  }

  get x00189468(): number | undefined {
    const element = this.dwResponse['00189468'];
    return this.dwResponse['00189468']?.Value[0];
  }

  // Table Horizontal Rotation Angle
  get TableHorizontalRotationAngle(): number | undefined {
    return this.x00189469;
  }

  get x00189469(): number | undefined {
    const element = this.dwResponse['00189469'];
    return this.dwResponse['00189469']?.Value[0];
  }

  // Table Head Tilt Angle
  get TableHeadTiltAngle(): number | undefined {
    return this.x00189470;
  }

  get x00189470(): number | undefined {
    const element = this.dwResponse['00189470'];
    return this.dwResponse['00189470']?.Value[0];
  }

  // Table Cradle Tilt Angle
  get TableCradleTiltAngle(): number | undefined {
    return this.x00189471;
  }

  get x00189471(): number | undefined {
    const element = this.dwResponse['00189471'];
    return this.dwResponse['00189471']?.Value[0];
  }

  // Frame Display Shutter Sequence
  get FrameDisplayShutterSequence(): Array<Dataset> | undefined {
    return this.x00189472;
  }

  get x00189472(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189472'];
    return this.dwResponse['00189472']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Acquired Image Area Dose Product
  get AcquiredImageAreaDoseProduct(): number | undefined {
    return this.x00189473;
  }

  get x00189473(): number | undefined {
    const element = this.dwResponse['00189473'];
    return this.dwResponse['00189473']?.Value[0];
  }

  // C-arm Positioner Tabletop Relationship
  get CArmPositionerTabletopRelationship(): string | undefined {
    return this.x00189474;
  }

  get x00189474(): string | undefined {
    const element = this.dwResponse['00189474'];
    return this.dwResponse['00189474']?.Value[0];
  }

  // X-Ray Geometry Sequence
  get XRayGeometrySequence(): Array<Dataset> | undefined {
    return this.x00189476;
  }

  get x00189476(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189476'];
    return this.dwResponse['00189476']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Irradiation Event Identification Sequence
  get IrradiationEventIdentificationSequence(): Array<Dataset> | undefined {
    return this.x00189477;
  }

  get x00189477(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189477'];
    return this.dwResponse['00189477']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // X-Ray 3D Frame Type Sequence
  get XRay3DFrameTypeSequence(): Array<Dataset> | undefined {
    return this.x00189504;
  }

  get x00189504(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189504'];
    return this.dwResponse['00189504']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Contributing Sources Sequence
  get ContributingSourcesSequence(): Array<Dataset> | undefined {
    return this.x00189506;
  }

  get x00189506(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189506'];
    return this.dwResponse['00189506']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // X-Ray 3D Acquisition Sequence
  get XRay3DAcquisitionSequence(): Array<Dataset> | undefined {
    return this.x00189507;
  }

  get x00189507(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189507'];
    return this.dwResponse['00189507']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Primary Positioner Scan Arc
  get PrimaryPositionerScanArc(): number | undefined {
    return this.x00189508;
  }

  get x00189508(): number | undefined {
    const element = this.dwResponse['00189508'];
    return this.dwResponse['00189508']?.Value[0];
  }

  // Secondary Positioner Scan Arc
  get SecondaryPositionerScanArc(): number | undefined {
    return this.x00189509;
  }

  get x00189509(): number | undefined {
    const element = this.dwResponse['00189509'];
    return this.dwResponse['00189509']?.Value[0];
  }

  // Primary Positioner Scan Start Angle
  get PrimaryPositionerScanStartAngle(): number | undefined {
    return this.x00189510;
  }

  get x00189510(): number | undefined {
    const element = this.dwResponse['00189510'];
    return this.dwResponse['00189510']?.Value[0];
  }

  // Secondary Positioner Scan Start Angle
  get SecondaryPositionerScanStartAngle(): number | undefined {
    return this.x00189511;
  }

  get x00189511(): number | undefined {
    const element = this.dwResponse['00189511'];
    return this.dwResponse['00189511']?.Value[0];
  }

  // Primary Positioner Increment
  get PrimaryPositionerIncrement(): number | undefined {
    return this.x00189514;
  }

  get x00189514(): number | undefined {
    const element = this.dwResponse['00189514'];
    return this.dwResponse['00189514']?.Value[0];
  }

  // Secondary Positioner Increment
  get SecondaryPositionerIncrement(): number | undefined {
    return this.x00189515;
  }

  get x00189515(): number | undefined {
    const element = this.dwResponse['00189515'];
    return this.dwResponse['00189515']?.Value[0];
  }

  // Start Acquisition DateTime
  get StartAcquisitionDateTime(): string | undefined {
    return this.x00189516;
  }

  get x00189516(): string | undefined {
    const element = this.dwResponse['00189516'];
    return this.dwResponse['00189516']?.Value[0];
  }

  // End Acquisition DateTime
  get EndAcquisitionDateTime(): string | undefined {
    return this.x00189517;
  }

  get x00189517(): string | undefined {
    const element = this.dwResponse['00189517'];
    return this.dwResponse['00189517']?.Value[0];
  }

  // Primary Positioner Increment Sign
  get PrimaryPositionerIncrementSign(): Uint8Array | undefined {
    return this.x00189518;
  }

  get x00189518(): Uint8Array | undefined {
    const element = this.dwResponse['00189518'];
    return this.dwResponse['00189518']?.Value[0];
  }

  // Secondary Positioner Increment Sign
  get SecondaryPositionerIncrementSign(): Uint8Array | undefined {
    return this.x00189519;
  }

  get x00189519(): Uint8Array | undefined {
    const element = this.dwResponse['00189519'];
    return this.dwResponse['00189519']?.Value[0];
  }

  // Application Name
  get ApplicationName(): string | undefined {
    return this.x00189524;
  }

  get x00189524(): string | undefined {
    const element = this.dwResponse['00189524'];
    return this.dwResponse['00189524']?.Value[0];
  }

  // Application Version
  get ApplicationVersion(): string | undefined {
    return this.x00189525;
  }

  get x00189525(): string | undefined {
    const element = this.dwResponse['00189525'];
    return this.dwResponse['00189525']?.Value[0];
  }

  // Application Manufacturer
  get ApplicationManufacturer(): string | undefined {
    return this.x00189526;
  }

  get x00189526(): string | undefined {
    const element = this.dwResponse['00189526'];
    return this.dwResponse['00189526']?.Value[0];
  }

  // Algorithm Type
  get AlgorithmType(): string | undefined {
    return this.x00189527;
  }

  get x00189527(): string | undefined {
    const element = this.dwResponse['00189527'];
    return this.dwResponse['00189527']?.Value[0];
  }

  // Algorithm Description
  get AlgorithmDescription(): string | undefined {
    return this.x00189528;
  }

  get x00189528(): string | undefined {
    const element = this.dwResponse['00189528'];
    return this.dwResponse['00189528']?.Value[0];
  }

  // X-Ray 3D Reconstruction Sequence
  get XRay3DReconstructionSequence(): Array<Dataset> | undefined {
    return this.x00189530;
  }

  get x00189530(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189530'];
    return this.dwResponse['00189530']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Reconstruction Description
  get ReconstructionDescription(): string | undefined {
    return this.x00189531;
  }

  get x00189531(): string | undefined {
    const element = this.dwResponse['00189531'];
    return this.dwResponse['00189531']?.Value[0];
  }

  // Per Projection Acquisition Sequence
  get PerProjectionAcquisitionSequence(): Array<Dataset> | undefined {
    return this.x00189538;
  }

  get x00189538(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189538'];
    return this.dwResponse['00189538']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Detector Position Sequence
  get DetectorPositionSequence(): Array<Dataset> | undefined {
    return this.x00189541;
  }

  get x00189541(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189541'];
    return this.dwResponse['00189541']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // X-Ray Acquisition Dose Sequence
  get XRayAcquisitionDoseSequence(): Array<Dataset> | undefined {
    return this.x00189542;
  }

  get x00189542(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189542'];
    return this.dwResponse['00189542']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // X-Ray Source Isocenter Primary Angle
  get XRaySourceIsocenterPrimaryAngle(): number | undefined {
    return this.x00189543;
  }

  get x00189543(): number | undefined {
    const element = this.dwResponse['00189543'];
    return this.dwResponse['00189543']?.Value[0];
  }

  // X-Ray Source Isocenter Secondary Angle
  get XRaySourceIsocenterSecondaryAngle(): number | undefined {
    return this.x00189544;
  }

  get x00189544(): number | undefined {
    const element = this.dwResponse['00189544'];
    return this.dwResponse['00189544']?.Value[0];
  }

  // Breast Support Isocenter Primary Angle
  get BreastSupportIsocenterPrimaryAngle(): number | undefined {
    return this.x00189545;
  }

  get x00189545(): number | undefined {
    const element = this.dwResponse['00189545'];
    return this.dwResponse['00189545']?.Value[0];
  }

  // Breast Support Isocenter Secondary Angle
  get BreastSupportIsocenterSecondaryAngle(): number | undefined {
    return this.x00189546;
  }

  get x00189546(): number | undefined {
    const element = this.dwResponse['00189546'];
    return this.dwResponse['00189546']?.Value[0];
  }

  // Breast Support X Position to Isocenter
  get BreastSupportXPositionToIsocenter(): number | undefined {
    return this.x00189547;
  }

  get x00189547(): number | undefined {
    const element = this.dwResponse['00189547'];
    return this.dwResponse['00189547']?.Value[0];
  }

  // Breast Support Y Position to Isocenter
  get BreastSupportYPositionToIsocenter(): number | undefined {
    return this.x00189548;
  }

  get x00189548(): number | undefined {
    const element = this.dwResponse['00189548'];
    return this.dwResponse['00189548']?.Value[0];
  }

  // Breast Support Z Position to Isocenter
  get BreastSupportZPositionToIsocenter(): number | undefined {
    return this.x00189549;
  }

  get x00189549(): number | undefined {
    const element = this.dwResponse['00189549'];
    return this.dwResponse['00189549']?.Value[0];
  }

  // Detector Isocenter Primary Angle
  get DetectorIsocenterPrimaryAngle(): number | undefined {
    return this.x00189550;
  }

  get x00189550(): number | undefined {
    const element = this.dwResponse['00189550'];
    return this.dwResponse['00189550']?.Value[0];
  }

  // Detector Isocenter Secondary Angle
  get DetectorIsocenterSecondaryAngle(): number | undefined {
    return this.x00189551;
  }

  get x00189551(): number | undefined {
    const element = this.dwResponse['00189551'];
    return this.dwResponse['00189551']?.Value[0];
  }

  // Detector X Position to Isocenter
  get DetectorXPositionToIsocenter(): number | undefined {
    return this.x00189552;
  }

  get x00189552(): number | undefined {
    const element = this.dwResponse['00189552'];
    return this.dwResponse['00189552']?.Value[0];
  }

  // Detector Y Position to Isocenter
  get DetectorYPositionToIsocenter(): number | undefined {
    return this.x00189553;
  }

  get x00189553(): number | undefined {
    const element = this.dwResponse['00189553'];
    return this.dwResponse['00189553']?.Value[0];
  }

  // Detector Z Position to Isocenter
  get DetectorZPositionToIsocenter(): number | undefined {
    return this.x00189554;
  }

  get x00189554(): number | undefined {
    const element = this.dwResponse['00189554'];
    return this.dwResponse['00189554']?.Value[0];
  }

  // X-Ray Grid Sequence
  get XRayGridSequence(): Array<Dataset> | undefined {
    return this.x00189555;
  }

  get x00189555(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189555'];
    return this.dwResponse['00189555']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // X-Ray Filter Sequence
  get XRayFilterSequence(): Array<Dataset> | undefined {
    return this.x00189556;
  }

  get x00189556(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189556'];
    return this.dwResponse['00189556']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Detector Active Area TLHC Position
  get DetectorActiveAreaTLHCPosition(): Array<number> | undefined {
    return this.x00189557;
  }

  get x00189557(): Array<number> | undefined {
    const element = this.dwResponse['00189557'];
    return this.dwResponse['00189557']?.Value;
  }

  // Detector Active Area Orientation
  get DetectorActiveAreaOrientation(): Array<number> | undefined {
    return this.x00189558;
  }

  get x00189558(): Array<number> | undefined {
    const element = this.dwResponse['00189558'];
    return this.dwResponse['00189558']?.Value;
  }

  // Positioner Primary Angle Direction
  get PositionerPrimaryAngleDirection(): string | undefined {
    return this.x00189559;
  }

  get x00189559(): string | undefined {
    const element = this.dwResponse['00189559'];
    return this.dwResponse['00189559']?.Value[0];
  }

  // Diffusion b-matrix Sequence
  get DiffusionBMatrixSequence(): Array<Dataset> | undefined {
    return this.x00189601;
  }

  get x00189601(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189601'];
    return this.dwResponse['00189601']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Diffusion b-value XX
  get DiffusionBValueXX(): number | undefined {
    return this.x00189602;
  }

  get x00189602(): number | undefined {
    const element = this.dwResponse['00189602'];
    return this.dwResponse['00189602']?.Value[0];
  }

  // Diffusion b-value XY
  get DiffusionBValueXY(): number | undefined {
    return this.x00189603;
  }

  get x00189603(): number | undefined {
    const element = this.dwResponse['00189603'];
    return this.dwResponse['00189603']?.Value[0];
  }

  // Diffusion b-value XZ
  get DiffusionBValueXZ(): number | undefined {
    return this.x00189604;
  }

  get x00189604(): number | undefined {
    const element = this.dwResponse['00189604'];
    return this.dwResponse['00189604']?.Value[0];
  }

  // Diffusion b-value YY
  get DiffusionBValueYY(): number | undefined {
    return this.x00189605;
  }

  get x00189605(): number | undefined {
    const element = this.dwResponse['00189605'];
    return this.dwResponse['00189605']?.Value[0];
  }

  // Diffusion b-value YZ
  get DiffusionBValueYZ(): number | undefined {
    return this.x00189606;
  }

  get x00189606(): number | undefined {
    const element = this.dwResponse['00189606'];
    return this.dwResponse['00189606']?.Value[0];
  }

  // Diffusion b-value ZZ
  get DiffusionBValueZZ(): number | undefined {
    return this.x00189607;
  }

  get x00189607(): number | undefined {
    const element = this.dwResponse['00189607'];
    return this.dwResponse['00189607']?.Value[0];
  }

  // Decay Correction DateTime
  get DecayCorrectionDateTime(): string | undefined {
    return this.x00189701;
  }

  get x00189701(): string | undefined {
    const element = this.dwResponse['00189701'];
    return this.dwResponse['00189701']?.Value[0];
  }

  // Start Density Threshold
  get StartDensityThreshold(): number | undefined {
    return this.x00189715;
  }

  get x00189715(): number | undefined {
    const element = this.dwResponse['00189715'];
    return this.dwResponse['00189715']?.Value[0];
  }

  // Start Relative Density Difference Threshold
  get StartRelativeDensityDifferenceThreshold(): number | undefined {
    return this.x00189716;
  }

  get x00189716(): number | undefined {
    const element = this.dwResponse['00189716'];
    return this.dwResponse['00189716']?.Value[0];
  }

  // Start Cardiac Trigger Count Threshold
  get StartCardiacTriggerCountThreshold(): number | undefined {
    return this.x00189717;
  }

  get x00189717(): number | undefined {
    const element = this.dwResponse['00189717'];
    return this.dwResponse['00189717']?.Value[0];
  }

  // Start Respiratory Trigger Count Threshold
  get StartRespiratoryTriggerCountThreshold(): number | undefined {
    return this.x00189718;
  }

  get x00189718(): number | undefined {
    const element = this.dwResponse['00189718'];
    return this.dwResponse['00189718']?.Value[0];
  }

  // Termination Counts Threshold
  get TerminationCountsThreshold(): number | undefined {
    return this.x00189719;
  }

  get x00189719(): number | undefined {
    const element = this.dwResponse['00189719'];
    return this.dwResponse['00189719']?.Value[0];
  }

  // Termination Density Threshold
  get TerminationDensityThreshold(): number | undefined {
    return this.x00189720;
  }

  get x00189720(): number | undefined {
    const element = this.dwResponse['00189720'];
    return this.dwResponse['00189720']?.Value[0];
  }

  // Termination Relative Density Threshold
  get TerminationRelativeDensityThreshold(): number | undefined {
    return this.x00189721;
  }

  get x00189721(): number | undefined {
    const element = this.dwResponse['00189721'];
    return this.dwResponse['00189721']?.Value[0];
  }

  // Termination Time Threshold
  get TerminationTimeThreshold(): number | undefined {
    return this.x00189722;
  }

  get x00189722(): number | undefined {
    const element = this.dwResponse['00189722'];
    return this.dwResponse['00189722']?.Value[0];
  }

  // Termination Cardiac Trigger Count Threshold
  get TerminationCardiacTriggerCountThreshold(): number | undefined {
    return this.x00189723;
  }

  get x00189723(): number | undefined {
    const element = this.dwResponse['00189723'];
    return this.dwResponse['00189723']?.Value[0];
  }

  // Termination Respiratory Trigger Count Threshold
  get TerminationRespiratoryTriggerCountThreshold(): number | undefined {
    return this.x00189724;
  }

  get x00189724(): number | undefined {
    const element = this.dwResponse['00189724'];
    return this.dwResponse['00189724']?.Value[0];
  }

  // Detector Geometry
  get DetectorGeometry(): string | undefined {
    return this.x00189725;
  }

  get x00189725(): string | undefined {
    const element = this.dwResponse['00189725'];
    return this.dwResponse['00189725']?.Value[0];
  }

  // Transverse Detector Separation
  get TransverseDetectorSeparation(): number | undefined {
    return this.x00189726;
  }

  get x00189726(): number | undefined {
    const element = this.dwResponse['00189726'];
    return this.dwResponse['00189726']?.Value[0];
  }

  // Axial Detector Dimension
  get AxialDetectorDimension(): number | undefined {
    return this.x00189727;
  }

  get x00189727(): number | undefined {
    const element = this.dwResponse['00189727'];
    return this.dwResponse['00189727']?.Value[0];
  }

  // Radiopharmaceutical Agent Number
  get RadiopharmaceuticalAgentNumber(): number | undefined {
    return this.x00189729;
  }

  get x00189729(): number | undefined {
    const element = this.dwResponse['00189729'];
    return this.dwResponse['00189729']?.Value[0];
  }

  // PET Frame Acquisition Sequence
  get PETFrameAcquisitionSequence(): Array<Dataset> | undefined {
    return this.x00189732;
  }

  get x00189732(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189732'];
    return this.dwResponse['00189732']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // PET Detector Motion Details Sequence
  get PETDetectorMotionDetailsSequence(): Array<Dataset> | undefined {
    return this.x00189733;
  }

  get x00189733(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189733'];
    return this.dwResponse['00189733']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // PET Table Dynamics Sequence
  get PETTableDynamicsSequence(): Array<Dataset> | undefined {
    return this.x00189734;
  }

  get x00189734(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189734'];
    return this.dwResponse['00189734']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // PET Position Sequence
  get PETPositionSequence(): Array<Dataset> | undefined {
    return this.x00189735;
  }

  get x00189735(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189735'];
    return this.dwResponse['00189735']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // PET Frame Correction Factors Sequence
  get PETFrameCorrectionFactorsSequence(): Array<Dataset> | undefined {
    return this.x00189736;
  }

  get x00189736(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189736'];
    return this.dwResponse['00189736']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Radiopharmaceutical Usage Sequence
  get RadiopharmaceuticalUsageSequence(): Array<Dataset> | undefined {
    return this.x00189737;
  }

  get x00189737(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189737'];
    return this.dwResponse['00189737']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Attenuation Correction Source
  get AttenuationCorrectionSource(): string | undefined {
    return this.x00189738;
  }

  get x00189738(): string | undefined {
    const element = this.dwResponse['00189738'];
    return this.dwResponse['00189738']?.Value[0];
  }

  // Number of Iterations
  get NumberOfIterations(): number | undefined {
    return this.x00189739;
  }

  get x00189739(): number | undefined {
    const element = this.dwResponse['00189739'];
    return this.dwResponse['00189739']?.Value[0];
  }

  // Number of Subsets
  get NumberOfSubsets(): number | undefined {
    return this.x00189740;
  }

  get x00189740(): number | undefined {
    const element = this.dwResponse['00189740'];
    return this.dwResponse['00189740']?.Value[0];
  }

  // PET Reconstruction Sequence
  get PETReconstructionSequence(): Array<Dataset> | undefined {
    return this.x00189749;
  }

  get x00189749(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189749'];
    return this.dwResponse['00189749']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // PET Frame Type Sequence
  get PETFrameTypeSequence(): Array<Dataset> | undefined {
    return this.x00189751;
  }

  get x00189751(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189751'];
    return this.dwResponse['00189751']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Time of Flight Information Used
  get TimeOfFlightInformationUsed(): string | undefined {
    return this.x00189755;
  }

  get x00189755(): string | undefined {
    const element = this.dwResponse['00189755'];
    return this.dwResponse['00189755']?.Value[0];
  }

  // Reconstruction Type
  get ReconstructionType(): string | undefined {
    return this.x00189756;
  }

  get x00189756(): string | undefined {
    const element = this.dwResponse['00189756'];
    return this.dwResponse['00189756']?.Value[0];
  }

  // Decay Corrected
  get DecayCorrected(): string | undefined {
    return this.x00189758;
  }

  get x00189758(): string | undefined {
    const element = this.dwResponse['00189758'];
    return this.dwResponse['00189758']?.Value[0];
  }

  // Attenuation Corrected
  get AttenuationCorrected(): string | undefined {
    return this.x00189759;
  }

  get x00189759(): string | undefined {
    const element = this.dwResponse['00189759'];
    return this.dwResponse['00189759']?.Value[0];
  }

  // Scatter Corrected
  get ScatterCorrected(): string | undefined {
    return this.x00189760;
  }

  get x00189760(): string | undefined {
    const element = this.dwResponse['00189760'];
    return this.dwResponse['00189760']?.Value[0];
  }

  // Dead Time Corrected
  get DeadTimeCorrected(): string | undefined {
    return this.x00189761;
  }

  get x00189761(): string | undefined {
    const element = this.dwResponse['00189761'];
    return this.dwResponse['00189761']?.Value[0];
  }

  // Gantry Motion Corrected
  get GantryMotionCorrected(): string | undefined {
    return this.x00189762;
  }

  get x00189762(): string | undefined {
    const element = this.dwResponse['00189762'];
    return this.dwResponse['00189762']?.Value[0];
  }

  // Patient Motion Corrected
  get PatientMotionCorrected(): string | undefined {
    return this.x00189763;
  }

  get x00189763(): string | undefined {
    const element = this.dwResponse['00189763'];
    return this.dwResponse['00189763']?.Value[0];
  }

  // Count Loss Normalization Corrected
  get CountLossNormalizationCorrected(): string | undefined {
    return this.x00189764;
  }

  get x00189764(): string | undefined {
    const element = this.dwResponse['00189764'];
    return this.dwResponse['00189764']?.Value[0];
  }

  // Randoms Corrected
  get RandomsCorrected(): string | undefined {
    return this.x00189765;
  }

  get x00189765(): string | undefined {
    const element = this.dwResponse['00189765'];
    return this.dwResponse['00189765']?.Value[0];
  }

  // Non-uniform Radial Sampling Corrected
  get NonUniformRadialSamplingCorrected(): string | undefined {
    return this.x00189766;
  }

  get x00189766(): string | undefined {
    const element = this.dwResponse['00189766'];
    return this.dwResponse['00189766']?.Value[0];
  }

  // Sensitivity Calibrated
  get SensitivityCalibrated(): string | undefined {
    return this.x00189767;
  }

  get x00189767(): string | undefined {
    const element = this.dwResponse['00189767'];
    return this.dwResponse['00189767']?.Value[0];
  }

  // Detector Normalization Correction
  get DetectorNormalizationCorrection(): string | undefined {
    return this.x00189768;
  }

  get x00189768(): string | undefined {
    const element = this.dwResponse['00189768'];
    return this.dwResponse['00189768']?.Value[0];
  }

  // Iterative Reconstruction Method
  get IterativeReconstructionMethod(): string | undefined {
    return this.x00189769;
  }

  get x00189769(): string | undefined {
    const element = this.dwResponse['00189769'];
    return this.dwResponse['00189769']?.Value[0];
  }

  // Attenuation Correction Temporal Relationship
  get AttenuationCorrectionTemporalRelationship(): string | undefined {
    return this.x00189770;
  }

  get x00189770(): string | undefined {
    const element = this.dwResponse['00189770'];
    return this.dwResponse['00189770']?.Value[0];
  }

  // Patient Physiological State Sequence
  get PatientPhysiologicalStateSequence(): Array<Dataset> | undefined {
    return this.x00189771;
  }

  get x00189771(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189771'];
    return this.dwResponse['00189771']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Patient Physiological State Code Sequence
  get PatientPhysiologicalStateCodeSequence(): Array<Dataset> | undefined {
    return this.x00189772;
  }

  get x00189772(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189772'];
    return this.dwResponse['00189772']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Depth(s) of Focus
  get DepthsOfFocus(): Array<number> | undefined {
    return this.x00189801;
  }

  get x00189801(): Array<number> | undefined {
    const element = this.dwResponse['00189801'];
    return this.dwResponse['00189801']?.Value;
  }

  // Excluded Intervals Sequence
  get ExcludedIntervalsSequence(): Array<Dataset> | undefined {
    return this.x00189803;
  }

  get x00189803(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189803'];
    return this.dwResponse['00189803']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Exclusion Start DateTime
  get ExclusionStartDateTime(): string | undefined {
    return this.x00189804;
  }

  get x00189804(): string | undefined {
    const element = this.dwResponse['00189804'];
    return this.dwResponse['00189804']?.Value[0];
  }

  // Exclusion Duration
  get ExclusionDuration(): number | undefined {
    return this.x00189805;
  }

  get x00189805(): number | undefined {
    const element = this.dwResponse['00189805'];
    return this.dwResponse['00189805']?.Value[0];
  }

  // US Image Description Sequence
  get USImageDescriptionSequence(): Array<Dataset> | undefined {
    return this.x00189806;
  }

  get x00189806(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189806'];
    return this.dwResponse['00189806']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Image Data Type Sequence
  get ImageDataTypeSequence(): Array<Dataset> | undefined {
    return this.x00189807;
  }

  get x00189807(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189807'];
    return this.dwResponse['00189807']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Data Type
  get DataType(): string | undefined {
    return this.x00189808;
  }

  get x00189808(): string | undefined {
    const element = this.dwResponse['00189808'];
    return this.dwResponse['00189808']?.Value[0];
  }

  // Transducer Scan Pattern Code Sequence
  get TransducerScanPatternCodeSequence(): Array<Dataset> | undefined {
    return this.x00189809;
  }

  get x00189809(): Array<Dataset> | undefined {
    const element = this.dwResponse['00189809'];
    return this.dwResponse['00189809']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Aliased Data Type
  get AliasedDataType(): string | undefined {
    return this.x0018980b;
  }

  get x0018980b(): string | undefined {
    const element = this.dwResponse['0018980b'];
    return this.dwResponse['0018980b']?.Value[0];
  }

  // Position Measuring Device Used
  get PositionMeasuringDeviceUsed(): string | undefined {
    return this.x0018980c;
  }

  get x0018980c(): string | undefined {
    const element = this.dwResponse['0018980c'];
    return this.dwResponse['0018980c']?.Value[0];
  }

  // Transducer Geometry Code Sequence
  get TransducerGeometryCodeSequence(): Array<Dataset> | undefined {
    return this.x0018980d;
  }

  get x0018980d(): Array<Dataset> | undefined {
    const element = this.dwResponse['0018980d'];
    return this.dwResponse['0018980d']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Transducer Beam Steering Code Sequence
  get TransducerBeamSteeringCodeSequence(): Array<Dataset> | undefined {
    return this.x0018980e;
  }

  get x0018980e(): Array<Dataset> | undefined {
    const element = this.dwResponse['0018980e'];
    return this.dwResponse['0018980e']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Transducer Application Code Sequence
  get TransducerApplicationCodeSequence(): Array<Dataset> | undefined {
    return this.x0018980f;
  }

  get x0018980f(): Array<Dataset> | undefined {
    const element = this.dwResponse['0018980f'];
    return this.dwResponse['0018980f']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Zero Velocity Pixel Value
  get ZeroVelocityPixelValue(): number | undefined {
    return this.x00189810;
  }

  get x00189810(): number | undefined {
    const element = this.dwResponse['00189810'];
    return this.dwResponse['00189810']?.Value[0];
  }

  // Contributing Equipment Sequence
  get ContributingEquipmentSequence(): Array<Dataset> | undefined {
    return this.x0018a001;
  }

  get x0018a001(): Array<Dataset> | undefined {
    const element = this.dwResponse['0018a001'];
    return this.dwResponse['0018a001']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Contribution DateTime
  get ContributionDateTime(): string | undefined {
    return this.x0018a002;
  }

  get x0018a002(): string | undefined {
    const element = this.dwResponse['0018a002'];
    return this.dwResponse['0018a002']?.Value[0];
  }

  // Study Instance UID
  get StudyInstanceUID(): string | undefined {
    return this.x0020000d;
  }

  get x0020000d(): string | undefined {
    const element = this.dwResponse['0020000d'];
    return this.dwResponse['0020000d']?.Value[0];
  }

  // Series Instance UID
  get SeriesInstanceUID(): string | undefined {
    return this.x0020000e;
  }

  get x0020000e(): string | undefined {
    const element = this.dwResponse['0020000e'];
    return this.dwResponse['0020000e']?.Value[0];
  }

  // Study ID
  get StudyID(): string | undefined {
    return this.x00200010;
  }

  get x00200010(): string | undefined {
    const element = this.dwResponse['00200010'];
    return this.dwResponse['00200010']?.Value[0];
  }

  // Series Number
  get SeriesNumber(): number | undefined {
    return this.x00200011;
  }

  get x00200011(): number | undefined {
    const element = this.dwResponse['00200011'];
    return this.dwResponse['00200011']?.Value[0];
  }

  // Acquisition Number
  get AcquisitionNumber(): number | undefined {
    return this.x00200012;
  }

  get x00200012(): number | undefined {
    const element = this.dwResponse['00200012'];
    return this.dwResponse['00200012']?.Value[0];
  }

  // Instance Number
  get InstanceNumber(): number | undefined {
    return this.x00200013;
  }

  get x00200013(): number | undefined {
    const element = this.dwResponse['00200013'];
    return this.dwResponse['00200013']?.Value[0];
  }

  // Isotope Number
  get IsotopeNumber(): number | undefined {
    return this.x00200014;
  }

  get x00200014(): number | undefined {
    const element = this.dwResponse['00200014'];
    return this.dwResponse['00200014']?.Value[0];
  }

  // Phase Number
  get PhaseNumber(): number | undefined {
    return this.x00200015;
  }

  get x00200015(): number | undefined {
    const element = this.dwResponse['00200015'];
    return this.dwResponse['00200015']?.Value[0];
  }

  // Interval Number
  get IntervalNumber(): number | undefined {
    return this.x00200016;
  }

  get x00200016(): number | undefined {
    const element = this.dwResponse['00200016'];
    return this.dwResponse['00200016']?.Value[0];
  }

  // Time Slot Number
  get TimeSlotNumber(): number | undefined {
    return this.x00200017;
  }

  get x00200017(): number | undefined {
    const element = this.dwResponse['00200017'];
    return this.dwResponse['00200017']?.Value[0];
  }

  // Angle Number
  get AngleNumber(): number | undefined {
    return this.x00200018;
  }

  get x00200018(): number | undefined {
    const element = this.dwResponse['00200018'];
    return this.dwResponse['00200018']?.Value[0];
  }

  // Item Number
  get ItemNumber(): number | undefined {
    return this.x00200019;
  }

  get x00200019(): number | undefined {
    const element = this.dwResponse['00200019'];
    return this.dwResponse['00200019']?.Value[0];
  }

  // Patient Orientation
  get PatientOrientation(): Array<string> | undefined {
    return this.x00200020;
  }

  get x00200020(): Array<string> | undefined {
    const element = this.dwResponse['00200020'];
    return this.dwResponse['00200020']?.Value;
  }

  // Overlay Number
  get OverlayNumber(): number | undefined {
    return this.x00200022;
  }

  get x00200022(): number | undefined {
    const element = this.dwResponse['00200022'];
    return this.dwResponse['00200022']?.Value[0];
  }

  // Curve Number
  get CurveNumber(): number | undefined {
    return this.x00200024;
  }

  get x00200024(): number | undefined {
    const element = this.dwResponse['00200024'];
    return this.dwResponse['00200024']?.Value[0];
  }

  // LUT Number
  get LUTNumber(): number | undefined {
    return this.x00200026;
  }

  get x00200026(): number | undefined {
    const element = this.dwResponse['00200026'];
    return this.dwResponse['00200026']?.Value[0];
  }

  // Image Position
  get ImagePosition(): Array<number> | undefined {
    return this.x00200030;
  }

  get x00200030(): Array<number> | undefined {
    const element = this.dwResponse['00200030'];
    return this.dwResponse['00200030']?.Value;
  }

  // Image Position (Patient)
  get ImagePositionPatient(): Array<number> | undefined {
    return this.x00200032;
  }

  get x00200032(): Array<number> | undefined {
    const element = this.dwResponse['00200032'];
    return this.dwResponse['00200032']?.Value;
  }

  // Image Orientation
  get ImageOrientation(): Array<number> | undefined {
    return this.x00200035;
  }

  get x00200035(): Array<number> | undefined {
    const element = this.dwResponse['00200035'];
    return this.dwResponse['00200035']?.Value;
  }

  // Image Orientation (Patient)
  get ImageOrientationPatient(): Array<number> | undefined {
    return this.x00200037;
  }

  get x00200037(): Array<number> | undefined {
    const element = this.dwResponse['00200037'];
    return this.dwResponse['00200037']?.Value;
  }

  // Location
  get Location(): number | undefined {
    return this.x00200050;
  }

  get x00200050(): number | undefined {
    const element = this.dwResponse['00200050'];
    return this.dwResponse['00200050']?.Value[0];
  }

  // Frame of Reference UID
  get FrameOfReferenceUID(): string | undefined {
    return this.x00200052;
  }

  get x00200052(): string | undefined {
    const element = this.dwResponse['00200052'];
    return this.dwResponse['00200052']?.Value[0];
  }

  // Laterality
  get Laterality(): string | undefined {
    return this.x00200060;
  }

  get x00200060(): string | undefined {
    const element = this.dwResponse['00200060'];
    return this.dwResponse['00200060']?.Value[0];
  }

  // Image Laterality
  get ImageLaterality(): string | undefined {
    return this.x00200062;
  }

  get x00200062(): string | undefined {
    const element = this.dwResponse['00200062'];
    return this.dwResponse['00200062']?.Value[0];
  }

  // Image Geometry Type
  get ImageGeometryType(): string | undefined {
    return this.x00200070;
  }

  get x00200070(): string | undefined {
    const element = this.dwResponse['00200070'];
    return this.dwResponse['00200070']?.Value[0];
  }

  // Masking Image
  get MaskingImage(): Array<string> | undefined {
    return this.x00200080;
  }

  get x00200080(): Array<string> | undefined {
    const element = this.dwResponse['00200080'];
    return this.dwResponse['00200080']?.Value;
  }

  // Report Number
  get ReportNumber(): number | undefined {
    return this.x002000aa;
  }

  get x002000aa(): number | undefined {
    const element = this.dwResponse['002000aa'];
    return this.dwResponse['002000aa']?.Value[0];
  }

  // Temporal Position Identifier
  get TemporalPositionIdentifier(): number | undefined {
    return this.x00200100;
  }

  get x00200100(): number | undefined {
    const element = this.dwResponse['00200100'];
    return this.dwResponse['00200100']?.Value[0];
  }

  // Number of Temporal Positions
  get NumberOfTemporalPositions(): number | undefined {
    return this.x00200105;
  }

  get x00200105(): number | undefined {
    const element = this.dwResponse['00200105'];
    return this.dwResponse['00200105']?.Value[0];
  }

  // Temporal Resolution
  get TemporalResolution(): number | undefined {
    return this.x00200110;
  }

  get x00200110(): number | undefined {
    const element = this.dwResponse['00200110'];
    return this.dwResponse['00200110']?.Value[0];
  }

  // Synchronization Frame of Reference UID
  get SynchronizationFrameOfReferenceUID(): string | undefined {
    return this.x00200200;
  }

  get x00200200(): string | undefined {
    const element = this.dwResponse['00200200'];
    return this.dwResponse['00200200']?.Value[0];
  }

  // SOP Instance UID of Concatenation Source
  get SOPInstanceUIDOfConcatenationSource(): string | undefined {
    return this.x00200242;
  }

  get x00200242(): string | undefined {
    const element = this.dwResponse['00200242'];
    return this.dwResponse['00200242']?.Value[0];
  }

  // Series in Study
  get SeriesInStudy(): number | undefined {
    return this.x00201000;
  }

  get x00201000(): number | undefined {
    const element = this.dwResponse['00201000'];
    return this.dwResponse['00201000']?.Value[0];
  }

  // Acquisitions in Series
  get AcquisitionsInSeries(): number | undefined {
    return this.x00201001;
  }

  get x00201001(): number | undefined {
    const element = this.dwResponse['00201001'];
    return this.dwResponse['00201001']?.Value[0];
  }

  // Images in Acquisition
  get ImagesInAcquisition(): number | undefined {
    return this.x00201002;
  }

  get x00201002(): number | undefined {
    const element = this.dwResponse['00201002'];
    return this.dwResponse['00201002']?.Value[0];
  }

  // Images in Series
  get ImagesInSeries(): number | undefined {
    return this.x00201003;
  }

  get x00201003(): number | undefined {
    const element = this.dwResponse['00201003'];
    return this.dwResponse['00201003']?.Value[0];
  }

  // Acquisitions in Study
  get AcquisitionsInStudy(): number | undefined {
    return this.x00201004;
  }

  get x00201004(): number | undefined {
    const element = this.dwResponse['00201004'];
    return this.dwResponse['00201004']?.Value[0];
  }

  // Images in Study
  get ImagesInStudy(): number | undefined {
    return this.x00201005;
  }

  get x00201005(): number | undefined {
    const element = this.dwResponse['00201005'];
    return this.dwResponse['00201005']?.Value[0];
  }

  // Reference
  get Reference(): Array<string> | undefined {
    return this.x00201020;
  }

  get x00201020(): Array<string> | undefined {
    const element = this.dwResponse['00201020'];
    return this.dwResponse['00201020']?.Value;
  }

  // Position Reference Indicator
  get PositionReferenceIndicator(): string | undefined {
    return this.x00201040;
  }

  get x00201040(): string | undefined {
    const element = this.dwResponse['00201040'];
    return this.dwResponse['00201040']?.Value[0];
  }

  // Slice Location
  get SliceLocation(): number | undefined {
    return this.x00201041;
  }

  get x00201041(): number | undefined {
    const element = this.dwResponse['00201041'];
    return this.dwResponse['00201041']?.Value[0];
  }

  // Other Study Numbers
  get OtherStudyNumbers(): Array<number> | undefined {
    return this.x00201070;
  }

  get x00201070(): Array<number> | undefined {
    const element = this.dwResponse['00201070'];
    return this.dwResponse['00201070']?.Value;
  }

  // Number of Patient Related Studies
  get NumberOfPatientRelatedStudies(): number | undefined {
    return this.x00201200;
  }

  get x00201200(): number | undefined {
    const element = this.dwResponse['00201200'];
    return this.dwResponse['00201200']?.Value[0];
  }

  // Number of Patient Related Series
  get NumberOfPatientRelatedSeries(): number | undefined {
    return this.x00201202;
  }

  get x00201202(): number | undefined {
    const element = this.dwResponse['00201202'];
    return this.dwResponse['00201202']?.Value[0];
  }

  // Number of Patient Related Instances
  get NumberOfPatientRelatedInstances(): number | undefined {
    return this.x00201204;
  }

  get x00201204(): number | undefined {
    const element = this.dwResponse['00201204'];
    return this.dwResponse['00201204']?.Value[0];
  }

  // Number of Study Related Series
  get NumberOfStudyRelatedSeries(): number | undefined {
    return this.x00201206;
  }

  get x00201206(): number | undefined {
    const element = this.dwResponse['00201206'];
    return this.dwResponse['00201206']?.Value[0];
  }

  // Number of Study Related Instances
  get NumberOfStudyRelatedInstances(): number | undefined {
    return this.x00201208;
  }

  get x00201208(): number | undefined {
    const element = this.dwResponse['00201208'];
    return this.dwResponse['00201208']?.Value[0];
  }

  // Number of Series Related Instances
  get NumberOfSeriesRelatedInstances(): number | undefined {
    return this.x00201209;
  }

  get x00201209(): number | undefined {
    const element = this.dwResponse['00201209'];
    return this.dwResponse['00201209']?.Value[0];
  }

  // Source Image IDs
  get SourceImageIDs(): Array<string> | undefined {
    return this.x002031xx;
  }

  get x002031xx(): Array<string> | undefined {
    const element = this.dwResponse['002031xx'];
    return this.dwResponse['002031xx']?.Value;
  }

  // Modifying Device ID
  get ModifyingDeviceID(): string | undefined {
    return this.x00203401;
  }

  get x00203401(): string | undefined {
    const element = this.dwResponse['00203401'];
    return this.dwResponse['00203401']?.Value[0];
  }

  // Modified Image ID
  get ModifiedImageID(): string | undefined {
    return this.x00203402;
  }

  get x00203402(): string | undefined {
    const element = this.dwResponse['00203402'];
    return this.dwResponse['00203402']?.Value[0];
  }

  // Modified Image Date
  get ModifiedImageDate(): Date | undefined {
    return this.x00203403;
  }

  get x00203403(): Date | undefined {
    const element = this.dwResponse['00203403'];
    return this.dwResponse['00203403']?.Value[0];
  }

  // Modifying Device Manufacturer
  get ModifyingDeviceManufacturer(): string | undefined {
    return this.x00203404;
  }

  get x00203404(): string | undefined {
    const element = this.dwResponse['00203404'];
    return this.dwResponse['00203404']?.Value[0];
  }

  // Modified Image Time
  get ModifiedImageTime(): string | undefined {
    return this.x00203405;
  }

  get x00203405(): string | undefined {
    const element = this.dwResponse['00203405'];
    return this.dwResponse['00203405']?.Value[0];
  }

  // Modified Image Description
  get ModifiedImageDescription(): string | undefined {
    return this.x00203406;
  }

  get x00203406(): string | undefined {
    const element = this.dwResponse['00203406'];
    return this.dwResponse['00203406']?.Value[0];
  }

  // Original Image Identification
  get OriginalImageIdentification(): Array<Uint16Array> | undefined {
    return this.x00205000;
  }

  get x00205000(): Array<Uint16Array> | undefined {
    const element = this.dwResponse['00205000'];
    return this.dwResponse['00205000']?.Value;
  }

  // Original Image Identification Nomenclature
  get OriginalImageIdentificationNomenclature(): Array<string> | undefined {
    return this.x00205002;
  }

  get x00205002(): Array<string> | undefined {
    const element = this.dwResponse['00205002'];
    return this.dwResponse['00205002']?.Value;
  }

  // Stack ID
  get StackID(): string | undefined {
    return this.x00209056;
  }

  get x00209056(): string | undefined {
    const element = this.dwResponse['00209056'];
    return this.dwResponse['00209056']?.Value[0];
  }

  // In-Stack Position Number
  get InStackPositionNumber(): number | undefined {
    return this.x00209057;
  }

  get x00209057(): number | undefined {
    const element = this.dwResponse['00209057'];
    return this.dwResponse['00209057']?.Value[0];
  }

  // Frame Anatomy Sequence
  get FrameAnatomySequence(): Array<Dataset> | undefined {
    return this.x00209071;
  }

  get x00209071(): Array<Dataset> | undefined {
    const element = this.dwResponse['00209071'];
    return this.dwResponse['00209071']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Frame Laterality
  get FrameLaterality(): string | undefined {
    return this.x00209072;
  }

  get x00209072(): string | undefined {
    const element = this.dwResponse['00209072'];
    return this.dwResponse['00209072']?.Value[0];
  }

  // Frame Content Sequence
  get FrameContentSequence(): Array<Dataset> | undefined {
    return this.x00209111;
  }

  get x00209111(): Array<Dataset> | undefined {
    const element = this.dwResponse['00209111'];
    return this.dwResponse['00209111']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Plane Position Sequence
  get PlanePositionSequence(): Array<Dataset> | undefined {
    return this.x00209113;
  }

  get x00209113(): Array<Dataset> | undefined {
    const element = this.dwResponse['00209113'];
    return this.dwResponse['00209113']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Plane Orientation Sequence
  get PlaneOrientationSequence(): Array<Dataset> | undefined {
    return this.x00209116;
  }

  get x00209116(): Array<Dataset> | undefined {
    const element = this.dwResponse['00209116'];
    return this.dwResponse['00209116']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Temporal Position Index
  get TemporalPositionIndex(): number | undefined {
    return this.x00209128;
  }

  get x00209128(): number | undefined {
    const element = this.dwResponse['00209128'];
    return this.dwResponse['00209128']?.Value[0];
  }

  // Nominal Cardiac Trigger Delay Time
  get NominalCardiacTriggerDelayTime(): number | undefined {
    return this.x00209153;
  }

  get x00209153(): number | undefined {
    const element = this.dwResponse['00209153'];
    return this.dwResponse['00209153']?.Value[0];
  }

  // Nominal Cardiac Trigger Time Prior To R-Peak
  get NominalCardiacTriggerTimePriorToRPeak(): number | undefined {
    return this.x00209154;
  }

  get x00209154(): number | undefined {
    const element = this.dwResponse['00209154'];
    return this.dwResponse['00209154']?.Value[0];
  }

  // Actual Cardiac Trigger Time Prior To R-Peak
  get ActualCardiacTriggerTimePriorToRPeak(): number | undefined {
    return this.x00209155;
  }

  get x00209155(): number | undefined {
    const element = this.dwResponse['00209155'];
    return this.dwResponse['00209155']?.Value[0];
  }

  // Frame Acquisition Number
  get FrameAcquisitionNumber(): number | undefined {
    return this.x00209156;
  }

  get x00209156(): number | undefined {
    const element = this.dwResponse['00209156'];
    return this.dwResponse['00209156']?.Value[0];
  }

  // Dimension Index Values
  get DimensionIndexValues(): Array<number> | undefined {
    return this.x00209157;
  }

  get x00209157(): Array<number> | undefined {
    const element = this.dwResponse['00209157'];
    return this.dwResponse['00209157']?.Value;
  }

  // Concatenation UID
  get ConcatenationUID(): string | undefined {
    return this.x00209161;
  }

  get x00209161(): string | undefined {
    const element = this.dwResponse['00209161'];
    return this.dwResponse['00209161']?.Value[0];
  }

  // In-concatenation Number
  get InConcatenationNumber(): number | undefined {
    return this.x00209162;
  }

  get x00209162(): number | undefined {
    const element = this.dwResponse['00209162'];
    return this.dwResponse['00209162']?.Value[0];
  }

  // In-concatenation Total Number
  get InConcatenationTotalNumber(): number | undefined {
    return this.x00209163;
  }

  get x00209163(): number | undefined {
    const element = this.dwResponse['00209163'];
    return this.dwResponse['00209163']?.Value[0];
  }

  // Dimension Organization UID
  get DimensionOrganizationUID(): string | undefined {
    return this.x00209164;
  }

  get x00209164(): string | undefined {
    const element = this.dwResponse['00209164'];
    return this.dwResponse['00209164']?.Value[0];
  }

  // Dimension Index Pointer
  get DimensionIndexPointer(): Uint16Array | undefined {
    return this.x00209165;
  }

  get x00209165(): Uint16Array | undefined {
    const element = this.dwResponse['00209165'];
    return this.dwResponse['00209165']?.Value[0];
  }

  // Functional Group Pointer
  get FunctionalGroupPointer(): Uint16Array | undefined {
    return this.x00209167;
  }

  get x00209167(): Uint16Array | undefined {
    const element = this.dwResponse['00209167'];
    return this.dwResponse['00209167']?.Value[0];
  }

  // Unassigned Shared Converted Attributes Sequence
  get UnassignedSharedConvertedAttributesSequence(): Array<Dataset> | undefined {
    return this.x00209170;
  }

  get x00209170(): Array<Dataset> | undefined {
    const element = this.dwResponse['00209170'];
    return this.dwResponse['00209170']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Unassigned Per-Frame Converted Attributes Sequence
  get UnassignedPerFrameConvertedAttributesSequence(): Array<Dataset> | undefined {
    return this.x00209171;
  }

  get x00209171(): Array<Dataset> | undefined {
    const element = this.dwResponse['00209171'];
    return this.dwResponse['00209171']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Conversion Source Attributes Sequence
  get ConversionSourceAttributesSequence(): Array<Dataset> | undefined {
    return this.x00209172;
  }

  get x00209172(): Array<Dataset> | undefined {
    const element = this.dwResponse['00209172'];
    return this.dwResponse['00209172']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Dimension Index Private Creator
  get DimensionIndexPrivateCreator(): string | undefined {
    return this.x00209213;
  }

  get x00209213(): string | undefined {
    const element = this.dwResponse['00209213'];
    return this.dwResponse['00209213']?.Value[0];
  }

  // Dimension Organization Sequence
  get DimensionOrganizationSequence(): Array<Dataset> | undefined {
    return this.x00209221;
  }

  get x00209221(): Array<Dataset> | undefined {
    const element = this.dwResponse['00209221'];
    return this.dwResponse['00209221']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Dimension Index Sequence
  get DimensionIndexSequence(): Array<Dataset> | undefined {
    return this.x00209222;
  }

  get x00209222(): Array<Dataset> | undefined {
    const element = this.dwResponse['00209222'];
    return this.dwResponse['00209222']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Concatenation Frame Offset Number
  get ConcatenationFrameOffsetNumber(): number | undefined {
    return this.x00209228;
  }

  get x00209228(): number | undefined {
    const element = this.dwResponse['00209228'];
    return this.dwResponse['00209228']?.Value[0];
  }

  // Functional Group Private Creator
  get FunctionalGroupPrivateCreator(): string | undefined {
    return this.x00209238;
  }

  get x00209238(): string | undefined {
    const element = this.dwResponse['00209238'];
    return this.dwResponse['00209238']?.Value[0];
  }

  // Nominal Percentage of Cardiac Phase
  get NominalPercentageOfCardiacPhase(): number | undefined {
    return this.x00209241;
  }

  get x00209241(): number | undefined {
    const element = this.dwResponse['00209241'];
    return this.dwResponse['00209241']?.Value[0];
  }

  // Nominal Percentage of Respiratory Phase
  get NominalPercentageOfRespiratoryPhase(): number | undefined {
    return this.x00209245;
  }

  get x00209245(): number | undefined {
    const element = this.dwResponse['00209245'];
    return this.dwResponse['00209245']?.Value[0];
  }

  // Starting Respiratory Amplitude
  get StartingRespiratoryAmplitude(): number | undefined {
    return this.x00209246;
  }

  get x00209246(): number | undefined {
    const element = this.dwResponse['00209246'];
    return this.dwResponse['00209246']?.Value[0];
  }

  // Starting Respiratory Phase
  get StartingRespiratoryPhase(): string | undefined {
    return this.x00209247;
  }

  get x00209247(): string | undefined {
    const element = this.dwResponse['00209247'];
    return this.dwResponse['00209247']?.Value[0];
  }

  // Ending Respiratory Amplitude
  get EndingRespiratoryAmplitude(): number | undefined {
    return this.x00209248;
  }

  get x00209248(): number | undefined {
    const element = this.dwResponse['00209248'];
    return this.dwResponse['00209248']?.Value[0];
  }

  // Ending Respiratory Phase
  get EndingRespiratoryPhase(): string | undefined {
    return this.x00209249;
  }

  get x00209249(): string | undefined {
    const element = this.dwResponse['00209249'];
    return this.dwResponse['00209249']?.Value[0];
  }

  // Respiratory Trigger Type
  get RespiratoryTriggerType(): string | undefined {
    return this.x00209250;
  }

  get x00209250(): string | undefined {
    const element = this.dwResponse['00209250'];
    return this.dwResponse['00209250']?.Value[0];
  }

  // R-R Interval Time Nominal
  get RRIntervalTimeNominal(): number | undefined {
    return this.x00209251;
  }

  get x00209251(): number | undefined {
    const element = this.dwResponse['00209251'];
    return this.dwResponse['00209251']?.Value[0];
  }

  // Actual Cardiac Trigger Delay Time
  get ActualCardiacTriggerDelayTime(): number | undefined {
    return this.x00209252;
  }

  get x00209252(): number | undefined {
    const element = this.dwResponse['00209252'];
    return this.dwResponse['00209252']?.Value[0];
  }

  // Respiratory Synchronization Sequence
  get RespiratorySynchronizationSequence(): Array<Dataset> | undefined {
    return this.x00209253;
  }

  get x00209253(): Array<Dataset> | undefined {
    const element = this.dwResponse['00209253'];
    return this.dwResponse['00209253']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Respiratory Interval Time
  get RespiratoryIntervalTime(): number | undefined {
    return this.x00209254;
  }

  get x00209254(): number | undefined {
    const element = this.dwResponse['00209254'];
    return this.dwResponse['00209254']?.Value[0];
  }

  // Nominal Respiratory Trigger Delay Time
  get NominalRespiratoryTriggerDelayTime(): number | undefined {
    return this.x00209255;
  }

  get x00209255(): number | undefined {
    const element = this.dwResponse['00209255'];
    return this.dwResponse['00209255']?.Value[0];
  }

  // Respiratory Trigger Delay Threshold
  get RespiratoryTriggerDelayThreshold(): number | undefined {
    return this.x00209256;
  }

  get x00209256(): number | undefined {
    const element = this.dwResponse['00209256'];
    return this.dwResponse['00209256']?.Value[0];
  }

  // Actual Respiratory Trigger Delay Time
  get ActualRespiratoryTriggerDelayTime(): number | undefined {
    return this.x00209257;
  }

  get x00209257(): number | undefined {
    const element = this.dwResponse['00209257'];
    return this.dwResponse['00209257']?.Value[0];
  }

  // Image Position (Volume)
  get ImagePositionVolume(): Array<number> | undefined {
    return this.x00209301;
  }

  get x00209301(): Array<number> | undefined {
    const element = this.dwResponse['00209301'];
    return this.dwResponse['00209301']?.Value;
  }

  // Image Orientation (Volume)
  get ImageOrientationVolume(): Array<number> | undefined {
    return this.x00209302;
  }

  get x00209302(): Array<number> | undefined {
    const element = this.dwResponse['00209302'];
    return this.dwResponse['00209302']?.Value;
  }

  // Ultrasound Acquisition Geometry
  get UltrasoundAcquisitionGeometry(): string | undefined {
    return this.x00209307;
  }

  get x00209307(): string | undefined {
    const element = this.dwResponse['00209307'];
    return this.dwResponse['00209307']?.Value[0];
  }

  // Apex Position
  get ApexPosition(): Array<number> | undefined {
    return this.x00209308;
  }

  get x00209308(): Array<number> | undefined {
    const element = this.dwResponse['00209308'];
    return this.dwResponse['00209308']?.Value;
  }

  // Volume to Transducer Mapping Matrix
  get VolumeToTransducerMappingMatrix(): Array<number> | undefined {
    return this.x00209309;
  }

  get x00209309(): Array<number> | undefined {
    const element = this.dwResponse['00209309'];
    return this.dwResponse['00209309']?.Value;
  }

  // Volume to Table Mapping Matrix
  get VolumeToTableMappingMatrix(): Array<number> | undefined {
    return this.x0020930a;
  }

  get x0020930a(): Array<number> | undefined {
    const element = this.dwResponse['0020930a'];
    return this.dwResponse['0020930a']?.Value;
  }

  // Volume to Transducer Relationship
  get VolumeToTransducerRelationship(): string | undefined {
    return this.x0020930b;
  }

  get x0020930b(): string | undefined {
    const element = this.dwResponse['0020930b'];
    return this.dwResponse['0020930b']?.Value[0];
  }

  // Patient Frame of Reference Source
  get PatientFrameOfReferenceSource(): string | undefined {
    return this.x0020930c;
  }

  get x0020930c(): string | undefined {
    const element = this.dwResponse['0020930c'];
    return this.dwResponse['0020930c']?.Value[0];
  }

  // Temporal Position Time Offset
  get TemporalPositionTimeOffset(): number | undefined {
    return this.x0020930d;
  }

  get x0020930d(): number | undefined {
    const element = this.dwResponse['0020930d'];
    return this.dwResponse['0020930d']?.Value[0];
  }

  // Plane Position (Volume) Sequence
  get PlanePositionVolumeSequence(): Array<Dataset> | undefined {
    return this.x0020930e;
  }

  get x0020930e(): Array<Dataset> | undefined {
    const element = this.dwResponse['0020930e'];
    return this.dwResponse['0020930e']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Plane Orientation (Volume) Sequence
  get PlaneOrientationVolumeSequence(): Array<Dataset> | undefined {
    return this.x0020930f;
  }

  get x0020930f(): Array<Dataset> | undefined {
    const element = this.dwResponse['0020930f'];
    return this.dwResponse['0020930f']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Temporal Position Sequence
  get TemporalPositionSequence(): Array<Dataset> | undefined {
    return this.x00209310;
  }

  get x00209310(): Array<Dataset> | undefined {
    const element = this.dwResponse['00209310'];
    return this.dwResponse['00209310']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Dimension Organization Type
  get DimensionOrganizationType(): string | undefined {
    return this.x00209311;
  }

  get x00209311(): string | undefined {
    const element = this.dwResponse['00209311'];
    return this.dwResponse['00209311']?.Value[0];
  }

  // Volume Frame of Reference UID
  get VolumeFrameOfReferenceUID(): string | undefined {
    return this.x00209312;
  }

  get x00209312(): string | undefined {
    const element = this.dwResponse['00209312'];
    return this.dwResponse['00209312']?.Value[0];
  }

  // Table Frame of Reference UID
  get TableFrameOfReferenceUID(): string | undefined {
    return this.x00209313;
  }

  get x00209313(): string | undefined {
    const element = this.dwResponse['00209313'];
    return this.dwResponse['00209313']?.Value[0];
  }

  // Dimension Description Label
  get DimensionDescriptionLabel(): string | undefined {
    return this.x00209421;
  }

  get x00209421(): string | undefined {
    const element = this.dwResponse['00209421'];
    return this.dwResponse['00209421']?.Value[0];
  }

  // Patient Orientation in Frame Sequence
  get PatientOrientationInFrameSequence(): Array<Dataset> | undefined {
    return this.x00209450;
  }

  get x00209450(): Array<Dataset> | undefined {
    const element = this.dwResponse['00209450'];
    return this.dwResponse['00209450']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Frame Label
  get FrameLabel(): string | undefined {
    return this.x00209453;
  }

  get x00209453(): string | undefined {
    const element = this.dwResponse['00209453'];
    return this.dwResponse['00209453']?.Value[0];
  }

  // Acquisition Index
  get AcquisitionIndex(): Array<number> | undefined {
    return this.x00209518;
  }

  get x00209518(): Array<number> | undefined {
    const element = this.dwResponse['00209518'];
    return this.dwResponse['00209518']?.Value;
  }

  // Contributing SOP Instances Reference Sequence
  get ContributingSOPInstancesReferenceSequence(): Array<Dataset> | undefined {
    return this.x00209529;
  }

  get x00209529(): Array<Dataset> | undefined {
    const element = this.dwResponse['00209529'];
    return this.dwResponse['00209529']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Reconstruction Index
  get ReconstructionIndex(): number | undefined {
    return this.x00209536;
  }

  get x00209536(): number | undefined {
    const element = this.dwResponse['00209536'];
    return this.dwResponse['00209536']?.Value[0];
  }

  // Light Path Filter Pass-Through Wavelength
  get LightPathFilterPassThroughWavelength(): number | undefined {
    return this.x00220001;
  }

  get x00220001(): number | undefined {
    const element = this.dwResponse['00220001'];
    return this.dwResponse['00220001']?.Value[0];
  }

  // Light Path Filter Pass Band
  get LightPathFilterPassBand(): Array<number> | undefined {
    return this.x00220002;
  }

  get x00220002(): Array<number> | undefined {
    const element = this.dwResponse['00220002'];
    return this.dwResponse['00220002']?.Value;
  }

  // Image Path Filter Pass-Through Wavelength
  get ImagePathFilterPassThroughWavelength(): number | undefined {
    return this.x00220003;
  }

  get x00220003(): number | undefined {
    const element = this.dwResponse['00220003'];
    return this.dwResponse['00220003']?.Value[0];
  }

  // Image Path Filter Pass Band
  get ImagePathFilterPassBand(): Array<number> | undefined {
    return this.x00220004;
  }

  get x00220004(): Array<number> | undefined {
    const element = this.dwResponse['00220004'];
    return this.dwResponse['00220004']?.Value;
  }

  // Patient Eye Movement Commanded
  get PatientEyeMovementCommanded(): string | undefined {
    return this.x00220005;
  }

  get x00220005(): string | undefined {
    const element = this.dwResponse['00220005'];
    return this.dwResponse['00220005']?.Value[0];
  }

  // Patient Eye Movement Command Code Sequence
  get PatientEyeMovementCommandCodeSequence(): Array<Dataset> | undefined {
    return this.x00220006;
  }

  get x00220006(): Array<Dataset> | undefined {
    const element = this.dwResponse['00220006'];
    return this.dwResponse['00220006']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Spherical Lens Power
  get SphericalLensPower(): number | undefined {
    return this.x00220007;
  }

  get x00220007(): number | undefined {
    const element = this.dwResponse['00220007'];
    return this.dwResponse['00220007']?.Value[0];
  }

  // Cylinder Lens Power
  get CylinderLensPower(): number | undefined {
    return this.x00220008;
  }

  get x00220008(): number | undefined {
    const element = this.dwResponse['00220008'];
    return this.dwResponse['00220008']?.Value[0];
  }

  // Cylinder Axis
  get CylinderAxis(): number | undefined {
    return this.x00220009;
  }

  get x00220009(): number | undefined {
    const element = this.dwResponse['00220009'];
    return this.dwResponse['00220009']?.Value[0];
  }

  // Emmetropic Magnification
  get EmmetropicMagnification(): number | undefined {
    return this.x0022000a;
  }

  get x0022000a(): number | undefined {
    const element = this.dwResponse['0022000a'];
    return this.dwResponse['0022000a']?.Value[0];
  }

  // Intra Ocular Pressure
  get IntraOcularPressure(): number | undefined {
    return this.x0022000b;
  }

  get x0022000b(): number | undefined {
    const element = this.dwResponse['0022000b'];
    return this.dwResponse['0022000b']?.Value[0];
  }

  // Horizontal Field of View
  get HorizontalFieldOfView(): number | undefined {
    return this.x0022000c;
  }

  get x0022000c(): number | undefined {
    const element = this.dwResponse['0022000c'];
    return this.dwResponse['0022000c']?.Value[0];
  }

  // Pupil Dilated
  get PupilDilated(): string | undefined {
    return this.x0022000d;
  }

  get x0022000d(): string | undefined {
    const element = this.dwResponse['0022000d'];
    return this.dwResponse['0022000d']?.Value[0];
  }

  // Degree of Dilation
  get DegreeOfDilation(): number | undefined {
    return this.x0022000e;
  }

  get x0022000e(): number | undefined {
    const element = this.dwResponse['0022000e'];
    return this.dwResponse['0022000e']?.Value[0];
  }

  // Stereo Baseline Angle
  get StereoBaselineAngle(): number | undefined {
    return this.x00220010;
  }

  get x00220010(): number | undefined {
    const element = this.dwResponse['00220010'];
    return this.dwResponse['00220010']?.Value[0];
  }

  // Stereo Baseline Displacement
  get StereoBaselineDisplacement(): number | undefined {
    return this.x00220011;
  }

  get x00220011(): number | undefined {
    const element = this.dwResponse['00220011'];
    return this.dwResponse['00220011']?.Value[0];
  }

  // Stereo Horizontal Pixel Offset
  get StereoHorizontalPixelOffset(): number | undefined {
    return this.x00220012;
  }

  get x00220012(): number | undefined {
    const element = this.dwResponse['00220012'];
    return this.dwResponse['00220012']?.Value[0];
  }

  // Stereo Vertical Pixel Offset
  get StereoVerticalPixelOffset(): number | undefined {
    return this.x00220013;
  }

  get x00220013(): number | undefined {
    const element = this.dwResponse['00220013'];
    return this.dwResponse['00220013']?.Value[0];
  }

  // Stereo Rotation
  get StereoRotation(): number | undefined {
    return this.x00220014;
  }

  get x00220014(): number | undefined {
    const element = this.dwResponse['00220014'];
    return this.dwResponse['00220014']?.Value[0];
  }

  // Acquisition Device Type Code Sequence
  get AcquisitionDeviceTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x00220015;
  }

  get x00220015(): Array<Dataset> | undefined {
    const element = this.dwResponse['00220015'];
    return this.dwResponse['00220015']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Illumination Type Code Sequence
  get IlluminationTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x00220016;
  }

  get x00220016(): Array<Dataset> | undefined {
    const element = this.dwResponse['00220016'];
    return this.dwResponse['00220016']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Light Path Filter Type Stack Code Sequence
  get LightPathFilterTypeStackCodeSequence(): Array<Dataset> | undefined {
    return this.x00220017;
  }

  get x00220017(): Array<Dataset> | undefined {
    const element = this.dwResponse['00220017'];
    return this.dwResponse['00220017']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Image Path Filter Type Stack Code Sequence
  get ImagePathFilterTypeStackCodeSequence(): Array<Dataset> | undefined {
    return this.x00220018;
  }

  get x00220018(): Array<Dataset> | undefined {
    const element = this.dwResponse['00220018'];
    return this.dwResponse['00220018']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Lenses Code Sequence
  get LensesCodeSequence(): Array<Dataset> | undefined {
    return this.x00220019;
  }

  get x00220019(): Array<Dataset> | undefined {
    const element = this.dwResponse['00220019'];
    return this.dwResponse['00220019']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Channel Description Code Sequence
  get ChannelDescriptionCodeSequence(): Array<Dataset> | undefined {
    return this.x0022001a;
  }

  get x0022001a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0022001a'];
    return this.dwResponse['0022001a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Refractive State Sequence
  get RefractiveStateSequence(): Array<Dataset> | undefined {
    return this.x0022001b;
  }

  get x0022001b(): Array<Dataset> | undefined {
    const element = this.dwResponse['0022001b'];
    return this.dwResponse['0022001b']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Mydriatic Agent Code Sequence
  get MydriaticAgentCodeSequence(): Array<Dataset> | undefined {
    return this.x0022001c;
  }

  get x0022001c(): Array<Dataset> | undefined {
    const element = this.dwResponse['0022001c'];
    return this.dwResponse['0022001c']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Relative Image Position Code Sequence
  get RelativeImagePositionCodeSequence(): Array<Dataset> | undefined {
    return this.x0022001d;
  }

  get x0022001d(): Array<Dataset> | undefined {
    const element = this.dwResponse['0022001d'];
    return this.dwResponse['0022001d']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Camera Angle of View
  get CameraAngleOfView(): number | undefined {
    return this.x0022001e;
  }

  get x0022001e(): number | undefined {
    const element = this.dwResponse['0022001e'];
    return this.dwResponse['0022001e']?.Value[0];
  }

  // Stereo Pairs Sequence
  get StereoPairsSequence(): Array<Dataset> | undefined {
    return this.x00220020;
  }

  get x00220020(): Array<Dataset> | undefined {
    const element = this.dwResponse['00220020'];
    return this.dwResponse['00220020']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Left Image Sequence
  get LeftImageSequence(): Array<Dataset> | undefined {
    return this.x00220021;
  }

  get x00220021(): Array<Dataset> | undefined {
    const element = this.dwResponse['00220021'];
    return this.dwResponse['00220021']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Right Image Sequence
  get RightImageSequence(): Array<Dataset> | undefined {
    return this.x00220022;
  }

  get x00220022(): Array<Dataset> | undefined {
    const element = this.dwResponse['00220022'];
    return this.dwResponse['00220022']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Axial Length of the Eye
  get AxialLengthOfTheEye(): number | undefined {
    return this.x00220030;
  }

  get x00220030(): number | undefined {
    const element = this.dwResponse['00220030'];
    return this.dwResponse['00220030']?.Value[0];
  }

  // Ophthalmic Frame Location Sequence
  get OphthalmicFrameLocationSequence(): Array<Dataset> | undefined {
    return this.x00220031;
  }

  get x00220031(): Array<Dataset> | undefined {
    const element = this.dwResponse['00220031'];
    return this.dwResponse['00220031']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Reference Coordinates
  get ReferenceCoordinates(): Array<number> | undefined {
    return this.x00220032;
  }

  get x00220032(): Array<number> | undefined {
    const element = this.dwResponse['00220032'];
    return this.dwResponse['00220032']?.Value;
  }

  // Depth Spatial Resolution
  get DepthSpatialResolution(): number | undefined {
    return this.x00220035;
  }

  get x00220035(): number | undefined {
    const element = this.dwResponse['00220035'];
    return this.dwResponse['00220035']?.Value[0];
  }

  // Maximum Depth Distortion
  get MaximumDepthDistortion(): number | undefined {
    return this.x00220036;
  }

  get x00220036(): number | undefined {
    const element = this.dwResponse['00220036'];
    return this.dwResponse['00220036']?.Value[0];
  }

  // Along-scan Spatial Resolution
  get AlongScanSpatialResolution(): number | undefined {
    return this.x00220037;
  }

  get x00220037(): number | undefined {
    const element = this.dwResponse['00220037'];
    return this.dwResponse['00220037']?.Value[0];
  }

  // Maximum Along-scan Distortion
  get MaximumAlongScanDistortion(): number | undefined {
    return this.x00220038;
  }

  get x00220038(): number | undefined {
    const element = this.dwResponse['00220038'];
    return this.dwResponse['00220038']?.Value[0];
  }

  // Ophthalmic Image Orientation
  get OphthalmicImageOrientation(): string | undefined {
    return this.x00220039;
  }

  get x00220039(): string | undefined {
    const element = this.dwResponse['00220039'];
    return this.dwResponse['00220039']?.Value[0];
  }

  // Depth of Transverse Image
  get DepthOfTransverseImage(): number | undefined {
    return this.x00220041;
  }

  get x00220041(): number | undefined {
    const element = this.dwResponse['00220041'];
    return this.dwResponse['00220041']?.Value[0];
  }

  // Mydriatic Agent Concentration Units Sequence
  get MydriaticAgentConcentrationUnitsSequence(): Array<Dataset> | undefined {
    return this.x00220042;
  }

  get x00220042(): Array<Dataset> | undefined {
    const element = this.dwResponse['00220042'];
    return this.dwResponse['00220042']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Across-scan Spatial Resolution
  get AcrossScanSpatialResolution(): number | undefined {
    return this.x00220048;
  }

  get x00220048(): number | undefined {
    const element = this.dwResponse['00220048'];
    return this.dwResponse['00220048']?.Value[0];
  }

  // Maximum Across-scan Distortion
  get MaximumAcrossScanDistortion(): number | undefined {
    return this.x00220049;
  }

  get x00220049(): number | undefined {
    const element = this.dwResponse['00220049'];
    return this.dwResponse['00220049']?.Value[0];
  }

  // Mydriatic Agent Concentration
  get MydriaticAgentConcentration(): number | undefined {
    return this.x0022004e;
  }

  get x0022004e(): number | undefined {
    const element = this.dwResponse['0022004e'];
    return this.dwResponse['0022004e']?.Value[0];
  }

  // Illumination Wave Length
  get IlluminationWaveLength(): number | undefined {
    return this.x00220055;
  }

  get x00220055(): number | undefined {
    const element = this.dwResponse['00220055'];
    return this.dwResponse['00220055']?.Value[0];
  }

  // Illumination Power
  get IlluminationPower(): number | undefined {
    return this.x00220056;
  }

  get x00220056(): number | undefined {
    const element = this.dwResponse['00220056'];
    return this.dwResponse['00220056']?.Value[0];
  }

  // Illumination Bandwidth
  get IlluminationBandwidth(): number | undefined {
    return this.x00220057;
  }

  get x00220057(): number | undefined {
    const element = this.dwResponse['00220057'];
    return this.dwResponse['00220057']?.Value[0];
  }

  // Mydriatic Agent Sequence
  get MydriaticAgentSequence(): Array<Dataset> | undefined {
    return this.x00220058;
  }

  get x00220058(): Array<Dataset> | undefined {
    const element = this.dwResponse['00220058'];
    return this.dwResponse['00220058']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Axial Measurements Right Eye Sequence
  get OphthalmicAxialMeasurementsRightEyeSequence(): Array<Dataset> | undefined {
    return this.x00221007;
  }

  get x00221007(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221007'];
    return this.dwResponse['00221007']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Axial Measurements Left Eye Sequence
  get OphthalmicAxialMeasurementsLeftEyeSequence(): Array<Dataset> | undefined {
    return this.x00221008;
  }

  get x00221008(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221008'];
    return this.dwResponse['00221008']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Axial Measurements Device Type
  get OphthalmicAxialMeasurementsDeviceType(): string | undefined {
    return this.x00221009;
  }

  get x00221009(): string | undefined {
    const element = this.dwResponse['00221009'];
    return this.dwResponse['00221009']?.Value[0];
  }

  // Ophthalmic Axial Length Measurements Type
  get OphthalmicAxialLengthMeasurementsType(): string | undefined {
    return this.x00221010;
  }

  get x00221010(): string | undefined {
    const element = this.dwResponse['00221010'];
    return this.dwResponse['00221010']?.Value[0];
  }

  // Ophthalmic Axial Length Sequence
  get OphthalmicAxialLengthSequence(): Array<Dataset> | undefined {
    return this.x00221012;
  }

  get x00221012(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221012'];
    return this.dwResponse['00221012']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Axial Length
  get OphthalmicAxialLength(): number | undefined {
    return this.x00221019;
  }

  get x00221019(): number | undefined {
    const element = this.dwResponse['00221019'];
    return this.dwResponse['00221019']?.Value[0];
  }

  // Lens Status Code Sequence
  get LensStatusCodeSequence(): Array<Dataset> | undefined {
    return this.x00221024;
  }

  get x00221024(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221024'];
    return this.dwResponse['00221024']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Vitreous Status Code Sequence
  get VitreousStatusCodeSequence(): Array<Dataset> | undefined {
    return this.x00221025;
  }

  get x00221025(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221025'];
    return this.dwResponse['00221025']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // IOL Formula Code Sequence
  get IOLFormulaCodeSequence(): Array<Dataset> | undefined {
    return this.x00221028;
  }

  get x00221028(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221028'];
    return this.dwResponse['00221028']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // IOL Formula Detail
  get IOLFormulaDetail(): string | undefined {
    return this.x00221029;
  }

  get x00221029(): string | undefined {
    const element = this.dwResponse['00221029'];
    return this.dwResponse['00221029']?.Value[0];
  }

  // Keratometer Index
  get KeratometerIndex(): number | undefined {
    return this.x00221033;
  }

  get x00221033(): number | undefined {
    const element = this.dwResponse['00221033'];
    return this.dwResponse['00221033']?.Value[0];
  }

  // Source of Ophthalmic Axial Length Code Sequence
  get SourceOfOphthalmicAxialLengthCodeSequence(): Array<Dataset> | undefined {
    return this.x00221035;
  }

  get x00221035(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221035'];
    return this.dwResponse['00221035']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Target Refraction
  get TargetRefraction(): number | undefined {
    return this.x00221037;
  }

  get x00221037(): number | undefined {
    const element = this.dwResponse['00221037'];
    return this.dwResponse['00221037']?.Value[0];
  }

  // Refractive Procedure Occurred
  get RefractiveProcedureOccurred(): string | undefined {
    return this.x00221039;
  }

  get x00221039(): string | undefined {
    const element = this.dwResponse['00221039'];
    return this.dwResponse['00221039']?.Value[0];
  }

  // Refractive Surgery Type Code Sequence
  get RefractiveSurgeryTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x00221040;
  }

  get x00221040(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221040'];
    return this.dwResponse['00221040']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Ultrasound Method Code Sequence
  get OphthalmicUltrasoundMethodCodeSequence(): Array<Dataset> | undefined {
    return this.x00221044;
  }

  get x00221044(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221044'];
    return this.dwResponse['00221044']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Axial Length Measurements Sequence
  get OphthalmicAxialLengthMeasurementsSequence(): Array<Dataset> | undefined {
    return this.x00221050;
  }

  get x00221050(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221050'];
    return this.dwResponse['00221050']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // IOL Power
  get IOLPower(): number | undefined {
    return this.x00221053;
  }

  get x00221053(): number | undefined {
    const element = this.dwResponse['00221053'];
    return this.dwResponse['00221053']?.Value[0];
  }

  // Predicted Refractive Error
  get PredictedRefractiveError(): number | undefined {
    return this.x00221054;
  }

  get x00221054(): number | undefined {
    const element = this.dwResponse['00221054'];
    return this.dwResponse['00221054']?.Value[0];
  }

  // Ophthalmic Axial Length Velocity
  get OphthalmicAxialLengthVelocity(): number | undefined {
    return this.x00221059;
  }

  get x00221059(): number | undefined {
    const element = this.dwResponse['00221059'];
    return this.dwResponse['00221059']?.Value[0];
  }

  // Lens Status Description
  get LensStatusDescription(): string | undefined {
    return this.x00221065;
  }

  get x00221065(): string | undefined {
    const element = this.dwResponse['00221065'];
    return this.dwResponse['00221065']?.Value[0];
  }

  // Vitreous Status Description
  get VitreousStatusDescription(): string | undefined {
    return this.x00221066;
  }

  get x00221066(): string | undefined {
    const element = this.dwResponse['00221066'];
    return this.dwResponse['00221066']?.Value[0];
  }

  // IOL Power Sequence
  get IOLPowerSequence(): Array<Dataset> | undefined {
    return this.x00221090;
  }

  get x00221090(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221090'];
    return this.dwResponse['00221090']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Lens Constant Sequence
  get LensConstantSequence(): Array<Dataset> | undefined {
    return this.x00221092;
  }

  get x00221092(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221092'];
    return this.dwResponse['00221092']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // IOL Manufacturer
  get IOLManufacturer(): string | undefined {
    return this.x00221093;
  }

  get x00221093(): string | undefined {
    const element = this.dwResponse['00221093'];
    return this.dwResponse['00221093']?.Value[0];
  }

  // Lens Constant Description
  get LensConstantDescription(): string | undefined {
    return this.x00221094;
  }

  get x00221094(): string | undefined {
    const element = this.dwResponse['00221094'];
    return this.dwResponse['00221094']?.Value[0];
  }

  // Implant Name
  get ImplantName(): string | undefined {
    return this.x00221095;
  }

  get x00221095(): string | undefined {
    const element = this.dwResponse['00221095'];
    return this.dwResponse['00221095']?.Value[0];
  }

  // Keratometry Measurement Type Code Sequence
  get KeratometryMeasurementTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x00221096;
  }

  get x00221096(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221096'];
    return this.dwResponse['00221096']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Implant Part Number
  get ImplantPartNumber(): string | undefined {
    return this.x00221097;
  }

  get x00221097(): string | undefined {
    const element = this.dwResponse['00221097'];
    return this.dwResponse['00221097']?.Value[0];
  }

  // Referenced Ophthalmic Axial Measurements Sequence
  get ReferencedOphthalmicAxialMeasurementsSequence(): Array<Dataset> | undefined {
    return this.x00221100;
  }

  get x00221100(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221100'];
    return this.dwResponse['00221100']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Axial Length Measurements Segment Name Code Sequence
  get OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence(): Array<Dataset> | undefined {
    return this.x00221101;
  }

  get x00221101(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221101'];
    return this.dwResponse['00221101']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Refractive Error Before Refractive Surgery Code Sequence
  get RefractiveErrorBeforeRefractiveSurgeryCodeSequence(): Array<Dataset> | undefined {
    return this.x00221103;
  }

  get x00221103(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221103'];
    return this.dwResponse['00221103']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // IOL Power For Exact Emmetropia
  get IOLPowerForExactEmmetropia(): number | undefined {
    return this.x00221121;
  }

  get x00221121(): number | undefined {
    const element = this.dwResponse['00221121'];
    return this.dwResponse['00221121']?.Value[0];
  }

  // IOL Power For Exact Target Refraction
  get IOLPowerForExactTargetRefraction(): number | undefined {
    return this.x00221122;
  }

  get x00221122(): number | undefined {
    const element = this.dwResponse['00221122'];
    return this.dwResponse['00221122']?.Value[0];
  }

  // Anterior Chamber Depth Definition Code Sequence
  get AnteriorChamberDepthDefinitionCodeSequence(): Array<Dataset> | undefined {
    return this.x00221125;
  }

  get x00221125(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221125'];
    return this.dwResponse['00221125']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Lens Thickness Sequence
  get LensThicknessSequence(): Array<Dataset> | undefined {
    return this.x00221127;
  }

  get x00221127(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221127'];
    return this.dwResponse['00221127']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Anterior Chamber Depth Sequence
  get AnteriorChamberDepthSequence(): Array<Dataset> | undefined {
    return this.x00221128;
  }

  get x00221128(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221128'];
    return this.dwResponse['00221128']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Lens Thickness
  get LensThickness(): number | undefined {
    return this.x00221130;
  }

  get x00221130(): number | undefined {
    const element = this.dwResponse['00221130'];
    return this.dwResponse['00221130']?.Value[0];
  }

  // Anterior Chamber Depth
  get AnteriorChamberDepth(): number | undefined {
    return this.x00221131;
  }

  get x00221131(): number | undefined {
    const element = this.dwResponse['00221131'];
    return this.dwResponse['00221131']?.Value[0];
  }

  // Source of Lens Thickness Data Code Sequence
  get SourceOfLensThicknessDataCodeSequence(): Array<Dataset> | undefined {
    return this.x00221132;
  }

  get x00221132(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221132'];
    return this.dwResponse['00221132']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Source of Anterior Chamber Depth Data Code Sequence
  get SourceOfAnteriorChamberDepthDataCodeSequence(): Array<Dataset> | undefined {
    return this.x00221133;
  }

  get x00221133(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221133'];
    return this.dwResponse['00221133']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Source of Refractive Measurements Sequence
  get SourceOfRefractiveMeasurementsSequence(): Array<Dataset> | undefined {
    return this.x00221134;
  }

  get x00221134(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221134'];
    return this.dwResponse['00221134']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Source of Refractive Measurements Code Sequence
  get SourceOfRefractiveMeasurementsCodeSequence(): Array<Dataset> | undefined {
    return this.x00221135;
  }

  get x00221135(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221135'];
    return this.dwResponse['00221135']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Axial Length Measurement Modified
  get OphthalmicAxialLengthMeasurementModified(): string | undefined {
    return this.x00221140;
  }

  get x00221140(): string | undefined {
    const element = this.dwResponse['00221140'];
    return this.dwResponse['00221140']?.Value[0];
  }

  // Ophthalmic Axial Length Data Source Code Sequence
  get OphthalmicAxialLengthDataSourceCodeSequence(): Array<Dataset> | undefined {
    return this.x00221150;
  }

  get x00221150(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221150'];
    return this.dwResponse['00221150']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Axial Length Acquisition Method Code Sequence
  get OphthalmicAxialLengthAcquisitionMethodCodeSequence(): Array<Dataset> | undefined {
    return this.x00221153;
  }

  get x00221153(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221153'];
    return this.dwResponse['00221153']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Signal to Noise Ratio
  get SignalToNoiseRatio(): number | undefined {
    return this.x00221155;
  }

  get x00221155(): number | undefined {
    const element = this.dwResponse['00221155'];
    return this.dwResponse['00221155']?.Value[0];
  }

  // Ophthalmic Axial Length Data Source Description
  get OphthalmicAxialLengthDataSourceDescription(): string | undefined {
    return this.x00221159;
  }

  get x00221159(): string | undefined {
    const element = this.dwResponse['00221159'];
    return this.dwResponse['00221159']?.Value[0];
  }

  // Ophthalmic Axial Length Measurements Total Length Sequence
  get OphthalmicAxialLengthMeasurementsTotalLengthSequence(): Array<Dataset> | undefined {
    return this.x00221210;
  }

  get x00221210(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221210'];
    return this.dwResponse['00221210']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Axial Length Measurements Segmental Length Sequence
  get OphthalmicAxialLengthMeasurementsSegmentalLengthSequence(): Array<Dataset> | undefined {
    return this.x00221211;
  }

  get x00221211(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221211'];
    return this.dwResponse['00221211']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Axial Length Measurements Length Summation Sequence
  get OphthalmicAxialLengthMeasurementsLengthSummationSequence(): Array<Dataset> | undefined {
    return this.x00221212;
  }

  get x00221212(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221212'];
    return this.dwResponse['00221212']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ultrasound Ophthalmic Axial Length Measurements Sequence
  get UltrasoundOphthalmicAxialLengthMeasurementsSequence(): Array<Dataset> | undefined {
    return this.x00221220;
  }

  get x00221220(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221220'];
    return this.dwResponse['00221220']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Optical Ophthalmic Axial Length Measurements Sequence
  get OpticalOphthalmicAxialLengthMeasurementsSequence(): Array<Dataset> | undefined {
    return this.x00221225;
  }

  get x00221225(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221225'];
    return this.dwResponse['00221225']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ultrasound Selected Ophthalmic Axial Length Sequence
  get UltrasoundSelectedOphthalmicAxialLengthSequence(): Array<Dataset> | undefined {
    return this.x00221230;
  }

  get x00221230(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221230'];
    return this.dwResponse['00221230']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Axial Length Selection Method Code Sequence
  get OphthalmicAxialLengthSelectionMethodCodeSequence(): Array<Dataset> | undefined {
    return this.x00221250;
  }

  get x00221250(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221250'];
    return this.dwResponse['00221250']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Optical Selected Ophthalmic Axial Length Sequence
  get OpticalSelectedOphthalmicAxialLengthSequence(): Array<Dataset> | undefined {
    return this.x00221255;
  }

  get x00221255(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221255'];
    return this.dwResponse['00221255']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Selected Segmental Ophthalmic Axial Length Sequence
  get SelectedSegmentalOphthalmicAxialLengthSequence(): Array<Dataset> | undefined {
    return this.x00221257;
  }

  get x00221257(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221257'];
    return this.dwResponse['00221257']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Selected Total Ophthalmic Axial Length Sequence
  get SelectedTotalOphthalmicAxialLengthSequence(): Array<Dataset> | undefined {
    return this.x00221260;
  }

  get x00221260(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221260'];
    return this.dwResponse['00221260']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Axial Length Quality Metric Sequence
  get OphthalmicAxialLengthQualityMetricSequence(): Array<Dataset> | undefined {
    return this.x00221262;
  }

  get x00221262(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221262'];
    return this.dwResponse['00221262']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Axial Length Quality Metric Type Code Sequence
  get OphthalmicAxialLengthQualityMetricTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x00221265;
  }

  get x00221265(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221265'];
    return this.dwResponse['00221265']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Axial Length Quality Metric Type Description
  get OphthalmicAxialLengthQualityMetricTypeDescription(): string | undefined {
    return this.x00221273;
  }

  get x00221273(): string | undefined {
    const element = this.dwResponse['00221273'];
    return this.dwResponse['00221273']?.Value[0];
  }

  // Intraocular Lens Calculations Right Eye Sequence
  get IntraocularLensCalculationsRightEyeSequence(): Array<Dataset> | undefined {
    return this.x00221300;
  }

  get x00221300(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221300'];
    return this.dwResponse['00221300']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Intraocular Lens Calculations Left Eye Sequence
  get IntraocularLensCalculationsLeftEyeSequence(): Array<Dataset> | undefined {
    return this.x00221310;
  }

  get x00221310(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221310'];
    return this.dwResponse['00221310']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Ophthalmic Axial Length Measurement QC Image Sequence
  get ReferencedOphthalmicAxialLengthMeasurementQCImageSequence(): Array<Dataset> | undefined {
    return this.x00221330;
  }

  get x00221330(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221330'];
    return this.dwResponse['00221330']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Mapping Device Type
  get OphthalmicMappingDeviceType(): string | undefined {
    return this.x00221415;
  }

  get x00221415(): string | undefined {
    const element = this.dwResponse['00221415'];
    return this.dwResponse['00221415']?.Value[0];
  }

  // Acquisition Method Code Sequence
  get AcquisitionMethodCodeSequence(): Array<Dataset> | undefined {
    return this.x00221420;
  }

  get x00221420(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221420'];
    return this.dwResponse['00221420']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Acquisition Method Algorithm Sequence
  get AcquisitionMethodAlgorithmSequence(): Array<Dataset> | undefined {
    return this.x00221423;
  }

  get x00221423(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221423'];
    return this.dwResponse['00221423']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Thickness Map Type Code Sequence
  get OphthalmicThicknessMapTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x00221436;
  }

  get x00221436(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221436'];
    return this.dwResponse['00221436']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Thickness Mapping Normals Sequence
  get OphthalmicThicknessMappingNormalsSequence(): Array<Dataset> | undefined {
    return this.x00221443;
  }

  get x00221443(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221443'];
    return this.dwResponse['00221443']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Retinal Thickness Definition Code Sequence
  get RetinalThicknessDefinitionCodeSequence(): Array<Dataset> | undefined {
    return this.x00221445;
  }

  get x00221445(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221445'];
    return this.dwResponse['00221445']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Pixel Value Mapping to Coded Concept Sequence
  get PixelValueMappingToCodedConceptSequence(): Array<Dataset> | undefined {
    return this.x00221450;
  }

  get x00221450(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221450'];
    return this.dwResponse['00221450']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Mapped Pixel Value
  get MappedPixelValue(): number | undefined {
    return this.x00221452;
  }

  get x00221452(): number | undefined {
    const element = this.dwResponse['00221452'];
    return this.dwResponse['00221452']?.Value[0];
  }

  // Pixel Value Mapping Explanation
  get PixelValueMappingExplanation(): string | undefined {
    return this.x00221454;
  }

  get x00221454(): string | undefined {
    const element = this.dwResponse['00221454'];
    return this.dwResponse['00221454']?.Value[0];
  }

  // Ophthalmic Thickness Map Quality Threshold Sequence
  get OphthalmicThicknessMapQualityThresholdSequence(): Array<Dataset> | undefined {
    return this.x00221458;
  }

  get x00221458(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221458'];
    return this.dwResponse['00221458']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Thickness Map Threshold Quality Rating
  get OphthalmicThicknessMapThresholdQualityRating(): number | undefined {
    return this.x00221460;
  }

  get x00221460(): number | undefined {
    const element = this.dwResponse['00221460'];
    return this.dwResponse['00221460']?.Value[0];
  }

  // Anatomic Structure Reference Point
  get AnatomicStructureReferencePoint(): Array<number> | undefined {
    return this.x00221463;
  }

  get x00221463(): Array<number> | undefined {
    const element = this.dwResponse['00221463'];
    return this.dwResponse['00221463']?.Value;
  }

  // Registration to Localizer Sequence
  get RegistrationToLocalizerSequence(): Array<Dataset> | undefined {
    return this.x00221465;
  }

  get x00221465(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221465'];
    return this.dwResponse['00221465']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Registered Localizer Units
  get RegisteredLocalizerUnits(): string | undefined {
    return this.x00221466;
  }

  get x00221466(): string | undefined {
    const element = this.dwResponse['00221466'];
    return this.dwResponse['00221466']?.Value[0];
  }

  // Registered Localizer Top Left Hand Corner
  get RegisteredLocalizerTopLeftHandCorner(): Array<number> | undefined {
    return this.x00221467;
  }

  get x00221467(): Array<number> | undefined {
    const element = this.dwResponse['00221467'];
    return this.dwResponse['00221467']?.Value;
  }

  // Registered Localizer Bottom Right Hand Corner
  get RegisteredLocalizerBottomRightHandCorner(): Array<number> | undefined {
    return this.x00221468;
  }

  get x00221468(): Array<number> | undefined {
    const element = this.dwResponse['00221468'];
    return this.dwResponse['00221468']?.Value;
  }

  // Ophthalmic Thickness Map Quality Rating Sequence
  get OphthalmicThicknessMapQualityRatingSequence(): Array<Dataset> | undefined {
    return this.x00221470;
  }

  get x00221470(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221470'];
    return this.dwResponse['00221470']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Relevant OPT Attributes Sequence
  get RelevantOPTAttributesSequence(): Array<Dataset> | undefined {
    return this.x00221472;
  }

  get x00221472(): Array<Dataset> | undefined {
    const element = this.dwResponse['00221472'];
    return this.dwResponse['00221472']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Visual Field Horizontal Extent
  get VisualFieldHorizontalExtent(): number | undefined {
    return this.x00240010;
  }

  get x00240010(): number | undefined {
    const element = this.dwResponse['00240010'];
    return this.dwResponse['00240010']?.Value[0];
  }

  // Visual Field Vertical Extent
  get VisualFieldVerticalExtent(): number | undefined {
    return this.x00240011;
  }

  get x00240011(): number | undefined {
    const element = this.dwResponse['00240011'];
    return this.dwResponse['00240011']?.Value[0];
  }

  // Visual Field Shape
  get VisualFieldShape(): string | undefined {
    return this.x00240012;
  }

  get x00240012(): string | undefined {
    const element = this.dwResponse['00240012'];
    return this.dwResponse['00240012']?.Value[0];
  }

  // Screening Test Mode Code Sequence
  get ScreeningTestModeCodeSequence(): Array<Dataset> | undefined {
    return this.x00240016;
  }

  get x00240016(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240016'];
    return this.dwResponse['00240016']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Maximum Stimulus Luminance
  get MaximumStimulusLuminance(): number | undefined {
    return this.x00240018;
  }

  get x00240018(): number | undefined {
    const element = this.dwResponse['00240018'];
    return this.dwResponse['00240018']?.Value[0];
  }

  // Background Luminance
  get BackgroundLuminance(): number | undefined {
    return this.x00240020;
  }

  get x00240020(): number | undefined {
    const element = this.dwResponse['00240020'];
    return this.dwResponse['00240020']?.Value[0];
  }

  // Stimulus Color Code Sequence
  get StimulusColorCodeSequence(): Array<Dataset> | undefined {
    return this.x00240021;
  }

  get x00240021(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240021'];
    return this.dwResponse['00240021']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Background Illumination Color Code Sequence
  get BackgroundIlluminationColorCodeSequence(): Array<Dataset> | undefined {
    return this.x00240024;
  }

  get x00240024(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240024'];
    return this.dwResponse['00240024']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Stimulus Area
  get StimulusArea(): number | undefined {
    return this.x00240025;
  }

  get x00240025(): number | undefined {
    const element = this.dwResponse['00240025'];
    return this.dwResponse['00240025']?.Value[0];
  }

  // Stimulus Presentation Time
  get StimulusPresentationTime(): number | undefined {
    return this.x00240028;
  }

  get x00240028(): number | undefined {
    const element = this.dwResponse['00240028'];
    return this.dwResponse['00240028']?.Value[0];
  }

  // Fixation Sequence
  get FixationSequence(): Array<Dataset> | undefined {
    return this.x00240032;
  }

  get x00240032(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240032'];
    return this.dwResponse['00240032']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Fixation Monitoring Code Sequence
  get FixationMonitoringCodeSequence(): Array<Dataset> | undefined {
    return this.x00240033;
  }

  get x00240033(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240033'];
    return this.dwResponse['00240033']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Visual Field Catch Trial Sequence
  get VisualFieldCatchTrialSequence(): Array<Dataset> | undefined {
    return this.x00240034;
  }

  get x00240034(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240034'];
    return this.dwResponse['00240034']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Fixation Checked Quantity
  get FixationCheckedQuantity(): number | undefined {
    return this.x00240035;
  }

  get x00240035(): number | undefined {
    const element = this.dwResponse['00240035'];
    return this.dwResponse['00240035']?.Value[0];
  }

  // Patient Not Properly Fixated Quantity
  get PatientNotProperlyFixatedQuantity(): number | undefined {
    return this.x00240036;
  }

  get x00240036(): number | undefined {
    const element = this.dwResponse['00240036'];
    return this.dwResponse['00240036']?.Value[0];
  }

  // Presented Visual Stimuli Data Flag
  get PresentedVisualStimuliDataFlag(): string | undefined {
    return this.x00240037;
  }

  get x00240037(): string | undefined {
    const element = this.dwResponse['00240037'];
    return this.dwResponse['00240037']?.Value[0];
  }

  // Number of Visual Stimuli
  get NumberOfVisualStimuli(): number | undefined {
    return this.x00240038;
  }

  get x00240038(): number | undefined {
    const element = this.dwResponse['00240038'];
    return this.dwResponse['00240038']?.Value[0];
  }

  // Excessive Fixation Losses Data Flag
  get ExcessiveFixationLossesDataFlag(): string | undefined {
    return this.x00240039;
  }

  get x00240039(): string | undefined {
    const element = this.dwResponse['00240039'];
    return this.dwResponse['00240039']?.Value[0];
  }

  // Excessive Fixation Losses
  get ExcessiveFixationLosses(): string | undefined {
    return this.x00240040;
  }

  get x00240040(): string | undefined {
    const element = this.dwResponse['00240040'];
    return this.dwResponse['00240040']?.Value[0];
  }

  // Stimuli Retesting Quantity
  get StimuliRetestingQuantity(): number | undefined {
    return this.x00240042;
  }

  get x00240042(): number | undefined {
    const element = this.dwResponse['00240042'];
    return this.dwResponse['00240042']?.Value[0];
  }

  // False Negatives Estimate Flag
  get FalseNegativesEstimateFlag(): string | undefined {
    return this.x00240045;
  }

  get x00240045(): string | undefined {
    const element = this.dwResponse['00240045'];
    return this.dwResponse['00240045']?.Value[0];
  }

  // False Negatives Estimate
  get FalseNegativesEstimate(): number | undefined {
    return this.x00240046;
  }

  get x00240046(): number | undefined {
    const element = this.dwResponse['00240046'];
    return this.dwResponse['00240046']?.Value[0];
  }

  // Negative Catch Trials Quantity
  get NegativeCatchTrialsQuantity(): number | undefined {
    return this.x00240048;
  }

  get x00240048(): number | undefined {
    const element = this.dwResponse['00240048'];
    return this.dwResponse['00240048']?.Value[0];
  }

  // False Negatives Quantity
  get FalseNegativesQuantity(): number | undefined {
    return this.x00240050;
  }

  get x00240050(): number | undefined {
    const element = this.dwResponse['00240050'];
    return this.dwResponse['00240050']?.Value[0];
  }

  // Excessive False Negatives Data Flag
  get ExcessiveFalseNegativesDataFlag(): string | undefined {
    return this.x00240051;
  }

  get x00240051(): string | undefined {
    const element = this.dwResponse['00240051'];
    return this.dwResponse['00240051']?.Value[0];
  }

  // Excessive False Negatives
  get ExcessiveFalseNegatives(): string | undefined {
    return this.x00240052;
  }

  get x00240052(): string | undefined {
    const element = this.dwResponse['00240052'];
    return this.dwResponse['00240052']?.Value[0];
  }

  // False Positives Estimate Flag
  get FalsePositivesEstimateFlag(): string | undefined {
    return this.x00240053;
  }

  get x00240053(): string | undefined {
    const element = this.dwResponse['00240053'];
    return this.dwResponse['00240053']?.Value[0];
  }

  // False Positives Estimate
  get FalsePositivesEstimate(): number | undefined {
    return this.x00240054;
  }

  get x00240054(): number | undefined {
    const element = this.dwResponse['00240054'];
    return this.dwResponse['00240054']?.Value[0];
  }

  // Catch Trials Data Flag
  get CatchTrialsDataFlag(): string | undefined {
    return this.x00240055;
  }

  get x00240055(): string | undefined {
    const element = this.dwResponse['00240055'];
    return this.dwResponse['00240055']?.Value[0];
  }

  // Positive Catch Trials Quantity
  get PositiveCatchTrialsQuantity(): number | undefined {
    return this.x00240056;
  }

  get x00240056(): number | undefined {
    const element = this.dwResponse['00240056'];
    return this.dwResponse['00240056']?.Value[0];
  }

  // Test Point Normals Data Flag
  get TestPointNormalsDataFlag(): string | undefined {
    return this.x00240057;
  }

  get x00240057(): string | undefined {
    const element = this.dwResponse['00240057'];
    return this.dwResponse['00240057']?.Value[0];
  }

  // Test Point Normals Sequence
  get TestPointNormalsSequence(): Array<Dataset> | undefined {
    return this.x00240058;
  }

  get x00240058(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240058'];
    return this.dwResponse['00240058']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Global Deviation Probability Normals Flag
  get GlobalDeviationProbabilityNormalsFlag(): string | undefined {
    return this.x00240059;
  }

  get x00240059(): string | undefined {
    const element = this.dwResponse['00240059'];
    return this.dwResponse['00240059']?.Value[0];
  }

  // False Positives Quantity
  get FalsePositivesQuantity(): number | undefined {
    return this.x00240060;
  }

  get x00240060(): number | undefined {
    const element = this.dwResponse['00240060'];
    return this.dwResponse['00240060']?.Value[0];
  }

  // Excessive False Positives Data Flag
  get ExcessiveFalsePositivesDataFlag(): string | undefined {
    return this.x00240061;
  }

  get x00240061(): string | undefined {
    const element = this.dwResponse['00240061'];
    return this.dwResponse['00240061']?.Value[0];
  }

  // Excessive False Positives
  get ExcessiveFalsePositives(): string | undefined {
    return this.x00240062;
  }

  get x00240062(): string | undefined {
    const element = this.dwResponse['00240062'];
    return this.dwResponse['00240062']?.Value[0];
  }

  // Visual Field Test Normals Flag
  get VisualFieldTestNormalsFlag(): string | undefined {
    return this.x00240063;
  }

  get x00240063(): string | undefined {
    const element = this.dwResponse['00240063'];
    return this.dwResponse['00240063']?.Value[0];
  }

  // Results Normals Sequence
  get ResultsNormalsSequence(): Array<Dataset> | undefined {
    return this.x00240064;
  }

  get x00240064(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240064'];
    return this.dwResponse['00240064']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Age Corrected Sensitivity Deviation Algorithm Sequence
  get AgeCorrectedSensitivityDeviationAlgorithmSequence(): Array<Dataset> | undefined {
    return this.x00240065;
  }

  get x00240065(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240065'];
    return this.dwResponse['00240065']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Global Deviation From Normal
  get GlobalDeviationFromNormal(): number | undefined {
    return this.x00240066;
  }

  get x00240066(): number | undefined {
    const element = this.dwResponse['00240066'];
    return this.dwResponse['00240066']?.Value[0];
  }

  // Generalized Defect Sensitivity Deviation Algorithm Sequence
  get GeneralizedDefectSensitivityDeviationAlgorithmSequence(): Array<Dataset> | undefined {
    return this.x00240067;
  }

  get x00240067(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240067'];
    return this.dwResponse['00240067']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Localized Deviation From Normal
  get LocalizedDeviationFromNormal(): number | undefined {
    return this.x00240068;
  }

  get x00240068(): number | undefined {
    const element = this.dwResponse['00240068'];
    return this.dwResponse['00240068']?.Value[0];
  }

  // Patient Reliability Indicator
  get PatientReliabilityIndicator(): string | undefined {
    return this.x00240069;
  }

  get x00240069(): string | undefined {
    const element = this.dwResponse['00240069'];
    return this.dwResponse['00240069']?.Value[0];
  }

  // Visual Field Mean Sensitivity
  get VisualFieldMeanSensitivity(): number | undefined {
    return this.x00240070;
  }

  get x00240070(): number | undefined {
    const element = this.dwResponse['00240070'];
    return this.dwResponse['00240070']?.Value[0];
  }

  // Global Deviation Probability
  get GlobalDeviationProbability(): number | undefined {
    return this.x00240071;
  }

  get x00240071(): number | undefined {
    const element = this.dwResponse['00240071'];
    return this.dwResponse['00240071']?.Value[0];
  }

  // Local Deviation Probability Normals Flag
  get LocalDeviationProbabilityNormalsFlag(): string | undefined {
    return this.x00240072;
  }

  get x00240072(): string | undefined {
    const element = this.dwResponse['00240072'];
    return this.dwResponse['00240072']?.Value[0];
  }

  // Localized Deviation Probability
  get LocalizedDeviationProbability(): number | undefined {
    return this.x00240073;
  }

  get x00240073(): number | undefined {
    const element = this.dwResponse['00240073'];
    return this.dwResponse['00240073']?.Value[0];
  }

  // Short Term Fluctuation Calculated
  get ShortTermFluctuationCalculated(): string | undefined {
    return this.x00240074;
  }

  get x00240074(): string | undefined {
    const element = this.dwResponse['00240074'];
    return this.dwResponse['00240074']?.Value[0];
  }

  // Short Term Fluctuation
  get ShortTermFluctuation(): number | undefined {
    return this.x00240075;
  }

  get x00240075(): number | undefined {
    const element = this.dwResponse['00240075'];
    return this.dwResponse['00240075']?.Value[0];
  }

  // Short Term Fluctuation Probability Calculated
  get ShortTermFluctuationProbabilityCalculated(): string | undefined {
    return this.x00240076;
  }

  get x00240076(): string | undefined {
    const element = this.dwResponse['00240076'];
    return this.dwResponse['00240076']?.Value[0];
  }

  // Short Term Fluctuation Probability
  get ShortTermFluctuationProbability(): number | undefined {
    return this.x00240077;
  }

  get x00240077(): number | undefined {
    const element = this.dwResponse['00240077'];
    return this.dwResponse['00240077']?.Value[0];
  }

  // Corrected Localized Deviation From Normal Calculated
  get CorrectedLocalizedDeviationFromNormalCalculated(): string | undefined {
    return this.x00240078;
  }

  get x00240078(): string | undefined {
    const element = this.dwResponse['00240078'];
    return this.dwResponse['00240078']?.Value[0];
  }

  // Corrected Localized Deviation From Normal
  get CorrectedLocalizedDeviationFromNormal(): number | undefined {
    return this.x00240079;
  }

  get x00240079(): number | undefined {
    const element = this.dwResponse['00240079'];
    return this.dwResponse['00240079']?.Value[0];
  }

  // Corrected Localized Deviation From Normal Probability Calculated
  get CorrectedLocalizedDeviationFromNormalProbabilityCalculated(): string | undefined {
    return this.x00240080;
  }

  get x00240080(): string | undefined {
    const element = this.dwResponse['00240080'];
    return this.dwResponse['00240080']?.Value[0];
  }

  // Corrected Localized Deviation From Normal Probability
  get CorrectedLocalizedDeviationFromNormalProbability(): number | undefined {
    return this.x00240081;
  }

  get x00240081(): number | undefined {
    const element = this.dwResponse['00240081'];
    return this.dwResponse['00240081']?.Value[0];
  }

  // Global Deviation Probability Sequence
  get GlobalDeviationProbabilitySequence(): Array<Dataset> | undefined {
    return this.x00240083;
  }

  get x00240083(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240083'];
    return this.dwResponse['00240083']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Localized Deviation Probability Sequence
  get LocalizedDeviationProbabilitySequence(): Array<Dataset> | undefined {
    return this.x00240085;
  }

  get x00240085(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240085'];
    return this.dwResponse['00240085']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Foveal Sensitivity Measured
  get FovealSensitivityMeasured(): string | undefined {
    return this.x00240086;
  }

  get x00240086(): string | undefined {
    const element = this.dwResponse['00240086'];
    return this.dwResponse['00240086']?.Value[0];
  }

  // Foveal Sensitivity
  get FovealSensitivity(): number | undefined {
    return this.x00240087;
  }

  get x00240087(): number | undefined {
    const element = this.dwResponse['00240087'];
    return this.dwResponse['00240087']?.Value[0];
  }

  // Visual Field Test Duration
  get VisualFieldTestDuration(): number | undefined {
    return this.x00240088;
  }

  get x00240088(): number | undefined {
    const element = this.dwResponse['00240088'];
    return this.dwResponse['00240088']?.Value[0];
  }

  // Visual Field Test Point Sequence
  get VisualFieldTestPointSequence(): Array<Dataset> | undefined {
    return this.x00240089;
  }

  get x00240089(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240089'];
    return this.dwResponse['00240089']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Visual Field Test Point X-Coordinate
  get VisualFieldTestPointXCoordinate(): number | undefined {
    return this.x00240090;
  }

  get x00240090(): number | undefined {
    const element = this.dwResponse['00240090'];
    return this.dwResponse['00240090']?.Value[0];
  }

  // Visual Field Test Point Y-Coordinate
  get VisualFieldTestPointYCoordinate(): number | undefined {
    return this.x00240091;
  }

  get x00240091(): number | undefined {
    const element = this.dwResponse['00240091'];
    return this.dwResponse['00240091']?.Value[0];
  }

  // Age Corrected Sensitivity Deviation Value
  get AgeCorrectedSensitivityDeviationValue(): number | undefined {
    return this.x00240092;
  }

  get x00240092(): number | undefined {
    const element = this.dwResponse['00240092'];
    return this.dwResponse['00240092']?.Value[0];
  }

  // Stimulus Results
  get StimulusResults(): string | undefined {
    return this.x00240093;
  }

  get x00240093(): string | undefined {
    const element = this.dwResponse['00240093'];
    return this.dwResponse['00240093']?.Value[0];
  }

  // Sensitivity Value
  get SensitivityValue(): number | undefined {
    return this.x00240094;
  }

  get x00240094(): number | undefined {
    const element = this.dwResponse['00240094'];
    return this.dwResponse['00240094']?.Value[0];
  }

  // Retest Stimulus Seen
  get RetestStimulusSeen(): string | undefined {
    return this.x00240095;
  }

  get x00240095(): string | undefined {
    const element = this.dwResponse['00240095'];
    return this.dwResponse['00240095']?.Value[0];
  }

  // Retest Sensitivity Value
  get RetestSensitivityValue(): number | undefined {
    return this.x00240096;
  }

  get x00240096(): number | undefined {
    const element = this.dwResponse['00240096'];
    return this.dwResponse['00240096']?.Value[0];
  }

  // Visual Field Test Point Normals Sequence
  get VisualFieldTestPointNormalsSequence(): Array<Dataset> | undefined {
    return this.x00240097;
  }

  get x00240097(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240097'];
    return this.dwResponse['00240097']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Quantified Defect
  get QuantifiedDefect(): number | undefined {
    return this.x00240098;
  }

  get x00240098(): number | undefined {
    const element = this.dwResponse['00240098'];
    return this.dwResponse['00240098']?.Value[0];
  }

  // Age Corrected Sensitivity Deviation Probability Value
  get AgeCorrectedSensitivityDeviationProbabilityValue(): number | undefined {
    return this.x00240100;
  }

  get x00240100(): number | undefined {
    const element = this.dwResponse['00240100'];
    return this.dwResponse['00240100']?.Value[0];
  }

  // Generalized Defect Corrected Sensitivity Deviation Flag
  get GeneralizedDefectCorrectedSensitivityDeviationFlag(): string | undefined {
    return this.x00240102;
  }

  get x00240102(): string | undefined {
    const element = this.dwResponse['00240102'];
    return this.dwResponse['00240102']?.Value[0];
  }

  // Generalized Defect Corrected Sensitivity Deviation Value
  get GeneralizedDefectCorrectedSensitivityDeviationValue(): number | undefined {
    return this.x00240103;
  }

  get x00240103(): number | undefined {
    const element = this.dwResponse['00240103'];
    return this.dwResponse['00240103']?.Value[0];
  }

  // Generalized Defect Corrected Sensitivity Deviation Probability Value
  get GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue(): number | undefined {
    return this.x00240104;
  }

  get x00240104(): number | undefined {
    const element = this.dwResponse['00240104'];
    return this.dwResponse['00240104']?.Value[0];
  }

  // Minimum Sensitivity Value
  get MinimumSensitivityValue(): number | undefined {
    return this.x00240105;
  }

  get x00240105(): number | undefined {
    const element = this.dwResponse['00240105'];
    return this.dwResponse['00240105']?.Value[0];
  }

  // Blind Spot Localized
  get BlindSpotLocalized(): string | undefined {
    return this.x00240106;
  }

  get x00240106(): string | undefined {
    const element = this.dwResponse['00240106'];
    return this.dwResponse['00240106']?.Value[0];
  }

  // Blind Spot X-Coordinate
  get BlindSpotXCoordinate(): number | undefined {
    return this.x00240107;
  }

  get x00240107(): number | undefined {
    const element = this.dwResponse['00240107'];
    return this.dwResponse['00240107']?.Value[0];
  }

  // Blind Spot Y-Coordinate
  get BlindSpotYCoordinate(): number | undefined {
    return this.x00240108;
  }

  get x00240108(): number | undefined {
    const element = this.dwResponse['00240108'];
    return this.dwResponse['00240108']?.Value[0];
  }

  // Visual Acuity Measurement Sequence
  get VisualAcuityMeasurementSequence(): Array<Dataset> | undefined {
    return this.x00240110;
  }

  get x00240110(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240110'];
    return this.dwResponse['00240110']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Refractive Parameters Used on Patient Sequence
  get RefractiveParametersUsedOnPatientSequence(): Array<Dataset> | undefined {
    return this.x00240112;
  }

  get x00240112(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240112'];
    return this.dwResponse['00240112']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Measurement Laterality
  get MeasurementLaterality(): string | undefined {
    return this.x00240113;
  }

  get x00240113(): string | undefined {
    const element = this.dwResponse['00240113'];
    return this.dwResponse['00240113']?.Value[0];
  }

  // Ophthalmic Patient Clinical Information Left Eye Sequence
  get OphthalmicPatientClinicalInformationLeftEyeSequence(): Array<Dataset> | undefined {
    return this.x00240114;
  }

  get x00240114(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240114'];
    return this.dwResponse['00240114']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ophthalmic Patient Clinical Information Right Eye Sequence
  get OphthalmicPatientClinicalInformationRightEyeSequence(): Array<Dataset> | undefined {
    return this.x00240115;
  }

  get x00240115(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240115'];
    return this.dwResponse['00240115']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Foveal Point Normative Data Flag
  get FovealPointNormativeDataFlag(): string | undefined {
    return this.x00240117;
  }

  get x00240117(): string | undefined {
    const element = this.dwResponse['00240117'];
    return this.dwResponse['00240117']?.Value[0];
  }

  // Foveal Point Probability Value
  get FovealPointProbabilityValue(): number | undefined {
    return this.x00240118;
  }

  get x00240118(): number | undefined {
    const element = this.dwResponse['00240118'];
    return this.dwResponse['00240118']?.Value[0];
  }

  // Screening Baseline Measured
  get ScreeningBaselineMeasured(): string | undefined {
    return this.x00240120;
  }

  get x00240120(): string | undefined {
    const element = this.dwResponse['00240120'];
    return this.dwResponse['00240120']?.Value[0];
  }

  // Screening Baseline Measured Sequence
  get ScreeningBaselineMeasuredSequence(): Array<Dataset> | undefined {
    return this.x00240122;
  }

  get x00240122(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240122'];
    return this.dwResponse['00240122']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Screening Baseline Type
  get ScreeningBaselineType(): string | undefined {
    return this.x00240124;
  }

  get x00240124(): string | undefined {
    const element = this.dwResponse['00240124'];
    return this.dwResponse['00240124']?.Value[0];
  }

  // Screening Baseline Value
  get ScreeningBaselineValue(): number | undefined {
    return this.x00240126;
  }

  get x00240126(): number | undefined {
    const element = this.dwResponse['00240126'];
    return this.dwResponse['00240126']?.Value[0];
  }

  // Algorithm Source
  get AlgorithmSource(): string | undefined {
    return this.x00240202;
  }

  get x00240202(): string | undefined {
    const element = this.dwResponse['00240202'];
    return this.dwResponse['00240202']?.Value[0];
  }

  // Data Set Name
  get DataSetName(): string | undefined {
    return this.x00240306;
  }

  get x00240306(): string | undefined {
    const element = this.dwResponse['00240306'];
    return this.dwResponse['00240306']?.Value[0];
  }

  // Data Set Version
  get DataSetVersion(): string | undefined {
    return this.x00240307;
  }

  get x00240307(): string | undefined {
    const element = this.dwResponse['00240307'];
    return this.dwResponse['00240307']?.Value[0];
  }

  // Data Set Source
  get DataSetSource(): string | undefined {
    return this.x00240308;
  }

  get x00240308(): string | undefined {
    const element = this.dwResponse['00240308'];
    return this.dwResponse['00240308']?.Value[0];
  }

  // Data Set Description
  get DataSetDescription(): string | undefined {
    return this.x00240309;
  }

  get x00240309(): string | undefined {
    const element = this.dwResponse['00240309'];
    return this.dwResponse['00240309']?.Value[0];
  }

  // Visual Field Test Reliability Global Index Sequence
  get VisualFieldTestReliabilityGlobalIndexSequence(): Array<Dataset> | undefined {
    return this.x00240317;
  }

  get x00240317(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240317'];
    return this.dwResponse['00240317']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Visual Field Global Results Index Sequence
  get VisualFieldGlobalResultsIndexSequence(): Array<Dataset> | undefined {
    return this.x00240320;
  }

  get x00240320(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240320'];
    return this.dwResponse['00240320']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Data Observation Sequence
  get DataObservationSequence(): Array<Dataset> | undefined {
    return this.x00240325;
  }

  get x00240325(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240325'];
    return this.dwResponse['00240325']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Index Normals Flag
  get IndexNormalsFlag(): string | undefined {
    return this.x00240338;
  }

  get x00240338(): string | undefined {
    const element = this.dwResponse['00240338'];
    return this.dwResponse['00240338']?.Value[0];
  }

  // Index Probability
  get IndexProbability(): number | undefined {
    return this.x00240341;
  }

  get x00240341(): number | undefined {
    const element = this.dwResponse['00240341'];
    return this.dwResponse['00240341']?.Value[0];
  }

  // Index Probability Sequence
  get IndexProbabilitySequence(): Array<Dataset> | undefined {
    return this.x00240344;
  }

  get x00240344(): Array<Dataset> | undefined {
    const element = this.dwResponse['00240344'];
    return this.dwResponse['00240344']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Samples per Pixel
  get SamplesPerPixel(): number | undefined {
    return this.x00280002;
  }

  get x00280002(): number | undefined {
    const element = this.dwResponse['00280002'];
    return this.dwResponse['00280002']?.Value[0];
  }

  // Samples per Pixel Used
  get SamplesPerPixelUsed(): number | undefined {
    return this.x00280003;
  }

  get x00280003(): number | undefined {
    const element = this.dwResponse['00280003'];
    return this.dwResponse['00280003']?.Value[0];
  }

  // Photometric Interpretation
  get PhotometricInterpretation(): string | undefined {
    return this.x00280004;
  }

  get x00280004(): string | undefined {
    const element = this.dwResponse['00280004'];
    return this.dwResponse['00280004']?.Value[0];
  }

  // Image Dimensions
  get ImageDimensions(): number | undefined {
    return this.x00280005;
  }

  get x00280005(): number | undefined {
    const element = this.dwResponse['00280005'];
    return this.dwResponse['00280005']?.Value[0];
  }

  // Planar Configuration
  get PlanarConfiguration(): number | undefined {
    return this.x00280006;
  }

  get x00280006(): number | undefined {
    const element = this.dwResponse['00280006'];
    return this.dwResponse['00280006']?.Value[0];
  }

  // Number of Frames
  get NumberOfFrames(): number | undefined {
    return this.x00280008;
  }

  get x00280008(): number | undefined {
    const element = this.dwResponse['00280008'];
    return this.dwResponse['00280008']?.Value[0];
  }

  // Frame Increment Pointer
  get FrameIncrementPointer(): Array<Uint16Array> | undefined {
    return this.x00280009;
  }

  get x00280009(): Array<Uint16Array> | undefined {
    const element = this.dwResponse['00280009'];
    return this.dwResponse['00280009']?.Value;
  }

  // Frame Dimension Pointer
  get FrameDimensionPointer(): Array<Uint16Array> | undefined {
    return this.x0028000a;
  }

  get x0028000a(): Array<Uint16Array> | undefined {
    const element = this.dwResponse['0028000a'];
    return this.dwResponse['0028000a']?.Value;
  }

  // Rows
  get Rows(): number | undefined {
    return this.x00280010;
  }

  get x00280010(): number | undefined {
    const element = this.dwResponse['00280010'];
    return this.dwResponse['00280010']?.Value[0];
  }

  // Columns
  get Columns(): number | undefined {
    return this.x00280011;
  }

  get x00280011(): number | undefined {
    const element = this.dwResponse['00280011'];
    return this.dwResponse['00280011']?.Value[0];
  }

  // Planes
  get Planes(): number | undefined {
    return this.x00280012;
  }

  get x00280012(): number | undefined {
    const element = this.dwResponse['00280012'];
    return this.dwResponse['00280012']?.Value[0];
  }

  // Ultrasound Color Data Present
  get UltrasoundColorDataPresent(): number | undefined {
    return this.x00280014;
  }

  get x00280014(): number | undefined {
    const element = this.dwResponse['00280014'];
    return this.dwResponse['00280014']?.Value[0];
  }

  // Pixel Spacing
  get PixelSpacing(): Array<number> | undefined {
    return this.x00280030;
  }

  get x00280030(): Array<number> | undefined {
    const element = this.dwResponse['00280030'];
    return this.dwResponse['00280030']?.Value;
  }

  // Zoom Factor
  get ZoomFactor(): Array<number> | undefined {
    return this.x00280031;
  }

  get x00280031(): Array<number> | undefined {
    const element = this.dwResponse['00280031'];
    return this.dwResponse['00280031']?.Value;
  }

  // Zoom Center
  get ZoomCenter(): Array<number> | undefined {
    return this.x00280032;
  }

  get x00280032(): Array<number> | undefined {
    const element = this.dwResponse['00280032'];
    return this.dwResponse['00280032']?.Value;
  }

  // Pixel Aspect Ratio
  get PixelAspectRatio(): Array<number> | undefined {
    return this.x00280034;
  }

  get x00280034(): Array<number> | undefined {
    const element = this.dwResponse['00280034'];
    return this.dwResponse['00280034']?.Value;
  }

  // Image Format
  get ImageFormat(): string | undefined {
    return this.x00280040;
  }

  get x00280040(): string | undefined {
    const element = this.dwResponse['00280040'];
    return this.dwResponse['00280040']?.Value[0];
  }

  // Manipulated Image
  get ManipulatedImage(): Array<string> | undefined {
    return this.x00280050;
  }

  get x00280050(): Array<string> | undefined {
    const element = this.dwResponse['00280050'];
    return this.dwResponse['00280050']?.Value;
  }

  // Corrected Image
  get CorrectedImage(): Array<string> | undefined {
    return this.x00280051;
  }

  get x00280051(): Array<string> | undefined {
    const element = this.dwResponse['00280051'];
    return this.dwResponse['00280051']?.Value;
  }

  // Compression Recognition Code
  get CompressionRecognitionCode(): string | undefined {
    return this.x0028005f;
  }

  get x0028005f(): string | undefined {
    const element = this.dwResponse['0028005f'];
    return this.dwResponse['0028005f']?.Value[0];
  }

  // Compression Code
  get CompressionCode(): string | undefined {
    return this.x00280060;
  }

  get x00280060(): string | undefined {
    const element = this.dwResponse['00280060'];
    return this.dwResponse['00280060']?.Value[0];
  }

  // Compression Originator
  get CompressionOriginator(): string | undefined {
    return this.x00280061;
  }

  get x00280061(): string | undefined {
    const element = this.dwResponse['00280061'];
    return this.dwResponse['00280061']?.Value[0];
  }

  // Compression Label
  get CompressionLabel(): string | undefined {
    return this.x00280062;
  }

  get x00280062(): string | undefined {
    const element = this.dwResponse['00280062'];
    return this.dwResponse['00280062']?.Value[0];
  }

  // Compression Description
  get CompressionDescription(): string | undefined {
    return this.x00280063;
  }

  get x00280063(): string | undefined {
    const element = this.dwResponse['00280063'];
    return this.dwResponse['00280063']?.Value[0];
  }

  // Compression Sequence
  get CompressionSequence(): Array<string> | undefined {
    return this.x00280065;
  }

  get x00280065(): Array<string> | undefined {
    const element = this.dwResponse['00280065'];
    return this.dwResponse['00280065']?.Value;
  }

  // Compression Step Pointers
  get CompressionStepPointers(): Array<Uint16Array> | undefined {
    return this.x00280066;
  }

  get x00280066(): Array<Uint16Array> | undefined {
    const element = this.dwResponse['00280066'];
    return this.dwResponse['00280066']?.Value;
  }

  // Repeat Interval
  get RepeatInterval(): number | undefined {
    return this.x00280068;
  }

  get x00280068(): number | undefined {
    const element = this.dwResponse['00280068'];
    return this.dwResponse['00280068']?.Value[0];
  }

  // Bits Grouped
  get BitsGrouped(): number | undefined {
    return this.x00280069;
  }

  get x00280069(): number | undefined {
    const element = this.dwResponse['00280069'];
    return this.dwResponse['00280069']?.Value[0];
  }

  // Perimeter Table
  get PerimeterTable(): Array<number> | undefined {
    return this.x00280070;
  }

  get x00280070(): Array<number> | undefined {
    const element = this.dwResponse['00280070'];
    return this.dwResponse['00280070']?.Value;
  }

  // Perimeter Value
  get PerimeterValue(): number | undefined {
    return this.x00280071;
  }

  get x00280071(): number | undefined {
    const element = this.dwResponse['00280071'];
    return this.dwResponse['00280071']?.Value[0];
  }

  // Predictor Rows
  get PredictorRows(): number | undefined {
    return this.x00280080;
  }

  get x00280080(): number | undefined {
    const element = this.dwResponse['00280080'];
    return this.dwResponse['00280080']?.Value[0];
  }

  // Predictor Columns
  get PredictorColumns(): number | undefined {
    return this.x00280081;
  }

  get x00280081(): number | undefined {
    const element = this.dwResponse['00280081'];
    return this.dwResponse['00280081']?.Value[0];
  }

  // Predictor Constants
  get PredictorConstants(): Array<number> | undefined {
    return this.x00280082;
  }

  get x00280082(): Array<number> | undefined {
    const element = this.dwResponse['00280082'];
    return this.dwResponse['00280082']?.Value;
  }

  // Blocked Pixels
  get BlockedPixels(): string | undefined {
    return this.x00280090;
  }

  get x00280090(): string | undefined {
    const element = this.dwResponse['00280090'];
    return this.dwResponse['00280090']?.Value[0];
  }

  // Block Rows
  get BlockRows(): number | undefined {
    return this.x00280091;
  }

  get x00280091(): number | undefined {
    const element = this.dwResponse['00280091'];
    return this.dwResponse['00280091']?.Value[0];
  }

  // Block Columns
  get BlockColumns(): number | undefined {
    return this.x00280092;
  }

  get x00280092(): number | undefined {
    const element = this.dwResponse['00280092'];
    return this.dwResponse['00280092']?.Value[0];
  }

  // Row Overlap
  get RowOverlap(): number | undefined {
    return this.x00280093;
  }

  get x00280093(): number | undefined {
    const element = this.dwResponse['00280093'];
    return this.dwResponse['00280093']?.Value[0];
  }

  // Column Overlap
  get ColumnOverlap(): number | undefined {
    return this.x00280094;
  }

  get x00280094(): number | undefined {
    const element = this.dwResponse['00280094'];
    return this.dwResponse['00280094']?.Value[0];
  }

  // Bits Allocated
  get BitsAllocated(): number | undefined {
    return this.x00280100;
  }

  get x00280100(): number | undefined {
    const element = this.dwResponse['00280100'];
    return this.dwResponse['00280100']?.Value[0];
  }

  // Bits Stored
  get BitsStored(): number | undefined {
    return this.x00280101;
  }

  get x00280101(): number | undefined {
    const element = this.dwResponse['00280101'];
    return this.dwResponse['00280101']?.Value[0];
  }

  // High Bit
  get HighBit(): number | undefined {
    return this.x00280102;
  }

  get x00280102(): number | undefined {
    const element = this.dwResponse['00280102'];
    return this.dwResponse['00280102']?.Value[0];
  }

  // Pixel Representation
  get PixelRepresentation(): number | undefined {
    return this.x00280103;
  }

  get x00280103(): number | undefined {
    const element = this.dwResponse['00280103'];
    return this.dwResponse['00280103']?.Value[0];
  }

  // Smallest Valid Pixel Value
  get SmallestValidPixelValue(): number | undefined {
    return this.x00280104;
  }

  get x00280104(): number | undefined {
    const element = this.dwResponse['00280104'];
    return this.dwResponse['00280104']?.Value[0];
  }

  // Largest Valid Pixel Value
  get LargestValidPixelValue(): number | undefined {
    return this.x00280105;
  }

  get x00280105(): number | undefined {
    const element = this.dwResponse['00280105'];
    return this.dwResponse['00280105']?.Value[0];
  }

  // Smallest Image Pixel Value
  get SmallestImagePixelValue(): number | undefined {
    return this.x00280106;
  }

  get x00280106(): number | undefined {
    const element = this.dwResponse['00280106'];
    return this.dwResponse['00280106']?.Value[0];
  }

  // Largest Image Pixel Value
  get LargestImagePixelValue(): number | undefined {
    return this.x00280107;
  }

  get x00280107(): number | undefined {
    const element = this.dwResponse['00280107'];
    return this.dwResponse['00280107']?.Value[0];
  }

  // Smallest Pixel Value in Series
  get SmallestPixelValueInSeries(): number | undefined {
    return this.x00280108;
  }

  get x00280108(): number | undefined {
    const element = this.dwResponse['00280108'];
    return this.dwResponse['00280108']?.Value[0];
  }

  // Largest Pixel Value in Series
  get LargestPixelValueInSeries(): number | undefined {
    return this.x00280109;
  }

  get x00280109(): number | undefined {
    const element = this.dwResponse['00280109'];
    return this.dwResponse['00280109']?.Value[0];
  }

  // Smallest Image Pixel Value in Plane
  get SmallestImagePixelValueInPlane(): number | undefined {
    return this.x00280110;
  }

  get x00280110(): number | undefined {
    const element = this.dwResponse['00280110'];
    return this.dwResponse['00280110']?.Value[0];
  }

  // Largest Image Pixel Value in Plane
  get LargestImagePixelValueInPlane(): number | undefined {
    return this.x00280111;
  }

  get x00280111(): number | undefined {
    const element = this.dwResponse['00280111'];
    return this.dwResponse['00280111']?.Value[0];
  }

  // Pixel Padding Value
  get PixelPaddingValue(): number | undefined {
    return this.x00280120;
  }

  get x00280120(): number | undefined {
    const element = this.dwResponse['00280120'];
    return this.dwResponse['00280120']?.Value[0];
  }

  // Pixel Padding Range Limit
  get PixelPaddingRangeLimit(): number | undefined {
    return this.x00280121;
  }

  get x00280121(): number | undefined {
    const element = this.dwResponse['00280121'];
    return this.dwResponse['00280121']?.Value[0];
  }

  // Image Location
  get ImageLocation(): number | undefined {
    return this.x00280200;
  }

  get x00280200(): number | undefined {
    const element = this.dwResponse['00280200'];
    return this.dwResponse['00280200']?.Value[0];
  }

  // Quality Control Image
  get QualityControlImage(): string | undefined {
    return this.x00280300;
  }

  get x00280300(): string | undefined {
    const element = this.dwResponse['00280300'];
    return this.dwResponse['00280300']?.Value[0];
  }

  // Burned In Annotation
  get BurnedInAnnotation(): string | undefined {
    return this.x00280301;
  }

  get x00280301(): string | undefined {
    const element = this.dwResponse['00280301'];
    return this.dwResponse['00280301']?.Value[0];
  }

  // Recognizable Visual Features
  get RecognizableVisualFeatures(): string | undefined {
    return this.x00280302;
  }

  get x00280302(): string | undefined {
    const element = this.dwResponse['00280302'];
    return this.dwResponse['00280302']?.Value[0];
  }

  // Longitudinal Temporal Information Modified
  get LongitudinalTemporalInformationModified(): string | undefined {
    return this.x00280303;
  }

  get x00280303(): string | undefined {
    const element = this.dwResponse['00280303'];
    return this.dwResponse['00280303']?.Value[0];
  }

  // Referenced Color Palette Instance UID
  get ReferencedColorPaletteInstanceUID(): string | undefined {
    return this.x00280304;
  }

  get x00280304(): string | undefined {
    const element = this.dwResponse['00280304'];
    return this.dwResponse['00280304']?.Value[0];
  }

  // Transform Label
  get TransformLabel(): string | undefined {
    return this.x00280400;
  }

  get x00280400(): string | undefined {
    const element = this.dwResponse['00280400'];
    return this.dwResponse['00280400']?.Value[0];
  }

  // Transform Version Number
  get TransformVersionNumber(): string | undefined {
    return this.x00280401;
  }

  get x00280401(): string | undefined {
    const element = this.dwResponse['00280401'];
    return this.dwResponse['00280401']?.Value[0];
  }

  // Number of Transform Steps
  get NumberOfTransformSteps(): number | undefined {
    return this.x00280402;
  }

  get x00280402(): number | undefined {
    const element = this.dwResponse['00280402'];
    return this.dwResponse['00280402']?.Value[0];
  }

  // Sequence of Compressed Data
  get SequenceOfCompressedData(): Array<string> | undefined {
    return this.x00280403;
  }

  get x00280403(): Array<string> | undefined {
    const element = this.dwResponse['00280403'];
    return this.dwResponse['00280403']?.Value;
  }

  // Details of Coefficients
  get DetailsOfCoefficients(): Array<Uint16Array> | undefined {
    return this.x00280404;
  }

  get x00280404(): Array<Uint16Array> | undefined {
    const element = this.dwResponse['00280404'];
    return this.dwResponse['00280404']?.Value;
  }

  // Rows For Nth Order Coefficients
  get RowsForNthOrderCoefficients(): number | undefined {
    return this.x002804x0;
  }

  get x002804x0(): number | undefined {
    const element = this.dwResponse['002804x0'];
    return this.dwResponse['002804x0']?.Value[0];
  }

  // Columns For Nth Order Coefficients
  get ColumnsForNthOrderCoefficients(): number | undefined {
    return this.x002804x1;
  }

  get x002804x1(): number | undefined {
    const element = this.dwResponse['002804x1'];
    return this.dwResponse['002804x1']?.Value[0];
  }

  // Coefficient Coding
  get CoefficientCoding(): Array<string> | undefined {
    return this.x002804x2;
  }

  get x002804x2(): Array<string> | undefined {
    const element = this.dwResponse['002804x2'];
    return this.dwResponse['002804x2']?.Value;
  }

  // Coefficient Coding Pointers
  get CoefficientCodingPointers(): Array<Uint16Array> | undefined {
    return this.x002804x3;
  }

  get x002804x3(): Array<Uint16Array> | undefined {
    const element = this.dwResponse['002804x3'];
    return this.dwResponse['002804x3']?.Value;
  }

  // DCT Label
  get DCTLabel(): string | undefined {
    return this.x00280700;
  }

  get x00280700(): string | undefined {
    const element = this.dwResponse['00280700'];
    return this.dwResponse['00280700']?.Value[0];
  }

  // Data Block Description
  get DataBlockDescription(): Array<string> | undefined {
    return this.x00280701;
  }

  get x00280701(): Array<string> | undefined {
    const element = this.dwResponse['00280701'];
    return this.dwResponse['00280701']?.Value;
  }

  // Data Block
  get DataBlock(): Array<Uint16Array> | undefined {
    return this.x00280702;
  }

  get x00280702(): Array<Uint16Array> | undefined {
    const element = this.dwResponse['00280702'];
    return this.dwResponse['00280702']?.Value;
  }

  // Normalization Factor Format
  get NormalizationFactorFormat(): number | undefined {
    return this.x00280710;
  }

  get x00280710(): number | undefined {
    const element = this.dwResponse['00280710'];
    return this.dwResponse['00280710']?.Value[0];
  }

  // Zonal Map Number Format
  get ZonalMapNumberFormat(): number | undefined {
    return this.x00280720;
  }

  get x00280720(): number | undefined {
    const element = this.dwResponse['00280720'];
    return this.dwResponse['00280720']?.Value[0];
  }

  // Zonal Map Location
  get ZonalMapLocation(): Array<Uint16Array> | undefined {
    return this.x00280721;
  }

  get x00280721(): Array<Uint16Array> | undefined {
    const element = this.dwResponse['00280721'];
    return this.dwResponse['00280721']?.Value;
  }

  // Zonal Map Format
  get ZonalMapFormat(): number | undefined {
    return this.x00280722;
  }

  get x00280722(): number | undefined {
    const element = this.dwResponse['00280722'];
    return this.dwResponse['00280722']?.Value[0];
  }

  // Adaptive Map Format
  get AdaptiveMapFormat(): number | undefined {
    return this.x00280730;
  }

  get x00280730(): number | undefined {
    const element = this.dwResponse['00280730'];
    return this.dwResponse['00280730']?.Value[0];
  }

  // Code Number Format
  get CodeNumberFormat(): number | undefined {
    return this.x00280740;
  }

  get x00280740(): number | undefined {
    const element = this.dwResponse['00280740'];
    return this.dwResponse['00280740']?.Value[0];
  }

  // Code Label
  get CodeLabel(): Array<string> | undefined {
    return this.x002808x0;
  }

  get x002808x0(): Array<string> | undefined {
    const element = this.dwResponse['002808x0'];
    return this.dwResponse['002808x0']?.Value;
  }

  // Number of Tables
  get NumberOfTables(): number | undefined {
    return this.x002808x2;
  }

  get x002808x2(): number | undefined {
    const element = this.dwResponse['002808x2'];
    return this.dwResponse['002808x2']?.Value[0];
  }

  // Code Table Location
  get CodeTableLocation(): Array<Uint16Array> | undefined {
    return this.x002808x3;
  }

  get x002808x3(): Array<Uint16Array> | undefined {
    const element = this.dwResponse['002808x3'];
    return this.dwResponse['002808x3']?.Value;
  }

  // Bits For Code Word
  get BitsForCodeWord(): number | undefined {
    return this.x002808x4;
  }

  get x002808x4(): number | undefined {
    const element = this.dwResponse['002808x4'];
    return this.dwResponse['002808x4']?.Value[0];
  }

  // Image Data Location
  get ImageDataLocation(): Array<Uint16Array> | undefined {
    return this.x002808x8;
  }

  get x002808x8(): Array<Uint16Array> | undefined {
    const element = this.dwResponse['002808x8'];
    return this.dwResponse['002808x8']?.Value;
  }

  // Pixel Spacing Calibration Type
  get PixelSpacingCalibrationType(): string | undefined {
    return this.x00280a02;
  }

  get x00280a02(): string | undefined {
    const element = this.dwResponse['00280a02'];
    return this.dwResponse['00280a02']?.Value[0];
  }

  // Pixel Spacing Calibration Description
  get PixelSpacingCalibrationDescription(): string | undefined {
    return this.x00280a04;
  }

  get x00280a04(): string | undefined {
    const element = this.dwResponse['00280a04'];
    return this.dwResponse['00280a04']?.Value[0];
  }

  // Pixel Intensity Relationship
  get PixelIntensityRelationship(): string | undefined {
    return this.x00281040;
  }

  get x00281040(): string | undefined {
    const element = this.dwResponse['00281040'];
    return this.dwResponse['00281040']?.Value[0];
  }

  // Pixel Intensity Relationship Sign
  get PixelIntensityRelationshipSign(): Uint8Array | undefined {
    return this.x00281041;
  }

  get x00281041(): Uint8Array | undefined {
    const element = this.dwResponse['00281041'];
    return this.dwResponse['00281041']?.Value[0];
  }

  // Window Center
  get WindowCenter(): Array<number> | undefined {
    return this.x00281050;
  }

  get x00281050(): Array<number> | undefined {
    const element = this.dwResponse['00281050'];
    return this.dwResponse['00281050']?.Value;
  }

  // Window Width
  get WindowWidth(): Array<number> | undefined {
    return this.x00281051;
  }

  get x00281051(): Array<number> | undefined {
    const element = this.dwResponse['00281051'];
    return this.dwResponse['00281051']?.Value;
  }

  // Rescale Intercept
  get RescaleIntercept(): number | undefined {
    return this.x00281052;
  }

  get x00281052(): number | undefined {
    const element = this.dwResponse['00281052'];
    return this.dwResponse['00281052']?.Value[0];
  }

  // Rescale Slope
  get RescaleSlope(): number | undefined {
    return this.x00281053;
  }

  get x00281053(): number | undefined {
    const element = this.dwResponse['00281053'];
    return this.dwResponse['00281053']?.Value[0];
  }

  // Rescale Type
  get RescaleType(): string | undefined {
    return this.x00281054;
  }

  get x00281054(): string | undefined {
    const element = this.dwResponse['00281054'];
    return this.dwResponse['00281054']?.Value[0];
  }

  // Window Center & Width Explanation
  get WindowCenterWidthExplanation(): Array<string> | undefined {
    return this.x00281055;
  }

  get x00281055(): Array<string> | undefined {
    const element = this.dwResponse['00281055'];
    return this.dwResponse['00281055']?.Value;
  }

  // VOI LUT Function
  get VOILUTFunction(): string | undefined {
    return this.x00281056;
  }

  get x00281056(): string | undefined {
    const element = this.dwResponse['00281056'];
    return this.dwResponse['00281056']?.Value[0];
  }

  // Gray Scale
  get GrayScale(): string | undefined {
    return this.x00281080;
  }

  get x00281080(): string | undefined {
    const element = this.dwResponse['00281080'];
    return this.dwResponse['00281080']?.Value[0];
  }

  // Recommended Viewing Mode
  get RecommendedViewingMode(): string | undefined {
    return this.x00281090;
  }

  get x00281090(): string | undefined {
    const element = this.dwResponse['00281090'];
    return this.dwResponse['00281090']?.Value[0];
  }

  // Gray Lookup Table Descriptor
  get GrayLookupTableDescriptor(): Array<number> | undefined {
    return this.x00281100;
  }

  get x00281100(): Array<number> | undefined {
    const element = this.dwResponse['00281100'];
    return this.dwResponse['00281100']?.Value;
  }

  // Red Palette Color Lookup Table Descriptor
  get RedPaletteColorLookupTableDescriptor(): Array<number> | undefined {
    return this.x00281101;
  }

  get x00281101(): Array<number> | undefined {
    const element = this.dwResponse['00281101'];
    return this.dwResponse['00281101']?.Value;
  }

  // Green Palette Color Lookup Table Descriptor
  get GreenPaletteColorLookupTableDescriptor(): Array<number> | undefined {
    return this.x00281102;
  }

  get x00281102(): Array<number> | undefined {
    const element = this.dwResponse['00281102'];
    return this.dwResponse['00281102']?.Value;
  }

  // Blue Palette Color Lookup Table Descriptor
  get BluePaletteColorLookupTableDescriptor(): Array<number> | undefined {
    return this.x00281103;
  }

  get x00281103(): Array<number> | undefined {
    const element = this.dwResponse['00281103'];
    return this.dwResponse['00281103']?.Value;
  }

  // Alpha Palette Color Lookup Table Descriptor
  get AlphaPaletteColorLookupTableDescriptor(): Array<number> | undefined {
    return this.x00281104;
  }

  get x00281104(): Array<number> | undefined {
    const element = this.dwResponse['00281104'];
    return this.dwResponse['00281104']?.Value;
  }

  // Large Red Palette Color Lookup Table Descriptor
  get LargeRedPaletteColorLookupTableDescriptor(): Array<number> | undefined {
    return this.x00281111;
  }

  get x00281111(): Array<number> | undefined {
    const element = this.dwResponse['00281111'];
    return this.dwResponse['00281111']?.Value;
  }

  // Large Green Palette Color Lookup Table Descriptor
  get LargeGreenPaletteColorLookupTableDescriptor(): Array<number> | undefined {
    return this.x00281112;
  }

  get x00281112(): Array<number> | undefined {
    const element = this.dwResponse['00281112'];
    return this.dwResponse['00281112']?.Value;
  }

  // Large Blue Palette Color Lookup Table Descriptor
  get LargeBluePaletteColorLookupTableDescriptor(): Array<number> | undefined {
    return this.x00281113;
  }

  get x00281113(): Array<number> | undefined {
    const element = this.dwResponse['00281113'];
    return this.dwResponse['00281113']?.Value;
  }

  // Palette Color Lookup Table UID
  get PaletteColorLookupTableUID(): string | undefined {
    return this.x00281199;
  }

  get x00281199(): string | undefined {
    const element = this.dwResponse['00281199'];
    return this.dwResponse['00281199']?.Value[0];
  }

  // Large Palette Color Lookup Table UID
  get LargePaletteColorLookupTableUID(): string | undefined {
    return this.x00281214;
  }

  get x00281214(): string | undefined {
    const element = this.dwResponse['00281214'];
    return this.dwResponse['00281214']?.Value[0];
  }

  // Breast Implant Present
  get BreastImplantPresent(): string | undefined {
    return this.x00281300;
  }

  get x00281300(): string | undefined {
    const element = this.dwResponse['00281300'];
    return this.dwResponse['00281300']?.Value[0];
  }

  // Partial View
  get PartialView(): string | undefined {
    return this.x00281350;
  }

  get x00281350(): string | undefined {
    const element = this.dwResponse['00281350'];
    return this.dwResponse['00281350']?.Value[0];
  }

  // Partial View Code Sequence
  get PartialViewCodeSequence(): Array<Dataset> | undefined {
    return this.x00281352;
  }

  get x00281352(): Array<Dataset> | undefined {
    const element = this.dwResponse['00281352'];
    return this.dwResponse['00281352']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Spatial Locations Preserved
  get SpatialLocationsPreserved(): string | undefined {
    return this.x0028135a;
  }

  get x0028135a(): string | undefined {
    const element = this.dwResponse['0028135a'];
    return this.dwResponse['0028135a']?.Value[0];
  }

  // Data Frame Assignment Sequence
  get DataFrameAssignmentSequence(): Array<Dataset> | undefined {
    return this.x00281401;
  }

  get x00281401(): Array<Dataset> | undefined {
    const element = this.dwResponse['00281401'];
    return this.dwResponse['00281401']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Data Path Assignment
  get DataPathAssignment(): string | undefined {
    return this.x00281402;
  }

  get x00281402(): string | undefined {
    const element = this.dwResponse['00281402'];
    return this.dwResponse['00281402']?.Value[0];
  }

  // Bits Mapped to Color Lookup Table
  get BitsMappedToColorLookupTable(): number | undefined {
    return this.x00281403;
  }

  get x00281403(): number | undefined {
    const element = this.dwResponse['00281403'];
    return this.dwResponse['00281403']?.Value[0];
  }

  // Blending LUT 1 Sequence
  get BlendingLUT1Sequence(): Array<Dataset> | undefined {
    return this.x00281404;
  }

  get x00281404(): Array<Dataset> | undefined {
    const element = this.dwResponse['00281404'];
    return this.dwResponse['00281404']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Blending LUT 1 Transfer Function
  get BlendingLUT1TransferFunction(): string | undefined {
    return this.x00281405;
  }

  get x00281405(): string | undefined {
    const element = this.dwResponse['00281405'];
    return this.dwResponse['00281405']?.Value[0];
  }

  // Blending Weight Constant
  get BlendingWeightConstant(): number | undefined {
    return this.x00281406;
  }

  get x00281406(): number | undefined {
    const element = this.dwResponse['00281406'];
    return this.dwResponse['00281406']?.Value[0];
  }

  // Blending Lookup Table Descriptor
  get BlendingLookupTableDescriptor(): Array<number> | undefined {
    return this.x00281407;
  }

  get x00281407(): Array<number> | undefined {
    const element = this.dwResponse['00281407'];
    return this.dwResponse['00281407']?.Value;
  }

  // Enhanced Palette Color Lookup Table Sequence
  get EnhancedPaletteColorLookupTableSequence(): Array<Dataset> | undefined {
    return this.x0028140b;
  }

  get x0028140b(): Array<Dataset> | undefined {
    const element = this.dwResponse['0028140b'];
    return this.dwResponse['0028140b']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Blending LUT 2 Sequence
  get BlendingLUT2Sequence(): Array<Dataset> | undefined {
    return this.x0028140c;
  }

  get x0028140c(): Array<Dataset> | undefined {
    const element = this.dwResponse['0028140c'];
    return this.dwResponse['0028140c']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Blending LUT 2 Transfer Function
  get BlendingLUT2TransferFunction(): string | undefined {
    return this.x0028140d;
  }

  get x0028140d(): string | undefined {
    const element = this.dwResponse['0028140d'];
    return this.dwResponse['0028140d']?.Value[0];
  }

  // Data Path ID
  get DataPathID(): string | undefined {
    return this.x0028140e;
  }

  get x0028140e(): string | undefined {
    const element = this.dwResponse['0028140e'];
    return this.dwResponse['0028140e']?.Value[0];
  }

  // RGB LUT Transfer Function
  get RGBLUTTransferFunction(): string | undefined {
    return this.x0028140f;
  }

  get x0028140f(): string | undefined {
    const element = this.dwResponse['0028140f'];
    return this.dwResponse['0028140f']?.Value[0];
  }

  // Alpha LUT Transfer Function
  get AlphaLUTTransferFunction(): string | undefined {
    return this.x00281410;
  }

  get x00281410(): string | undefined {
    const element = this.dwResponse['00281410'];
    return this.dwResponse['00281410']?.Value[0];
  }

  // Lossy Image Compression
  get LossyImageCompression(): string | undefined {
    return this.x00282110;
  }

  get x00282110(): string | undefined {
    const element = this.dwResponse['00282110'];
    return this.dwResponse['00282110']?.Value[0];
  }

  // Lossy Image Compression Ratio
  get LossyImageCompressionRatio(): Array<number> | undefined {
    return this.x00282112;
  }

  get x00282112(): Array<number> | undefined {
    const element = this.dwResponse['00282112'];
    return this.dwResponse['00282112']?.Value;
  }

  // Lossy Image Compression Method
  get LossyImageCompressionMethod(): Array<string> | undefined {
    return this.x00282114;
  }

  get x00282114(): Array<string> | undefined {
    const element = this.dwResponse['00282114'];
    return this.dwResponse['00282114']?.Value;
  }

  // Modality LUT Sequence
  get ModalityLUTSequence(): Array<Dataset> | undefined {
    return this.x00283000;
  }

  get x00283000(): Array<Dataset> | undefined {
    const element = this.dwResponse['00283000'];
    return this.dwResponse['00283000']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // LUT Descriptor
  get LUTDescriptor(): Array<number> | undefined {
    return this.x00283002;
  }

  get x00283002(): Array<number> | undefined {
    const element = this.dwResponse['00283002'];
    return this.dwResponse['00283002']?.Value;
  }

  // LUT Explanation
  get LUTExplanation(): string | undefined {
    return this.x00283003;
  }

  get x00283003(): string | undefined {
    const element = this.dwResponse['00283003'];
    return this.dwResponse['00283003']?.Value[0];
  }

  // Modality LUT Type
  get ModalityLUTType(): string | undefined {
    return this.x00283004;
  }

  get x00283004(): string | undefined {
    const element = this.dwResponse['00283004'];
    return this.dwResponse['00283004']?.Value[0];
  }

  // VOI LUT Sequence
  get VOILUTSequence(): Array<Dataset> | undefined {
    return this.x00283010;
  }

  get x00283010(): Array<Dataset> | undefined {
    const element = this.dwResponse['00283010'];
    return this.dwResponse['00283010']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Softcopy VOI LUT Sequence
  get SoftcopyVOILUTSequence(): Array<Dataset> | undefined {
    return this.x00283110;
  }

  get x00283110(): Array<Dataset> | undefined {
    const element = this.dwResponse['00283110'];
    return this.dwResponse['00283110']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Bi-Plane Acquisition Sequence
  get BiPlaneAcquisitionSequence(): Array<Dataset> | undefined {
    return this.x00285000;
  }

  get x00285000(): Array<Dataset> | undefined {
    const element = this.dwResponse['00285000'];
    return this.dwResponse['00285000']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Representative Frame Number
  get RepresentativeFrameNumber(): number | undefined {
    return this.x00286010;
  }

  get x00286010(): number | undefined {
    const element = this.dwResponse['00286010'];
    return this.dwResponse['00286010']?.Value[0];
  }

  // Frame Numbers of Interest (FOI)
  get FrameNumbersOfInterest(): Array<number> | undefined {
    return this.x00286020;
  }

  get x00286020(): Array<number> | undefined {
    const element = this.dwResponse['00286020'];
    return this.dwResponse['00286020']?.Value;
  }

  // Frame of Interest Description
  get FrameOfInterestDescription(): Array<string> | undefined {
    return this.x00286022;
  }

  get x00286022(): Array<string> | undefined {
    const element = this.dwResponse['00286022'];
    return this.dwResponse['00286022']?.Value;
  }

  // Frame of Interest Type
  get FrameOfInterestType(): Array<string> | undefined {
    return this.x00286023;
  }

  get x00286023(): Array<string> | undefined {
    const element = this.dwResponse['00286023'];
    return this.dwResponse['00286023']?.Value;
  }

  // Mask Pointer(s)
  get MaskPointers(): Array<number> | undefined {
    return this.x00286030;
  }

  get x00286030(): Array<number> | undefined {
    const element = this.dwResponse['00286030'];
    return this.dwResponse['00286030']?.Value;
  }

  // R Wave Pointer
  get RWavePointer(): Array<number> | undefined {
    return this.x00286040;
  }

  get x00286040(): Array<number> | undefined {
    const element = this.dwResponse['00286040'];
    return this.dwResponse['00286040']?.Value;
  }

  // Mask Subtraction Sequence
  get MaskSubtractionSequence(): Array<Dataset> | undefined {
    return this.x00286100;
  }

  get x00286100(): Array<Dataset> | undefined {
    const element = this.dwResponse['00286100'];
    return this.dwResponse['00286100']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Mask Operation
  get MaskOperation(): string | undefined {
    return this.x00286101;
  }

  get x00286101(): string | undefined {
    const element = this.dwResponse['00286101'];
    return this.dwResponse['00286101']?.Value[0];
  }

  // Applicable Frame Range
  get ApplicableFrameRange(): Array<number> | undefined {
    return this.x00286102;
  }

  get x00286102(): Array<number> | undefined {
    const element = this.dwResponse['00286102'];
    return this.dwResponse['00286102']?.Value;
  }

  // Mask Frame Numbers
  get MaskFrameNumbers(): Array<number> | undefined {
    return this.x00286110;
  }

  get x00286110(): Array<number> | undefined {
    const element = this.dwResponse['00286110'];
    return this.dwResponse['00286110']?.Value;
  }

  // Contrast Frame Averaging
  get ContrastFrameAveraging(): number | undefined {
    return this.x00286112;
  }

  get x00286112(): number | undefined {
    const element = this.dwResponse['00286112'];
    return this.dwResponse['00286112']?.Value[0];
  }

  // Mask Sub-pixel Shift
  get MaskSubPixelShift(): Array<number> | undefined {
    return this.x00286114;
  }

  get x00286114(): Array<number> | undefined {
    const element = this.dwResponse['00286114'];
    return this.dwResponse['00286114']?.Value;
  }

  // TID Offset
  get TIDOffset(): Uint8Array | undefined {
    return this.x00286120;
  }

  get x00286120(): Uint8Array | undefined {
    const element = this.dwResponse['00286120'];
    return this.dwResponse['00286120']?.Value[0];
  }

  // Equipment Administrator Sequence
  get EquipmentAdministratorSequence(): Array<Dataset> | undefined {
    return this.x00287000;
  }

  get x00287000(): Array<Dataset> | undefined {
    const element = this.dwResponse['00287000'];
    return this.dwResponse['00287000']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Number of Display Subsystems
  get NumberOfDisplaySubsystems(): number | undefined {
    return this.x00287001;
  }

  get x00287001(): number | undefined {
    const element = this.dwResponse['00287001'];
    return this.dwResponse['00287001']?.Value[0];
  }

  // Current Configuration ID
  get CurrentConfigurationID(): number | undefined {
    return this.x00287002;
  }

  get x00287002(): number | undefined {
    const element = this.dwResponse['00287002'];
    return this.dwResponse['00287002']?.Value[0];
  }

  // Display Subsystem ID
  get DisplaySubsystemID(): number | undefined {
    return this.x00287003;
  }

  get x00287003(): number | undefined {
    const element = this.dwResponse['00287003'];
    return this.dwResponse['00287003']?.Value[0];
  }

  // Display Subsystem Name
  get DisplaySubsystemName(): string | undefined {
    return this.x00287004;
  }

  get x00287004(): string | undefined {
    const element = this.dwResponse['00287004'];
    return this.dwResponse['00287004']?.Value[0];
  }

  // Display Subsystem Description
  get DisplaySubsystemDescription(): string | undefined {
    return this.x00287005;
  }

  get x00287005(): string | undefined {
    const element = this.dwResponse['00287005'];
    return this.dwResponse['00287005']?.Value[0];
  }

  // System Status
  get SystemStatus(): string | undefined {
    return this.x00287006;
  }

  get x00287006(): string | undefined {
    const element = this.dwResponse['00287006'];
    return this.dwResponse['00287006']?.Value[0];
  }

  // System Status Comment
  get SystemStatusComment(): string | undefined {
    return this.x00287007;
  }

  get x00287007(): string | undefined {
    const element = this.dwResponse['00287007'];
    return this.dwResponse['00287007']?.Value[0];
  }

  // Target Luminance Characteristics Sequence
  get TargetLuminanceCharacteristicsSequence(): Array<Dataset> | undefined {
    return this.x00287008;
  }

  get x00287008(): Array<Dataset> | undefined {
    const element = this.dwResponse['00287008'];
    return this.dwResponse['00287008']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Luminance Characteristics ID
  get LuminanceCharacteristicsID(): number | undefined {
    return this.x00287009;
  }

  get x00287009(): number | undefined {
    const element = this.dwResponse['00287009'];
    return this.dwResponse['00287009']?.Value[0];
  }

  // Display Subsystem Configuration Sequence
  get DisplaySubsystemConfigurationSequence(): Array<Dataset> | undefined {
    return this.x0028700a;
  }

  get x0028700a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0028700a'];
    return this.dwResponse['0028700a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Configuration ID
  get ConfigurationID(): number | undefined {
    return this.x0028700b;
  }

  get x0028700b(): number | undefined {
    const element = this.dwResponse['0028700b'];
    return this.dwResponse['0028700b']?.Value[0];
  }

  // Configuration Name
  get ConfigurationName(): string | undefined {
    return this.x0028700c;
  }

  get x0028700c(): string | undefined {
    const element = this.dwResponse['0028700c'];
    return this.dwResponse['0028700c']?.Value[0];
  }

  // Configuration Description
  get ConfigurationDescription(): string | undefined {
    return this.x0028700d;
  }

  get x0028700d(): string | undefined {
    const element = this.dwResponse['0028700d'];
    return this.dwResponse['0028700d']?.Value[0];
  }

  // Referenced Target Luminance Characteristics ID
  get ReferencedTargetLuminanceCharacteristicsID(): number | undefined {
    return this.x0028700e;
  }

  get x0028700e(): number | undefined {
    const element = this.dwResponse['0028700e'];
    return this.dwResponse['0028700e']?.Value[0];
  }

  // QA Results Sequence
  get QAResultsSequence(): Array<Dataset> | undefined {
    return this.x0028700f;
  }

  get x0028700f(): Array<Dataset> | undefined {
    const element = this.dwResponse['0028700f'];
    return this.dwResponse['0028700f']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Display Subsystem QA Results Sequence
  get DisplaySubsystemQAResultsSequence(): Array<Dataset> | undefined {
    return this.x00287010;
  }

  get x00287010(): Array<Dataset> | undefined {
    const element = this.dwResponse['00287010'];
    return this.dwResponse['00287010']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Configuration QA Results Sequence
  get ConfigurationQAResultsSequence(): Array<Dataset> | undefined {
    return this.x00287011;
  }

  get x00287011(): Array<Dataset> | undefined {
    const element = this.dwResponse['00287011'];
    return this.dwResponse['00287011']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Measurement Equipment Sequence
  get MeasurementEquipmentSequence(): Array<Dataset> | undefined {
    return this.x00287012;
  }

  get x00287012(): Array<Dataset> | undefined {
    const element = this.dwResponse['00287012'];
    return this.dwResponse['00287012']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Measurement Functions
  get MeasurementFunctions(): Array<string> | undefined {
    return this.x00287013;
  }

  get x00287013(): Array<string> | undefined {
    const element = this.dwResponse['00287013'];
    return this.dwResponse['00287013']?.Value;
  }

  // Measurement Equipment Type
  get MeasurementEquipmentType(): string | undefined {
    return this.x00287014;
  }

  get x00287014(): string | undefined {
    const element = this.dwResponse['00287014'];
    return this.dwResponse['00287014']?.Value[0];
  }

  // Visual Evaluation Result Sequence
  get VisualEvaluationResultSequence(): Array<Dataset> | undefined {
    return this.x00287015;
  }

  get x00287015(): Array<Dataset> | undefined {
    const element = this.dwResponse['00287015'];
    return this.dwResponse['00287015']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Display Calibration Result Sequence
  get DisplayCalibrationResultSequence(): Array<Dataset> | undefined {
    return this.x00287016;
  }

  get x00287016(): Array<Dataset> | undefined {
    const element = this.dwResponse['00287016'];
    return this.dwResponse['00287016']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // DDL Value
  get DDLValue(): number | undefined {
    return this.x00287017;
  }

  get x00287017(): number | undefined {
    const element = this.dwResponse['00287017'];
    return this.dwResponse['00287017']?.Value[0];
  }

  // CIExy White Point
  get CIExyWhitePoint(): Array<number> | undefined {
    return this.x00287018;
  }

  get x00287018(): Array<number> | undefined {
    const element = this.dwResponse['00287018'];
    return this.dwResponse['00287018']?.Value;
  }

  // Display Function Type
  get DisplayFunctionType(): string | undefined {
    return this.x00287019;
  }

  get x00287019(): string | undefined {
    const element = this.dwResponse['00287019'];
    return this.dwResponse['00287019']?.Value[0];
  }

  // Gamma Value
  get GammaValue(): number | undefined {
    return this.x0028701a;
  }

  get x0028701a(): number | undefined {
    const element = this.dwResponse['0028701a'];
    return this.dwResponse['0028701a']?.Value[0];
  }

  // Number of Luminance Points
  get NumberOfLuminancePoints(): number | undefined {
    return this.x0028701b;
  }

  get x0028701b(): number | undefined {
    const element = this.dwResponse['0028701b'];
    return this.dwResponse['0028701b']?.Value[0];
  }

  // Luminance Response Sequence
  get LuminanceResponseSequence(): Array<Dataset> | undefined {
    return this.x0028701c;
  }

  get x0028701c(): Array<Dataset> | undefined {
    const element = this.dwResponse['0028701c'];
    return this.dwResponse['0028701c']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Target Minimum Luminance
  get TargetMinimumLuminance(): number | undefined {
    return this.x0028701d;
  }

  get x0028701d(): number | undefined {
    const element = this.dwResponse['0028701d'];
    return this.dwResponse['0028701d']?.Value[0];
  }

  // Target Maximum Luminance
  get TargetMaximumLuminance(): number | undefined {
    return this.x0028701e;
  }

  get x0028701e(): number | undefined {
    const element = this.dwResponse['0028701e'];
    return this.dwResponse['0028701e']?.Value[0];
  }

  // Luminance Value
  get LuminanceValue(): number | undefined {
    return this.x0028701f;
  }

  get x0028701f(): number | undefined {
    const element = this.dwResponse['0028701f'];
    return this.dwResponse['0028701f']?.Value[0];
  }

  // Luminance Response Description
  get LuminanceResponseDescription(): string | undefined {
    return this.x00287020;
  }

  get x00287020(): string | undefined {
    const element = this.dwResponse['00287020'];
    return this.dwResponse['00287020']?.Value[0];
  }

  // White Point Flag
  get WhitePointFlag(): string | undefined {
    return this.x00287021;
  }

  get x00287021(): string | undefined {
    const element = this.dwResponse['00287021'];
    return this.dwResponse['00287021']?.Value[0];
  }

  // Display Device Type Code Sequence
  get DisplayDeviceTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x00287022;
  }

  get x00287022(): Array<Dataset> | undefined {
    const element = this.dwResponse['00287022'];
    return this.dwResponse['00287022']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Display Subsystem Sequence
  get DisplaySubsystemSequence(): Array<Dataset> | undefined {
    return this.x00287023;
  }

  get x00287023(): Array<Dataset> | undefined {
    const element = this.dwResponse['00287023'];
    return this.dwResponse['00287023']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Luminance Result Sequence
  get LuminanceResultSequence(): Array<Dataset> | undefined {
    return this.x00287024;
  }

  get x00287024(): Array<Dataset> | undefined {
    const element = this.dwResponse['00287024'];
    return this.dwResponse['00287024']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ambient Light Value Source
  get AmbientLightValueSource(): string | undefined {
    return this.x00287025;
  }

  get x00287025(): string | undefined {
    const element = this.dwResponse['00287025'];
    return this.dwResponse['00287025']?.Value[0];
  }

  // Measured Characteristics
  get MeasuredCharacteristics(): Array<string> | undefined {
    return this.x00287026;
  }

  get x00287026(): Array<string> | undefined {
    const element = this.dwResponse['00287026'];
    return this.dwResponse['00287026']?.Value;
  }

  // Luminance Uniformity Result Sequence
  get LuminanceUniformityResultSequence(): Array<Dataset> | undefined {
    return this.x00287027;
  }

  get x00287027(): Array<Dataset> | undefined {
    const element = this.dwResponse['00287027'];
    return this.dwResponse['00287027']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Visual Evaluation Test Sequence
  get VisualEvaluationTestSequence(): Array<Dataset> | undefined {
    return this.x00287028;
  }

  get x00287028(): Array<Dataset> | undefined {
    const element = this.dwResponse['00287028'];
    return this.dwResponse['00287028']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Test Result
  get TestResult(): string | undefined {
    return this.x00287029;
  }

  get x00287029(): string | undefined {
    const element = this.dwResponse['00287029'];
    return this.dwResponse['00287029']?.Value[0];
  }

  // Test Result Comment
  get TestResultComment(): string | undefined {
    return this.x0028702a;
  }

  get x0028702a(): string | undefined {
    const element = this.dwResponse['0028702a'];
    return this.dwResponse['0028702a']?.Value[0];
  }

  // Test Image Validation
  get TestImageValidation(): string | undefined {
    return this.x0028702b;
  }

  get x0028702b(): string | undefined {
    const element = this.dwResponse['0028702b'];
    return this.dwResponse['0028702b']?.Value[0];
  }

  // Test Pattern Code Sequence
  get TestPatternCodeSequence(): Array<Dataset> | undefined {
    return this.x0028702c;
  }

  get x0028702c(): Array<Dataset> | undefined {
    const element = this.dwResponse['0028702c'];
    return this.dwResponse['0028702c']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Measurement Pattern Code Sequence
  get MeasurementPatternCodeSequence(): Array<Dataset> | undefined {
    return this.x0028702d;
  }

  get x0028702d(): Array<Dataset> | undefined {
    const element = this.dwResponse['0028702d'];
    return this.dwResponse['0028702d']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Visual Evaluation Method Code Sequence
  get VisualEvaluationMethodCodeSequence(): Array<Dataset> | undefined {
    return this.x0028702e;
  }

  get x0028702e(): Array<Dataset> | undefined {
    const element = this.dwResponse['0028702e'];
    return this.dwResponse['0028702e']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Data Point Rows
  get DataPointRows(): number | undefined {
    return this.x00289001;
  }

  get x00289001(): number | undefined {
    const element = this.dwResponse['00289001'];
    return this.dwResponse['00289001']?.Value[0];
  }

  // Data Point Columns
  get DataPointColumns(): number | undefined {
    return this.x00289002;
  }

  get x00289002(): number | undefined {
    const element = this.dwResponse['00289002'];
    return this.dwResponse['00289002']?.Value[0];
  }

  // Signal Domain Columns
  get SignalDomainColumns(): string | undefined {
    return this.x00289003;
  }

  get x00289003(): string | undefined {
    const element = this.dwResponse['00289003'];
    return this.dwResponse['00289003']?.Value[0];
  }

  // Largest Monochrome Pixel Value
  get LargestMonochromePixelValue(): number | undefined {
    return this.x00289099;
  }

  get x00289099(): number | undefined {
    const element = this.dwResponse['00289099'];
    return this.dwResponse['00289099']?.Value[0];
  }

  // Data Representation
  get DataRepresentation(): string | undefined {
    return this.x00289108;
  }

  get x00289108(): string | undefined {
    const element = this.dwResponse['00289108'];
    return this.dwResponse['00289108']?.Value[0];
  }

  // Pixel Measures Sequence
  get PixelMeasuresSequence(): Array<Dataset> | undefined {
    return this.x00289110;
  }

  get x00289110(): Array<Dataset> | undefined {
    const element = this.dwResponse['00289110'];
    return this.dwResponse['00289110']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Frame VOI LUT Sequence
  get FrameVOILUTSequence(): Array<Dataset> | undefined {
    return this.x00289132;
  }

  get x00289132(): Array<Dataset> | undefined {
    const element = this.dwResponse['00289132'];
    return this.dwResponse['00289132']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Pixel Value Transformation Sequence
  get PixelValueTransformationSequence(): Array<Dataset> | undefined {
    return this.x00289145;
  }

  get x00289145(): Array<Dataset> | undefined {
    const element = this.dwResponse['00289145'];
    return this.dwResponse['00289145']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Signal Domain Rows
  get SignalDomainRows(): string | undefined {
    return this.x00289235;
  }

  get x00289235(): string | undefined {
    const element = this.dwResponse['00289235'];
    return this.dwResponse['00289235']?.Value[0];
  }

  // Display Filter Percentage
  get DisplayFilterPercentage(): number | undefined {
    return this.x00289411;
  }

  get x00289411(): number | undefined {
    const element = this.dwResponse['00289411'];
    return this.dwResponse['00289411']?.Value[0];
  }

  // Frame Pixel Shift Sequence
  get FramePixelShiftSequence(): Array<Dataset> | undefined {
    return this.x00289415;
  }

  get x00289415(): Array<Dataset> | undefined {
    const element = this.dwResponse['00289415'];
    return this.dwResponse['00289415']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Subtraction Item ID
  get SubtractionItemID(): number | undefined {
    return this.x00289416;
  }

  get x00289416(): number | undefined {
    const element = this.dwResponse['00289416'];
    return this.dwResponse['00289416']?.Value[0];
  }

  // Pixel Intensity Relationship LUT Sequence
  get PixelIntensityRelationshipLUTSequence(): Array<Dataset> | undefined {
    return this.x00289422;
  }

  get x00289422(): Array<Dataset> | undefined {
    const element = this.dwResponse['00289422'];
    return this.dwResponse['00289422']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Frame Pixel Data Properties Sequence
  get FramePixelDataPropertiesSequence(): Array<Dataset> | undefined {
    return this.x00289443;
  }

  get x00289443(): Array<Dataset> | undefined {
    const element = this.dwResponse['00289443'];
    return this.dwResponse['00289443']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Geometrical Properties
  get GeometricalProperties(): string | undefined {
    return this.x00289444;
  }

  get x00289444(): string | undefined {
    const element = this.dwResponse['00289444'];
    return this.dwResponse['00289444']?.Value[0];
  }

  // Geometric Maximum Distortion
  get GeometricMaximumDistortion(): number | undefined {
    return this.x00289445;
  }

  get x00289445(): number | undefined {
    const element = this.dwResponse['00289445'];
    return this.dwResponse['00289445']?.Value[0];
  }

  // Image Processing Applied
  get ImageProcessingApplied(): Array<string> | undefined {
    return this.x00289446;
  }

  get x00289446(): Array<string> | undefined {
    const element = this.dwResponse['00289446'];
    return this.dwResponse['00289446']?.Value;
  }

  // Mask Selection Mode
  get MaskSelectionMode(): string | undefined {
    return this.x00289454;
  }

  get x00289454(): string | undefined {
    const element = this.dwResponse['00289454'];
    return this.dwResponse['00289454']?.Value[0];
  }

  // LUT Function
  get LUTFunction(): string | undefined {
    return this.x00289474;
  }

  get x00289474(): string | undefined {
    const element = this.dwResponse['00289474'];
    return this.dwResponse['00289474']?.Value[0];
  }

  // Mask Visibility Percentage
  get MaskVisibilityPercentage(): number | undefined {
    return this.x00289478;
  }

  get x00289478(): number | undefined {
    const element = this.dwResponse['00289478'];
    return this.dwResponse['00289478']?.Value[0];
  }

  // Pixel Shift Sequence
  get PixelShiftSequence(): Array<Dataset> | undefined {
    return this.x00289501;
  }

  get x00289501(): Array<Dataset> | undefined {
    const element = this.dwResponse['00289501'];
    return this.dwResponse['00289501']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Region Pixel Shift Sequence
  get RegionPixelShiftSequence(): Array<Dataset> | undefined {
    return this.x00289502;
  }

  get x00289502(): Array<Dataset> | undefined {
    const element = this.dwResponse['00289502'];
    return this.dwResponse['00289502']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Vertices of the Region
  get VerticesOfTheRegion(): Array<Uint8Array> | undefined {
    return this.x00289503;
  }

  get x00289503(): Array<Uint8Array> | undefined {
    const element = this.dwResponse['00289503'];
    return this.dwResponse['00289503']?.Value;
  }

  // Multi-frame Presentation Sequence
  get MultiFramePresentationSequence(): Array<Dataset> | undefined {
    return this.x00289505;
  }

  get x00289505(): Array<Dataset> | undefined {
    const element = this.dwResponse['00289505'];
    return this.dwResponse['00289505']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Pixel Shift Frame Range
  get PixelShiftFrameRange(): Array<number> | undefined {
    return this.x00289506;
  }

  get x00289506(): Array<number> | undefined {
    const element = this.dwResponse['00289506'];
    return this.dwResponse['00289506']?.Value;
  }

  // LUT Frame Range
  get LUTFrameRange(): Array<number> | undefined {
    return this.x00289507;
  }

  get x00289507(): Array<number> | undefined {
    const element = this.dwResponse['00289507'];
    return this.dwResponse['00289507']?.Value;
  }

  // Image to Equipment Mapping Matrix
  get ImageToEquipmentMappingMatrix(): Array<number> | undefined {
    return this.x00289520;
  }

  get x00289520(): Array<number> | undefined {
    const element = this.dwResponse['00289520'];
    return this.dwResponse['00289520']?.Value;
  }

  // Equipment Coordinate System Identification
  get EquipmentCoordinateSystemIdentification(): string | undefined {
    return this.x00289537;
  }

  get x00289537(): string | undefined {
    const element = this.dwResponse['00289537'];
    return this.dwResponse['00289537']?.Value[0];
  }

  // Study Status ID
  get StudyStatusID(): string | undefined {
    return this.x0032000a;
  }

  get x0032000a(): string | undefined {
    const element = this.dwResponse['0032000a'];
    return this.dwResponse['0032000a']?.Value[0];
  }

  // Study Priority ID
  get StudyPriorityID(): string | undefined {
    return this.x0032000c;
  }

  get x0032000c(): string | undefined {
    const element = this.dwResponse['0032000c'];
    return this.dwResponse['0032000c']?.Value[0];
  }

  // Study ID Issuer
  get StudyIDIssuer(): string | undefined {
    return this.x00320012;
  }

  get x00320012(): string | undefined {
    const element = this.dwResponse['00320012'];
    return this.dwResponse['00320012']?.Value[0];
  }

  // Study Verified Date
  get StudyVerifiedDate(): Date | undefined {
    return this.x00320032;
  }

  get x00320032(): Date | undefined {
    const element = this.dwResponse['00320032'];
    return this.dwResponse['00320032']?.Value[0];
  }

  // Study Verified Time
  get StudyVerifiedTime(): string | undefined {
    return this.x00320033;
  }

  get x00320033(): string | undefined {
    const element = this.dwResponse['00320033'];
    return this.dwResponse['00320033']?.Value[0];
  }

  // Study Read Date
  get StudyReadDate(): Date | undefined {
    return this.x00320034;
  }

  get x00320034(): Date | undefined {
    const element = this.dwResponse['00320034'];
    return this.dwResponse['00320034']?.Value[0];
  }

  // Study Read Time
  get StudyReadTime(): string | undefined {
    return this.x00320035;
  }

  get x00320035(): string | undefined {
    const element = this.dwResponse['00320035'];
    return this.dwResponse['00320035']?.Value[0];
  }

  // Scheduled Study Start Date
  get ScheduledStudyStartDate(): Date | undefined {
    return this.x00321000;
  }

  get x00321000(): Date | undefined {
    const element = this.dwResponse['00321000'];
    return this.dwResponse['00321000']?.Value[0];
  }

  // Scheduled Study Start Time
  get ScheduledStudyStartTime(): string | undefined {
    return this.x00321001;
  }

  get x00321001(): string | undefined {
    const element = this.dwResponse['00321001'];
    return this.dwResponse['00321001']?.Value[0];
  }

  // Scheduled Study Stop Date
  get ScheduledStudyStopDate(): Date | undefined {
    return this.x00321010;
  }

  get x00321010(): Date | undefined {
    const element = this.dwResponse['00321010'];
    return this.dwResponse['00321010']?.Value[0];
  }

  // Scheduled Study Stop Time
  get ScheduledStudyStopTime(): string | undefined {
    return this.x00321011;
  }

  get x00321011(): string | undefined {
    const element = this.dwResponse['00321011'];
    return this.dwResponse['00321011']?.Value[0];
  }

  // Scheduled Study Location
  get ScheduledStudyLocation(): string | undefined {
    return this.x00321020;
  }

  get x00321020(): string | undefined {
    const element = this.dwResponse['00321020'];
    return this.dwResponse['00321020']?.Value[0];
  }

  // Scheduled Study Location AE Title
  get ScheduledStudyLocationAETitle(): Array<string> | undefined {
    return this.x00321021;
  }

  get x00321021(): Array<string> | undefined {
    const element = this.dwResponse['00321021'];
    return this.dwResponse['00321021']?.Value;
  }

  // Reason for Study
  get ReasonForStudy(): string | undefined {
    return this.x00321030;
  }

  get x00321030(): string | undefined {
    const element = this.dwResponse['00321030'];
    return this.dwResponse['00321030']?.Value[0];
  }

  // Requesting Physician Identification Sequence
  get RequestingPhysicianIdentificationSequence(): Array<Dataset> | undefined {
    return this.x00321031;
  }

  get x00321031(): Array<Dataset> | undefined {
    const element = this.dwResponse['00321031'];
    return this.dwResponse['00321031']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Requesting Physician
  get RequestingPhysician(): any | undefined {
    return this.x00321032;
  }

  get x00321032(): any | undefined {
    const element = this.dwResponse['00321032'];
    return this.dwResponse['00321032']?.Value[0];
  }

  // Requesting Service
  get RequestingService(): string | undefined {
    return this.x00321033;
  }

  get x00321033(): string | undefined {
    const element = this.dwResponse['00321033'];
    return this.dwResponse['00321033']?.Value[0];
  }

  // Requesting Service Code Sequence
  get RequestingServiceCodeSequence(): Array<Dataset> | undefined {
    return this.x00321034;
  }

  get x00321034(): Array<Dataset> | undefined {
    const element = this.dwResponse['00321034'];
    return this.dwResponse['00321034']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Study Arrival Date
  get StudyArrivalDate(): Date | undefined {
    return this.x00321040;
  }

  get x00321040(): Date | undefined {
    const element = this.dwResponse['00321040'];
    return this.dwResponse['00321040']?.Value[0];
  }

  // Study Arrival Time
  get StudyArrivalTime(): string | undefined {
    return this.x00321041;
  }

  get x00321041(): string | undefined {
    const element = this.dwResponse['00321041'];
    return this.dwResponse['00321041']?.Value[0];
  }

  // Study Completion Date
  get StudyCompletionDate(): Date | undefined {
    return this.x00321050;
  }

  get x00321050(): Date | undefined {
    const element = this.dwResponse['00321050'];
    return this.dwResponse['00321050']?.Value[0];
  }

  // Study Completion Time
  get StudyCompletionTime(): string | undefined {
    return this.x00321051;
  }

  get x00321051(): string | undefined {
    const element = this.dwResponse['00321051'];
    return this.dwResponse['00321051']?.Value[0];
  }

  // Study Component Status ID
  get StudyComponentStatusID(): string | undefined {
    return this.x00321055;
  }

  get x00321055(): string | undefined {
    const element = this.dwResponse['00321055'];
    return this.dwResponse['00321055']?.Value[0];
  }

  // Requested Procedure Description
  get RequestedProcedureDescription(): string | undefined {
    return this.x00321060;
  }

  get x00321060(): string | undefined {
    const element = this.dwResponse['00321060'];
    return this.dwResponse['00321060']?.Value[0];
  }

  // Requested Procedure Code Sequence
  get RequestedProcedureCodeSequence(): Array<Dataset> | undefined {
    return this.x00321064;
  }

  get x00321064(): Array<Dataset> | undefined {
    const element = this.dwResponse['00321064'];
    return this.dwResponse['00321064']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Requested Contrast Agent
  get RequestedContrastAgent(): string | undefined {
    return this.x00321070;
  }

  get x00321070(): string | undefined {
    const element = this.dwResponse['00321070'];
    return this.dwResponse['00321070']?.Value[0];
  }

  // Referenced Patient Alias Sequence
  get ReferencedPatientAliasSequence(): Array<Dataset> | undefined {
    return this.x00380004;
  }

  get x00380004(): Array<Dataset> | undefined {
    const element = this.dwResponse['00380004'];
    return this.dwResponse['00380004']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Visit Status ID
  get VisitStatusID(): string | undefined {
    return this.x00380008;
  }

  get x00380008(): string | undefined {
    const element = this.dwResponse['00380008'];
    return this.dwResponse['00380008']?.Value[0];
  }

  // Admission ID
  get AdmissionID(): string | undefined {
    return this.x00380010;
  }

  get x00380010(): string | undefined {
    const element = this.dwResponse['00380010'];
    return this.dwResponse['00380010']?.Value[0];
  }

  // Issuer of Admission ID
  get IssuerOfAdmissionID(): string | undefined {
    return this.x00380011;
  }

  get x00380011(): string | undefined {
    const element = this.dwResponse['00380011'];
    return this.dwResponse['00380011']?.Value[0];
  }

  // Issuer of Admission ID Sequence
  get IssuerOfAdmissionIDSequence(): Array<Dataset> | undefined {
    return this.x00380014;
  }

  get x00380014(): Array<Dataset> | undefined {
    const element = this.dwResponse['00380014'];
    return this.dwResponse['00380014']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Route of Admissions
  get RouteOfAdmissions(): string | undefined {
    return this.x00380016;
  }

  get x00380016(): string | undefined {
    const element = this.dwResponse['00380016'];
    return this.dwResponse['00380016']?.Value[0];
  }

  // Scheduled Admission Date
  get ScheduledAdmissionDate(): Date | undefined {
    return this.x0038001a;
  }

  get x0038001a(): Date | undefined {
    const element = this.dwResponse['0038001a'];
    return this.dwResponse['0038001a']?.Value[0];
  }

  // Scheduled Admission Time
  get ScheduledAdmissionTime(): string | undefined {
    return this.x0038001b;
  }

  get x0038001b(): string | undefined {
    const element = this.dwResponse['0038001b'];
    return this.dwResponse['0038001b']?.Value[0];
  }

  // Scheduled Discharge Date
  get ScheduledDischargeDate(): Date | undefined {
    return this.x0038001c;
  }

  get x0038001c(): Date | undefined {
    const element = this.dwResponse['0038001c'];
    return this.dwResponse['0038001c']?.Value[0];
  }

  // Scheduled Discharge Time
  get ScheduledDischargeTime(): string | undefined {
    return this.x0038001d;
  }

  get x0038001d(): string | undefined {
    const element = this.dwResponse['0038001d'];
    return this.dwResponse['0038001d']?.Value[0];
  }

  // Scheduled Patient Institution Residence
  get ScheduledPatientInstitutionResidence(): string | undefined {
    return this.x0038001e;
  }

  get x0038001e(): string | undefined {
    const element = this.dwResponse['0038001e'];
    return this.dwResponse['0038001e']?.Value[0];
  }

  // Admitting Date
  get AdmittingDate(): Date | undefined {
    return this.x00380020;
  }

  get x00380020(): Date | undefined {
    const element = this.dwResponse['00380020'];
    return this.dwResponse['00380020']?.Value[0];
  }

  // Admitting Time
  get AdmittingTime(): string | undefined {
    return this.x00380021;
  }

  get x00380021(): string | undefined {
    const element = this.dwResponse['00380021'];
    return this.dwResponse['00380021']?.Value[0];
  }

  // Discharge Date
  get DischargeDate(): Date | undefined {
    return this.x00380030;
  }

  get x00380030(): Date | undefined {
    const element = this.dwResponse['00380030'];
    return this.dwResponse['00380030']?.Value[0];
  }

  // Discharge Time
  get DischargeTime(): string | undefined {
    return this.x00380032;
  }

  get x00380032(): string | undefined {
    const element = this.dwResponse['00380032'];
    return this.dwResponse['00380032']?.Value[0];
  }

  // Discharge Diagnosis Description
  get DischargeDiagnosisDescription(): string | undefined {
    return this.x00380040;
  }

  get x00380040(): string | undefined {
    const element = this.dwResponse['00380040'];
    return this.dwResponse['00380040']?.Value[0];
  }

  // Discharge Diagnosis Code Sequence
  get DischargeDiagnosisCodeSequence(): Array<Dataset> | undefined {
    return this.x00380044;
  }

  get x00380044(): Array<Dataset> | undefined {
    const element = this.dwResponse['00380044'];
    return this.dwResponse['00380044']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Special Needs
  get SpecialNeeds(): string | undefined {
    return this.x00380050;
  }

  get x00380050(): string | undefined {
    const element = this.dwResponse['00380050'];
    return this.dwResponse['00380050']?.Value[0];
  }

  // Service Episode ID
  get ServiceEpisodeID(): string | undefined {
    return this.x00380060;
  }

  get x00380060(): string | undefined {
    const element = this.dwResponse['00380060'];
    return this.dwResponse['00380060']?.Value[0];
  }

  // Issuer of Service Episode ID
  get IssuerOfServiceEpisodeID(): string | undefined {
    return this.x00380061;
  }

  get x00380061(): string | undefined {
    const element = this.dwResponse['00380061'];
    return this.dwResponse['00380061']?.Value[0];
  }

  // Service Episode Description
  get ServiceEpisodeDescription(): string | undefined {
    return this.x00380062;
  }

  get x00380062(): string | undefined {
    const element = this.dwResponse['00380062'];
    return this.dwResponse['00380062']?.Value[0];
  }

  // Issuer of Service Episode ID Sequence
  get IssuerOfServiceEpisodeIDSequence(): Array<Dataset> | undefined {
    return this.x00380064;
  }

  get x00380064(): Array<Dataset> | undefined {
    const element = this.dwResponse['00380064'];
    return this.dwResponse['00380064']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Pertinent Documents Sequence
  get PertinentDocumentsSequence(): Array<Dataset> | undefined {
    return this.x00380100;
  }

  get x00380100(): Array<Dataset> | undefined {
    const element = this.dwResponse['00380100'];
    return this.dwResponse['00380100']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Current Patient Location
  get CurrentPatientLocation(): string | undefined {
    return this.x00380300;
  }

  get x00380300(): string | undefined {
    const element = this.dwResponse['00380300'];
    return this.dwResponse['00380300']?.Value[0];
  }

  // Patient's Institution Residence
  get PatientInstitutionResidence(): string | undefined {
    return this.x00380400;
  }

  get x00380400(): string | undefined {
    const element = this.dwResponse['00380400'];
    return this.dwResponse['00380400']?.Value[0];
  }

  // Patient State
  get PatientState(): string | undefined {
    return this.x00380500;
  }

  get x00380500(): string | undefined {
    const element = this.dwResponse['00380500'];
    return this.dwResponse['00380500']?.Value[0];
  }

  // Patient Clinical Trial Participation Sequence
  get PatientClinicalTrialParticipationSequence(): Array<Dataset> | undefined {
    return this.x00380502;
  }

  get x00380502(): Array<Dataset> | undefined {
    const element = this.dwResponse['00380502'];
    return this.dwResponse['00380502']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Waveform Originality
  get WaveformOriginality(): string | undefined {
    return this.x003a0004;
  }

  get x003a0004(): string | undefined {
    const element = this.dwResponse['003a0004'];
    return this.dwResponse['003a0004']?.Value[0];
  }

  // Number of Waveform Channels
  get NumberOfWaveformChannels(): number | undefined {
    return this.x003a0005;
  }

  get x003a0005(): number | undefined {
    const element = this.dwResponse['003a0005'];
    return this.dwResponse['003a0005']?.Value[0];
  }

  // Number of Waveform Samples
  get NumberOfWaveformSamples(): number | undefined {
    return this.x003a0010;
  }

  get x003a0010(): number | undefined {
    const element = this.dwResponse['003a0010'];
    return this.dwResponse['003a0010']?.Value[0];
  }

  // Sampling Frequency
  get SamplingFrequency(): number | undefined {
    return this.x003a001a;
  }

  get x003a001a(): number | undefined {
    const element = this.dwResponse['003a001a'];
    return this.dwResponse['003a001a']?.Value[0];
  }

  // Multiplex Group Label
  get MultiplexGroupLabel(): string | undefined {
    return this.x003a0020;
  }

  get x003a0020(): string | undefined {
    const element = this.dwResponse['003a0020'];
    return this.dwResponse['003a0020']?.Value[0];
  }

  // Channel Definition Sequence
  get ChannelDefinitionSequence(): Array<Dataset> | undefined {
    return this.x003a0200;
  }

  get x003a0200(): Array<Dataset> | undefined {
    const element = this.dwResponse['003a0200'];
    return this.dwResponse['003a0200']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Waveform Channel Number
  get WaveformChannelNumber(): number | undefined {
    return this.x003a0202;
  }

  get x003a0202(): number | undefined {
    const element = this.dwResponse['003a0202'];
    return this.dwResponse['003a0202']?.Value[0];
  }

  // Channel Label
  get ChannelLabel(): string | undefined {
    return this.x003a0203;
  }

  get x003a0203(): string | undefined {
    const element = this.dwResponse['003a0203'];
    return this.dwResponse['003a0203']?.Value[0];
  }

  // Channel Status
  get ChannelStatus(): Array<string> | undefined {
    return this.x003a0205;
  }

  get x003a0205(): Array<string> | undefined {
    const element = this.dwResponse['003a0205'];
    return this.dwResponse['003a0205']?.Value;
  }

  // Channel Source Sequence
  get ChannelSourceSequence(): Array<Dataset> | undefined {
    return this.x003a0208;
  }

  get x003a0208(): Array<Dataset> | undefined {
    const element = this.dwResponse['003a0208'];
    return this.dwResponse['003a0208']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Channel Source Modifiers Sequence
  get ChannelSourceModifiersSequence(): Array<Dataset> | undefined {
    return this.x003a0209;
  }

  get x003a0209(): Array<Dataset> | undefined {
    const element = this.dwResponse['003a0209'];
    return this.dwResponse['003a0209']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Source Waveform Sequence
  get SourceWaveformSequence(): Array<Dataset> | undefined {
    return this.x003a020a;
  }

  get x003a020a(): Array<Dataset> | undefined {
    const element = this.dwResponse['003a020a'];
    return this.dwResponse['003a020a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Channel Derivation Description
  get ChannelDerivationDescription(): string | undefined {
    return this.x003a020c;
  }

  get x003a020c(): string | undefined {
    const element = this.dwResponse['003a020c'];
    return this.dwResponse['003a020c']?.Value[0];
  }

  // Channel Sensitivity
  get ChannelSensitivity(): number | undefined {
    return this.x003a0210;
  }

  get x003a0210(): number | undefined {
    const element = this.dwResponse['003a0210'];
    return this.dwResponse['003a0210']?.Value[0];
  }

  // Channel Sensitivity Units Sequence
  get ChannelSensitivityUnitsSequence(): Array<Dataset> | undefined {
    return this.x003a0211;
  }

  get x003a0211(): Array<Dataset> | undefined {
    const element = this.dwResponse['003a0211'];
    return this.dwResponse['003a0211']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Channel Sensitivity Correction Factor
  get ChannelSensitivityCorrectionFactor(): number | undefined {
    return this.x003a0212;
  }

  get x003a0212(): number | undefined {
    const element = this.dwResponse['003a0212'];
    return this.dwResponse['003a0212']?.Value[0];
  }

  // Channel Baseline
  get ChannelBaseline(): number | undefined {
    return this.x003a0213;
  }

  get x003a0213(): number | undefined {
    const element = this.dwResponse['003a0213'];
    return this.dwResponse['003a0213']?.Value[0];
  }

  // Channel Time Skew
  get ChannelTimeSkew(): number | undefined {
    return this.x003a0214;
  }

  get x003a0214(): number | undefined {
    const element = this.dwResponse['003a0214'];
    return this.dwResponse['003a0214']?.Value[0];
  }

  // Channel Sample Skew
  get ChannelSampleSkew(): number | undefined {
    return this.x003a0215;
  }

  get x003a0215(): number | undefined {
    const element = this.dwResponse['003a0215'];
    return this.dwResponse['003a0215']?.Value[0];
  }

  // Channel Offset
  get ChannelOffset(): number | undefined {
    return this.x003a0218;
  }

  get x003a0218(): number | undefined {
    const element = this.dwResponse['003a0218'];
    return this.dwResponse['003a0218']?.Value[0];
  }

  // Waveform Bits Stored
  get WaveformBitsStored(): number | undefined {
    return this.x003a021a;
  }

  get x003a021a(): number | undefined {
    const element = this.dwResponse['003a021a'];
    return this.dwResponse['003a021a']?.Value[0];
  }

  // Filter Low Frequency
  get FilterLowFrequency(): number | undefined {
    return this.x003a0220;
  }

  get x003a0220(): number | undefined {
    const element = this.dwResponse['003a0220'];
    return this.dwResponse['003a0220']?.Value[0];
  }

  // Filter High Frequency
  get FilterHighFrequency(): number | undefined {
    return this.x003a0221;
  }

  get x003a0221(): number | undefined {
    const element = this.dwResponse['003a0221'];
    return this.dwResponse['003a0221']?.Value[0];
  }

  // Notch Filter Frequency
  get NotchFilterFrequency(): number | undefined {
    return this.x003a0222;
  }

  get x003a0222(): number | undefined {
    const element = this.dwResponse['003a0222'];
    return this.dwResponse['003a0222']?.Value[0];
  }

  // Notch Filter Bandwidth
  get NotchFilterBandwidth(): number | undefined {
    return this.x003a0223;
  }

  get x003a0223(): number | undefined {
    const element = this.dwResponse['003a0223'];
    return this.dwResponse['003a0223']?.Value[0];
  }

  // Waveform Data Display Scale
  get WaveformDataDisplayScale(): number | undefined {
    return this.x003a0230;
  }

  get x003a0230(): number | undefined {
    const element = this.dwResponse['003a0230'];
    return this.dwResponse['003a0230']?.Value[0];
  }

  // Waveform Display Background CIELab Value
  get WaveformDisplayBackgroundCIELabValue(): Array<number> | undefined {
    return this.x003a0231;
  }

  get x003a0231(): Array<number> | undefined {
    const element = this.dwResponse['003a0231'];
    return this.dwResponse['003a0231']?.Value;
  }

  // Waveform Presentation Group Sequence
  get WaveformPresentationGroupSequence(): Array<Dataset> | undefined {
    return this.x003a0240;
  }

  get x003a0240(): Array<Dataset> | undefined {
    const element = this.dwResponse['003a0240'];
    return this.dwResponse['003a0240']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Presentation Group Number
  get PresentationGroupNumber(): number | undefined {
    return this.x003a0241;
  }

  get x003a0241(): number | undefined {
    const element = this.dwResponse['003a0241'];
    return this.dwResponse['003a0241']?.Value[0];
  }

  // Channel Display Sequence
  get ChannelDisplaySequence(): Array<Dataset> | undefined {
    return this.x003a0242;
  }

  get x003a0242(): Array<Dataset> | undefined {
    const element = this.dwResponse['003a0242'];
    return this.dwResponse['003a0242']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Channel Recommended Display CIELab Value
  get ChannelRecommendedDisplayCIELabValue(): Array<number> | undefined {
    return this.x003a0244;
  }

  get x003a0244(): Array<number> | undefined {
    const element = this.dwResponse['003a0244'];
    return this.dwResponse['003a0244']?.Value;
  }

  // Channel Position
  get ChannelPosition(): number | undefined {
    return this.x003a0245;
  }

  get x003a0245(): number | undefined {
    const element = this.dwResponse['003a0245'];
    return this.dwResponse['003a0245']?.Value[0];
  }

  // Display Shading Flag
  get DisplayShadingFlag(): string | undefined {
    return this.x003a0246;
  }

  get x003a0246(): string | undefined {
    const element = this.dwResponse['003a0246'];
    return this.dwResponse['003a0246']?.Value[0];
  }

  // Fractional Channel Display Scale
  get FractionalChannelDisplayScale(): number | undefined {
    return this.x003a0247;
  }

  get x003a0247(): number | undefined {
    const element = this.dwResponse['003a0247'];
    return this.dwResponse['003a0247']?.Value[0];
  }

  // Absolute Channel Display Scale
  get AbsoluteChannelDisplayScale(): number | undefined {
    return this.x003a0248;
  }

  get x003a0248(): number | undefined {
    const element = this.dwResponse['003a0248'];
    return this.dwResponse['003a0248']?.Value[0];
  }

  // Multiplexed Audio Channels Description Code Sequence
  get MultiplexedAudioChannelsDescriptionCodeSequence(): Array<Dataset> | undefined {
    return this.x003a0300;
  }

  get x003a0300(): Array<Dataset> | undefined {
    const element = this.dwResponse['003a0300'];
    return this.dwResponse['003a0300']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Channel Identification Code
  get ChannelIdentificationCode(): number | undefined {
    return this.x003a0301;
  }

  get x003a0301(): number | undefined {
    const element = this.dwResponse['003a0301'];
    return this.dwResponse['003a0301']?.Value[0];
  }

  // Channel Mode
  get ChannelMode(): string | undefined {
    return this.x003a0302;
  }

  get x003a0302(): string | undefined {
    const element = this.dwResponse['003a0302'];
    return this.dwResponse['003a0302']?.Value[0];
  }

  // Scheduled Station AE Title
  get ScheduledStationAETitle(): Array<string> | undefined {
    return this.x00400001;
  }

  get x00400001(): Array<string> | undefined {
    const element = this.dwResponse['00400001'];
    return this.dwResponse['00400001']?.Value;
  }

  // Scheduled Procedure Step Start Date
  get ScheduledProcedureStepStartDate(): Date | undefined {
    return this.x00400002;
  }

  get x00400002(): Date | undefined {
    const element = this.dwResponse['00400002'];
    return this.dwResponse['00400002']?.Value[0];
  }

  // Scheduled Procedure Step Start Time
  get ScheduledProcedureStepStartTime(): string | undefined {
    return this.x00400003;
  }

  get x00400003(): string | undefined {
    const element = this.dwResponse['00400003'];
    return this.dwResponse['00400003']?.Value[0];
  }

  // Scheduled Procedure Step End Date
  get ScheduledProcedureStepEndDate(): Date | undefined {
    return this.x00400004;
  }

  get x00400004(): Date | undefined {
    const element = this.dwResponse['00400004'];
    return this.dwResponse['00400004']?.Value[0];
  }

  // Scheduled Procedure Step End Time
  get ScheduledProcedureStepEndTime(): string | undefined {
    return this.x00400005;
  }

  get x00400005(): string | undefined {
    const element = this.dwResponse['00400005'];
    return this.dwResponse['00400005']?.Value[0];
  }

  // Scheduled Performing Physician's Name
  get ScheduledPerformingPhysicianName(): any | undefined {
    return this.x00400006;
  }

  get x00400006(): any | undefined {
    const element = this.dwResponse['00400006'];
    return this.dwResponse['00400006']?.Value[0];
  }

  // Scheduled Procedure Step Description
  get ScheduledProcedureStepDescription(): string | undefined {
    return this.x00400007;
  }

  get x00400007(): string | undefined {
    const element = this.dwResponse['00400007'];
    return this.dwResponse['00400007']?.Value[0];
  }

  // Scheduled Protocol Code Sequence
  get ScheduledProtocolCodeSequence(): Array<Dataset> | undefined {
    return this.x00400008;
  }

  get x00400008(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400008'];
    return this.dwResponse['00400008']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Scheduled Procedure Step ID
  get ScheduledProcedureStepID(): string | undefined {
    return this.x00400009;
  }

  get x00400009(): string | undefined {
    const element = this.dwResponse['00400009'];
    return this.dwResponse['00400009']?.Value[0];
  }

  // Stage Code Sequence
  get StageCodeSequence(): Array<Dataset> | undefined {
    return this.x0040000a;
  }

  get x0040000a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040000a'];
    return this.dwResponse['0040000a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Scheduled Performing Physician Identification Sequence
  get ScheduledPerformingPhysicianIdentificationSequence(): Array<Dataset> | undefined {
    return this.x0040000b;
  }

  get x0040000b(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040000b'];
    return this.dwResponse['0040000b']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Scheduled Station Name
  get ScheduledStationName(): Array<string> | undefined {
    return this.x00400010;
  }

  get x00400010(): Array<string> | undefined {
    const element = this.dwResponse['00400010'];
    return this.dwResponse['00400010']?.Value;
  }

  // Scheduled Procedure Step Location
  get ScheduledProcedureStepLocation(): string | undefined {
    return this.x00400011;
  }

  get x00400011(): string | undefined {
    const element = this.dwResponse['00400011'];
    return this.dwResponse['00400011']?.Value[0];
  }

  // Pre-Medication
  get PreMedication(): string | undefined {
    return this.x00400012;
  }

  get x00400012(): string | undefined {
    const element = this.dwResponse['00400012'];
    return this.dwResponse['00400012']?.Value[0];
  }

  // Scheduled Procedure Step Status
  get ScheduledProcedureStepStatus(): string | undefined {
    return this.x00400020;
  }

  get x00400020(): string | undefined {
    const element = this.dwResponse['00400020'];
    return this.dwResponse['00400020']?.Value[0];
  }

  // Order Placer Identifier Sequence
  get OrderPlacerIdentifierSequence(): Array<Dataset> | undefined {
    return this.x00400026;
  }

  get x00400026(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400026'];
    return this.dwResponse['00400026']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Order Filler Identifier Sequence
  get OrderFillerIdentifierSequence(): Array<Dataset> | undefined {
    return this.x00400027;
  }

  get x00400027(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400027'];
    return this.dwResponse['00400027']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Universal Entity ID Type
  get UniversalEntityIDType(): string | undefined {
    return this.x00400033;
  }

  get x00400033(): string | undefined {
    const element = this.dwResponse['00400033'];
    return this.dwResponse['00400033']?.Value[0];
  }

  // Identifier Type Code
  get IdentifierTypeCode(): string | undefined {
    return this.x00400035;
  }

  get x00400035(): string | undefined {
    const element = this.dwResponse['00400035'];
    return this.dwResponse['00400035']?.Value[0];
  }

  // Assigning Facility Sequence
  get AssigningFacilitySequence(): Array<Dataset> | undefined {
    return this.x00400036;
  }

  get x00400036(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400036'];
    return this.dwResponse['00400036']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Assigning Jurisdiction Code Sequence
  get AssigningJurisdictionCodeSequence(): Array<Dataset> | undefined {
    return this.x00400039;
  }

  get x00400039(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400039'];
    return this.dwResponse['00400039']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Assigning Agency or Department Code Sequence
  get AssigningAgencyOrDepartmentCodeSequence(): Array<Dataset> | undefined {
    return this.x0040003a;
  }

  get x0040003a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040003a'];
    return this.dwResponse['0040003a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Scheduled Procedure Step Sequence
  get ScheduledProcedureStepSequence(): Array<Dataset> | undefined {
    return this.x00400100;
  }

  get x00400100(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400100'];
    return this.dwResponse['00400100']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Non-Image Composite SOP Instance Sequence
  get ReferencedNonImageCompositeSOPInstanceSequence(): Array<Dataset> | undefined {
    return this.x00400220;
  }

  get x00400220(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400220'];
    return this.dwResponse['00400220']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Performed Station AE Title
  get PerformedStationAETitle(): string | undefined {
    return this.x00400241;
  }

  get x00400241(): string | undefined {
    const element = this.dwResponse['00400241'];
    return this.dwResponse['00400241']?.Value[0];
  }

  // Performed Station Name
  get PerformedStationName(): string | undefined {
    return this.x00400242;
  }

  get x00400242(): string | undefined {
    const element = this.dwResponse['00400242'];
    return this.dwResponse['00400242']?.Value[0];
  }

  // Performed Location
  get PerformedLocation(): string | undefined {
    return this.x00400243;
  }

  get x00400243(): string | undefined {
    const element = this.dwResponse['00400243'];
    return this.dwResponse['00400243']?.Value[0];
  }

  // Performed Procedure Step Start Date
  get PerformedProcedureStepStartDate(): Date | undefined {
    return this.x00400244;
  }

  get x00400244(): Date | undefined {
    const element = this.dwResponse['00400244'];
    return this.dwResponse['00400244']?.Value[0];
  }

  // Performed Procedure Step Start Time
  get PerformedProcedureStepStartTime(): string | undefined {
    return this.x00400245;
  }

  get x00400245(): string | undefined {
    const element = this.dwResponse['00400245'];
    return this.dwResponse['00400245']?.Value[0];
  }

  // Performed Procedure Step End Date
  get PerformedProcedureStepEndDate(): Date | undefined {
    return this.x00400250;
  }

  get x00400250(): Date | undefined {
    const element = this.dwResponse['00400250'];
    return this.dwResponse['00400250']?.Value[0];
  }

  // Performed Procedure Step End Time
  get PerformedProcedureStepEndTime(): string | undefined {
    return this.x00400251;
  }

  get x00400251(): string | undefined {
    const element = this.dwResponse['00400251'];
    return this.dwResponse['00400251']?.Value[0];
  }

  // Performed Procedure Step Status
  get PerformedProcedureStepStatus(): string | undefined {
    return this.x00400252;
  }

  get x00400252(): string | undefined {
    const element = this.dwResponse['00400252'];
    return this.dwResponse['00400252']?.Value[0];
  }

  // Performed Procedure Step ID
  get PerformedProcedureStepID(): string | undefined {
    return this.x00400253;
  }

  get x00400253(): string | undefined {
    const element = this.dwResponse['00400253'];
    return this.dwResponse['00400253']?.Value[0];
  }

  // Performed Procedure Step Description
  get PerformedProcedureStepDescription(): string | undefined {
    return this.x00400254;
  }

  get x00400254(): string | undefined {
    const element = this.dwResponse['00400254'];
    return this.dwResponse['00400254']?.Value[0];
  }

  // Performed Procedure Type Description
  get PerformedProcedureTypeDescription(): string | undefined {
    return this.x00400255;
  }

  get x00400255(): string | undefined {
    const element = this.dwResponse['00400255'];
    return this.dwResponse['00400255']?.Value[0];
  }

  // Performed Protocol Code Sequence
  get PerformedProtocolCodeSequence(): Array<Dataset> | undefined {
    return this.x00400260;
  }

  get x00400260(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400260'];
    return this.dwResponse['00400260']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Performed Protocol Type
  get PerformedProtocolType(): string | undefined {
    return this.x00400261;
  }

  get x00400261(): string | undefined {
    const element = this.dwResponse['00400261'];
    return this.dwResponse['00400261']?.Value[0];
  }

  // Scheduled Step Attributes Sequence
  get ScheduledStepAttributesSequence(): Array<Dataset> | undefined {
    return this.x00400270;
  }

  get x00400270(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400270'];
    return this.dwResponse['00400270']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Request Attributes Sequence
  get RequestAttributesSequence(): Array<Dataset> | undefined {
    return this.x00400275;
  }

  get x00400275(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400275'];
    return this.dwResponse['00400275']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Performed Procedure Step Discontinuation Reason Code Sequence
  get PerformedProcedureStepDiscontinuationReasonCodeSequence(): Array<Dataset> | undefined {
    return this.x00400281;
  }

  get x00400281(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400281'];
    return this.dwResponse['00400281']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Quantity Sequence
  get QuantitySequence(): Array<Dataset> | undefined {
    return this.x00400293;
  }

  get x00400293(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400293'];
    return this.dwResponse['00400293']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Quantity
  get Quantity(): number | undefined {
    return this.x00400294;
  }

  get x00400294(): number | undefined {
    const element = this.dwResponse['00400294'];
    return this.dwResponse['00400294']?.Value[0];
  }

  // Measuring Units Sequence
  get MeasuringUnitsSequence(): Array<Dataset> | undefined {
    return this.x00400295;
  }

  get x00400295(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400295'];
    return this.dwResponse['00400295']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Billing Item Sequence
  get BillingItemSequence(): Array<Dataset> | undefined {
    return this.x00400296;
  }

  get x00400296(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400296'];
    return this.dwResponse['00400296']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Total Time of Fluoroscopy
  get TotalTimeOfFluoroscopy(): number | undefined {
    return this.x00400300;
  }

  get x00400300(): number | undefined {
    const element = this.dwResponse['00400300'];
    return this.dwResponse['00400300']?.Value[0];
  }

  // Total Number of Exposures
  get TotalNumberOfExposures(): number | undefined {
    return this.x00400301;
  }

  get x00400301(): number | undefined {
    const element = this.dwResponse['00400301'];
    return this.dwResponse['00400301']?.Value[0];
  }

  // Entrance Dose
  get EntranceDose(): number | undefined {
    return this.x00400302;
  }

  get x00400302(): number | undefined {
    const element = this.dwResponse['00400302'];
    return this.dwResponse['00400302']?.Value[0];
  }

  // Exposed Area
  get ExposedArea(): Array<number> | undefined {
    return this.x00400303;
  }

  get x00400303(): Array<number> | undefined {
    const element = this.dwResponse['00400303'];
    return this.dwResponse['00400303']?.Value;
  }

  // Distance Source to Entrance
  get DistanceSourceToEntrance(): number | undefined {
    return this.x00400306;
  }

  get x00400306(): number | undefined {
    const element = this.dwResponse['00400306'];
    return this.dwResponse['00400306']?.Value[0];
  }

  // Distance Source to Support
  get DistanceSourceToSupport(): number | undefined {
    return this.x00400307;
  }

  get x00400307(): number | undefined {
    const element = this.dwResponse['00400307'];
    return this.dwResponse['00400307']?.Value[0];
  }

  // Exposure Dose Sequence
  get ExposureDoseSequence(): Array<Dataset> | undefined {
    return this.x0040030e;
  }

  get x0040030e(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040030e'];
    return this.dwResponse['0040030e']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // X-Ray Output
  get XRayOutput(): number | undefined {
    return this.x00400312;
  }

  get x00400312(): number | undefined {
    const element = this.dwResponse['00400312'];
    return this.dwResponse['00400312']?.Value[0];
  }

  // Half Value Layer
  get HalfValueLayer(): number | undefined {
    return this.x00400314;
  }

  get x00400314(): number | undefined {
    const element = this.dwResponse['00400314'];
    return this.dwResponse['00400314']?.Value[0];
  }

  // Organ Dose
  get OrganDose(): number | undefined {
    return this.x00400316;
  }

  get x00400316(): number | undefined {
    const element = this.dwResponse['00400316'];
    return this.dwResponse['00400316']?.Value[0];
  }

  // Organ Exposed
  get OrganExposed(): string | undefined {
    return this.x00400318;
  }

  get x00400318(): string | undefined {
    const element = this.dwResponse['00400318'];
    return this.dwResponse['00400318']?.Value[0];
  }

  // Billing Procedure Step Sequence
  get BillingProcedureStepSequence(): Array<Dataset> | undefined {
    return this.x00400320;
  }

  get x00400320(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400320'];
    return this.dwResponse['00400320']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Film Consumption Sequence
  get FilmConsumptionSequence(): Array<Dataset> | undefined {
    return this.x00400321;
  }

  get x00400321(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400321'];
    return this.dwResponse['00400321']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Billing Supplies and Devices Sequence
  get BillingSuppliesAndDevicesSequence(): Array<Dataset> | undefined {
    return this.x00400324;
  }

  get x00400324(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400324'];
    return this.dwResponse['00400324']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Procedure Step Sequence
  get ReferencedProcedureStepSequence(): Array<Dataset> | undefined {
    return this.x00400330;
  }

  get x00400330(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400330'];
    return this.dwResponse['00400330']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Performed Series Sequence
  get PerformedSeriesSequence(): Array<Dataset> | undefined {
    return this.x00400340;
  }

  get x00400340(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400340'];
    return this.dwResponse['00400340']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Protocol Context Sequence
  get ProtocolContextSequence(): Array<Dataset> | undefined {
    return this.x00400440;
  }

  get x00400440(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400440'];
    return this.dwResponse['00400440']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Content Item Modifier Sequence
  get ContentItemModifierSequence(): Array<Dataset> | undefined {
    return this.x00400441;
  }

  get x00400441(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400441'];
    return this.dwResponse['00400441']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Scheduled Specimen Sequence
  get ScheduledSpecimenSequence(): Array<Dataset> | undefined {
    return this.x00400500;
  }

  get x00400500(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400500'];
    return this.dwResponse['00400500']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Specimen Accession Number
  get SpecimenAccessionNumber(): string | undefined {
    return this.x0040050a;
  }

  get x0040050a(): string | undefined {
    const element = this.dwResponse['0040050a'];
    return this.dwResponse['0040050a']?.Value[0];
  }

  // Container Identifier
  get ContainerIdentifier(): string | undefined {
    return this.x00400512;
  }

  get x00400512(): string | undefined {
    const element = this.dwResponse['00400512'];
    return this.dwResponse['00400512']?.Value[0];
  }

  // Issuer of the Container Identifier Sequence
  get IssuerOfTheContainerIdentifierSequence(): Array<Dataset> | undefined {
    return this.x00400513;
  }

  get x00400513(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400513'];
    return this.dwResponse['00400513']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Alternate Container Identifier Sequence
  get AlternateContainerIdentifierSequence(): Array<Dataset> | undefined {
    return this.x00400515;
  }

  get x00400515(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400515'];
    return this.dwResponse['00400515']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Container Type Code Sequence
  get ContainerTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x00400518;
  }

  get x00400518(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400518'];
    return this.dwResponse['00400518']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Container Description
  get ContainerDescription(): string | undefined {
    return this.x0040051a;
  }

  get x0040051a(): string | undefined {
    const element = this.dwResponse['0040051a'];
    return this.dwResponse['0040051a']?.Value[0];
  }

  // Container Component Sequence
  get ContainerComponentSequence(): Array<Dataset> | undefined {
    return this.x00400520;
  }

  get x00400520(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400520'];
    return this.dwResponse['00400520']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Specimen Sequence
  get SpecimenSequence(): Array<Dataset> | undefined {
    return this.x00400550;
  }

  get x00400550(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400550'];
    return this.dwResponse['00400550']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Specimen Identifier
  get SpecimenIdentifier(): string | undefined {
    return this.x00400551;
  }

  get x00400551(): string | undefined {
    const element = this.dwResponse['00400551'];
    return this.dwResponse['00400551']?.Value[0];
  }

  // Specimen Description Sequence (Trial)
  get SpecimenDescriptionSequenceTrial(): Array<Dataset> | undefined {
    return this.x00400552;
  }

  get x00400552(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400552'];
    return this.dwResponse['00400552']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Specimen UID
  get SpecimenUID(): string | undefined {
    return this.x00400554;
  }

  get x00400554(): string | undefined {
    const element = this.dwResponse['00400554'];
    return this.dwResponse['00400554']?.Value[0];
  }

  // Acquisition Context Sequence
  get AcquisitionContextSequence(): Array<Dataset> | undefined {
    return this.x00400555;
  }

  get x00400555(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400555'];
    return this.dwResponse['00400555']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Specimen Type Code Sequence
  get SpecimenTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x0040059a;
  }

  get x0040059a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040059a'];
    return this.dwResponse['0040059a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Specimen Description Sequence
  get SpecimenDescriptionSequence(): Array<Dataset> | undefined {
    return this.x00400560;
  }

  get x00400560(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400560'];
    return this.dwResponse['00400560']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Issuer of the Specimen Identifier Sequence
  get IssuerOfTheSpecimenIdentifierSequence(): Array<Dataset> | undefined {
    return this.x00400562;
  }

  get x00400562(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400562'];
    return this.dwResponse['00400562']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Specimen Short Description
  get SpecimenShortDescription(): string | undefined {
    return this.x00400600;
  }

  get x00400600(): string | undefined {
    const element = this.dwResponse['00400600'];
    return this.dwResponse['00400600']?.Value[0];
  }

  // Specimen Preparation Sequence
  get SpecimenPreparationSequence(): Array<Dataset> | undefined {
    return this.x00400610;
  }

  get x00400610(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400610'];
    return this.dwResponse['00400610']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Specimen Preparation Step Content Item Sequence
  get SpecimenPreparationStepContentItemSequence(): Array<Dataset> | undefined {
    return this.x00400612;
  }

  get x00400612(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400612'];
    return this.dwResponse['00400612']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Specimen Localization Content Item Sequence
  get SpecimenLocalizationContentItemSequence(): Array<Dataset> | undefined {
    return this.x00400620;
  }

  get x00400620(): Array<Dataset> | undefined {
    const element = this.dwResponse['00400620'];
    return this.dwResponse['00400620']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Slide Identifier
  get SlideIdentifier(): string | undefined {
    return this.x004006fa;
  }

  get x004006fa(): string | undefined {
    const element = this.dwResponse['004006fa'];
    return this.dwResponse['004006fa']?.Value[0];
  }

  // Image Center Point Coordinates Sequence
  get ImageCenterPointCoordinatesSequence(): Array<Dataset> | undefined {
    return this.x0040071a;
  }

  get x0040071a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040071a'];
    return this.dwResponse['0040071a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // X Offset in Slide Coordinate System
  get XOffsetInSlideCoordinateSystem(): number | undefined {
    return this.x0040072a;
  }

  get x0040072a(): number | undefined {
    const element = this.dwResponse['0040072a'];
    return this.dwResponse['0040072a']?.Value[0];
  }

  // Y Offset in Slide Coordinate System
  get YOffsetInSlideCoordinateSystem(): number | undefined {
    return this.x0040073a;
  }

  get x0040073a(): number | undefined {
    const element = this.dwResponse['0040073a'];
    return this.dwResponse['0040073a']?.Value[0];
  }

  // Z Offset in Slide Coordinate System
  get ZOffsetInSlideCoordinateSystem(): number | undefined {
    return this.x0040074a;
  }

  get x0040074a(): number | undefined {
    const element = this.dwResponse['0040074a'];
    return this.dwResponse['0040074a']?.Value[0];
  }

  // Pixel Spacing Sequence
  get PixelSpacingSequence(): Array<Dataset> | undefined {
    return this.x004008d8;
  }

  get x004008d8(): Array<Dataset> | undefined {
    const element = this.dwResponse['004008d8'];
    return this.dwResponse['004008d8']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Coordinate System Axis Code Sequence
  get CoordinateSystemAxisCodeSequence(): Array<Dataset> | undefined {
    return this.x004008da;
  }

  get x004008da(): Array<Dataset> | undefined {
    const element = this.dwResponse['004008da'];
    return this.dwResponse['004008da']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Measurement Units Code Sequence
  get MeasurementUnitsCodeSequence(): Array<Dataset> | undefined {
    return this.x004008ea;
  }

  get x004008ea(): Array<Dataset> | undefined {
    const element = this.dwResponse['004008ea'];
    return this.dwResponse['004008ea']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Vital Stain Code Sequence (Trial)
  get VitalStainCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x004009f8;
  }

  get x004009f8(): Array<Dataset> | undefined {
    const element = this.dwResponse['004009f8'];
    return this.dwResponse['004009f8']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Requested Procedure ID
  get RequestedProcedureID(): string | undefined {
    return this.x00401001;
  }

  get x00401001(): string | undefined {
    const element = this.dwResponse['00401001'];
    return this.dwResponse['00401001']?.Value[0];
  }

  // Reason for the Requested Procedure
  get ReasonForTheRequestedProcedure(): string | undefined {
    return this.x00401002;
  }

  get x00401002(): string | undefined {
    const element = this.dwResponse['00401002'];
    return this.dwResponse['00401002']?.Value[0];
  }

  // Requested Procedure Priority
  get RequestedProcedurePriority(): string | undefined {
    return this.x00401003;
  }

  get x00401003(): string | undefined {
    const element = this.dwResponse['00401003'];
    return this.dwResponse['00401003']?.Value[0];
  }

  // Patient Transport Arrangements
  get PatientTransportArrangements(): string | undefined {
    return this.x00401004;
  }

  get x00401004(): string | undefined {
    const element = this.dwResponse['00401004'];
    return this.dwResponse['00401004']?.Value[0];
  }

  // Requested Procedure Location
  get RequestedProcedureLocation(): string | undefined {
    return this.x00401005;
  }

  get x00401005(): string | undefined {
    const element = this.dwResponse['00401005'];
    return this.dwResponse['00401005']?.Value[0];
  }

  // Placer Order Number / Procedure
  get PlacerOrderNumberProcedure(): string | undefined {
    return this.x00401006;
  }

  get x00401006(): string | undefined {
    const element = this.dwResponse['00401006'];
    return this.dwResponse['00401006']?.Value[0];
  }

  // Filler Order Number / Procedure
  get FillerOrderNumberProcedure(): string | undefined {
    return this.x00401007;
  }

  get x00401007(): string | undefined {
    const element = this.dwResponse['00401007'];
    return this.dwResponse['00401007']?.Value[0];
  }

  // Confidentiality Code
  get ConfidentialityCode(): string | undefined {
    return this.x00401008;
  }

  get x00401008(): string | undefined {
    const element = this.dwResponse['00401008'];
    return this.dwResponse['00401008']?.Value[0];
  }

  // Reporting Priority
  get ReportingPriority(): string | undefined {
    return this.x00401009;
  }

  get x00401009(): string | undefined {
    const element = this.dwResponse['00401009'];
    return this.dwResponse['00401009']?.Value[0];
  }

  // Reason for Requested Procedure Code Sequence
  get ReasonForRequestedProcedureCodeSequence(): Array<Dataset> | undefined {
    return this.x0040100a;
  }

  get x0040100a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040100a'];
    return this.dwResponse['0040100a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Names of Intended Recipients of Results
  get NamesOfIntendedRecipientsOfResults(): Array<any> | undefined {
    return this.x00401010;
  }

  get x00401010(): Array<any> | undefined {
    const element = this.dwResponse['00401010'];
    return this.dwResponse['00401010']?.Value;
  }

  // Intended Recipients of Results Identification Sequence
  get IntendedRecipientsOfResultsIdentificationSequence(): Array<Dataset> | undefined {
    return this.x00401011;
  }

  get x00401011(): Array<Dataset> | undefined {
    const element = this.dwResponse['00401011'];
    return this.dwResponse['00401011']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Reason For Performed Procedure Code Sequence
  get ReasonForPerformedProcedureCodeSequence(): Array<Dataset> | undefined {
    return this.x00401012;
  }

  get x00401012(): Array<Dataset> | undefined {
    const element = this.dwResponse['00401012'];
    return this.dwResponse['00401012']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Requested Procedure Description (Trial)
  get RequestedProcedureDescriptionTrial(): string | undefined {
    return this.x00401060;
  }

  get x00401060(): string | undefined {
    const element = this.dwResponse['00401060'];
    return this.dwResponse['00401060']?.Value[0];
  }

  // Person Identification Code Sequence
  get PersonIdentificationCodeSequence(): Array<Dataset> | undefined {
    return this.x00401101;
  }

  get x00401101(): Array<Dataset> | undefined {
    const element = this.dwResponse['00401101'];
    return this.dwResponse['00401101']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Person's Telephone Numbers
  get PersonTelephoneNumbers(): Array<string> | undefined {
    return this.x00401103;
  }

  get x00401103(): Array<string> | undefined {
    const element = this.dwResponse['00401103'];
    return this.dwResponse['00401103']?.Value;
  }

  // Reason for the Imaging Service Request
  get ReasonForTheImagingServiceRequest(): string | undefined {
    return this.x00402001;
  }

  get x00402001(): string | undefined {
    const element = this.dwResponse['00402001'];
    return this.dwResponse['00402001']?.Value[0];
  }

  // Issue Date of Imaging Service Request
  get IssueDateOfImagingServiceRequest(): Date | undefined {
    return this.x00402004;
  }

  get x00402004(): Date | undefined {
    const element = this.dwResponse['00402004'];
    return this.dwResponse['00402004']?.Value[0];
  }

  // Issue Time of Imaging Service Request
  get IssueTimeOfImagingServiceRequest(): string | undefined {
    return this.x00402005;
  }

  get x00402005(): string | undefined {
    const element = this.dwResponse['00402005'];
    return this.dwResponse['00402005']?.Value[0];
  }

  // Placer Order Number / Imaging Service Request (Retired)
  get PlacerOrderNumberImagingServiceRequestRetired(): string | undefined {
    return this.x00402006;
  }

  get x00402006(): string | undefined {
    const element = this.dwResponse['00402006'];
    return this.dwResponse['00402006']?.Value[0];
  }

  // Filler Order Number / Imaging Service Request (Retired)
  get FillerOrderNumberImagingServiceRequestRetired(): string | undefined {
    return this.x00402007;
  }

  get x00402007(): string | undefined {
    const element = this.dwResponse['00402007'];
    return this.dwResponse['00402007']?.Value[0];
  }

  // Order Entered By
  get OrderEnteredBy(): any | undefined {
    return this.x00402008;
  }

  get x00402008(): any | undefined {
    const element = this.dwResponse['00402008'];
    return this.dwResponse['00402008']?.Value[0];
  }

  // Order Enterer's Location
  get OrderEntererLocation(): string | undefined {
    return this.x00402009;
  }

  get x00402009(): string | undefined {
    const element = this.dwResponse['00402009'];
    return this.dwResponse['00402009']?.Value[0];
  }

  // Order Callback Phone Number
  get OrderCallbackPhoneNumber(): string | undefined {
    return this.x00402010;
  }

  get x00402010(): string | undefined {
    const element = this.dwResponse['00402010'];
    return this.dwResponse['00402010']?.Value[0];
  }

  // Placer Order Number / Imaging Service Request
  get PlacerOrderNumberImagingServiceRequest(): string | undefined {
    return this.x00402016;
  }

  get x00402016(): string | undefined {
    const element = this.dwResponse['00402016'];
    return this.dwResponse['00402016']?.Value[0];
  }

  // Filler Order Number / Imaging Service Request
  get FillerOrderNumberImagingServiceRequest(): string | undefined {
    return this.x00402017;
  }

  get x00402017(): string | undefined {
    const element = this.dwResponse['00402017'];
    return this.dwResponse['00402017']?.Value[0];
  }

  // Confidentiality Constraint on Patient Data Description
  get ConfidentialityConstraintOnPatientDataDescription(): string | undefined {
    return this.x00403001;
  }

  get x00403001(): string | undefined {
    const element = this.dwResponse['00403001'];
    return this.dwResponse['00403001']?.Value[0];
  }

  // General Purpose Scheduled Procedure Step Status
  get GeneralPurposeScheduledProcedureStepStatus(): string | undefined {
    return this.x00404001;
  }

  get x00404001(): string | undefined {
    const element = this.dwResponse['00404001'];
    return this.dwResponse['00404001']?.Value[0];
  }

  // General Purpose Performed Procedure Step Status
  get GeneralPurposePerformedProcedureStepStatus(): string | undefined {
    return this.x00404002;
  }

  get x00404002(): string | undefined {
    const element = this.dwResponse['00404002'];
    return this.dwResponse['00404002']?.Value[0];
  }

  // General Purpose Scheduled Procedure Step Priority
  get GeneralPurposeScheduledProcedureStepPriority(): string | undefined {
    return this.x00404003;
  }

  get x00404003(): string | undefined {
    const element = this.dwResponse['00404003'];
    return this.dwResponse['00404003']?.Value[0];
  }

  // Scheduled Processing Applications Code Sequence
  get ScheduledProcessingApplicationsCodeSequence(): Array<Dataset> | undefined {
    return this.x00404004;
  }

  get x00404004(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404004'];
    return this.dwResponse['00404004']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Scheduled Procedure Step Start DateTime
  get ScheduledProcedureStepStartDateTime(): string | undefined {
    return this.x00404005;
  }

  get x00404005(): string | undefined {
    const element = this.dwResponse['00404005'];
    return this.dwResponse['00404005']?.Value[0];
  }

  // Multiple Copies Flag
  get MultipleCopiesFlag(): string | undefined {
    return this.x00404006;
  }

  get x00404006(): string | undefined {
    const element = this.dwResponse['00404006'];
    return this.dwResponse['00404006']?.Value[0];
  }

  // Performed Processing Applications Code Sequence
  get PerformedProcessingApplicationsCodeSequence(): Array<Dataset> | undefined {
    return this.x00404007;
  }

  get x00404007(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404007'];
    return this.dwResponse['00404007']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Human Performer Code Sequence
  get HumanPerformerCodeSequence(): Array<Dataset> | undefined {
    return this.x00404009;
  }

  get x00404009(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404009'];
    return this.dwResponse['00404009']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Scheduled Procedure Step Modification DateTime
  get ScheduledProcedureStepModificationDateTime(): string | undefined {
    return this.x00404010;
  }

  get x00404010(): string | undefined {
    const element = this.dwResponse['00404010'];
    return this.dwResponse['00404010']?.Value[0];
  }

  // Expected Completion DateTime
  get ExpectedCompletionDateTime(): string | undefined {
    return this.x00404011;
  }

  get x00404011(): string | undefined {
    const element = this.dwResponse['00404011'];
    return this.dwResponse['00404011']?.Value[0];
  }

  // Resulting General Purpose Performed Procedure Steps Sequence
  get ResultingGeneralPurposePerformedProcedureStepsSequence(): Array<Dataset> | undefined {
    return this.x00404015;
  }

  get x00404015(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404015'];
    return this.dwResponse['00404015']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced General Purpose Scheduled Procedure Step Sequence
  get ReferencedGeneralPurposeScheduledProcedureStepSequence(): Array<Dataset> | undefined {
    return this.x00404016;
  }

  get x00404016(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404016'];
    return this.dwResponse['00404016']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Scheduled Workitem Code Sequence
  get ScheduledWorkitemCodeSequence(): Array<Dataset> | undefined {
    return this.x00404018;
  }

  get x00404018(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404018'];
    return this.dwResponse['00404018']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Performed Workitem Code Sequence
  get PerformedWorkitemCodeSequence(): Array<Dataset> | undefined {
    return this.x00404019;
  }

  get x00404019(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404019'];
    return this.dwResponse['00404019']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Input Availability Flag
  get InputAvailabilityFlag(): string | undefined {
    return this.x00404020;
  }

  get x00404020(): string | undefined {
    const element = this.dwResponse['00404020'];
    return this.dwResponse['00404020']?.Value[0];
  }

  // Input Information Sequence
  get InputInformationSequence(): Array<Dataset> | undefined {
    return this.x00404021;
  }

  get x00404021(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404021'];
    return this.dwResponse['00404021']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Relevant Information Sequence
  get RelevantInformationSequence(): Array<Dataset> | undefined {
    return this.x00404022;
  }

  get x00404022(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404022'];
    return this.dwResponse['00404022']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced General Purpose Scheduled Procedure Step Transaction UID
  get ReferencedGeneralPurposeScheduledProcedureStepTransactionUID(): string | undefined {
    return this.x00404023;
  }

  get x00404023(): string | undefined {
    const element = this.dwResponse['00404023'];
    return this.dwResponse['00404023']?.Value[0];
  }

  // Scheduled Station Name Code Sequence
  get ScheduledStationNameCodeSequence(): Array<Dataset> | undefined {
    return this.x00404025;
  }

  get x00404025(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404025'];
    return this.dwResponse['00404025']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Scheduled Station Class Code Sequence
  get ScheduledStationClassCodeSequence(): Array<Dataset> | undefined {
    return this.x00404026;
  }

  get x00404026(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404026'];
    return this.dwResponse['00404026']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Scheduled Station Geographic Location Code Sequence
  get ScheduledStationGeographicLocationCodeSequence(): Array<Dataset> | undefined {
    return this.x00404027;
  }

  get x00404027(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404027'];
    return this.dwResponse['00404027']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Performed Station Name Code Sequence
  get PerformedStationNameCodeSequence(): Array<Dataset> | undefined {
    return this.x00404028;
  }

  get x00404028(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404028'];
    return this.dwResponse['00404028']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Performed Station Class Code Sequence
  get PerformedStationClassCodeSequence(): Array<Dataset> | undefined {
    return this.x00404029;
  }

  get x00404029(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404029'];
    return this.dwResponse['00404029']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Performed Station Geographic Location Code Sequence
  get PerformedStationGeographicLocationCodeSequence(): Array<Dataset> | undefined {
    return this.x00404030;
  }

  get x00404030(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404030'];
    return this.dwResponse['00404030']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Requested Subsequent Workitem Code Sequence
  get RequestedSubsequentWorkitemCodeSequence(): Array<Dataset> | undefined {
    return this.x00404031;
  }

  get x00404031(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404031'];
    return this.dwResponse['00404031']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Non-DICOM Output Code Sequence
  get NonDICOMOutputCodeSequence(): Array<Dataset> | undefined {
    return this.x00404032;
  }

  get x00404032(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404032'];
    return this.dwResponse['00404032']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Output Information Sequence
  get OutputInformationSequence(): Array<Dataset> | undefined {
    return this.x00404033;
  }

  get x00404033(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404033'];
    return this.dwResponse['00404033']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Scheduled Human Performers Sequence
  get ScheduledHumanPerformersSequence(): Array<Dataset> | undefined {
    return this.x00404034;
  }

  get x00404034(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404034'];
    return this.dwResponse['00404034']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Actual Human Performers Sequence
  get ActualHumanPerformersSequence(): Array<Dataset> | undefined {
    return this.x00404035;
  }

  get x00404035(): Array<Dataset> | undefined {
    const element = this.dwResponse['00404035'];
    return this.dwResponse['00404035']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Human Performer's Organization
  get HumanPerformerOrganization(): string | undefined {
    return this.x00404036;
  }

  get x00404036(): string | undefined {
    const element = this.dwResponse['00404036'];
    return this.dwResponse['00404036']?.Value[0];
  }

  // Human Performer's Name
  get HumanPerformerName(): any | undefined {
    return this.x00404037;
  }

  get x00404037(): any | undefined {
    const element = this.dwResponse['00404037'];
    return this.dwResponse['00404037']?.Value[0];
  }

  // Raw Data Handling
  get RawDataHandling(): string | undefined {
    return this.x00404040;
  }

  get x00404040(): string | undefined {
    const element = this.dwResponse['00404040'];
    return this.dwResponse['00404040']?.Value[0];
  }

  // Input Readiness State
  get InputReadinessState(): string | undefined {
    return this.x00404041;
  }

  get x00404041(): string | undefined {
    const element = this.dwResponse['00404041'];
    return this.dwResponse['00404041']?.Value[0];
  }

  // Performed Procedure Step Start DateTime
  get PerformedProcedureStepStartDateTime(): string | undefined {
    return this.x00404050;
  }

  get x00404050(): string | undefined {
    const element = this.dwResponse['00404050'];
    return this.dwResponse['00404050']?.Value[0];
  }

  // Performed Procedure Step End DateTime
  get PerformedProcedureStepEndDateTime(): string | undefined {
    return this.x00404051;
  }

  get x00404051(): string | undefined {
    const element = this.dwResponse['00404051'];
    return this.dwResponse['00404051']?.Value[0];
  }

  // Procedure Step Cancellation DateTime
  get ProcedureStepCancellationDateTime(): string | undefined {
    return this.x00404052;
  }

  get x00404052(): string | undefined {
    const element = this.dwResponse['00404052'];
    return this.dwResponse['00404052']?.Value[0];
  }

  // Entrance Dose in mGy
  get EntranceDoseInmGy(): number | undefined {
    return this.x00408302;
  }

  get x00408302(): number | undefined {
    const element = this.dwResponse['00408302'];
    return this.dwResponse['00408302']?.Value[0];
  }

  // Referenced Image Real World Value Mapping Sequence
  get ReferencedImageRealWorldValueMappingSequence(): Array<Dataset> | undefined {
    return this.x00409094;
  }

  get x00409094(): Array<Dataset> | undefined {
    const element = this.dwResponse['00409094'];
    return this.dwResponse['00409094']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Real World Value Mapping Sequence
  get RealWorldValueMappingSequence(): Array<Dataset> | undefined {
    return this.x00409096;
  }

  get x00409096(): Array<Dataset> | undefined {
    const element = this.dwResponse['00409096'];
    return this.dwResponse['00409096']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Pixel Value Mapping Code Sequence
  get PixelValueMappingCodeSequence(): Array<Dataset> | undefined {
    return this.x00409098;
  }

  get x00409098(): Array<Dataset> | undefined {
    const element = this.dwResponse['00409098'];
    return this.dwResponse['00409098']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // LUT Label
  get LUTLabel(): string | undefined {
    return this.x00409210;
  }

  get x00409210(): string | undefined {
    const element = this.dwResponse['00409210'];
    return this.dwResponse['00409210']?.Value[0];
  }

  // Real World Value Last Value Mapped
  get RealWorldValueLastValueMapped(): number | undefined {
    return this.x00409211;
  }

  get x00409211(): number | undefined {
    const element = this.dwResponse['00409211'];
    return this.dwResponse['00409211']?.Value[0];
  }

  // Real World Value LUT Data
  get RealWorldValueLUTData(): Array<number> | undefined {
    return this.x00409212;
  }

  get x00409212(): Array<number> | undefined {
    const element = this.dwResponse['00409212'];
    return this.dwResponse['00409212']?.Value;
  }

  // Real World Value First Value Mapped
  get RealWorldValueFirstValueMapped(): number | undefined {
    return this.x00409216;
  }

  get x00409216(): number | undefined {
    const element = this.dwResponse['00409216'];
    return this.dwResponse['00409216']?.Value[0];
  }

  // Real World Value Intercept
  get RealWorldValueIntercept(): number | undefined {
    return this.x00409224;
  }

  get x00409224(): number | undefined {
    const element = this.dwResponse['00409224'];
    return this.dwResponse['00409224']?.Value[0];
  }

  // Real World Value Slope
  get RealWorldValueSlope(): number | undefined {
    return this.x00409225;
  }

  get x00409225(): number | undefined {
    const element = this.dwResponse['00409225'];
    return this.dwResponse['00409225']?.Value[0];
  }

  // Findings Flag (Trial)
  get FindingsFlagTrial(): string | undefined {
    return this.x0040a007;
  }

  get x0040a007(): string | undefined {
    const element = this.dwResponse['0040a007'];
    return this.dwResponse['0040a007']?.Value[0];
  }

  // Relationship Type
  get RelationshipType(): string | undefined {
    return this.x0040a010;
  }

  get x0040a010(): string | undefined {
    const element = this.dwResponse['0040a010'];
    return this.dwResponse['0040a010']?.Value[0];
  }

  // Findings Sequence (Trial)
  get FindingsSequenceTrial(): Array<Dataset> | undefined {
    return this.x0040a020;
  }

  get x0040a020(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a020'];
    return this.dwResponse['0040a020']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Findings Group UID (Trial)
  get FindingsGroupUIDTrial(): string | undefined {
    return this.x0040a021;
  }

  get x0040a021(): string | undefined {
    const element = this.dwResponse['0040a021'];
    return this.dwResponse['0040a021']?.Value[0];
  }

  // Referenced Findings Group UID (Trial)
  get ReferencedFindingsGroupUIDTrial(): string | undefined {
    return this.x0040a022;
  }

  get x0040a022(): string | undefined {
    const element = this.dwResponse['0040a022'];
    return this.dwResponse['0040a022']?.Value[0];
  }

  // Findings Group Recording Date (Trial)
  get FindingsGroupRecordingDateTrial(): Date | undefined {
    return this.x0040a023;
  }

  get x0040a023(): Date | undefined {
    const element = this.dwResponse['0040a023'];
    return this.dwResponse['0040a023']?.Value[0];
  }

  // Findings Group Recording Time (Trial)
  get FindingsGroupRecordingTimeTrial(): string | undefined {
    return this.x0040a024;
  }

  get x0040a024(): string | undefined {
    const element = this.dwResponse['0040a024'];
    return this.dwResponse['0040a024']?.Value[0];
  }

  // Findings Source Category Code Sequence (Trial)
  get FindingsSourceCategoryCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x0040a026;
  }

  get x0040a026(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a026'];
    return this.dwResponse['0040a026']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Verifying Organization
  get VerifyingOrganization(): string | undefined {
    return this.x0040a027;
  }

  get x0040a027(): string | undefined {
    const element = this.dwResponse['0040a027'];
    return this.dwResponse['0040a027']?.Value[0];
  }

  // Documenting Organization Identifier Code Sequence (Trial)
  get DocumentingOrganizationIdentifierCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x0040a028;
  }

  get x0040a028(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a028'];
    return this.dwResponse['0040a028']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Verification DateTime
  get VerificationDateTime(): string | undefined {
    return this.x0040a030;
  }

  get x0040a030(): string | undefined {
    const element = this.dwResponse['0040a030'];
    return this.dwResponse['0040a030']?.Value[0];
  }

  // Observation DateTime
  get ObservationDateTime(): string | undefined {
    return this.x0040a032;
  }

  get x0040a032(): string | undefined {
    const element = this.dwResponse['0040a032'];
    return this.dwResponse['0040a032']?.Value[0];
  }

  // Value Type
  get ValueType(): string | undefined {
    return this.x0040a040;
  }

  get x0040a040(): string | undefined {
    const element = this.dwResponse['0040a040'];
    return this.dwResponse['0040a040']?.Value[0];
  }

  // Concept Name Code Sequence
  get ConceptNameCodeSequence(): Array<Dataset> | undefined {
    return this.x0040a043;
  }

  get x0040a043(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a043'];
    return this.dwResponse['0040a043']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Measurement Precision Description (Trial)
  get MeasurementPrecisionDescriptionTrial(): string | undefined {
    return this.x0040a047;
  }

  get x0040a047(): string | undefined {
    const element = this.dwResponse['0040a047'];
    return this.dwResponse['0040a047']?.Value[0];
  }

  // Continuity Of Content
  get ContinuityOfContent(): string | undefined {
    return this.x0040a050;
  }

  get x0040a050(): string | undefined {
    const element = this.dwResponse['0040a050'];
    return this.dwResponse['0040a050']?.Value[0];
  }

  // Urgency or Priority Alerts (Trial)
  get UrgencyOrPriorityAlertsTrial(): Array<string> | undefined {
    return this.x0040a057;
  }

  get x0040a057(): Array<string> | undefined {
    const element = this.dwResponse['0040a057'];
    return this.dwResponse['0040a057']?.Value;
  }

  // Sequencing Indicator (Trial)
  get SequencingIndicatorTrial(): string | undefined {
    return this.x0040a060;
  }

  get x0040a060(): string | undefined {
    const element = this.dwResponse['0040a060'];
    return this.dwResponse['0040a060']?.Value[0];
  }

  // Document Identifier Code Sequence (Trial)
  get DocumentIdentifierCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x0040a066;
  }

  get x0040a066(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a066'];
    return this.dwResponse['0040a066']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Document Author (Trial)
  get DocumentAuthorTrial(): any | undefined {
    return this.x0040a067;
  }

  get x0040a067(): any | undefined {
    const element = this.dwResponse['0040a067'];
    return this.dwResponse['0040a067']?.Value[0];
  }

  // Document Author Identifier Code Sequence (Trial)
  get DocumentAuthorIdentifierCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x0040a068;
  }

  get x0040a068(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a068'];
    return this.dwResponse['0040a068']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Identifier Code Sequence (Trial)
  get IdentifierCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x0040a070;
  }

  get x0040a070(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a070'];
    return this.dwResponse['0040a070']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Verifying Observer Sequence
  get VerifyingObserverSequence(): Array<Dataset> | undefined {
    return this.x0040a073;
  }

  get x0040a073(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a073'];
    return this.dwResponse['0040a073']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Verifying Observer Name
  get VerifyingObserverName(): any | undefined {
    return this.x0040a075;
  }

  get x0040a075(): any | undefined {
    const element = this.dwResponse['0040a075'];
    return this.dwResponse['0040a075']?.Value[0];
  }

  // Documenting Observer Identifier Code Sequence (Trial)
  get DocumentingObserverIdentifierCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x0040a076;
  }

  get x0040a076(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a076'];
    return this.dwResponse['0040a076']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Author Observer Sequence
  get AuthorObserverSequence(): Array<Dataset> | undefined {
    return this.x0040a078;
  }

  get x0040a078(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a078'];
    return this.dwResponse['0040a078']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Participant Sequence
  get ParticipantSequence(): Array<Dataset> | undefined {
    return this.x0040a07a;
  }

  get x0040a07a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a07a'];
    return this.dwResponse['0040a07a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Custodial Organization Sequence
  get CustodialOrganizationSequence(): Array<Dataset> | undefined {
    return this.x0040a07c;
  }

  get x0040a07c(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a07c'];
    return this.dwResponse['0040a07c']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Participation Type
  get ParticipationType(): string | undefined {
    return this.x0040a080;
  }

  get x0040a080(): string | undefined {
    const element = this.dwResponse['0040a080'];
    return this.dwResponse['0040a080']?.Value[0];
  }

  // Participation DateTime
  get ParticipationDateTime(): string | undefined {
    return this.x0040a082;
  }

  get x0040a082(): string | undefined {
    const element = this.dwResponse['0040a082'];
    return this.dwResponse['0040a082']?.Value[0];
  }

  // Observer Type
  get ObserverType(): string | undefined {
    return this.x0040a084;
  }

  get x0040a084(): string | undefined {
    const element = this.dwResponse['0040a084'];
    return this.dwResponse['0040a084']?.Value[0];
  }

  // Procedure Identifier Code Sequence (Trial)
  get ProcedureIdentifierCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x0040a085;
  }

  get x0040a085(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a085'];
    return this.dwResponse['0040a085']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Verifying Observer Identification Code Sequence
  get VerifyingObserverIdentificationCodeSequence(): Array<Dataset> | undefined {
    return this.x0040a088;
  }

  get x0040a088(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a088'];
    return this.dwResponse['0040a088']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Equivalent CDA Document Sequence
  get EquivalentCDADocumentSequence(): Array<Dataset> | undefined {
    return this.x0040a090;
  }

  get x0040a090(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a090'];
    return this.dwResponse['0040a090']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Waveform Channels
  get ReferencedWaveformChannels(): Array<number> | undefined {
    return this.x0040a0b0;
  }

  get x0040a0b0(): Array<number> | undefined {
    const element = this.dwResponse['0040a0b0'];
    return this.dwResponse['0040a0b0']?.Value;
  }

  // Date of Document or Verbal Transaction (Trial)
  get DateOfDocumentOrVerbalTransactionTrial(): Date | undefined {
    return this.x0040a110;
  }

  get x0040a110(): Date | undefined {
    const element = this.dwResponse['0040a110'];
    return this.dwResponse['0040a110']?.Value[0];
  }

  // Time of Document Creation or Verbal Transaction (Trial)
  get TimeOfDocumentCreationOrVerbalTransactionTrial(): string | undefined {
    return this.x0040a112;
  }

  get x0040a112(): string | undefined {
    const element = this.dwResponse['0040a112'];
    return this.dwResponse['0040a112']?.Value[0];
  }

  // DateTime
  get DateTime(): string | undefined {
    return this.x0040a120;
  }

  get x0040a120(): string | undefined {
    const element = this.dwResponse['0040a120'];
    return this.dwResponse['0040a120']?.Value[0];
  }

  // Date
  get Date(): Date | undefined {
    return this.x0040a121;
  }

  get x0040a121(): Date | undefined {
    const element = this.dwResponse['0040a121'];
    return this.dwResponse['0040a121']?.Value[0];
  }

  // Time
  get Time(): string | undefined {
    return this.x0040a122;
  }

  get x0040a122(): string | undefined {
    const element = this.dwResponse['0040a122'];
    return this.dwResponse['0040a122']?.Value[0];
  }

  // Person Name
  get PersonName(): any | undefined {
    return this.x0040a123;
  }

  get x0040a123(): any | undefined {
    const element = this.dwResponse['0040a123'];
    return this.dwResponse['0040a123']?.Value[0];
  }

  // UID
  get UID(): string | undefined {
    return this.x0040a124;
  }

  get x0040a124(): string | undefined {
    const element = this.dwResponse['0040a124'];
    return this.dwResponse['0040a124']?.Value[0];
  }

  // Report Status ID (Trial)
  get ReportStatusIDTrial(): Array<string> | undefined {
    return this.x0040a125;
  }

  get x0040a125(): Array<string> | undefined {
    const element = this.dwResponse['0040a125'];
    return this.dwResponse['0040a125']?.Value;
  }

  // Temporal Range Type
  get TemporalRangeType(): string | undefined {
    return this.x0040a130;
  }

  get x0040a130(): string | undefined {
    const element = this.dwResponse['0040a130'];
    return this.dwResponse['0040a130']?.Value[0];
  }

  // Referenced Sample Positions
  get ReferencedSamplePositions(): Array<number> | undefined {
    return this.x0040a132;
  }

  get x0040a132(): Array<number> | undefined {
    const element = this.dwResponse['0040a132'];
    return this.dwResponse['0040a132']?.Value;
  }

  // Referenced Frame Numbers
  get ReferencedFrameNumbers(): Array<number> | undefined {
    return this.x0040a136;
  }

  get x0040a136(): Array<number> | undefined {
    const element = this.dwResponse['0040a136'];
    return this.dwResponse['0040a136']?.Value;
  }

  // Referenced Time Offsets
  get ReferencedTimeOffsets(): Array<number> | undefined {
    return this.x0040a138;
  }

  get x0040a138(): Array<number> | undefined {
    const element = this.dwResponse['0040a138'];
    return this.dwResponse['0040a138']?.Value;
  }

  // Referenced DateTime
  get ReferencedDateTime(): Array<string> | undefined {
    return this.x0040a13a;
  }

  get x0040a13a(): Array<string> | undefined {
    const element = this.dwResponse['0040a13a'];
    return this.dwResponse['0040a13a']?.Value;
  }

  // Floating Point Value
  get FloatingPointValue(): Array<number> | undefined {
    return this.x0040a161;
  }

  get x0040a161(): Array<number> | undefined {
    const element = this.dwResponse['0040a161'];
    return this.dwResponse['0040a161']?.Value;
  }

  // Rational Numerator Value
  get RationalNumeratorValue(): Array<number> | undefined {
    return this.x0040a162;
  }

  get x0040a162(): Array<number> | undefined {
    const element = this.dwResponse['0040a162'];
    return this.dwResponse['0040a162']?.Value;
  }

  // Rational Denominator Value
  get RationalDenominatorValue(): Array<number> | undefined {
    return this.x0040a163;
  }

  get x0040a163(): Array<number> | undefined {
    const element = this.dwResponse['0040a163'];
    return this.dwResponse['0040a163']?.Value;
  }

  // Observation Category Code Sequence (Trial)
  get ObservationCategoryCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x0040a167;
  }

  get x0040a167(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a167'];
    return this.dwResponse['0040a167']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Concept Code Sequence
  get ConceptCodeSequence(): Array<Dataset> | undefined {
    return this.x0040a168;
  }

  get x0040a168(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a168'];
    return this.dwResponse['0040a168']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Purpose of Reference Code Sequence
  get PurposeOfReferenceCodeSequence(): Array<Dataset> | undefined {
    return this.x0040a170;
  }

  get x0040a170(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a170'];
    return this.dwResponse['0040a170']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Observation UID
  get ObservationUID(): string | undefined {
    return this.x0040a171;
  }

  get x0040a171(): string | undefined {
    const element = this.dwResponse['0040a171'];
    return this.dwResponse['0040a171']?.Value[0];
  }

  // Referenced Observation UID (Trial)
  get ReferencedObservationUIDTrial(): string | undefined {
    return this.x0040a172;
  }

  get x0040a172(): string | undefined {
    const element = this.dwResponse['0040a172'];
    return this.dwResponse['0040a172']?.Value[0];
  }

  // Referenced Observation Class (Trial)
  get ReferencedObservationClassTrial(): string | undefined {
    return this.x0040a173;
  }

  get x0040a173(): string | undefined {
    const element = this.dwResponse['0040a173'];
    return this.dwResponse['0040a173']?.Value[0];
  }

  // Referenced Object Observation Class (Trial)
  get ReferencedObjectObservationClassTrial(): string | undefined {
    return this.x0040a174;
  }

  get x0040a174(): string | undefined {
    const element = this.dwResponse['0040a174'];
    return this.dwResponse['0040a174']?.Value[0];
  }

  // Annotation Group Number
  get AnnotationGroupNumber(): number | undefined {
    return this.x0040a180;
  }

  get x0040a180(): number | undefined {
    const element = this.dwResponse['0040a180'];
    return this.dwResponse['0040a180']?.Value[0];
  }

  // Observation Date (Trial)
  get ObservationDateTrial(): Date | undefined {
    return this.x0040a192;
  }

  get x0040a192(): Date | undefined {
    const element = this.dwResponse['0040a192'];
    return this.dwResponse['0040a192']?.Value[0];
  }

  // Observation Time (Trial)
  get ObservationTimeTrial(): string | undefined {
    return this.x0040a193;
  }

  get x0040a193(): string | undefined {
    const element = this.dwResponse['0040a193'];
    return this.dwResponse['0040a193']?.Value[0];
  }

  // Measurement Automation (Trial)
  get MeasurementAutomationTrial(): string | undefined {
    return this.x0040a194;
  }

  get x0040a194(): string | undefined {
    const element = this.dwResponse['0040a194'];
    return this.dwResponse['0040a194']?.Value[0];
  }

  // Modifier Code Sequence
  get ModifierCodeSequence(): Array<Dataset> | undefined {
    return this.x0040a195;
  }

  get x0040a195(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a195'];
    return this.dwResponse['0040a195']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Coordinates Set Geometric Type (Trial)
  get CoordinatesSetGeometricTypeTrial(): string | undefined {
    return this.x0040a290;
  }

  get x0040a290(): string | undefined {
    const element = this.dwResponse['0040a290'];
    return this.dwResponse['0040a290']?.Value[0];
  }

  // Algorithm Code Sequence (Trial)
  get AlgorithmCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x0040a296;
  }

  get x0040a296(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a296'];
    return this.dwResponse['0040a296']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Pixel Coordinates Set (Trial)
  get PixelCoordinatesSetTrial(): Array<number> | undefined {
    return this.x0040a29a;
  }

  get x0040a29a(): Array<number> | undefined {
    const element = this.dwResponse['0040a29a'];
    return this.dwResponse['0040a29a']?.Value;
  }

  // Measured Value Sequence
  get MeasuredValueSequence(): Array<Dataset> | undefined {
    return this.x0040a300;
  }

  get x0040a300(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a300'];
    return this.dwResponse['0040a300']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Numeric Value Qualifier Code Sequence
  get NumericValueQualifierCodeSequence(): Array<Dataset> | undefined {
    return this.x0040a301;
  }

  get x0040a301(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a301'];
    return this.dwResponse['0040a301']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Current Observer (Trial)
  get CurrentObserverTrial(): any | undefined {
    return this.x0040a307;
  }

  get x0040a307(): any | undefined {
    const element = this.dwResponse['0040a307'];
    return this.dwResponse['0040a307']?.Value[0];
  }

  // Numeric Value
  get NumericValue(): Array<number> | undefined {
    return this.x0040a30a;
  }

  get x0040a30a(): Array<number> | undefined {
    const element = this.dwResponse['0040a30a'];
    return this.dwResponse['0040a30a']?.Value;
  }

  // Referenced Accession Sequence (Trial)
  get ReferencedAccessionSequenceTrial(): Array<Dataset> | undefined {
    return this.x0040a313;
  }

  get x0040a313(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a313'];
    return this.dwResponse['0040a313']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Procedure Context Sequence (Trial)
  get ProcedureContextSequenceTrial(): Array<Dataset> | undefined {
    return this.x0040a340;
  }

  get x0040a340(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a340'];
    return this.dwResponse['0040a340']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Verbal Source (Trial)
  get VerbalSourceTrial(): any | undefined {
    return this.x0040a352;
  }

  get x0040a352(): any | undefined {
    const element = this.dwResponse['0040a352'];
    return this.dwResponse['0040a352']?.Value[0];
  }

  // Telephone Number (Trial)
  get TelephoneNumberTrial(): string | undefined {
    return this.x0040a354;
  }

  get x0040a354(): string | undefined {
    const element = this.dwResponse['0040a354'];
    return this.dwResponse['0040a354']?.Value[0];
  }

  // Verbal Source Identifier Code Sequence (Trial)
  get VerbalSourceIdentifierCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x0040a358;
  }

  get x0040a358(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a358'];
    return this.dwResponse['0040a358']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Predecessor Documents Sequence
  get PredecessorDocumentsSequence(): Array<Dataset> | undefined {
    return this.x0040a360;
  }

  get x0040a360(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a360'];
    return this.dwResponse['0040a360']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Request Sequence
  get ReferencedRequestSequence(): Array<Dataset> | undefined {
    return this.x0040a370;
  }

  get x0040a370(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a370'];
    return this.dwResponse['0040a370']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Performed Procedure Code Sequence
  get PerformedProcedureCodeSequence(): Array<Dataset> | undefined {
    return this.x0040a372;
  }

  get x0040a372(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a372'];
    return this.dwResponse['0040a372']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Current Requested Procedure Evidence Sequence
  get CurrentRequestedProcedureEvidenceSequence(): Array<Dataset> | undefined {
    return this.x0040a375;
  }

  get x0040a375(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a375'];
    return this.dwResponse['0040a375']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Report Detail Sequence (Trial)
  get ReportDetailSequenceTrial(): Array<Dataset> | undefined {
    return this.x0040a380;
  }

  get x0040a380(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a380'];
    return this.dwResponse['0040a380']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Pertinent Other Evidence Sequence
  get PertinentOtherEvidenceSequence(): Array<Dataset> | undefined {
    return this.x0040a385;
  }

  get x0040a385(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a385'];
    return this.dwResponse['0040a385']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // HL7 Structured Document Reference Sequence
  get HL7StructuredDocumentReferenceSequence(): Array<Dataset> | undefined {
    return this.x0040a390;
  }

  get x0040a390(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a390'];
    return this.dwResponse['0040a390']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Observation Subject UID (Trial)
  get ObservationSubjectUIDTrial(): string | undefined {
    return this.x0040a402;
  }

  get x0040a402(): string | undefined {
    const element = this.dwResponse['0040a402'];
    return this.dwResponse['0040a402']?.Value[0];
  }

  // Observation Subject Class (Trial)
  get ObservationSubjectClassTrial(): string | undefined {
    return this.x0040a403;
  }

  get x0040a403(): string | undefined {
    const element = this.dwResponse['0040a403'];
    return this.dwResponse['0040a403']?.Value[0];
  }

  // Observation Subject Type Code Sequence (Trial)
  get ObservationSubjectTypeCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x0040a404;
  }

  get x0040a404(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a404'];
    return this.dwResponse['0040a404']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Completion Flag
  get CompletionFlag(): string | undefined {
    return this.x0040a491;
  }

  get x0040a491(): string | undefined {
    const element = this.dwResponse['0040a491'];
    return this.dwResponse['0040a491']?.Value[0];
  }

  // Completion Flag Description
  get CompletionFlagDescription(): string | undefined {
    return this.x0040a492;
  }

  get x0040a492(): string | undefined {
    const element = this.dwResponse['0040a492'];
    return this.dwResponse['0040a492']?.Value[0];
  }

  // Verification Flag
  get VerificationFlag(): string | undefined {
    return this.x0040a493;
  }

  get x0040a493(): string | undefined {
    const element = this.dwResponse['0040a493'];
    return this.dwResponse['0040a493']?.Value[0];
  }

  // Archive Requested
  get ArchiveRequested(): string | undefined {
    return this.x0040a494;
  }

  get x0040a494(): string | undefined {
    const element = this.dwResponse['0040a494'];
    return this.dwResponse['0040a494']?.Value[0];
  }

  // Preliminary Flag
  get PreliminaryFlag(): string | undefined {
    return this.x0040a496;
  }

  get x0040a496(): string | undefined {
    const element = this.dwResponse['0040a496'];
    return this.dwResponse['0040a496']?.Value[0];
  }

  // Content Template Sequence
  get ContentTemplateSequence(): Array<Dataset> | undefined {
    return this.x0040a504;
  }

  get x0040a504(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a504'];
    return this.dwResponse['0040a504']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Identical Documents Sequence
  get IdenticalDocumentsSequence(): Array<Dataset> | undefined {
    return this.x0040a525;
  }

  get x0040a525(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a525'];
    return this.dwResponse['0040a525']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Observation Subject Context Flag (Trial)
  get ObservationSubjectContextFlagTrial(): string | undefined {
    return this.x0040a600;
  }

  get x0040a600(): string | undefined {
    const element = this.dwResponse['0040a600'];
    return this.dwResponse['0040a600']?.Value[0];
  }

  // Observer Context Flag (Trial)
  get ObserverContextFlagTrial(): string | undefined {
    return this.x0040a601;
  }

  get x0040a601(): string | undefined {
    const element = this.dwResponse['0040a601'];
    return this.dwResponse['0040a601']?.Value[0];
  }

  // Procedure Context Flag (Trial)
  get ProcedureContextFlagTrial(): string | undefined {
    return this.x0040a603;
  }

  get x0040a603(): string | undefined {
    const element = this.dwResponse['0040a603'];
    return this.dwResponse['0040a603']?.Value[0];
  }

  // Content Sequence
  get ContentSequence(): Array<Dataset> | undefined {
    return this.x0040a730;
  }

  get x0040a730(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a730'];
    return this.dwResponse['0040a730']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Relationship Sequence (Trial)
  get RelationshipSequenceTrial(): Array<Dataset> | undefined {
    return this.x0040a731;
  }

  get x0040a731(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a731'];
    return this.dwResponse['0040a731']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Relationship Type Code Sequence (Trial)
  get RelationshipTypeCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x0040a732;
  }

  get x0040a732(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a732'];
    return this.dwResponse['0040a732']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Language Code Sequence (Trial)
  get LanguageCodeSequenceTrial(): Array<Dataset> | undefined {
    return this.x0040a744;
  }

  get x0040a744(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040a744'];
    return this.dwResponse['0040a744']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Waveform Annotation Sequence
  get WaveformAnnotationSequence(): Array<Dataset> | undefined {
    return this.x0040b020;
  }

  get x0040b020(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040b020'];
    return this.dwResponse['0040b020']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Template Identifier
  get TemplateIdentifier(): string | undefined {
    return this.x0040db00;
  }

  get x0040db00(): string | undefined {
    const element = this.dwResponse['0040db00'];
    return this.dwResponse['0040db00']?.Value[0];
  }

  // Template Version
  get TemplateVersion(): string | undefined {
    return this.x0040db06;
  }

  get x0040db06(): string | undefined {
    const element = this.dwResponse['0040db06'];
    return this.dwResponse['0040db06']?.Value[0];
  }

  // Template Local Version
  get TemplateLocalVersion(): string | undefined {
    return this.x0040db07;
  }

  get x0040db07(): string | undefined {
    const element = this.dwResponse['0040db07'];
    return this.dwResponse['0040db07']?.Value[0];
  }

  // Template Extension Flag
  get TemplateExtensionFlag(): string | undefined {
    return this.x0040db0b;
  }

  get x0040db0b(): string | undefined {
    const element = this.dwResponse['0040db0b'];
    return this.dwResponse['0040db0b']?.Value[0];
  }

  // Template Extension Organization UID
  get TemplateExtensionOrganizationUID(): string | undefined {
    return this.x0040db0c;
  }

  get x0040db0c(): string | undefined {
    const element = this.dwResponse['0040db0c'];
    return this.dwResponse['0040db0c']?.Value[0];
  }

  // Template Extension Creator UID
  get TemplateExtensionCreatorUID(): string | undefined {
    return this.x0040db0d;
  }

  get x0040db0d(): string | undefined {
    const element = this.dwResponse['0040db0d'];
    return this.dwResponse['0040db0d']?.Value[0];
  }

  // Referenced Content Item Identifier
  get ReferencedContentItemIdentifier(): Array<number> | undefined {
    return this.x0040db73;
  }

  get x0040db73(): Array<number> | undefined {
    const element = this.dwResponse['0040db73'];
    return this.dwResponse['0040db73']?.Value;
  }

  // HL7 Document Effective Time
  get HL7DocumentEffectiveTime(): string | undefined {
    return this.x0040e004;
  }

  get x0040e004(): string | undefined {
    const element = this.dwResponse['0040e004'];
    return this.dwResponse['0040e004']?.Value[0];
  }

  // HL7 Document Type Code Sequence
  get HL7DocumentTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x0040e006;
  }

  get x0040e006(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040e006'];
    return this.dwResponse['0040e006']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Document Class Code Sequence
  get DocumentClassCodeSequence(): Array<Dataset> | undefined {
    return this.x0040e008;
  }

  get x0040e008(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040e008'];
    return this.dwResponse['0040e008']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Retrieve Location UID
  get RetrieveLocationUID(): string | undefined {
    return this.x0040e011;
  }

  get x0040e011(): string | undefined {
    const element = this.dwResponse['0040e011'];
    return this.dwResponse['0040e011']?.Value[0];
  }

  // Type of Instances
  get TypeOfInstances(): string | undefined {
    return this.x0040e020;
  }

  get x0040e020(): string | undefined {
    const element = this.dwResponse['0040e020'];
    return this.dwResponse['0040e020']?.Value[0];
  }

  // DICOM Retrieval Sequence
  get DICOMRetrievalSequence(): Array<Dataset> | undefined {
    return this.x0040e021;
  }

  get x0040e021(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040e021'];
    return this.dwResponse['0040e021']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // DICOM Media Retrieval Sequence
  get DICOMMediaRetrievalSequence(): Array<Dataset> | undefined {
    return this.x0040e022;
  }

  get x0040e022(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040e022'];
    return this.dwResponse['0040e022']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // WADO Retrieval Sequence
  get WADORetrievalSequence(): Array<Dataset> | undefined {
    return this.x0040e023;
  }

  get x0040e023(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040e023'];
    return this.dwResponse['0040e023']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // XDS Retrieval Sequence
  get XDSRetrievalSequence(): Array<Dataset> | undefined {
    return this.x0040e024;
  }

  get x0040e024(): Array<Dataset> | undefined {
    const element = this.dwResponse['0040e024'];
    return this.dwResponse['0040e024']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Repository Unique ID
  get RepositoryUniqueID(): string | undefined {
    return this.x0040e030;
  }

  get x0040e030(): string | undefined {
    const element = this.dwResponse['0040e030'];
    return this.dwResponse['0040e030']?.Value[0];
  }

  // Home Community ID
  get HomeCommunityID(): string | undefined {
    return this.x0040e031;
  }

  get x0040e031(): string | undefined {
    const element = this.dwResponse['0040e031'];
    return this.dwResponse['0040e031']?.Value[0];
  }

  // MIME Type of Encapsulated Document
  get MIMETypeOfEncapsulatedDocument(): string | undefined {
    return this.x00420012;
  }

  get x00420012(): string | undefined {
    const element = this.dwResponse['00420012'];
    return this.dwResponse['00420012']?.Value[0];
  }

  // Source Instance Sequence
  get SourceInstanceSequence(): Array<Dataset> | undefined {
    return this.x00420013;
  }

  get x00420013(): Array<Dataset> | undefined {
    const element = this.dwResponse['00420013'];
    return this.dwResponse['00420013']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // List of MIME Types
  get ListOfMIMETypes(): Array<string> | undefined {
    return this.x00420014;
  }

  get x00420014(): Array<string> | undefined {
    const element = this.dwResponse['00420014'];
    return this.dwResponse['00420014']?.Value;
  }

  // Substance Administration Approval
  get SubstanceAdministrationApproval(): string | undefined {
    return this.x00440002;
  }

  get x00440002(): string | undefined {
    const element = this.dwResponse['00440002'];
    return this.dwResponse['00440002']?.Value[0];
  }

  // Approval Status DateTime
  get ApprovalStatusDateTime(): string | undefined {
    return this.x00440004;
  }

  get x00440004(): string | undefined {
    const element = this.dwResponse['00440004'];
    return this.dwResponse['00440004']?.Value[0];
  }

  // Product Type Code Sequence
  get ProductTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x00440007;
  }

  get x00440007(): Array<Dataset> | undefined {
    const element = this.dwResponse['00440007'];
    return this.dwResponse['00440007']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Product Name
  get ProductName(): Array<string> | undefined {
    return this.x00440008;
  }

  get x00440008(): Array<string> | undefined {
    const element = this.dwResponse['00440008'];
    return this.dwResponse['00440008']?.Value;
  }

  // Product Lot Identifier
  get ProductLotIdentifier(): string | undefined {
    return this.x0044000a;
  }

  get x0044000a(): string | undefined {
    const element = this.dwResponse['0044000a'];
    return this.dwResponse['0044000a']?.Value[0];
  }

  // Product Expiration DateTime
  get ProductExpirationDateTime(): string | undefined {
    return this.x0044000b;
  }

  get x0044000b(): string | undefined {
    const element = this.dwResponse['0044000b'];
    return this.dwResponse['0044000b']?.Value[0];
  }

  // Substance Administration DateTime
  get SubstanceAdministrationDateTime(): string | undefined {
    return this.x00440010;
  }

  get x00440010(): string | undefined {
    const element = this.dwResponse['00440010'];
    return this.dwResponse['00440010']?.Value[0];
  }

  // Substance Administration Notes
  get SubstanceAdministrationNotes(): string | undefined {
    return this.x00440011;
  }

  get x00440011(): string | undefined {
    const element = this.dwResponse['00440011'];
    return this.dwResponse['00440011']?.Value[0];
  }

  // Substance Administration Device ID
  get SubstanceAdministrationDeviceID(): string | undefined {
    return this.x00440012;
  }

  get x00440012(): string | undefined {
    const element = this.dwResponse['00440012'];
    return this.dwResponse['00440012']?.Value[0];
  }

  // Product Parameter Sequence
  get ProductParameterSequence(): Array<Dataset> | undefined {
    return this.x00440013;
  }

  get x00440013(): Array<Dataset> | undefined {
    const element = this.dwResponse['00440013'];
    return this.dwResponse['00440013']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Substance Administration Parameter Sequence
  get SubstanceAdministrationParameterSequence(): Array<Dataset> | undefined {
    return this.x00440019;
  }

  get x00440019(): Array<Dataset> | undefined {
    const element = this.dwResponse['00440019'];
    return this.dwResponse['00440019']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Lens Description
  get LensDescription(): string | undefined {
    return this.x00460012;
  }

  get x00460012(): string | undefined {
    const element = this.dwResponse['00460012'];
    return this.dwResponse['00460012']?.Value[0];
  }

  // Right Lens Sequence
  get RightLensSequence(): Array<Dataset> | undefined {
    return this.x00460014;
  }

  get x00460014(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460014'];
    return this.dwResponse['00460014']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Left Lens Sequence
  get LeftLensSequence(): Array<Dataset> | undefined {
    return this.x00460015;
  }

  get x00460015(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460015'];
    return this.dwResponse['00460015']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Unspecified Laterality Lens Sequence
  get UnspecifiedLateralityLensSequence(): Array<Dataset> | undefined {
    return this.x00460016;
  }

  get x00460016(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460016'];
    return this.dwResponse['00460016']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Cylinder Sequence
  get CylinderSequence(): Array<Dataset> | undefined {
    return this.x00460018;
  }

  get x00460018(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460018'];
    return this.dwResponse['00460018']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Prism Sequence
  get PrismSequence(): Array<Dataset> | undefined {
    return this.x00460028;
  }

  get x00460028(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460028'];
    return this.dwResponse['00460028']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Horizontal Prism Power
  get HorizontalPrismPower(): number | undefined {
    return this.x00460030;
  }

  get x00460030(): number | undefined {
    const element = this.dwResponse['00460030'];
    return this.dwResponse['00460030']?.Value[0];
  }

  // Horizontal Prism Base
  get HorizontalPrismBase(): string | undefined {
    return this.x00460032;
  }

  get x00460032(): string | undefined {
    const element = this.dwResponse['00460032'];
    return this.dwResponse['00460032']?.Value[0];
  }

  // Vertical Prism Power
  get VerticalPrismPower(): number | undefined {
    return this.x00460034;
  }

  get x00460034(): number | undefined {
    const element = this.dwResponse['00460034'];
    return this.dwResponse['00460034']?.Value[0];
  }

  // Vertical Prism Base
  get VerticalPrismBase(): string | undefined {
    return this.x00460036;
  }

  get x00460036(): string | undefined {
    const element = this.dwResponse['00460036'];
    return this.dwResponse['00460036']?.Value[0];
  }

  // Lens Segment Type
  get LensSegmentType(): string | undefined {
    return this.x00460038;
  }

  get x00460038(): string | undefined {
    const element = this.dwResponse['00460038'];
    return this.dwResponse['00460038']?.Value[0];
  }

  // Optical Transmittance
  get OpticalTransmittance(): number | undefined {
    return this.x00460040;
  }

  get x00460040(): number | undefined {
    const element = this.dwResponse['00460040'];
    return this.dwResponse['00460040']?.Value[0];
  }

  // Channel Width
  get ChannelWidth(): number | undefined {
    return this.x00460042;
  }

  get x00460042(): number | undefined {
    const element = this.dwResponse['00460042'];
    return this.dwResponse['00460042']?.Value[0];
  }

  // Pupil Size
  get PupilSize(): number | undefined {
    return this.x00460044;
  }

  get x00460044(): number | undefined {
    const element = this.dwResponse['00460044'];
    return this.dwResponse['00460044']?.Value[0];
  }

  // Corneal Size
  get CornealSize(): number | undefined {
    return this.x00460046;
  }

  get x00460046(): number | undefined {
    const element = this.dwResponse['00460046'];
    return this.dwResponse['00460046']?.Value[0];
  }

  // Autorefraction Right Eye Sequence
  get AutorefractionRightEyeSequence(): Array<Dataset> | undefined {
    return this.x00460050;
  }

  get x00460050(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460050'];
    return this.dwResponse['00460050']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Autorefraction Left Eye Sequence
  get AutorefractionLeftEyeSequence(): Array<Dataset> | undefined {
    return this.x00460052;
  }

  get x00460052(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460052'];
    return this.dwResponse['00460052']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Distance Pupillary Distance
  get DistancePupillaryDistance(): number | undefined {
    return this.x00460060;
  }

  get x00460060(): number | undefined {
    const element = this.dwResponse['00460060'];
    return this.dwResponse['00460060']?.Value[0];
  }

  // Near Pupillary Distance
  get NearPupillaryDistance(): number | undefined {
    return this.x00460062;
  }

  get x00460062(): number | undefined {
    const element = this.dwResponse['00460062'];
    return this.dwResponse['00460062']?.Value[0];
  }

  // Intermediate Pupillary Distance
  get IntermediatePupillaryDistance(): number | undefined {
    return this.x00460063;
  }

  get x00460063(): number | undefined {
    const element = this.dwResponse['00460063'];
    return this.dwResponse['00460063']?.Value[0];
  }

  // Other Pupillary Distance
  get OtherPupillaryDistance(): number | undefined {
    return this.x00460064;
  }

  get x00460064(): number | undefined {
    const element = this.dwResponse['00460064'];
    return this.dwResponse['00460064']?.Value[0];
  }

  // Keratometry Right Eye Sequence
  get KeratometryRightEyeSequence(): Array<Dataset> | undefined {
    return this.x00460070;
  }

  get x00460070(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460070'];
    return this.dwResponse['00460070']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Keratometry Left Eye Sequence
  get KeratometryLeftEyeSequence(): Array<Dataset> | undefined {
    return this.x00460071;
  }

  get x00460071(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460071'];
    return this.dwResponse['00460071']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Steep Keratometric Axis Sequence
  get SteepKeratometricAxisSequence(): Array<Dataset> | undefined {
    return this.x00460074;
  }

  get x00460074(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460074'];
    return this.dwResponse['00460074']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Radius of Curvature
  get RadiusOfCurvature(): number | undefined {
    return this.x00460075;
  }

  get x00460075(): number | undefined {
    const element = this.dwResponse['00460075'];
    return this.dwResponse['00460075']?.Value[0];
  }

  // Keratometric Power
  get KeratometricPower(): number | undefined {
    return this.x00460076;
  }

  get x00460076(): number | undefined {
    const element = this.dwResponse['00460076'];
    return this.dwResponse['00460076']?.Value[0];
  }

  // Keratometric Axis
  get KeratometricAxis(): number | undefined {
    return this.x00460077;
  }

  get x00460077(): number | undefined {
    const element = this.dwResponse['00460077'];
    return this.dwResponse['00460077']?.Value[0];
  }

  // Flat Keratometric Axis Sequence
  get FlatKeratometricAxisSequence(): Array<Dataset> | undefined {
    return this.x00460080;
  }

  get x00460080(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460080'];
    return this.dwResponse['00460080']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Background Color
  get BackgroundColor(): string | undefined {
    return this.x00460092;
  }

  get x00460092(): string | undefined {
    const element = this.dwResponse['00460092'];
    return this.dwResponse['00460092']?.Value[0];
  }

  // Optotype
  get Optotype(): string | undefined {
    return this.x00460094;
  }

  get x00460094(): string | undefined {
    const element = this.dwResponse['00460094'];
    return this.dwResponse['00460094']?.Value[0];
  }

  // Optotype Presentation
  get OptotypePresentation(): string | undefined {
    return this.x00460095;
  }

  get x00460095(): string | undefined {
    const element = this.dwResponse['00460095'];
    return this.dwResponse['00460095']?.Value[0];
  }

  // Subjective Refraction Right Eye Sequence
  get SubjectiveRefractionRightEyeSequence(): Array<Dataset> | undefined {
    return this.x00460097;
  }

  get x00460097(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460097'];
    return this.dwResponse['00460097']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Subjective Refraction Left Eye Sequence
  get SubjectiveRefractionLeftEyeSequence(): Array<Dataset> | undefined {
    return this.x00460098;
  }

  get x00460098(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460098'];
    return this.dwResponse['00460098']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Add Near Sequence
  get AddNearSequence(): Array<Dataset> | undefined {
    return this.x00460100;
  }

  get x00460100(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460100'];
    return this.dwResponse['00460100']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Add Intermediate Sequence
  get AddIntermediateSequence(): Array<Dataset> | undefined {
    return this.x00460101;
  }

  get x00460101(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460101'];
    return this.dwResponse['00460101']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Add Other Sequence
  get AddOtherSequence(): Array<Dataset> | undefined {
    return this.x00460102;
  }

  get x00460102(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460102'];
    return this.dwResponse['00460102']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Add Power
  get AddPower(): number | undefined {
    return this.x00460104;
  }

  get x00460104(): number | undefined {
    const element = this.dwResponse['00460104'];
    return this.dwResponse['00460104']?.Value[0];
  }

  // Viewing Distance
  get ViewingDistance(): number | undefined {
    return this.x00460106;
  }

  get x00460106(): number | undefined {
    const element = this.dwResponse['00460106'];
    return this.dwResponse['00460106']?.Value[0];
  }

  // Visual Acuity Type Code Sequence
  get VisualAcuityTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x00460121;
  }

  get x00460121(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460121'];
    return this.dwResponse['00460121']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Visual Acuity Right Eye Sequence
  get VisualAcuityRightEyeSequence(): Array<Dataset> | undefined {
    return this.x00460122;
  }

  get x00460122(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460122'];
    return this.dwResponse['00460122']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Visual Acuity Left Eye Sequence
  get VisualAcuityLeftEyeSequence(): Array<Dataset> | undefined {
    return this.x00460123;
  }

  get x00460123(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460123'];
    return this.dwResponse['00460123']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Visual Acuity Both Eyes Open Sequence
  get VisualAcuityBothEyesOpenSequence(): Array<Dataset> | undefined {
    return this.x00460124;
  }

  get x00460124(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460124'];
    return this.dwResponse['00460124']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Viewing Distance Type
  get ViewingDistanceType(): string | undefined {
    return this.x00460125;
  }

  get x00460125(): string | undefined {
    const element = this.dwResponse['00460125'];
    return this.dwResponse['00460125']?.Value[0];
  }

  // Visual Acuity Modifiers
  get VisualAcuityModifiers(): Array<Uint8Array> | undefined {
    return this.x00460135;
  }

  get x00460135(): Array<Uint8Array> | undefined {
    const element = this.dwResponse['00460135'];
    return this.dwResponse['00460135']?.Value;
  }

  // Decimal Visual Acuity
  get DecimalVisualAcuity(): number | undefined {
    return this.x00460137;
  }

  get x00460137(): number | undefined {
    const element = this.dwResponse['00460137'];
    return this.dwResponse['00460137']?.Value[0];
  }

  // Optotype Detailed Definition
  get OptotypeDetailedDefinition(): string | undefined {
    return this.x00460139;
  }

  get x00460139(): string | undefined {
    const element = this.dwResponse['00460139'];
    return this.dwResponse['00460139']?.Value[0];
  }

  // Referenced Refractive Measurements Sequence
  get ReferencedRefractiveMeasurementsSequence(): Array<Dataset> | undefined {
    return this.x00460145;
  }

  get x00460145(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460145'];
    return this.dwResponse['00460145']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Sphere Power
  get SpherePower(): number | undefined {
    return this.x00460146;
  }

  get x00460146(): number | undefined {
    const element = this.dwResponse['00460146'];
    return this.dwResponse['00460146']?.Value[0];
  }

  // Cylinder Power
  get CylinderPower(): number | undefined {
    return this.x00460147;
  }

  get x00460147(): number | undefined {
    const element = this.dwResponse['00460147'];
    return this.dwResponse['00460147']?.Value[0];
  }

  // Corneal Topography Surface
  get CornealTopographySurface(): string | undefined {
    return this.x00460201;
  }

  get x00460201(): string | undefined {
    const element = this.dwResponse['00460201'];
    return this.dwResponse['00460201']?.Value[0];
  }

  // Corneal Vertex Location
  get CornealVertexLocation(): Array<number> | undefined {
    return this.x00460202;
  }

  get x00460202(): Array<number> | undefined {
    const element = this.dwResponse['00460202'];
    return this.dwResponse['00460202']?.Value;
  }

  // Pupil Centroid X-Coordinate
  get PupilCentroidXCoordinate(): number | undefined {
    return this.x00460203;
  }

  get x00460203(): number | undefined {
    const element = this.dwResponse['00460203'];
    return this.dwResponse['00460203']?.Value[0];
  }

  // Pupil Centroid Y-Coordinate
  get PupilCentroidYCoordinate(): number | undefined {
    return this.x00460204;
  }

  get x00460204(): number | undefined {
    const element = this.dwResponse['00460204'];
    return this.dwResponse['00460204']?.Value[0];
  }

  // Equivalent Pupil Radius
  get EquivalentPupilRadius(): number | undefined {
    return this.x00460205;
  }

  get x00460205(): number | undefined {
    const element = this.dwResponse['00460205'];
    return this.dwResponse['00460205']?.Value[0];
  }

  // Corneal Topography Map Type Code Sequence
  get CornealTopographyMapTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x00460207;
  }

  get x00460207(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460207'];
    return this.dwResponse['00460207']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Vertices of the Outline of Pupil
  get VerticesOfTheOutlineOfPupil(): Array<number> | undefined {
    return this.x00460208;
  }

  get x00460208(): Array<number> | undefined {
    const element = this.dwResponse['00460208'];
    return this.dwResponse['00460208']?.Value;
  }

  // Corneal Topography Mapping Normals Sequence
  get CornealTopographyMappingNormalsSequence(): Array<Dataset> | undefined {
    return this.x00460210;
  }

  get x00460210(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460210'];
    return this.dwResponse['00460210']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Maximum Corneal Curvature Sequence
  get MaximumCornealCurvatureSequence(): Array<Dataset> | undefined {
    return this.x00460211;
  }

  get x00460211(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460211'];
    return this.dwResponse['00460211']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Maximum Corneal Curvature
  get MaximumCornealCurvature(): number | undefined {
    return this.x00460212;
  }

  get x00460212(): number | undefined {
    const element = this.dwResponse['00460212'];
    return this.dwResponse['00460212']?.Value[0];
  }

  // Maximum Corneal Curvature Location
  get MaximumCornealCurvatureLocation(): Array<number> | undefined {
    return this.x00460213;
  }

  get x00460213(): Array<number> | undefined {
    const element = this.dwResponse['00460213'];
    return this.dwResponse['00460213']?.Value;
  }

  // Minimum Keratometric Sequence
  get MinimumKeratometricSequence(): Array<Dataset> | undefined {
    return this.x00460215;
  }

  get x00460215(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460215'];
    return this.dwResponse['00460215']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Simulated Keratometric Cylinder Sequence
  get SimulatedKeratometricCylinderSequence(): Array<Dataset> | undefined {
    return this.x00460218;
  }

  get x00460218(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460218'];
    return this.dwResponse['00460218']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Average Corneal Power
  get AverageCornealPower(): number | undefined {
    return this.x00460220;
  }

  get x00460220(): number | undefined {
    const element = this.dwResponse['00460220'];
    return this.dwResponse['00460220']?.Value[0];
  }

  // Corneal I-S Value
  get CornealISValue(): number | undefined {
    return this.x00460224;
  }

  get x00460224(): number | undefined {
    const element = this.dwResponse['00460224'];
    return this.dwResponse['00460224']?.Value[0];
  }

  // Analyzed Area
  get AnalyzedArea(): number | undefined {
    return this.x00460227;
  }

  get x00460227(): number | undefined {
    const element = this.dwResponse['00460227'];
    return this.dwResponse['00460227']?.Value[0];
  }

  // Surface Regularity Index
  get SurfaceRegularityIndex(): number | undefined {
    return this.x00460230;
  }

  get x00460230(): number | undefined {
    const element = this.dwResponse['00460230'];
    return this.dwResponse['00460230']?.Value[0];
  }

  // Surface Asymmetry Index
  get SurfaceAsymmetryIndex(): number | undefined {
    return this.x00460232;
  }

  get x00460232(): number | undefined {
    const element = this.dwResponse['00460232'];
    return this.dwResponse['00460232']?.Value[0];
  }

  // Corneal Eccentricity Index
  get CornealEccentricityIndex(): number | undefined {
    return this.x00460234;
  }

  get x00460234(): number | undefined {
    const element = this.dwResponse['00460234'];
    return this.dwResponse['00460234']?.Value[0];
  }

  // Keratoconus Prediction Index
  get KeratoconusPredictionIndex(): number | undefined {
    return this.x00460236;
  }

  get x00460236(): number | undefined {
    const element = this.dwResponse['00460236'];
    return this.dwResponse['00460236']?.Value[0];
  }

  // Decimal Potential Visual Acuity
  get DecimalPotentialVisualAcuity(): number | undefined {
    return this.x00460238;
  }

  get x00460238(): number | undefined {
    const element = this.dwResponse['00460238'];
    return this.dwResponse['00460238']?.Value[0];
  }

  // Corneal Topography Map Quality Evaluation
  get CornealTopographyMapQualityEvaluation(): string | undefined {
    return this.x00460242;
  }

  get x00460242(): string | undefined {
    const element = this.dwResponse['00460242'];
    return this.dwResponse['00460242']?.Value[0];
  }

  // Source Image Corneal Processed Data Sequence
  get SourceImageCornealProcessedDataSequence(): Array<Dataset> | undefined {
    return this.x00460244;
  }

  get x00460244(): Array<Dataset> | undefined {
    const element = this.dwResponse['00460244'];
    return this.dwResponse['00460244']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Corneal Point Location
  get CornealPointLocation(): Array<number> | undefined {
    return this.x00460247;
  }

  get x00460247(): Array<number> | undefined {
    const element = this.dwResponse['00460247'];
    return this.dwResponse['00460247']?.Value;
  }

  // Corneal Point Estimated
  get CornealPointEstimated(): string | undefined {
    return this.x00460248;
  }

  get x00460248(): string | undefined {
    const element = this.dwResponse['00460248'];
    return this.dwResponse['00460248']?.Value[0];
  }

  // Axial Power
  get AxialPower(): number | undefined {
    return this.x00460249;
  }

  get x00460249(): number | undefined {
    const element = this.dwResponse['00460249'];
    return this.dwResponse['00460249']?.Value[0];
  }

  // Tangential Power
  get TangentialPower(): number | undefined {
    return this.x00460250;
  }

  get x00460250(): number | undefined {
    const element = this.dwResponse['00460250'];
    return this.dwResponse['00460250']?.Value[0];
  }

  // Refractive Power
  get RefractivePower(): number | undefined {
    return this.x00460251;
  }

  get x00460251(): number | undefined {
    const element = this.dwResponse['00460251'];
    return this.dwResponse['00460251']?.Value[0];
  }

  // Relative Elevation
  get RelativeElevation(): number | undefined {
    return this.x00460252;
  }

  get x00460252(): number | undefined {
    const element = this.dwResponse['00460252'];
    return this.dwResponse['00460252']?.Value[0];
  }

  // Corneal Wavefront
  get CornealWavefront(): number | undefined {
    return this.x00460253;
  }

  get x00460253(): number | undefined {
    const element = this.dwResponse['00460253'];
    return this.dwResponse['00460253']?.Value[0];
  }

  // Imaged Volume Width
  get ImagedVolumeWidth(): number | undefined {
    return this.x00480001;
  }

  get x00480001(): number | undefined {
    const element = this.dwResponse['00480001'];
    return this.dwResponse['00480001']?.Value[0];
  }

  // Imaged Volume Height
  get ImagedVolumeHeight(): number | undefined {
    return this.x00480002;
  }

  get x00480002(): number | undefined {
    const element = this.dwResponse['00480002'];
    return this.dwResponse['00480002']?.Value[0];
  }

  // Imaged Volume Depth
  get ImagedVolumeDepth(): number | undefined {
    return this.x00480003;
  }

  get x00480003(): number | undefined {
    const element = this.dwResponse['00480003'];
    return this.dwResponse['00480003']?.Value[0];
  }

  // Total Pixel Matrix Columns
  get TotalPixelMatrixColumns(): number | undefined {
    return this.x00480006;
  }

  get x00480006(): number | undefined {
    const element = this.dwResponse['00480006'];
    return this.dwResponse['00480006']?.Value[0];
  }

  // Total Pixel Matrix Rows
  get TotalPixelMatrixRows(): number | undefined {
    return this.x00480007;
  }

  get x00480007(): number | undefined {
    const element = this.dwResponse['00480007'];
    return this.dwResponse['00480007']?.Value[0];
  }

  // Total Pixel Matrix Origin Sequence
  get TotalPixelMatrixOriginSequence(): Array<Dataset> | undefined {
    return this.x00480008;
  }

  get x00480008(): Array<Dataset> | undefined {
    const element = this.dwResponse['00480008'];
    return this.dwResponse['00480008']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Specimen Label in Image
  get SpecimenLabelInImage(): string | undefined {
    return this.x00480010;
  }

  get x00480010(): string | undefined {
    const element = this.dwResponse['00480010'];
    return this.dwResponse['00480010']?.Value[0];
  }

  // Focus Method
  get FocusMethod(): string | undefined {
    return this.x00480011;
  }

  get x00480011(): string | undefined {
    const element = this.dwResponse['00480011'];
    return this.dwResponse['00480011']?.Value[0];
  }

  // Extended Depth of Field
  get ExtendedDepthOfField(): string | undefined {
    return this.x00480012;
  }

  get x00480012(): string | undefined {
    const element = this.dwResponse['00480012'];
    return this.dwResponse['00480012']?.Value[0];
  }

  // Number of Focal Planes
  get NumberOfFocalPlanes(): number | undefined {
    return this.x00480013;
  }

  get x00480013(): number | undefined {
    const element = this.dwResponse['00480013'];
    return this.dwResponse['00480013']?.Value[0];
  }

  // Distance Between Focal Planes
  get DistanceBetweenFocalPlanes(): number | undefined {
    return this.x00480014;
  }

  get x00480014(): number | undefined {
    const element = this.dwResponse['00480014'];
    return this.dwResponse['00480014']?.Value[0];
  }

  // Recommended Absent Pixel CIELab Value
  get RecommendedAbsentPixelCIELabValue(): Array<number> | undefined {
    return this.x00480015;
  }

  get x00480015(): Array<number> | undefined {
    const element = this.dwResponse['00480015'];
    return this.dwResponse['00480015']?.Value;
  }

  // Illuminator Type Code Sequence
  get IlluminatorTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x00480100;
  }

  get x00480100(): Array<Dataset> | undefined {
    const element = this.dwResponse['00480100'];
    return this.dwResponse['00480100']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Image Orientation (Slide)
  get ImageOrientationSlide(): Array<number> | undefined {
    return this.x00480102;
  }

  get x00480102(): Array<number> | undefined {
    const element = this.dwResponse['00480102'];
    return this.dwResponse['00480102']?.Value;
  }

  // Optical Path Sequence
  get OpticalPathSequence(): Array<Dataset> | undefined {
    return this.x00480105;
  }

  get x00480105(): Array<Dataset> | undefined {
    const element = this.dwResponse['00480105'];
    return this.dwResponse['00480105']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Optical Path Identifier
  get OpticalPathIdentifier(): string | undefined {
    return this.x00480106;
  }

  get x00480106(): string | undefined {
    const element = this.dwResponse['00480106'];
    return this.dwResponse['00480106']?.Value[0];
  }

  // Illumination Color Code Sequence
  get IlluminationColorCodeSequence(): Array<Dataset> | undefined {
    return this.x00480108;
  }

  get x00480108(): Array<Dataset> | undefined {
    const element = this.dwResponse['00480108'];
    return this.dwResponse['00480108']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Specimen Reference Sequence
  get SpecimenReferenceSequence(): Array<Dataset> | undefined {
    return this.x00480110;
  }

  get x00480110(): Array<Dataset> | undefined {
    const element = this.dwResponse['00480110'];
    return this.dwResponse['00480110']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Condenser Lens Power
  get CondenserLensPower(): number | undefined {
    return this.x00480111;
  }

  get x00480111(): number | undefined {
    const element = this.dwResponse['00480111'];
    return this.dwResponse['00480111']?.Value[0];
  }

  // Objective Lens Power
  get ObjectiveLensPower(): number | undefined {
    return this.x00480112;
  }

  get x00480112(): number | undefined {
    const element = this.dwResponse['00480112'];
    return this.dwResponse['00480112']?.Value[0];
  }

  // Objective Lens Numerical Aperture
  get ObjectiveLensNumericalAperture(): number | undefined {
    return this.x00480113;
  }

  get x00480113(): number | undefined {
    const element = this.dwResponse['00480113'];
    return this.dwResponse['00480113']?.Value[0];
  }

  // Palette Color Lookup Table Sequence
  get PaletteColorLookupTableSequence(): Array<Dataset> | undefined {
    return this.x00480120;
  }

  get x00480120(): Array<Dataset> | undefined {
    const element = this.dwResponse['00480120'];
    return this.dwResponse['00480120']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Image Navigation Sequence
  get ReferencedImageNavigationSequence(): Array<Dataset> | undefined {
    return this.x00480200;
  }

  get x00480200(): Array<Dataset> | undefined {
    const element = this.dwResponse['00480200'];
    return this.dwResponse['00480200']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Top Left Hand Corner of Localizer Area
  get TopLeftHandCornerOfLocalizerArea(): Array<number> | undefined {
    return this.x00480201;
  }

  get x00480201(): Array<number> | undefined {
    const element = this.dwResponse['00480201'];
    return this.dwResponse['00480201']?.Value;
  }

  // Bottom Right Hand Corner of Localizer Area
  get BottomRightHandCornerOfLocalizerArea(): Array<number> | undefined {
    return this.x00480202;
  }

  get x00480202(): Array<number> | undefined {
    const element = this.dwResponse['00480202'];
    return this.dwResponse['00480202']?.Value;
  }

  // Optical Path Identification Sequence
  get OpticalPathIdentificationSequence(): Array<Dataset> | undefined {
    return this.x00480207;
  }

  get x00480207(): Array<Dataset> | undefined {
    const element = this.dwResponse['00480207'];
    return this.dwResponse['00480207']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Plane Position (Slide) Sequence
  get PlanePositionSlideSequence(): Array<Dataset> | undefined {
    return this.x0048021a;
  }

  get x0048021a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0048021a'];
    return this.dwResponse['0048021a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Column Position In Total Image Pixel Matrix
  get ColumnPositionInTotalImagePixelMatrix(): number | undefined {
    return this.x0048021e;
  }

  get x0048021e(): number | undefined {
    const element = this.dwResponse['0048021e'];
    return this.dwResponse['0048021e']?.Value[0];
  }

  // Row Position In Total Image Pixel Matrix
  get RowPositionInTotalImagePixelMatrix(): number | undefined {
    return this.x0048021f;
  }

  get x0048021f(): number | undefined {
    const element = this.dwResponse['0048021f'];
    return this.dwResponse['0048021f']?.Value[0];
  }

  // Pixel Origin Interpretation
  get PixelOriginInterpretation(): string | undefined {
    return this.x00480301;
  }

  get x00480301(): string | undefined {
    const element = this.dwResponse['00480301'];
    return this.dwResponse['00480301']?.Value[0];
  }

  // Calibration Image
  get CalibrationImage(): string | undefined {
    return this.x00500004;
  }

  get x00500004(): string | undefined {
    const element = this.dwResponse['00500004'];
    return this.dwResponse['00500004']?.Value[0];
  }

  // Device Sequence
  get DeviceSequence(): Array<Dataset> | undefined {
    return this.x00500010;
  }

  get x00500010(): Array<Dataset> | undefined {
    const element = this.dwResponse['00500010'];
    return this.dwResponse['00500010']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Container Component Type Code Sequence
  get ContainerComponentTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x00500012;
  }

  get x00500012(): Array<Dataset> | undefined {
    const element = this.dwResponse['00500012'];
    return this.dwResponse['00500012']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Container Component Thickness
  get ContainerComponentThickness(): number | undefined {
    return this.x00500013;
  }

  get x00500013(): number | undefined {
    const element = this.dwResponse['00500013'];
    return this.dwResponse['00500013']?.Value[0];
  }

  // Device Length
  get DeviceLength(): number | undefined {
    return this.x00500014;
  }

  get x00500014(): number | undefined {
    const element = this.dwResponse['00500014'];
    return this.dwResponse['00500014']?.Value[0];
  }

  // Container Component Width
  get ContainerComponentWidth(): number | undefined {
    return this.x00500015;
  }

  get x00500015(): number | undefined {
    const element = this.dwResponse['00500015'];
    return this.dwResponse['00500015']?.Value[0];
  }

  // Device Diameter
  get DeviceDiameter(): number | undefined {
    return this.x00500016;
  }

  get x00500016(): number | undefined {
    const element = this.dwResponse['00500016'];
    return this.dwResponse['00500016']?.Value[0];
  }

  // Device Diameter Units
  get DeviceDiameterUnits(): string | undefined {
    return this.x00500017;
  }

  get x00500017(): string | undefined {
    const element = this.dwResponse['00500017'];
    return this.dwResponse['00500017']?.Value[0];
  }

  // Device Volume
  get DeviceVolume(): number | undefined {
    return this.x00500018;
  }

  get x00500018(): number | undefined {
    const element = this.dwResponse['00500018'];
    return this.dwResponse['00500018']?.Value[0];
  }

  // Inter-Marker Distance
  get InterMarkerDistance(): number | undefined {
    return this.x00500019;
  }

  get x00500019(): number | undefined {
    const element = this.dwResponse['00500019'];
    return this.dwResponse['00500019']?.Value[0];
  }

  // Container Component Material
  get ContainerComponentMaterial(): string | undefined {
    return this.x0050001a;
  }

  get x0050001a(): string | undefined {
    const element = this.dwResponse['0050001a'];
    return this.dwResponse['0050001a']?.Value[0];
  }

  // Container Component ID
  get ContainerComponentID(): string | undefined {
    return this.x0050001b;
  }

  get x0050001b(): string | undefined {
    const element = this.dwResponse['0050001b'];
    return this.dwResponse['0050001b']?.Value[0];
  }

  // Container Component Length
  get ContainerComponentLength(): number | undefined {
    return this.x0050001c;
  }

  get x0050001c(): number | undefined {
    const element = this.dwResponse['0050001c'];
    return this.dwResponse['0050001c']?.Value[0];
  }

  // Container Component Diameter
  get ContainerComponentDiameter(): number | undefined {
    return this.x0050001d;
  }

  get x0050001d(): number | undefined {
    const element = this.dwResponse['0050001d'];
    return this.dwResponse['0050001d']?.Value[0];
  }

  // Container Component Description
  get ContainerComponentDescription(): string | undefined {
    return this.x0050001e;
  }

  get x0050001e(): string | undefined {
    const element = this.dwResponse['0050001e'];
    return this.dwResponse['0050001e']?.Value[0];
  }

  // Device Description
  get DeviceDescription(): string | undefined {
    return this.x00500020;
  }

  get x00500020(): string | undefined {
    const element = this.dwResponse['00500020'];
    return this.dwResponse['00500020']?.Value[0];
  }

  // Contrast/Bolus Ingredient Percent by Volume
  get ContrastBolusIngredientPercentByVolume(): number | undefined {
    return this.x00520001;
  }

  get x00520001(): number | undefined {
    const element = this.dwResponse['00520001'];
    return this.dwResponse['00520001']?.Value[0];
  }

  // OCT Focal Distance
  get OCTFocalDistance(): number | undefined {
    return this.x00520002;
  }

  get x00520002(): number | undefined {
    const element = this.dwResponse['00520002'];
    return this.dwResponse['00520002']?.Value[0];
  }

  // Beam Spot Size
  get BeamSpotSize(): number | undefined {
    return this.x00520003;
  }

  get x00520003(): number | undefined {
    const element = this.dwResponse['00520003'];
    return this.dwResponse['00520003']?.Value[0];
  }

  // Effective Refractive Index
  get EffectiveRefractiveIndex(): number | undefined {
    return this.x00520004;
  }

  get x00520004(): number | undefined {
    const element = this.dwResponse['00520004'];
    return this.dwResponse['00520004']?.Value[0];
  }

  // OCT Acquisition Domain
  get OCTAcquisitionDomain(): string | undefined {
    return this.x00520006;
  }

  get x00520006(): string | undefined {
    const element = this.dwResponse['00520006'];
    return this.dwResponse['00520006']?.Value[0];
  }

  // OCT Optical Center Wavelength
  get OCTOpticalCenterWavelength(): number | undefined {
    return this.x00520007;
  }

  get x00520007(): number | undefined {
    const element = this.dwResponse['00520007'];
    return this.dwResponse['00520007']?.Value[0];
  }

  // Axial Resolution
  get AxialResolution(): number | undefined {
    return this.x00520008;
  }

  get x00520008(): number | undefined {
    const element = this.dwResponse['00520008'];
    return this.dwResponse['00520008']?.Value[0];
  }

  // Ranging Depth
  get RangingDepth(): number | undefined {
    return this.x00520009;
  }

  get x00520009(): number | undefined {
    const element = this.dwResponse['00520009'];
    return this.dwResponse['00520009']?.Value[0];
  }

  // A-line Rate
  get ALineRate(): number | undefined {
    return this.x00520011;
  }

  get x00520011(): number | undefined {
    const element = this.dwResponse['00520011'];
    return this.dwResponse['00520011']?.Value[0];
  }

  // A-lines Per Frame
  get ALinesPerFrame(): number | undefined {
    return this.x00520012;
  }

  get x00520012(): number | undefined {
    const element = this.dwResponse['00520012'];
    return this.dwResponse['00520012']?.Value[0];
  }

  // Catheter Rotational Rate
  get CatheterRotationalRate(): number | undefined {
    return this.x00520013;
  }

  get x00520013(): number | undefined {
    const element = this.dwResponse['00520013'];
    return this.dwResponse['00520013']?.Value[0];
  }

  // A-line Pixel Spacing
  get ALinePixelSpacing(): number | undefined {
    return this.x00520014;
  }

  get x00520014(): number | undefined {
    const element = this.dwResponse['00520014'];
    return this.dwResponse['00520014']?.Value[0];
  }

  // Mode of Percutaneous Access Sequence
  get ModeOfPercutaneousAccessSequence(): Array<Dataset> | undefined {
    return this.x00520016;
  }

  get x00520016(): Array<Dataset> | undefined {
    const element = this.dwResponse['00520016'];
    return this.dwResponse['00520016']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Intravascular OCT Frame Type Sequence
  get IntravascularOCTFrameTypeSequence(): Array<Dataset> | undefined {
    return this.x00520025;
  }

  get x00520025(): Array<Dataset> | undefined {
    const element = this.dwResponse['00520025'];
    return this.dwResponse['00520025']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // OCT Z Offset Applied
  get OCTZOffsetApplied(): string | undefined {
    return this.x00520026;
  }

  get x00520026(): string | undefined {
    const element = this.dwResponse['00520026'];
    return this.dwResponse['00520026']?.Value[0];
  }

  // Intravascular Frame Content Sequence
  get IntravascularFrameContentSequence(): Array<Dataset> | undefined {
    return this.x00520027;
  }

  get x00520027(): Array<Dataset> | undefined {
    const element = this.dwResponse['00520027'];
    return this.dwResponse['00520027']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Intravascular Longitudinal Distance
  get IntravascularLongitudinalDistance(): number | undefined {
    return this.x00520028;
  }

  get x00520028(): number | undefined {
    const element = this.dwResponse['00520028'];
    return this.dwResponse['00520028']?.Value[0];
  }

  // Intravascular OCT Frame Content Sequence
  get IntravascularOCTFrameContentSequence(): Array<Dataset> | undefined {
    return this.x00520029;
  }

  get x00520029(): Array<Dataset> | undefined {
    const element = this.dwResponse['00520029'];
    return this.dwResponse['00520029']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // OCT Z Offset Correction
  get OCTZOffsetCorrection(): Uint8Array | undefined {
    return this.x00520030;
  }

  get x00520030(): Uint8Array | undefined {
    const element = this.dwResponse['00520030'];
    return this.dwResponse['00520030']?.Value[0];
  }

  // Catheter Direction of Rotation
  get CatheterDirectionOfRotation(): string | undefined {
    return this.x00520031;
  }

  get x00520031(): string | undefined {
    const element = this.dwResponse['00520031'];
    return this.dwResponse['00520031']?.Value[0];
  }

  // Seam Line Location
  get SeamLineLocation(): number | undefined {
    return this.x00520033;
  }

  get x00520033(): number | undefined {
    const element = this.dwResponse['00520033'];
    return this.dwResponse['00520033']?.Value[0];
  }

  // First A-line Location
  get FirstALineLocation(): number | undefined {
    return this.x00520034;
  }

  get x00520034(): number | undefined {
    const element = this.dwResponse['00520034'];
    return this.dwResponse['00520034']?.Value[0];
  }

  // Seam Line Index
  get SeamLineIndex(): number | undefined {
    return this.x00520036;
  }

  get x00520036(): number | undefined {
    const element = this.dwResponse['00520036'];
    return this.dwResponse['00520036']?.Value[0];
  }

  // Number of Padded A-lines
  get NumberOfPaddedALines(): number | undefined {
    return this.x00520038;
  }

  get x00520038(): number | undefined {
    const element = this.dwResponse['00520038'];
    return this.dwResponse['00520038']?.Value[0];
  }

  // Interpolation Type
  get InterpolationType(): string | undefined {
    return this.x00520039;
  }

  get x00520039(): string | undefined {
    const element = this.dwResponse['00520039'];
    return this.dwResponse['00520039']?.Value[0];
  }

  // Refractive Index Applied
  get RefractiveIndexApplied(): string | undefined {
    return this.x0052003a;
  }

  get x0052003a(): string | undefined {
    const element = this.dwResponse['0052003a'];
    return this.dwResponse['0052003a']?.Value[0];
  }

  // Energy Window Vector
  get EnergyWindowVector(): Array<number> | undefined {
    return this.x00540010;
  }

  get x00540010(): Array<number> | undefined {
    const element = this.dwResponse['00540010'];
    return this.dwResponse['00540010']?.Value;
  }

  // Number of Energy Windows
  get NumberOfEnergyWindows(): number | undefined {
    return this.x00540011;
  }

  get x00540011(): number | undefined {
    const element = this.dwResponse['00540011'];
    return this.dwResponse['00540011']?.Value[0];
  }

  // Energy Window Information Sequence
  get EnergyWindowInformationSequence(): Array<Dataset> | undefined {
    return this.x00540012;
  }

  get x00540012(): Array<Dataset> | undefined {
    const element = this.dwResponse['00540012'];
    return this.dwResponse['00540012']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Energy Window Range Sequence
  get EnergyWindowRangeSequence(): Array<Dataset> | undefined {
    return this.x00540013;
  }

  get x00540013(): Array<Dataset> | undefined {
    const element = this.dwResponse['00540013'];
    return this.dwResponse['00540013']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Energy Window Lower Limit
  get EnergyWindowLowerLimit(): number | undefined {
    return this.x00540014;
  }

  get x00540014(): number | undefined {
    const element = this.dwResponse['00540014'];
    return this.dwResponse['00540014']?.Value[0];
  }

  // Energy Window Upper Limit
  get EnergyWindowUpperLimit(): number | undefined {
    return this.x00540015;
  }

  get x00540015(): number | undefined {
    const element = this.dwResponse['00540015'];
    return this.dwResponse['00540015']?.Value[0];
  }

  // Radiopharmaceutical Information Sequence
  get RadiopharmaceuticalInformationSequence(): Array<Dataset> | undefined {
    return this.x00540016;
  }

  get x00540016(): Array<Dataset> | undefined {
    const element = this.dwResponse['00540016'];
    return this.dwResponse['00540016']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Residual Syringe Counts
  get ResidualSyringeCounts(): number | undefined {
    return this.x00540017;
  }

  get x00540017(): number | undefined {
    const element = this.dwResponse['00540017'];
    return this.dwResponse['00540017']?.Value[0];
  }

  // Energy Window Name
  get EnergyWindowName(): string | undefined {
    return this.x00540018;
  }

  get x00540018(): string | undefined {
    const element = this.dwResponse['00540018'];
    return this.dwResponse['00540018']?.Value[0];
  }

  // Detector Vector
  get DetectorVector(): Array<number> | undefined {
    return this.x00540020;
  }

  get x00540020(): Array<number> | undefined {
    const element = this.dwResponse['00540020'];
    return this.dwResponse['00540020']?.Value;
  }

  // Number of Detectors
  get NumberOfDetectors(): number | undefined {
    return this.x00540021;
  }

  get x00540021(): number | undefined {
    const element = this.dwResponse['00540021'];
    return this.dwResponse['00540021']?.Value[0];
  }

  // Detector Information Sequence
  get DetectorInformationSequence(): Array<Dataset> | undefined {
    return this.x00540022;
  }

  get x00540022(): Array<Dataset> | undefined {
    const element = this.dwResponse['00540022'];
    return this.dwResponse['00540022']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Phase Vector
  get PhaseVector(): Array<number> | undefined {
    return this.x00540030;
  }

  get x00540030(): Array<number> | undefined {
    const element = this.dwResponse['00540030'];
    return this.dwResponse['00540030']?.Value;
  }

  // Number of Phases
  get NumberOfPhases(): number | undefined {
    return this.x00540031;
  }

  get x00540031(): number | undefined {
    const element = this.dwResponse['00540031'];
    return this.dwResponse['00540031']?.Value[0];
  }

  // Phase Information Sequence
  get PhaseInformationSequence(): Array<Dataset> | undefined {
    return this.x00540032;
  }

  get x00540032(): Array<Dataset> | undefined {
    const element = this.dwResponse['00540032'];
    return this.dwResponse['00540032']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Number of Frames in Phase
  get NumberOfFramesInPhase(): number | undefined {
    return this.x00540033;
  }

  get x00540033(): number | undefined {
    const element = this.dwResponse['00540033'];
    return this.dwResponse['00540033']?.Value[0];
  }

  // Phase Delay
  get PhaseDelay(): number | undefined {
    return this.x00540036;
  }

  get x00540036(): number | undefined {
    const element = this.dwResponse['00540036'];
    return this.dwResponse['00540036']?.Value[0];
  }

  // Pause Between Frames
  get PauseBetweenFrames(): number | undefined {
    return this.x00540038;
  }

  get x00540038(): number | undefined {
    const element = this.dwResponse['00540038'];
    return this.dwResponse['00540038']?.Value[0];
  }

  // Phase Description
  get PhaseDescription(): string | undefined {
    return this.x00540039;
  }

  get x00540039(): string | undefined {
    const element = this.dwResponse['00540039'];
    return this.dwResponse['00540039']?.Value[0];
  }

  // Rotation Vector
  get RotationVector(): Array<number> | undefined {
    return this.x00540050;
  }

  get x00540050(): Array<number> | undefined {
    const element = this.dwResponse['00540050'];
    return this.dwResponse['00540050']?.Value;
  }

  // Number of Rotations
  get NumberOfRotations(): number | undefined {
    return this.x00540051;
  }

  get x00540051(): number | undefined {
    const element = this.dwResponse['00540051'];
    return this.dwResponse['00540051']?.Value[0];
  }

  // Rotation Information Sequence
  get RotationInformationSequence(): Array<Dataset> | undefined {
    return this.x00540052;
  }

  get x00540052(): Array<Dataset> | undefined {
    const element = this.dwResponse['00540052'];
    return this.dwResponse['00540052']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Number of Frames in Rotation
  get NumberOfFramesInRotation(): number | undefined {
    return this.x00540053;
  }

  get x00540053(): number | undefined {
    const element = this.dwResponse['00540053'];
    return this.dwResponse['00540053']?.Value[0];
  }

  // R-R Interval Vector
  get RRIntervalVector(): Array<number> | undefined {
    return this.x00540060;
  }

  get x00540060(): Array<number> | undefined {
    const element = this.dwResponse['00540060'];
    return this.dwResponse['00540060']?.Value;
  }

  // Number of R-R Intervals
  get NumberOfRRIntervals(): number | undefined {
    return this.x00540061;
  }

  get x00540061(): number | undefined {
    const element = this.dwResponse['00540061'];
    return this.dwResponse['00540061']?.Value[0];
  }

  // Gated Information Sequence
  get GatedInformationSequence(): Array<Dataset> | undefined {
    return this.x00540062;
  }

  get x00540062(): Array<Dataset> | undefined {
    const element = this.dwResponse['00540062'];
    return this.dwResponse['00540062']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Data Information Sequence
  get DataInformationSequence(): Array<Dataset> | undefined {
    return this.x00540063;
  }

  get x00540063(): Array<Dataset> | undefined {
    const element = this.dwResponse['00540063'];
    return this.dwResponse['00540063']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Time Slot Vector
  get TimeSlotVector(): Array<number> | undefined {
    return this.x00540070;
  }

  get x00540070(): Array<number> | undefined {
    const element = this.dwResponse['00540070'];
    return this.dwResponse['00540070']?.Value;
  }

  // Number of Time Slots
  get NumberOfTimeSlots(): number | undefined {
    return this.x00540071;
  }

  get x00540071(): number | undefined {
    const element = this.dwResponse['00540071'];
    return this.dwResponse['00540071']?.Value[0];
  }

  // Time Slot Information Sequence
  get TimeSlotInformationSequence(): Array<Dataset> | undefined {
    return this.x00540072;
  }

  get x00540072(): Array<Dataset> | undefined {
    const element = this.dwResponse['00540072'];
    return this.dwResponse['00540072']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Time Slot Time
  get TimeSlotTime(): number | undefined {
    return this.x00540073;
  }

  get x00540073(): number | undefined {
    const element = this.dwResponse['00540073'];
    return this.dwResponse['00540073']?.Value[0];
  }

  // Slice Vector
  get SliceVector(): Array<number> | undefined {
    return this.x00540080;
  }

  get x00540080(): Array<number> | undefined {
    const element = this.dwResponse['00540080'];
    return this.dwResponse['00540080']?.Value;
  }

  // Number of Slices
  get NumberOfSlices(): number | undefined {
    return this.x00540081;
  }

  get x00540081(): number | undefined {
    const element = this.dwResponse['00540081'];
    return this.dwResponse['00540081']?.Value[0];
  }

  // Angular View Vector
  get AngularViewVector(): Array<number> | undefined {
    return this.x00540090;
  }

  get x00540090(): Array<number> | undefined {
    const element = this.dwResponse['00540090'];
    return this.dwResponse['00540090']?.Value;
  }

  // Time Slice Vector
  get TimeSliceVector(): Array<number> | undefined {
    return this.x00540100;
  }

  get x00540100(): Array<number> | undefined {
    const element = this.dwResponse['00540100'];
    return this.dwResponse['00540100']?.Value;
  }

  // Number of Time Slices
  get NumberOfTimeSlices(): number | undefined {
    return this.x00540101;
  }

  get x00540101(): number | undefined {
    const element = this.dwResponse['00540101'];
    return this.dwResponse['00540101']?.Value[0];
  }

  // Start Angle
  get StartAngle(): number | undefined {
    return this.x00540200;
  }

  get x00540200(): number | undefined {
    const element = this.dwResponse['00540200'];
    return this.dwResponse['00540200']?.Value[0];
  }

  // Type of Detector Motion
  get TypeOfDetectorMotion(): string | undefined {
    return this.x00540202;
  }

  get x00540202(): string | undefined {
    const element = this.dwResponse['00540202'];
    return this.dwResponse['00540202']?.Value[0];
  }

  // Trigger Vector
  get TriggerVector(): Array<number> | undefined {
    return this.x00540210;
  }

  get x00540210(): Array<number> | undefined {
    const element = this.dwResponse['00540210'];
    return this.dwResponse['00540210']?.Value;
  }

  // Number of Triggers in Phase
  get NumberOfTriggersInPhase(): number | undefined {
    return this.x00540211;
  }

  get x00540211(): number | undefined {
    const element = this.dwResponse['00540211'];
    return this.dwResponse['00540211']?.Value[0];
  }

  // View Code Sequence
  get ViewCodeSequence(): Array<Dataset> | undefined {
    return this.x00540220;
  }

  get x00540220(): Array<Dataset> | undefined {
    const element = this.dwResponse['00540220'];
    return this.dwResponse['00540220']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // View Modifier Code Sequence
  get ViewModifierCodeSequence(): Array<Dataset> | undefined {
    return this.x00540222;
  }

  get x00540222(): Array<Dataset> | undefined {
    const element = this.dwResponse['00540222'];
    return this.dwResponse['00540222']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Radionuclide Code Sequence
  get RadionuclideCodeSequence(): Array<Dataset> | undefined {
    return this.x00540300;
  }

  get x00540300(): Array<Dataset> | undefined {
    const element = this.dwResponse['00540300'];
    return this.dwResponse['00540300']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Administration Route Code Sequence
  get AdministrationRouteCodeSequence(): Array<Dataset> | undefined {
    return this.x00540302;
  }

  get x00540302(): Array<Dataset> | undefined {
    const element = this.dwResponse['00540302'];
    return this.dwResponse['00540302']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Radiopharmaceutical Code Sequence
  get RadiopharmaceuticalCodeSequence(): Array<Dataset> | undefined {
    return this.x00540304;
  }

  get x00540304(): Array<Dataset> | undefined {
    const element = this.dwResponse['00540304'];
    return this.dwResponse['00540304']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Calibration Data Sequence
  get CalibrationDataSequence(): Array<Dataset> | undefined {
    return this.x00540306;
  }

  get x00540306(): Array<Dataset> | undefined {
    const element = this.dwResponse['00540306'];
    return this.dwResponse['00540306']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Energy Window Number
  get EnergyWindowNumber(): number | undefined {
    return this.x00540308;
  }

  get x00540308(): number | undefined {
    const element = this.dwResponse['00540308'];
    return this.dwResponse['00540308']?.Value[0];
  }

  // Image ID
  get ImageID(): string | undefined {
    return this.x00540400;
  }

  get x00540400(): string | undefined {
    const element = this.dwResponse['00540400'];
    return this.dwResponse['00540400']?.Value[0];
  }

  // Patient Orientation Code Sequence
  get PatientOrientationCodeSequence(): Array<Dataset> | undefined {
    return this.x00540410;
  }

  get x00540410(): Array<Dataset> | undefined {
    const element = this.dwResponse['00540410'];
    return this.dwResponse['00540410']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Patient Orientation Modifier Code Sequence
  get PatientOrientationModifierCodeSequence(): Array<Dataset> | undefined {
    return this.x00540412;
  }

  get x00540412(): Array<Dataset> | undefined {
    const element = this.dwResponse['00540412'];
    return this.dwResponse['00540412']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Patient Gantry Relationship Code Sequence
  get PatientGantryRelationshipCodeSequence(): Array<Dataset> | undefined {
    return this.x00540414;
  }

  get x00540414(): Array<Dataset> | undefined {
    const element = this.dwResponse['00540414'];
    return this.dwResponse['00540414']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Slice Progression Direction
  get SliceProgressionDirection(): string | undefined {
    return this.x00540500;
  }

  get x00540500(): string | undefined {
    const element = this.dwResponse['00540500'];
    return this.dwResponse['00540500']?.Value[0];
  }

  // Scan Progression Direction
  get ScanProgressionDirection(): string | undefined {
    return this.x00540501;
  }

  get x00540501(): string | undefined {
    const element = this.dwResponse['00540501'];
    return this.dwResponse['00540501']?.Value[0];
  }

  // Series Type
  get SeriesType(): Array<string> | undefined {
    return this.x00541000;
  }

  get x00541000(): Array<string> | undefined {
    const element = this.dwResponse['00541000'];
    return this.dwResponse['00541000']?.Value;
  }

  // Units
  get Units(): string | undefined {
    return this.x00541001;
  }

  get x00541001(): string | undefined {
    const element = this.dwResponse['00541001'];
    return this.dwResponse['00541001']?.Value[0];
  }

  // Counts Source
  get CountsSource(): string | undefined {
    return this.x00541002;
  }

  get x00541002(): string | undefined {
    const element = this.dwResponse['00541002'];
    return this.dwResponse['00541002']?.Value[0];
  }

  // Reprojection Method
  get ReprojectionMethod(): string | undefined {
    return this.x00541004;
  }

  get x00541004(): string | undefined {
    const element = this.dwResponse['00541004'];
    return this.dwResponse['00541004']?.Value[0];
  }

  // SUV Type
  get SUVType(): string | undefined {
    return this.x00541006;
  }

  get x00541006(): string | undefined {
    const element = this.dwResponse['00541006'];
    return this.dwResponse['00541006']?.Value[0];
  }

  // Randoms Correction Method
  get RandomsCorrectionMethod(): string | undefined {
    return this.x00541100;
  }

  get x00541100(): string | undefined {
    const element = this.dwResponse['00541100'];
    return this.dwResponse['00541100']?.Value[0];
  }

  // Attenuation Correction Method
  get AttenuationCorrectionMethod(): string | undefined {
    return this.x00541101;
  }

  get x00541101(): string | undefined {
    const element = this.dwResponse['00541101'];
    return this.dwResponse['00541101']?.Value[0];
  }

  // Decay Correction
  get DecayCorrection(): string | undefined {
    return this.x00541102;
  }

  get x00541102(): string | undefined {
    const element = this.dwResponse['00541102'];
    return this.dwResponse['00541102']?.Value[0];
  }

  // Reconstruction Method
  get ReconstructionMethod(): string | undefined {
    return this.x00541103;
  }

  get x00541103(): string | undefined {
    const element = this.dwResponse['00541103'];
    return this.dwResponse['00541103']?.Value[0];
  }

  // Detector Lines of Response Used
  get DetectorLinesOfResponseUsed(): string | undefined {
    return this.x00541104;
  }

  get x00541104(): string | undefined {
    const element = this.dwResponse['00541104'];
    return this.dwResponse['00541104']?.Value[0];
  }

  // Scatter Correction Method
  get ScatterCorrectionMethod(): string | undefined {
    return this.x00541105;
  }

  get x00541105(): string | undefined {
    const element = this.dwResponse['00541105'];
    return this.dwResponse['00541105']?.Value[0];
  }

  // Axial Acceptance
  get AxialAcceptance(): number | undefined {
    return this.x00541200;
  }

  get x00541200(): number | undefined {
    const element = this.dwResponse['00541200'];
    return this.dwResponse['00541200']?.Value[0];
  }

  // Axial Mash
  get AxialMash(): Array<number> | undefined {
    return this.x00541201;
  }

  get x00541201(): Array<number> | undefined {
    const element = this.dwResponse['00541201'];
    return this.dwResponse['00541201']?.Value;
  }

  // Transverse Mash
  get TransverseMash(): number | undefined {
    return this.x00541202;
  }

  get x00541202(): number | undefined {
    const element = this.dwResponse['00541202'];
    return this.dwResponse['00541202']?.Value[0];
  }

  // Detector Element Size
  get DetectorElementSize(): Array<number> | undefined {
    return this.x00541203;
  }

  get x00541203(): Array<number> | undefined {
    const element = this.dwResponse['00541203'];
    return this.dwResponse['00541203']?.Value;
  }

  // Coincidence Window Width
  get CoincidenceWindowWidth(): number | undefined {
    return this.x00541210;
  }

  get x00541210(): number | undefined {
    const element = this.dwResponse['00541210'];
    return this.dwResponse['00541210']?.Value[0];
  }

  // Secondary Counts Type
  get SecondaryCountsType(): Array<string> | undefined {
    return this.x00541220;
  }

  get x00541220(): Array<string> | undefined {
    const element = this.dwResponse['00541220'];
    return this.dwResponse['00541220']?.Value;
  }

  // Frame Reference Time
  get FrameReferenceTime(): number | undefined {
    return this.x00541300;
  }

  get x00541300(): number | undefined {
    const element = this.dwResponse['00541300'];
    return this.dwResponse['00541300']?.Value[0];
  }

  // Primary (Prompts) Counts Accumulated
  get PrimaryPromptsCountsAccumulated(): number | undefined {
    return this.x00541310;
  }

  get x00541310(): number | undefined {
    const element = this.dwResponse['00541310'];
    return this.dwResponse['00541310']?.Value[0];
  }

  // Secondary Counts Accumulated
  get SecondaryCountsAccumulated(): Array<number> | undefined {
    return this.x00541311;
  }

  get x00541311(): Array<number> | undefined {
    const element = this.dwResponse['00541311'];
    return this.dwResponse['00541311']?.Value;
  }

  // Slice Sensitivity Factor
  get SliceSensitivityFactor(): number | undefined {
    return this.x00541320;
  }

  get x00541320(): number | undefined {
    const element = this.dwResponse['00541320'];
    return this.dwResponse['00541320']?.Value[0];
  }

  // Decay Factor
  get DecayFactor(): number | undefined {
    return this.x00541321;
  }

  get x00541321(): number | undefined {
    const element = this.dwResponse['00541321'];
    return this.dwResponse['00541321']?.Value[0];
  }

  // Dose Calibration Factor
  get DoseCalibrationFactor(): number | undefined {
    return this.x00541322;
  }

  get x00541322(): number | undefined {
    const element = this.dwResponse['00541322'];
    return this.dwResponse['00541322']?.Value[0];
  }

  // Scatter Fraction Factor
  get ScatterFractionFactor(): number | undefined {
    return this.x00541323;
  }

  get x00541323(): number | undefined {
    const element = this.dwResponse['00541323'];
    return this.dwResponse['00541323']?.Value[0];
  }

  // Dead Time Factor
  get DeadTimeFactor(): number | undefined {
    return this.x00541324;
  }

  get x00541324(): number | undefined {
    const element = this.dwResponse['00541324'];
    return this.dwResponse['00541324']?.Value[0];
  }

  // Image Index
  get ImageIndex(): number | undefined {
    return this.x00541330;
  }

  get x00541330(): number | undefined {
    const element = this.dwResponse['00541330'];
    return this.dwResponse['00541330']?.Value[0];
  }

  // Counts Included
  get CountsIncluded(): Array<string> | undefined {
    return this.x00541400;
  }

  get x00541400(): Array<string> | undefined {
    const element = this.dwResponse['00541400'];
    return this.dwResponse['00541400']?.Value;
  }

  // Dead Time Correction Flag
  get DeadTimeCorrectionFlag(): string | undefined {
    return this.x00541401;
  }

  get x00541401(): string | undefined {
    const element = this.dwResponse['00541401'];
    return this.dwResponse['00541401']?.Value[0];
  }

  // Histogram Sequence
  get HistogramSequence(): Array<Dataset> | undefined {
    return this.x00603000;
  }

  get x00603000(): Array<Dataset> | undefined {
    const element = this.dwResponse['00603000'];
    return this.dwResponse['00603000']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Histogram Number of Bins
  get HistogramNumberOfBins(): number | undefined {
    return this.x00603002;
  }

  get x00603002(): number | undefined {
    const element = this.dwResponse['00603002'];
    return this.dwResponse['00603002']?.Value[0];
  }

  // Histogram First Bin Value
  get HistogramFirstBinValue(): number | undefined {
    return this.x00603004;
  }

  get x00603004(): number | undefined {
    const element = this.dwResponse['00603004'];
    return this.dwResponse['00603004']?.Value[0];
  }

  // Histogram Last Bin Value
  get HistogramLastBinValue(): number | undefined {
    return this.x00603006;
  }

  get x00603006(): number | undefined {
    const element = this.dwResponse['00603006'];
    return this.dwResponse['00603006']?.Value[0];
  }

  // Histogram Bin Width
  get HistogramBinWidth(): number | undefined {
    return this.x00603008;
  }

  get x00603008(): number | undefined {
    const element = this.dwResponse['00603008'];
    return this.dwResponse['00603008']?.Value[0];
  }

  // Histogram Explanation
  get HistogramExplanation(): string | undefined {
    return this.x00603010;
  }

  get x00603010(): string | undefined {
    const element = this.dwResponse['00603010'];
    return this.dwResponse['00603010']?.Value[0];
  }

  // Histogram Data
  get HistogramData(): Array<number> | undefined {
    return this.x00603020;
  }

  get x00603020(): Array<number> | undefined {
    const element = this.dwResponse['00603020'];
    return this.dwResponse['00603020']?.Value;
  }

  // Segmentation Type
  get SegmentationType(): string | undefined {
    return this.x00620001;
  }

  get x00620001(): string | undefined {
    const element = this.dwResponse['00620001'];
    return this.dwResponse['00620001']?.Value[0];
  }

  // Segment Sequence
  get SegmentSequence(): Array<Dataset> | undefined {
    return this.x00620002;
  }

  get x00620002(): Array<Dataset> | undefined {
    const element = this.dwResponse['00620002'];
    return this.dwResponse['00620002']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Segmented Property Category Code Sequence
  get SegmentedPropertyCategoryCodeSequence(): Array<Dataset> | undefined {
    return this.x00620003;
  }

  get x00620003(): Array<Dataset> | undefined {
    const element = this.dwResponse['00620003'];
    return this.dwResponse['00620003']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Segment Number
  get SegmentNumber(): number | undefined {
    return this.x00620004;
  }

  get x00620004(): number | undefined {
    const element = this.dwResponse['00620004'];
    return this.dwResponse['00620004']?.Value[0];
  }

  // Segment Label
  get SegmentLabel(): string | undefined {
    return this.x00620005;
  }

  get x00620005(): string | undefined {
    const element = this.dwResponse['00620005'];
    return this.dwResponse['00620005']?.Value[0];
  }

  // Segment Algorithm Type
  get SegmentAlgorithmType(): string | undefined {
    return this.x00620008;
  }

  get x00620008(): string | undefined {
    const element = this.dwResponse['00620008'];
    return this.dwResponse['00620008']?.Value[0];
  }

  // Segment Algorithm Name
  get SegmentAlgorithmName(): string | undefined {
    return this.x00620009;
  }

  get x00620009(): string | undefined {
    const element = this.dwResponse['00620009'];
    return this.dwResponse['00620009']?.Value[0];
  }

  // Segment Identification Sequence
  get SegmentIdentificationSequence(): Array<Dataset> | undefined {
    return this.x0062000a;
  }

  get x0062000a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0062000a'];
    return this.dwResponse['0062000a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Segment Number
  get ReferencedSegmentNumber(): Array<number> | undefined {
    return this.x0062000b;
  }

  get x0062000b(): Array<number> | undefined {
    const element = this.dwResponse['0062000b'];
    return this.dwResponse['0062000b']?.Value;
  }

  // Recommended Display Grayscale Value
  get RecommendedDisplayGrayscaleValue(): number | undefined {
    return this.x0062000c;
  }

  get x0062000c(): number | undefined {
    const element = this.dwResponse['0062000c'];
    return this.dwResponse['0062000c']?.Value[0];
  }

  // Recommended Display CIELab Value
  get RecommendedDisplayCIELabValue(): Array<number> | undefined {
    return this.x0062000d;
  }

  get x0062000d(): Array<number> | undefined {
    const element = this.dwResponse['0062000d'];
    return this.dwResponse['0062000d']?.Value;
  }

  // Maximum Fractional Value
  get MaximumFractionalValue(): number | undefined {
    return this.x0062000e;
  }

  get x0062000e(): number | undefined {
    const element = this.dwResponse['0062000e'];
    return this.dwResponse['0062000e']?.Value[0];
  }

  // Segmented Property Type Code Sequence
  get SegmentedPropertyTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x0062000f;
  }

  get x0062000f(): Array<Dataset> | undefined {
    const element = this.dwResponse['0062000f'];
    return this.dwResponse['0062000f']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Segmentation Fractional Type
  get SegmentationFractionalType(): string | undefined {
    return this.x00620010;
  }

  get x00620010(): string | undefined {
    const element = this.dwResponse['00620010'];
    return this.dwResponse['00620010']?.Value[0];
  }

  // Segmented Property Type Modifier Code Sequence
  get SegmentedPropertyTypeModifierCodeSequence(): Array<Dataset> | undefined {
    return this.x00620011;
  }

  get x00620011(): Array<Dataset> | undefined {
    const element = this.dwResponse['00620011'];
    return this.dwResponse['00620011']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Used Segments Sequence
  get UsedSegmentsSequence(): Array<Dataset> | undefined {
    return this.x00620012;
  }

  get x00620012(): Array<Dataset> | undefined {
    const element = this.dwResponse['00620012'];
    return this.dwResponse['00620012']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Deformable Registration Sequence
  get DeformableRegistrationSequence(): Array<Dataset> | undefined {
    return this.x00640002;
  }

  get x00640002(): Array<Dataset> | undefined {
    const element = this.dwResponse['00640002'];
    return this.dwResponse['00640002']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Source Frame of Reference UID
  get SourceFrameOfReferenceUID(): string | undefined {
    return this.x00640003;
  }

  get x00640003(): string | undefined {
    const element = this.dwResponse['00640003'];
    return this.dwResponse['00640003']?.Value[0];
  }

  // Deformable Registration Grid Sequence
  get DeformableRegistrationGridSequence(): Array<Dataset> | undefined {
    return this.x00640005;
  }

  get x00640005(): Array<Dataset> | undefined {
    const element = this.dwResponse['00640005'];
    return this.dwResponse['00640005']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Grid Dimensions
  get GridDimensions(): Array<number> | undefined {
    return this.x00640007;
  }

  get x00640007(): Array<number> | undefined {
    const element = this.dwResponse['00640007'];
    return this.dwResponse['00640007']?.Value;
  }

  // Grid Resolution
  get GridResolution(): Array<number> | undefined {
    return this.x00640008;
  }

  get x00640008(): Array<number> | undefined {
    const element = this.dwResponse['00640008'];
    return this.dwResponse['00640008']?.Value;
  }

  // Pre Deformation Matrix Registration Sequence
  get PreDeformationMatrixRegistrationSequence(): Array<Dataset> | undefined {
    return this.x0064000f;
  }

  get x0064000f(): Array<Dataset> | undefined {
    const element = this.dwResponse['0064000f'];
    return this.dwResponse['0064000f']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Post Deformation Matrix Registration Sequence
  get PostDeformationMatrixRegistrationSequence(): Array<Dataset> | undefined {
    return this.x00640010;
  }

  get x00640010(): Array<Dataset> | undefined {
    const element = this.dwResponse['00640010'];
    return this.dwResponse['00640010']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Number of Surfaces
  get NumberOfSurfaces(): number | undefined {
    return this.x00660001;
  }

  get x00660001(): number | undefined {
    const element = this.dwResponse['00660001'];
    return this.dwResponse['00660001']?.Value[0];
  }

  // Surface Sequence
  get SurfaceSequence(): Array<Dataset> | undefined {
    return this.x00660002;
  }

  get x00660002(): Array<Dataset> | undefined {
    const element = this.dwResponse['00660002'];
    return this.dwResponse['00660002']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Surface Number
  get SurfaceNumber(): number | undefined {
    return this.x00660003;
  }

  get x00660003(): number | undefined {
    const element = this.dwResponse['00660003'];
    return this.dwResponse['00660003']?.Value[0];
  }

  // Surface Processing
  get SurfaceProcessing(): string | undefined {
    return this.x00660009;
  }

  get x00660009(): string | undefined {
    const element = this.dwResponse['00660009'];
    return this.dwResponse['00660009']?.Value[0];
  }

  // Surface Processing Ratio
  get SurfaceProcessingRatio(): number | undefined {
    return this.x0066000a;
  }

  get x0066000a(): number | undefined {
    const element = this.dwResponse['0066000a'];
    return this.dwResponse['0066000a']?.Value[0];
  }

  // Surface Processing Description
  get SurfaceProcessingDescription(): string | undefined {
    return this.x0066000b;
  }

  get x0066000b(): string | undefined {
    const element = this.dwResponse['0066000b'];
    return this.dwResponse['0066000b']?.Value[0];
  }

  // Recommended Presentation Opacity
  get RecommendedPresentationOpacity(): number | undefined {
    return this.x0066000c;
  }

  get x0066000c(): number | undefined {
    const element = this.dwResponse['0066000c'];
    return this.dwResponse['0066000c']?.Value[0];
  }

  // Recommended Presentation Type
  get RecommendedPresentationType(): string | undefined {
    return this.x0066000d;
  }

  get x0066000d(): string | undefined {
    const element = this.dwResponse['0066000d'];
    return this.dwResponse['0066000d']?.Value[0];
  }

  // Finite Volume
  get FiniteVolume(): string | undefined {
    return this.x0066000e;
  }

  get x0066000e(): string | undefined {
    const element = this.dwResponse['0066000e'];
    return this.dwResponse['0066000e']?.Value[0];
  }

  // Manifold
  get Manifold(): string | undefined {
    return this.x00660010;
  }

  get x00660010(): string | undefined {
    const element = this.dwResponse['00660010'];
    return this.dwResponse['00660010']?.Value[0];
  }

  // Surface Points Sequence
  get SurfacePointsSequence(): Array<Dataset> | undefined {
    return this.x00660011;
  }

  get x00660011(): Array<Dataset> | undefined {
    const element = this.dwResponse['00660011'];
    return this.dwResponse['00660011']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Surface Points Normals Sequence
  get SurfacePointsNormalsSequence(): Array<Dataset> | undefined {
    return this.x00660012;
  }

  get x00660012(): Array<Dataset> | undefined {
    const element = this.dwResponse['00660012'];
    return this.dwResponse['00660012']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Surface Mesh Primitives Sequence
  get SurfaceMeshPrimitivesSequence(): Array<Dataset> | undefined {
    return this.x00660013;
  }

  get x00660013(): Array<Dataset> | undefined {
    const element = this.dwResponse['00660013'];
    return this.dwResponse['00660013']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Number of Surface Points
  get NumberOfSurfacePoints(): number | undefined {
    return this.x00660015;
  }

  get x00660015(): number | undefined {
    const element = this.dwResponse['00660015'];
    return this.dwResponse['00660015']?.Value[0];
  }

  // Point Position Accuracy
  get PointPositionAccuracy(): Array<number> | undefined {
    return this.x00660017;
  }

  get x00660017(): Array<number> | undefined {
    const element = this.dwResponse['00660017'];
    return this.dwResponse['00660017']?.Value;
  }

  // Mean Point Distance
  get MeanPointDistance(): number | undefined {
    return this.x00660018;
  }

  get x00660018(): number | undefined {
    const element = this.dwResponse['00660018'];
    return this.dwResponse['00660018']?.Value[0];
  }

  // Maximum Point Distance
  get MaximumPointDistance(): number | undefined {
    return this.x00660019;
  }

  get x00660019(): number | undefined {
    const element = this.dwResponse['00660019'];
    return this.dwResponse['00660019']?.Value[0];
  }

  // Points Bounding Box Coordinates
  get PointsBoundingBoxCoordinates(): Array<number> | undefined {
    return this.x0066001a;
  }

  get x0066001a(): Array<number> | undefined {
    const element = this.dwResponse['0066001a'];
    return this.dwResponse['0066001a']?.Value;
  }

  // Axis of Rotation
  get AxisOfRotation(): Array<number> | undefined {
    return this.x0066001b;
  }

  get x0066001b(): Array<number> | undefined {
    const element = this.dwResponse['0066001b'];
    return this.dwResponse['0066001b']?.Value;
  }

  // Center of Rotation
  get CenterOfRotation(): Array<number> | undefined {
    return this.x0066001c;
  }

  get x0066001c(): Array<number> | undefined {
    const element = this.dwResponse['0066001c'];
    return this.dwResponse['0066001c']?.Value;
  }

  // Number of Vectors
  get NumberOfVectors(): number | undefined {
    return this.x0066001e;
  }

  get x0066001e(): number | undefined {
    const element = this.dwResponse['0066001e'];
    return this.dwResponse['0066001e']?.Value[0];
  }

  // Vector Dimensionality
  get VectorDimensionality(): number | undefined {
    return this.x0066001f;
  }

  get x0066001f(): number | undefined {
    const element = this.dwResponse['0066001f'];
    return this.dwResponse['0066001f']?.Value[0];
  }

  // Vector Accuracy
  get VectorAccuracy(): Array<number> | undefined {
    return this.x00660020;
  }

  get x00660020(): Array<number> | undefined {
    const element = this.dwResponse['00660020'];
    return this.dwResponse['00660020']?.Value;
  }

  // Triangle Strip Sequence
  get TriangleStripSequence(): Array<Dataset> | undefined {
    return this.x00660026;
  }

  get x00660026(): Array<Dataset> | undefined {
    const element = this.dwResponse['00660026'];
    return this.dwResponse['00660026']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Triangle Fan Sequence
  get TriangleFanSequence(): Array<Dataset> | undefined {
    return this.x00660027;
  }

  get x00660027(): Array<Dataset> | undefined {
    const element = this.dwResponse['00660027'];
    return this.dwResponse['00660027']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Line Sequence
  get LineSequence(): Array<Dataset> | undefined {
    return this.x00660028;
  }

  get x00660028(): Array<Dataset> | undefined {
    const element = this.dwResponse['00660028'];
    return this.dwResponse['00660028']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Surface Count
  get SurfaceCount(): number | undefined {
    return this.x0066002a;
  }

  get x0066002a(): number | undefined {
    const element = this.dwResponse['0066002a'];
    return this.dwResponse['0066002a']?.Value[0];
  }

  // Referenced Surface Sequence
  get ReferencedSurfaceSequence(): Array<Dataset> | undefined {
    return this.x0066002b;
  }

  get x0066002b(): Array<Dataset> | undefined {
    const element = this.dwResponse['0066002b'];
    return this.dwResponse['0066002b']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Surface Number
  get ReferencedSurfaceNumber(): number | undefined {
    return this.x0066002c;
  }

  get x0066002c(): number | undefined {
    const element = this.dwResponse['0066002c'];
    return this.dwResponse['0066002c']?.Value[0];
  }

  // Segment Surface Generation Algorithm Identification Sequence
  get SegmentSurfaceGenerationAlgorithmIdentificationSequence(): Array<Dataset> | undefined {
    return this.x0066002d;
  }

  get x0066002d(): Array<Dataset> | undefined {
    const element = this.dwResponse['0066002d'];
    return this.dwResponse['0066002d']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Segment Surface Source Instance Sequence
  get SegmentSurfaceSourceInstanceSequence(): Array<Dataset> | undefined {
    return this.x0066002e;
  }

  get x0066002e(): Array<Dataset> | undefined {
    const element = this.dwResponse['0066002e'];
    return this.dwResponse['0066002e']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Algorithm Family Code Sequence
  get AlgorithmFamilyCodeSequence(): Array<Dataset> | undefined {
    return this.x0066002f;
  }

  get x0066002f(): Array<Dataset> | undefined {
    const element = this.dwResponse['0066002f'];
    return this.dwResponse['0066002f']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Algorithm Name Code Sequence
  get AlgorithmNameCodeSequence(): Array<Dataset> | undefined {
    return this.x00660030;
  }

  get x00660030(): Array<Dataset> | undefined {
    const element = this.dwResponse['00660030'];
    return this.dwResponse['00660030']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Algorithm Version
  get AlgorithmVersion(): string | undefined {
    return this.x00660031;
  }

  get x00660031(): string | undefined {
    const element = this.dwResponse['00660031'];
    return this.dwResponse['00660031']?.Value[0];
  }

  // Facet Sequence
  get FacetSequence(): Array<Dataset> | undefined {
    return this.x00660034;
  }

  get x00660034(): Array<Dataset> | undefined {
    const element = this.dwResponse['00660034'];
    return this.dwResponse['00660034']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Surface Processing Algorithm Identification Sequence
  get SurfaceProcessingAlgorithmIdentificationSequence(): Array<Dataset> | undefined {
    return this.x00660035;
  }

  get x00660035(): Array<Dataset> | undefined {
    const element = this.dwResponse['00660035'];
    return this.dwResponse['00660035']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Algorithm Name
  get AlgorithmName(): string | undefined {
    return this.x00660036;
  }

  get x00660036(): string | undefined {
    const element = this.dwResponse['00660036'];
    return this.dwResponse['00660036']?.Value[0];
  }

  // Recommended Point Radius
  get RecommendedPointRadius(): number | undefined {
    return this.x00660037;
  }

  get x00660037(): number | undefined {
    const element = this.dwResponse['00660037'];
    return this.dwResponse['00660037']?.Value[0];
  }

  // Recommended Line Thickness
  get RecommendedLineThickness(): number | undefined {
    return this.x00660038;
  }

  get x00660038(): number | undefined {
    const element = this.dwResponse['00660038'];
    return this.dwResponse['00660038']?.Value[0];
  }

  // Implant Size
  get ImplantSize(): string | undefined {
    return this.x00686210;
  }

  get x00686210(): string | undefined {
    const element = this.dwResponse['00686210'];
    return this.dwResponse['00686210']?.Value[0];
  }

  // Implant Template Version
  get ImplantTemplateVersion(): string | undefined {
    return this.x00686221;
  }

  get x00686221(): string | undefined {
    const element = this.dwResponse['00686221'];
    return this.dwResponse['00686221']?.Value[0];
  }

  // Replaced Implant Template Sequence
  get ReplacedImplantTemplateSequence(): Array<Dataset> | undefined {
    return this.x00686222;
  }

  get x00686222(): Array<Dataset> | undefined {
    const element = this.dwResponse['00686222'];
    return this.dwResponse['00686222']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Implant Type
  get ImplantType(): string | undefined {
    return this.x00686223;
  }

  get x00686223(): string | undefined {
    const element = this.dwResponse['00686223'];
    return this.dwResponse['00686223']?.Value[0];
  }

  // Derivation Implant Template Sequence
  get DerivationImplantTemplateSequence(): Array<Dataset> | undefined {
    return this.x00686224;
  }

  get x00686224(): Array<Dataset> | undefined {
    const element = this.dwResponse['00686224'];
    return this.dwResponse['00686224']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Original Implant Template Sequence
  get OriginalImplantTemplateSequence(): Array<Dataset> | undefined {
    return this.x00686225;
  }

  get x00686225(): Array<Dataset> | undefined {
    const element = this.dwResponse['00686225'];
    return this.dwResponse['00686225']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Effective DateTime
  get EffectiveDateTime(): string | undefined {
    return this.x00686226;
  }

  get x00686226(): string | undefined {
    const element = this.dwResponse['00686226'];
    return this.dwResponse['00686226']?.Value[0];
  }

  // Implant Target Anatomy Sequence
  get ImplantTargetAnatomySequence(): Array<Dataset> | undefined {
    return this.x00686230;
  }

  get x00686230(): Array<Dataset> | undefined {
    const element = this.dwResponse['00686230'];
    return this.dwResponse['00686230']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Information From Manufacturer Sequence
  get InformationFromManufacturerSequence(): Array<Dataset> | undefined {
    return this.x00686260;
  }

  get x00686260(): Array<Dataset> | undefined {
    const element = this.dwResponse['00686260'];
    return this.dwResponse['00686260']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Notification From Manufacturer Sequence
  get NotificationFromManufacturerSequence(): Array<Dataset> | undefined {
    return this.x00686265;
  }

  get x00686265(): Array<Dataset> | undefined {
    const element = this.dwResponse['00686265'];
    return this.dwResponse['00686265']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Information Issue DateTime
  get InformationIssueDateTime(): string | undefined {
    return this.x00686270;
  }

  get x00686270(): string | undefined {
    const element = this.dwResponse['00686270'];
    return this.dwResponse['00686270']?.Value[0];
  }

  // Implant Regulatory Disapproval Code Sequence
  get ImplantRegulatoryDisapprovalCodeSequence(): Array<Dataset> | undefined {
    return this.x006862a0;
  }

  get x006862a0(): Array<Dataset> | undefined {
    const element = this.dwResponse['006862a0'];
    return this.dwResponse['006862a0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Overall Template Spatial Tolerance
  get OverallTemplateSpatialTolerance(): number | undefined {
    return this.x006862a5;
  }

  get x006862a5(): number | undefined {
    const element = this.dwResponse['006862a5'];
    return this.dwResponse['006862a5']?.Value[0];
  }

  // HPGL Document Sequence
  get HPGLDocumentSequence(): Array<Dataset> | undefined {
    return this.x006862c0;
  }

  get x006862c0(): Array<Dataset> | undefined {
    const element = this.dwResponse['006862c0'];
    return this.dwResponse['006862c0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // HPGL Document ID
  get HPGLDocumentID(): number | undefined {
    return this.x006862d0;
  }

  get x006862d0(): number | undefined {
    const element = this.dwResponse['006862d0'];
    return this.dwResponse['006862d0']?.Value[0];
  }

  // HPGL Document Label
  get HPGLDocumentLabel(): string | undefined {
    return this.x006862d5;
  }

  get x006862d5(): string | undefined {
    const element = this.dwResponse['006862d5'];
    return this.dwResponse['006862d5']?.Value[0];
  }

  // View Orientation Code Sequence
  get ViewOrientationCodeSequence(): Array<Dataset> | undefined {
    return this.x006862e0;
  }

  get x006862e0(): Array<Dataset> | undefined {
    const element = this.dwResponse['006862e0'];
    return this.dwResponse['006862e0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // View Orientation Modifier
  get ViewOrientationModifier(): Array<number> | undefined {
    return this.x006862f0;
  }

  get x006862f0(): Array<number> | undefined {
    const element = this.dwResponse['006862f0'];
    return this.dwResponse['006862f0']?.Value;
  }

  // HPGL Document Scaling
  get HPGLDocumentScaling(): number | undefined {
    return this.x006862f2;
  }

  get x006862f2(): number | undefined {
    const element = this.dwResponse['006862f2'];
    return this.dwResponse['006862f2']?.Value[0];
  }

  // HPGL Contour Pen Number
  get HPGLContourPenNumber(): number | undefined {
    return this.x00686310;
  }

  get x00686310(): number | undefined {
    const element = this.dwResponse['00686310'];
    return this.dwResponse['00686310']?.Value[0];
  }

  // HPGL Pen Sequence
  get HPGLPenSequence(): Array<Dataset> | undefined {
    return this.x00686320;
  }

  get x00686320(): Array<Dataset> | undefined {
    const element = this.dwResponse['00686320'];
    return this.dwResponse['00686320']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // HPGL Pen Number
  get HPGLPenNumber(): number | undefined {
    return this.x00686330;
  }

  get x00686330(): number | undefined {
    const element = this.dwResponse['00686330'];
    return this.dwResponse['00686330']?.Value[0];
  }

  // HPGL Pen Label
  get HPGLPenLabel(): string | undefined {
    return this.x00686340;
  }

  get x00686340(): string | undefined {
    const element = this.dwResponse['00686340'];
    return this.dwResponse['00686340']?.Value[0];
  }

  // Recommended Rotation Point
  get RecommendedRotationPoint(): Array<number> | undefined {
    return this.x00686346;
  }

  get x00686346(): Array<number> | undefined {
    const element = this.dwResponse['00686346'];
    return this.dwResponse['00686346']?.Value;
  }

  // Bounding Rectangle
  get BoundingRectangle(): Array<number> | undefined {
    return this.x00686347;
  }

  get x00686347(): Array<number> | undefined {
    const element = this.dwResponse['00686347'];
    return this.dwResponse['00686347']?.Value;
  }

  // Implant Template 3D Model Surface Number
  get ImplantTemplate3DModelSurfaceNumber(): Array<number> | undefined {
    return this.x00686350;
  }

  get x00686350(): Array<number> | undefined {
    const element = this.dwResponse['00686350'];
    return this.dwResponse['00686350']?.Value;
  }

  // Surface Model Description Sequence
  get SurfaceModelDescriptionSequence(): Array<Dataset> | undefined {
    return this.x00686360;
  }

  get x00686360(): Array<Dataset> | undefined {
    const element = this.dwResponse['00686360'];
    return this.dwResponse['00686360']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Surface Model Label
  get SurfaceModelLabel(): string | undefined {
    return this.x00686380;
  }

  get x00686380(): string | undefined {
    const element = this.dwResponse['00686380'];
    return this.dwResponse['00686380']?.Value[0];
  }

  // Surface Model Scaling Factor
  get SurfaceModelScalingFactor(): number | undefined {
    return this.x00686390;
  }

  get x00686390(): number | undefined {
    const element = this.dwResponse['00686390'];
    return this.dwResponse['00686390']?.Value[0];
  }

  // Materials Code Sequence
  get MaterialsCodeSequence(): Array<Dataset> | undefined {
    return this.x006863a0;
  }

  get x006863a0(): Array<Dataset> | undefined {
    const element = this.dwResponse['006863a0'];
    return this.dwResponse['006863a0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Coating Materials Code Sequence
  get CoatingMaterialsCodeSequence(): Array<Dataset> | undefined {
    return this.x006863a4;
  }

  get x006863a4(): Array<Dataset> | undefined {
    const element = this.dwResponse['006863a4'];
    return this.dwResponse['006863a4']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Implant Type Code Sequence
  get ImplantTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x006863a8;
  }

  get x006863a8(): Array<Dataset> | undefined {
    const element = this.dwResponse['006863a8'];
    return this.dwResponse['006863a8']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Fixation Method Code Sequence
  get FixationMethodCodeSequence(): Array<Dataset> | undefined {
    return this.x006863ac;
  }

  get x006863ac(): Array<Dataset> | undefined {
    const element = this.dwResponse['006863ac'];
    return this.dwResponse['006863ac']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Mating Feature Sets Sequence
  get MatingFeatureSetsSequence(): Array<Dataset> | undefined {
    return this.x006863b0;
  }

  get x006863b0(): Array<Dataset> | undefined {
    const element = this.dwResponse['006863b0'];
    return this.dwResponse['006863b0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Mating Feature Set ID
  get MatingFeatureSetID(): number | undefined {
    return this.x006863c0;
  }

  get x006863c0(): number | undefined {
    const element = this.dwResponse['006863c0'];
    return this.dwResponse['006863c0']?.Value[0];
  }

  // Mating Feature Set Label
  get MatingFeatureSetLabel(): string | undefined {
    return this.x006863d0;
  }

  get x006863d0(): string | undefined {
    const element = this.dwResponse['006863d0'];
    return this.dwResponse['006863d0']?.Value[0];
  }

  // Mating Feature Sequence
  get MatingFeatureSequence(): Array<Dataset> | undefined {
    return this.x006863e0;
  }

  get x006863e0(): Array<Dataset> | undefined {
    const element = this.dwResponse['006863e0'];
    return this.dwResponse['006863e0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Mating Feature ID
  get MatingFeatureID(): number | undefined {
    return this.x006863f0;
  }

  get x006863f0(): number | undefined {
    const element = this.dwResponse['006863f0'];
    return this.dwResponse['006863f0']?.Value[0];
  }

  // Mating Feature Degree of Freedom Sequence
  get MatingFeatureDegreeOfFreedomSequence(): Array<Dataset> | undefined {
    return this.x00686400;
  }

  get x00686400(): Array<Dataset> | undefined {
    const element = this.dwResponse['00686400'];
    return this.dwResponse['00686400']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Degree of Freedom ID
  get DegreeOfFreedomID(): number | undefined {
    return this.x00686410;
  }

  get x00686410(): number | undefined {
    const element = this.dwResponse['00686410'];
    return this.dwResponse['00686410']?.Value[0];
  }

  // Degree of Freedom Type
  get DegreeOfFreedomType(): string | undefined {
    return this.x00686420;
  }

  get x00686420(): string | undefined {
    const element = this.dwResponse['00686420'];
    return this.dwResponse['00686420']?.Value[0];
  }

  // 2D Mating Feature Coordinates Sequence
  get TwoDMatingFeatureCoordinatesSequence(): Array<Dataset> | undefined {
    return this.x00686430;
  }

  get x00686430(): Array<Dataset> | undefined {
    const element = this.dwResponse['00686430'];
    return this.dwResponse['00686430']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced HPGL Document ID
  get ReferencedHPGLDocumentID(): number | undefined {
    return this.x00686440;
  }

  get x00686440(): number | undefined {
    const element = this.dwResponse['00686440'];
    return this.dwResponse['00686440']?.Value[0];
  }

  // 2D Mating Point
  get TwoDMatingPoint(): Array<number> | undefined {
    return this.x00686450;
  }

  get x00686450(): Array<number> | undefined {
    const element = this.dwResponse['00686450'];
    return this.dwResponse['00686450']?.Value;
  }

  // 2D Mating Axes
  get TwoDMatingAxes(): Array<number> | undefined {
    return this.x00686460;
  }

  get x00686460(): Array<number> | undefined {
    const element = this.dwResponse['00686460'];
    return this.dwResponse['00686460']?.Value;
  }

  // 2D Degree of Freedom Sequence
  get TwoDDegreeOfFreedomSequence(): Array<Dataset> | undefined {
    return this.x00686470;
  }

  get x00686470(): Array<Dataset> | undefined {
    const element = this.dwResponse['00686470'];
    return this.dwResponse['00686470']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // 3D Degree of Freedom Axis
  get ThreeDDegreeOfFreedomAxis(): Array<number> | undefined {
    return this.x00686490;
  }

  get x00686490(): Array<number> | undefined {
    const element = this.dwResponse['00686490'];
    return this.dwResponse['00686490']?.Value;
  }

  // Range of Freedom
  get RangeOfFreedom(): Array<number> | undefined {
    return this.x006864a0;
  }

  get x006864a0(): Array<number> | undefined {
    const element = this.dwResponse['006864a0'];
    return this.dwResponse['006864a0']?.Value;
  }

  // 3D Mating Point
  get ThreeDMatingPoint(): Array<number> | undefined {
    return this.x006864c0;
  }

  get x006864c0(): Array<number> | undefined {
    const element = this.dwResponse['006864c0'];
    return this.dwResponse['006864c0']?.Value;
  }

  // 3D Mating Axes
  get ThreeDMatingAxes(): Array<number> | undefined {
    return this.x006864d0;
  }

  get x006864d0(): Array<number> | undefined {
    const element = this.dwResponse['006864d0'];
    return this.dwResponse['006864d0']?.Value;
  }

  // 2D Degree of Freedom Axis
  get TwoDDegreeOfFreedomAxis(): Array<number> | undefined {
    return this.x006864f0;
  }

  get x006864f0(): Array<number> | undefined {
    const element = this.dwResponse['006864f0'];
    return this.dwResponse['006864f0']?.Value;
  }

  // Planning Landmark Point Sequence
  get PlanningLandmarkPointSequence(): Array<Dataset> | undefined {
    return this.x00686500;
  }

  get x00686500(): Array<Dataset> | undefined {
    const element = this.dwResponse['00686500'];
    return this.dwResponse['00686500']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Planning Landmark Line Sequence
  get PlanningLandmarkLineSequence(): Array<Dataset> | undefined {
    return this.x00686510;
  }

  get x00686510(): Array<Dataset> | undefined {
    const element = this.dwResponse['00686510'];
    return this.dwResponse['00686510']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Planning Landmark Plane Sequence
  get PlanningLandmarkPlaneSequence(): Array<Dataset> | undefined {
    return this.x00686520;
  }

  get x00686520(): Array<Dataset> | undefined {
    const element = this.dwResponse['00686520'];
    return this.dwResponse['00686520']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Planning Landmark ID
  get PlanningLandmarkID(): number | undefined {
    return this.x00686530;
  }

  get x00686530(): number | undefined {
    const element = this.dwResponse['00686530'];
    return this.dwResponse['00686530']?.Value[0];
  }

  // Planning Landmark Description
  get PlanningLandmarkDescription(): string | undefined {
    return this.x00686540;
  }

  get x00686540(): string | undefined {
    const element = this.dwResponse['00686540'];
    return this.dwResponse['00686540']?.Value[0];
  }

  // Planning Landmark Identification Code Sequence
  get PlanningLandmarkIdentificationCodeSequence(): Array<Dataset> | undefined {
    return this.x00686545;
  }

  get x00686545(): Array<Dataset> | undefined {
    const element = this.dwResponse['00686545'];
    return this.dwResponse['00686545']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // 2D Point Coordinates Sequence
  get TwoDPointCoordinatesSequence(): Array<Dataset> | undefined {
    return this.x00686550;
  }

  get x00686550(): Array<Dataset> | undefined {
    const element = this.dwResponse['00686550'];
    return this.dwResponse['00686550']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // 2D Point Coordinates
  get TwoDPointCoordinates(): Array<number> | undefined {
    return this.x00686560;
  }

  get x00686560(): Array<number> | undefined {
    const element = this.dwResponse['00686560'];
    return this.dwResponse['00686560']?.Value;
  }

  // 3D Point Coordinates
  get ThreeDPointCoordinates(): Array<number> | undefined {
    return this.x00686590;
  }

  get x00686590(): Array<number> | undefined {
    const element = this.dwResponse['00686590'];
    return this.dwResponse['00686590']?.Value;
  }

  // 2D Line Coordinates Sequence
  get TwoDLineCoordinatesSequence(): Array<Dataset> | undefined {
    return this.x006865a0;
  }

  get x006865a0(): Array<Dataset> | undefined {
    const element = this.dwResponse['006865a0'];
    return this.dwResponse['006865a0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // 2D Line Coordinates
  get TwoDLineCoordinates(): Array<number> | undefined {
    return this.x006865b0;
  }

  get x006865b0(): Array<number> | undefined {
    const element = this.dwResponse['006865b0'];
    return this.dwResponse['006865b0']?.Value;
  }

  // 3D Line Coordinates
  get ThreeDLineCoordinates(): Array<number> | undefined {
    return this.x006865d0;
  }

  get x006865d0(): Array<number> | undefined {
    const element = this.dwResponse['006865d0'];
    return this.dwResponse['006865d0']?.Value;
  }

  // 2D Plane Coordinates Sequence
  get TwoDPlaneCoordinatesSequence(): Array<Dataset> | undefined {
    return this.x006865e0;
  }

  get x006865e0(): Array<Dataset> | undefined {
    const element = this.dwResponse['006865e0'];
    return this.dwResponse['006865e0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // 2D Plane Intersection
  get TwoDPlaneIntersection(): Array<number> | undefined {
    return this.x006865f0;
  }

  get x006865f0(): Array<number> | undefined {
    const element = this.dwResponse['006865f0'];
    return this.dwResponse['006865f0']?.Value;
  }

  // 3D Plane Origin
  get ThreeDPlaneOrigin(): Array<number> | undefined {
    return this.x00686610;
  }

  get x00686610(): Array<number> | undefined {
    const element = this.dwResponse['00686610'];
    return this.dwResponse['00686610']?.Value;
  }

  // 3D Plane Normal
  get ThreeDPlaneNormal(): Array<number> | undefined {
    return this.x00686620;
  }

  get x00686620(): Array<number> | undefined {
    const element = this.dwResponse['00686620'];
    return this.dwResponse['00686620']?.Value;
  }

  // Graphic Annotation Sequence
  get GraphicAnnotationSequence(): Array<Dataset> | undefined {
    return this.x00700001;
  }

  get x00700001(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700001'];
    return this.dwResponse['00700001']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Graphic Layer
  get GraphicLayer(): string | undefined {
    return this.x00700002;
  }

  get x00700002(): string | undefined {
    const element = this.dwResponse['00700002'];
    return this.dwResponse['00700002']?.Value[0];
  }

  // Bounding Box Annotation Units
  get BoundingBoxAnnotationUnits(): string | undefined {
    return this.x00700003;
  }

  get x00700003(): string | undefined {
    const element = this.dwResponse['00700003'];
    return this.dwResponse['00700003']?.Value[0];
  }

  // Anchor Point Annotation Units
  get AnchorPointAnnotationUnits(): string | undefined {
    return this.x00700004;
  }

  get x00700004(): string | undefined {
    const element = this.dwResponse['00700004'];
    return this.dwResponse['00700004']?.Value[0];
  }

  // Graphic Annotation Units
  get GraphicAnnotationUnits(): string | undefined {
    return this.x00700005;
  }

  get x00700005(): string | undefined {
    const element = this.dwResponse['00700005'];
    return this.dwResponse['00700005']?.Value[0];
  }

  // Text Object Sequence
  get TextObjectSequence(): Array<Dataset> | undefined {
    return this.x00700008;
  }

  get x00700008(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700008'];
    return this.dwResponse['00700008']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Graphic Object Sequence
  get GraphicObjectSequence(): Array<Dataset> | undefined {
    return this.x00700009;
  }

  get x00700009(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700009'];
    return this.dwResponse['00700009']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Bounding Box Top Left Hand Corner
  get BoundingBoxTopLeftHandCorner(): Array<number> | undefined {
    return this.x00700010;
  }

  get x00700010(): Array<number> | undefined {
    const element = this.dwResponse['00700010'];
    return this.dwResponse['00700010']?.Value;
  }

  // Bounding Box Bottom Right Hand Corner
  get BoundingBoxBottomRightHandCorner(): Array<number> | undefined {
    return this.x00700011;
  }

  get x00700011(): Array<number> | undefined {
    const element = this.dwResponse['00700011'];
    return this.dwResponse['00700011']?.Value;
  }

  // Bounding Box Text Horizontal Justification
  get BoundingBoxTextHorizontalJustification(): string | undefined {
    return this.x00700012;
  }

  get x00700012(): string | undefined {
    const element = this.dwResponse['00700012'];
    return this.dwResponse['00700012']?.Value[0];
  }

  // Anchor Point
  get AnchorPoint(): Array<number> | undefined {
    return this.x00700014;
  }

  get x00700014(): Array<number> | undefined {
    const element = this.dwResponse['00700014'];
    return this.dwResponse['00700014']?.Value;
  }

  // Anchor Point Visibility
  get AnchorPointVisibility(): string | undefined {
    return this.x00700015;
  }

  get x00700015(): string | undefined {
    const element = this.dwResponse['00700015'];
    return this.dwResponse['00700015']?.Value[0];
  }

  // Graphic Dimensions
  get GraphicDimensions(): number | undefined {
    return this.x00700020;
  }

  get x00700020(): number | undefined {
    const element = this.dwResponse['00700020'];
    return this.dwResponse['00700020']?.Value[0];
  }

  // Number of Graphic Points
  get NumberOfGraphicPoints(): number | undefined {
    return this.x00700021;
  }

  get x00700021(): number | undefined {
    const element = this.dwResponse['00700021'];
    return this.dwResponse['00700021']?.Value[0];
  }

  // Graphic Data
  get GraphicData(): Array<number> | undefined {
    return this.x00700022;
  }

  get x00700022(): Array<number> | undefined {
    const element = this.dwResponse['00700022'];
    return this.dwResponse['00700022']?.Value;
  }

  // Graphic Type
  get GraphicType(): string | undefined {
    return this.x00700023;
  }

  get x00700023(): string | undefined {
    const element = this.dwResponse['00700023'];
    return this.dwResponse['00700023']?.Value[0];
  }

  // Graphic Filled
  get GraphicFilled(): string | undefined {
    return this.x00700024;
  }

  get x00700024(): string | undefined {
    const element = this.dwResponse['00700024'];
    return this.dwResponse['00700024']?.Value[0];
  }

  // Image Rotation (Retired)
  get ImageRotationRetired(): number | undefined {
    return this.x00700040;
  }

  get x00700040(): number | undefined {
    const element = this.dwResponse['00700040'];
    return this.dwResponse['00700040']?.Value[0];
  }

  // Image Horizontal Flip
  get ImageHorizontalFlip(): string | undefined {
    return this.x00700041;
  }

  get x00700041(): string | undefined {
    const element = this.dwResponse['00700041'];
    return this.dwResponse['00700041']?.Value[0];
  }

  // Image Rotation
  get ImageRotation(): number | undefined {
    return this.x00700042;
  }

  get x00700042(): number | undefined {
    const element = this.dwResponse['00700042'];
    return this.dwResponse['00700042']?.Value[0];
  }

  // Displayed Area Top Left Hand Corner (Trial)
  get DisplayedAreaTopLeftHandCornerTrial(): Array<number> | undefined {
    return this.x00700050;
  }

  get x00700050(): Array<number> | undefined {
    const element = this.dwResponse['00700050'];
    return this.dwResponse['00700050']?.Value;
  }

  // Displayed Area Bottom Right Hand Corner (Trial)
  get DisplayedAreaBottomRightHandCornerTrial(): Array<number> | undefined {
    return this.x00700051;
  }

  get x00700051(): Array<number> | undefined {
    const element = this.dwResponse['00700051'];
    return this.dwResponse['00700051']?.Value;
  }

  // Displayed Area Top Left Hand Corner
  get DisplayedAreaTopLeftHandCorner(): Array<number> | undefined {
    return this.x00700052;
  }

  get x00700052(): Array<number> | undefined {
    const element = this.dwResponse['00700052'];
    return this.dwResponse['00700052']?.Value;
  }

  // Displayed Area Bottom Right Hand Corner
  get DisplayedAreaBottomRightHandCorner(): Array<number> | undefined {
    return this.x00700053;
  }

  get x00700053(): Array<number> | undefined {
    const element = this.dwResponse['00700053'];
    return this.dwResponse['00700053']?.Value;
  }

  // Displayed Area Selection Sequence
  get DisplayedAreaSelectionSequence(): Array<Dataset> | undefined {
    return this.x0070005a;
  }

  get x0070005a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0070005a'];
    return this.dwResponse['0070005a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Graphic Layer Sequence
  get GraphicLayerSequence(): Array<Dataset> | undefined {
    return this.x00700060;
  }

  get x00700060(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700060'];
    return this.dwResponse['00700060']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Graphic Layer Order
  get GraphicLayerOrder(): number | undefined {
    return this.x00700062;
  }

  get x00700062(): number | undefined {
    const element = this.dwResponse['00700062'];
    return this.dwResponse['00700062']?.Value[0];
  }

  // Graphic Layer Recommended Display Grayscale Value
  get GraphicLayerRecommendedDisplayGrayscaleValue(): number | undefined {
    return this.x00700066;
  }

  get x00700066(): number | undefined {
    const element = this.dwResponse['00700066'];
    return this.dwResponse['00700066']?.Value[0];
  }

  // Graphic Layer Recommended Display RGB Value
  get GraphicLayerRecommendedDisplayRGBValue(): Array<number> | undefined {
    return this.x00700067;
  }

  get x00700067(): Array<number> | undefined {
    const element = this.dwResponse['00700067'];
    return this.dwResponse['00700067']?.Value;
  }

  // Graphic Layer Description
  get GraphicLayerDescription(): string | undefined {
    return this.x00700068;
  }

  get x00700068(): string | undefined {
    const element = this.dwResponse['00700068'];
    return this.dwResponse['00700068']?.Value[0];
  }

  // Content Label
  get ContentLabel(): string | undefined {
    return this.x00700080;
  }

  get x00700080(): string | undefined {
    const element = this.dwResponse['00700080'];
    return this.dwResponse['00700080']?.Value[0];
  }

  // Content Description
  get ContentDescription(): string | undefined {
    return this.x00700081;
  }

  get x00700081(): string | undefined {
    const element = this.dwResponse['00700081'];
    return this.dwResponse['00700081']?.Value[0];
  }

  // Presentation Creation Date
  get PresentationCreationDate(): Date | undefined {
    return this.x00700082;
  }

  get x00700082(): Date | undefined {
    const element = this.dwResponse['00700082'];
    return this.dwResponse['00700082']?.Value[0];
  }

  // Presentation Creation Time
  get PresentationCreationTime(): string | undefined {
    return this.x00700083;
  }

  get x00700083(): string | undefined {
    const element = this.dwResponse['00700083'];
    return this.dwResponse['00700083']?.Value[0];
  }

  // Content Creator's Name
  get ContentCreatorName(): any | undefined {
    return this.x00700084;
  }

  get x00700084(): any | undefined {
    const element = this.dwResponse['00700084'];
    return this.dwResponse['00700084']?.Value[0];
  }

  // Content Creator's Identification Code Sequence
  get ContentCreatorIdentificationCodeSequence(): Array<Dataset> | undefined {
    return this.x00700086;
  }

  get x00700086(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700086'];
    return this.dwResponse['00700086']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Alternate Content Description Sequence
  get AlternateContentDescriptionSequence(): Array<Dataset> | undefined {
    return this.x00700087;
  }

  get x00700087(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700087'];
    return this.dwResponse['00700087']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Presentation Size Mode
  get PresentationSizeMode(): string | undefined {
    return this.x00700100;
  }

  get x00700100(): string | undefined {
    const element = this.dwResponse['00700100'];
    return this.dwResponse['00700100']?.Value[0];
  }

  // Presentation Pixel Spacing
  get PresentationPixelSpacing(): Array<number> | undefined {
    return this.x00700101;
  }

  get x00700101(): Array<number> | undefined {
    const element = this.dwResponse['00700101'];
    return this.dwResponse['00700101']?.Value;
  }

  // Presentation Pixel Aspect Ratio
  get PresentationPixelAspectRatio(): Array<number> | undefined {
    return this.x00700102;
  }

  get x00700102(): Array<number> | undefined {
    const element = this.dwResponse['00700102'];
    return this.dwResponse['00700102']?.Value;
  }

  // Presentation Pixel Magnification Ratio
  get PresentationPixelMagnificationRatio(): number | undefined {
    return this.x00700103;
  }

  get x00700103(): number | undefined {
    const element = this.dwResponse['00700103'];
    return this.dwResponse['00700103']?.Value[0];
  }

  // Graphic Group Label
  get GraphicGroupLabel(): string | undefined {
    return this.x00700207;
  }

  get x00700207(): string | undefined {
    const element = this.dwResponse['00700207'];
    return this.dwResponse['00700207']?.Value[0];
  }

  // Compound Graphic Sequence
  get CompoundGraphicSequence(): Array<Dataset> | undefined {
    return this.x00700209;
  }

  get x00700209(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700209'];
    return this.dwResponse['00700209']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Compound Graphic Instance ID
  get CompoundGraphicInstanceID(): number | undefined {
    return this.x00700226;
  }

  get x00700226(): number | undefined {
    const element = this.dwResponse['00700226'];
    return this.dwResponse['00700226']?.Value[0];
  }

  // Font Name
  get FontName(): string | undefined {
    return this.x00700227;
  }

  get x00700227(): string | undefined {
    const element = this.dwResponse['00700227'];
    return this.dwResponse['00700227']?.Value[0];
  }

  // Font Name Type
  get FontNameType(): string | undefined {
    return this.x00700228;
  }

  get x00700228(): string | undefined {
    const element = this.dwResponse['00700228'];
    return this.dwResponse['00700228']?.Value[0];
  }

  // CSS Font Name
  get CSSFontName(): string | undefined {
    return this.x00700229;
  }

  get x00700229(): string | undefined {
    const element = this.dwResponse['00700229'];
    return this.dwResponse['00700229']?.Value[0];
  }

  // Rotation Angle
  get RotationAngle(): number | undefined {
    return this.x00700230;
  }

  get x00700230(): number | undefined {
    const element = this.dwResponse['00700230'];
    return this.dwResponse['00700230']?.Value[0];
  }

  // Text Style Sequence
  get TextStyleSequence(): Array<Dataset> | undefined {
    return this.x00700231;
  }

  get x00700231(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700231'];
    return this.dwResponse['00700231']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Line Style Sequence
  get LineStyleSequence(): Array<Dataset> | undefined {
    return this.x00700232;
  }

  get x00700232(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700232'];
    return this.dwResponse['00700232']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Fill Style Sequence
  get FillStyleSequence(): Array<Dataset> | undefined {
    return this.x00700233;
  }

  get x00700233(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700233'];
    return this.dwResponse['00700233']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Graphic Group Sequence
  get GraphicGroupSequence(): Array<Dataset> | undefined {
    return this.x00700234;
  }

  get x00700234(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700234'];
    return this.dwResponse['00700234']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Text Color CIELab Value
  get TextColorCIELabValue(): Array<number> | undefined {
    return this.x00700241;
  }

  get x00700241(): Array<number> | undefined {
    const element = this.dwResponse['00700241'];
    return this.dwResponse['00700241']?.Value;
  }

  // Horizontal Alignment
  get HorizontalAlignment(): string | undefined {
    return this.x00700242;
  }

  get x00700242(): string | undefined {
    const element = this.dwResponse['00700242'];
    return this.dwResponse['00700242']?.Value[0];
  }

  // Vertical Alignment
  get VerticalAlignment(): string | undefined {
    return this.x00700243;
  }

  get x00700243(): string | undefined {
    const element = this.dwResponse['00700243'];
    return this.dwResponse['00700243']?.Value[0];
  }

  // Shadow Style
  get ShadowStyle(): string | undefined {
    return this.x00700244;
  }

  get x00700244(): string | undefined {
    const element = this.dwResponse['00700244'];
    return this.dwResponse['00700244']?.Value[0];
  }

  // Shadow Offset X
  get ShadowOffsetX(): number | undefined {
    return this.x00700245;
  }

  get x00700245(): number | undefined {
    const element = this.dwResponse['00700245'];
    return this.dwResponse['00700245']?.Value[0];
  }

  // Shadow Offset Y
  get ShadowOffsetY(): number | undefined {
    return this.x00700246;
  }

  get x00700246(): number | undefined {
    const element = this.dwResponse['00700246'];
    return this.dwResponse['00700246']?.Value[0];
  }

  // Shadow Color CIELab Value
  get ShadowColorCIELabValue(): Array<number> | undefined {
    return this.x00700247;
  }

  get x00700247(): Array<number> | undefined {
    const element = this.dwResponse['00700247'];
    return this.dwResponse['00700247']?.Value;
  }

  // Underlined
  get Underlined(): string | undefined {
    return this.x00700248;
  }

  get x00700248(): string | undefined {
    const element = this.dwResponse['00700248'];
    return this.dwResponse['00700248']?.Value[0];
  }

  // Bold
  get Bold(): string | undefined {
    return this.x00700249;
  }

  get x00700249(): string | undefined {
    const element = this.dwResponse['00700249'];
    return this.dwResponse['00700249']?.Value[0];
  }

  // Italic
  get Italic(): string | undefined {
    return this.x00700250;
  }

  get x00700250(): string | undefined {
    const element = this.dwResponse['00700250'];
    return this.dwResponse['00700250']?.Value[0];
  }

  // Pattern On Color CIELab Value
  get PatternOnColorCIELabValue(): Array<number> | undefined {
    return this.x00700251;
  }

  get x00700251(): Array<number> | undefined {
    const element = this.dwResponse['00700251'];
    return this.dwResponse['00700251']?.Value;
  }

  // Pattern Off Color CIELab Value
  get PatternOffColorCIELabValue(): Array<number> | undefined {
    return this.x00700252;
  }

  get x00700252(): Array<number> | undefined {
    const element = this.dwResponse['00700252'];
    return this.dwResponse['00700252']?.Value;
  }

  // Line Thickness
  get LineThickness(): number | undefined {
    return this.x00700253;
  }

  get x00700253(): number | undefined {
    const element = this.dwResponse['00700253'];
    return this.dwResponse['00700253']?.Value[0];
  }

  // Line Dashing Style
  get LineDashingStyle(): string | undefined {
    return this.x00700254;
  }

  get x00700254(): string | undefined {
    const element = this.dwResponse['00700254'];
    return this.dwResponse['00700254']?.Value[0];
  }

  // Line Pattern
  get LinePattern(): number | undefined {
    return this.x00700255;
  }

  get x00700255(): number | undefined {
    const element = this.dwResponse['00700255'];
    return this.dwResponse['00700255']?.Value[0];
  }

  // Fill Mode
  get FillMode(): string | undefined {
    return this.x00700257;
  }

  get x00700257(): string | undefined {
    const element = this.dwResponse['00700257'];
    return this.dwResponse['00700257']?.Value[0];
  }

  // Shadow Opacity
  get ShadowOpacity(): number | undefined {
    return this.x00700258;
  }

  get x00700258(): number | undefined {
    const element = this.dwResponse['00700258'];
    return this.dwResponse['00700258']?.Value[0];
  }

  // Gap Length
  get GapLength(): number | undefined {
    return this.x00700261;
  }

  get x00700261(): number | undefined {
    const element = this.dwResponse['00700261'];
    return this.dwResponse['00700261']?.Value[0];
  }

  // Diameter of Visibility
  get DiameterOfVisibility(): number | undefined {
    return this.x00700262;
  }

  get x00700262(): number | undefined {
    const element = this.dwResponse['00700262'];
    return this.dwResponse['00700262']?.Value[0];
  }

  // Rotation Point
  get RotationPoint(): Array<number> | undefined {
    return this.x00700273;
  }

  get x00700273(): Array<number> | undefined {
    const element = this.dwResponse['00700273'];
    return this.dwResponse['00700273']?.Value;
  }

  // Tick Alignment
  get TickAlignment(): string | undefined {
    return this.x00700274;
  }

  get x00700274(): string | undefined {
    const element = this.dwResponse['00700274'];
    return this.dwResponse['00700274']?.Value[0];
  }

  // Show Tick Label
  get ShowTickLabel(): string | undefined {
    return this.x00700278;
  }

  get x00700278(): string | undefined {
    const element = this.dwResponse['00700278'];
    return this.dwResponse['00700278']?.Value[0];
  }

  // Tick Label Alignment
  get TickLabelAlignment(): string | undefined {
    return this.x00700279;
  }

  get x00700279(): string | undefined {
    const element = this.dwResponse['00700279'];
    return this.dwResponse['00700279']?.Value[0];
  }

  // Compound Graphic Units
  get CompoundGraphicUnits(): string | undefined {
    return this.x00700282;
  }

  get x00700282(): string | undefined {
    const element = this.dwResponse['00700282'];
    return this.dwResponse['00700282']?.Value[0];
  }

  // Pattern On Opacity
  get PatternOnOpacity(): number | undefined {
    return this.x00700284;
  }

  get x00700284(): number | undefined {
    const element = this.dwResponse['00700284'];
    return this.dwResponse['00700284']?.Value[0];
  }

  // Pattern Off Opacity
  get PatternOffOpacity(): number | undefined {
    return this.x00700285;
  }

  get x00700285(): number | undefined {
    const element = this.dwResponse['00700285'];
    return this.dwResponse['00700285']?.Value[0];
  }

  // Major Ticks Sequence
  get MajorTicksSequence(): Array<Dataset> | undefined {
    return this.x00700287;
  }

  get x00700287(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700287'];
    return this.dwResponse['00700287']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Tick Position
  get TickPosition(): number | undefined {
    return this.x00700288;
  }

  get x00700288(): number | undefined {
    const element = this.dwResponse['00700288'];
    return this.dwResponse['00700288']?.Value[0];
  }

  // Tick Label
  get TickLabel(): string | undefined {
    return this.x00700289;
  }

  get x00700289(): string | undefined {
    const element = this.dwResponse['00700289'];
    return this.dwResponse['00700289']?.Value[0];
  }

  // Compound Graphic Type
  get CompoundGraphicType(): string | undefined {
    return this.x00700294;
  }

  get x00700294(): string | undefined {
    const element = this.dwResponse['00700294'];
    return this.dwResponse['00700294']?.Value[0];
  }

  // Graphic Group ID
  get GraphicGroupID(): number | undefined {
    return this.x00700295;
  }

  get x00700295(): number | undefined {
    const element = this.dwResponse['00700295'];
    return this.dwResponse['00700295']?.Value[0];
  }

  // Shape Type
  get ShapeType(): string | undefined {
    return this.x00700306;
  }

  get x00700306(): string | undefined {
    const element = this.dwResponse['00700306'];
    return this.dwResponse['00700306']?.Value[0];
  }

  // Registration Sequence
  get RegistrationSequence(): Array<Dataset> | undefined {
    return this.x00700308;
  }

  get x00700308(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700308'];
    return this.dwResponse['00700308']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Matrix Registration Sequence
  get MatrixRegistrationSequence(): Array<Dataset> | undefined {
    return this.x00700309;
  }

  get x00700309(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700309'];
    return this.dwResponse['00700309']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Matrix Sequence
  get MatrixSequence(): Array<Dataset> | undefined {
    return this.x0070030a;
  }

  get x0070030a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0070030a'];
    return this.dwResponse['0070030a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Frame of Reference Transformation Matrix Type
  get FrameOfReferenceTransformationMatrixType(): string | undefined {
    return this.x0070030c;
  }

  get x0070030c(): string | undefined {
    const element = this.dwResponse['0070030c'];
    return this.dwResponse['0070030c']?.Value[0];
  }

  // Registration Type Code Sequence
  get RegistrationTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x0070030d;
  }

  get x0070030d(): Array<Dataset> | undefined {
    const element = this.dwResponse['0070030d'];
    return this.dwResponse['0070030d']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Fiducial Identifier
  get FiducialIdentifier(): string | undefined {
    return this.x00700310;
  }

  get x00700310(): string | undefined {
    const element = this.dwResponse['00700310'];
    return this.dwResponse['00700310']?.Value[0];
  }

  // Fiducial Identifier Code Sequence
  get FiducialIdentifierCodeSequence(): Array<Dataset> | undefined {
    return this.x00700311;
  }

  get x00700311(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700311'];
    return this.dwResponse['00700311']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Contour Uncertainty Radius
  get ContourUncertaintyRadius(): number | undefined {
    return this.x00700312;
  }

  get x00700312(): number | undefined {
    const element = this.dwResponse['00700312'];
    return this.dwResponse['00700312']?.Value[0];
  }

  // Used Fiducials Sequence
  get UsedFiducialsSequence(): Array<Dataset> | undefined {
    return this.x00700314;
  }

  get x00700314(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700314'];
    return this.dwResponse['00700314']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Graphic Coordinates Data Sequence
  get GraphicCoordinatesDataSequence(): Array<Dataset> | undefined {
    return this.x00700318;
  }

  get x00700318(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700318'];
    return this.dwResponse['00700318']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Fiducial UID
  get FiducialUID(): string | undefined {
    return this.x0070031a;
  }

  get x0070031a(): string | undefined {
    const element = this.dwResponse['0070031a'];
    return this.dwResponse['0070031a']?.Value[0];
  }

  // Fiducial Set Sequence
  get FiducialSetSequence(): Array<Dataset> | undefined {
    return this.x0070031c;
  }

  get x0070031c(): Array<Dataset> | undefined {
    const element = this.dwResponse['0070031c'];
    return this.dwResponse['0070031c']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Fiducial Sequence
  get FiducialSequence(): Array<Dataset> | undefined {
    return this.x0070031e;
  }

  get x0070031e(): Array<Dataset> | undefined {
    const element = this.dwResponse['0070031e'];
    return this.dwResponse['0070031e']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Graphic Layer Recommended Display CIELab Value
  get GraphicLayerRecommendedDisplayCIELabValue(): Array<number> | undefined {
    return this.x00700401;
  }

  get x00700401(): Array<number> | undefined {
    const element = this.dwResponse['00700401'];
    return this.dwResponse['00700401']?.Value;
  }

  // Blending Sequence
  get BlendingSequence(): Array<Dataset> | undefined {
    return this.x00700402;
  }

  get x00700402(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700402'];
    return this.dwResponse['00700402']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Relative Opacity
  get RelativeOpacity(): number | undefined {
    return this.x00700403;
  }

  get x00700403(): number | undefined {
    const element = this.dwResponse['00700403'];
    return this.dwResponse['00700403']?.Value[0];
  }

  // Referenced Spatial Registration Sequence
  get ReferencedSpatialRegistrationSequence(): Array<Dataset> | undefined {
    return this.x00700404;
  }

  get x00700404(): Array<Dataset> | undefined {
    const element = this.dwResponse['00700404'];
    return this.dwResponse['00700404']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Blending Position
  get BlendingPosition(): string | undefined {
    return this.x00700405;
  }

  get x00700405(): string | undefined {
    const element = this.dwResponse['00700405'];
    return this.dwResponse['00700405']?.Value[0];
  }

  // Hanging Protocol Name
  get HangingProtocolName(): string | undefined {
    return this.x00720002;
  }

  get x00720002(): string | undefined {
    const element = this.dwResponse['00720002'];
    return this.dwResponse['00720002']?.Value[0];
  }

  // Hanging Protocol Description
  get HangingProtocolDescription(): string | undefined {
    return this.x00720004;
  }

  get x00720004(): string | undefined {
    const element = this.dwResponse['00720004'];
    return this.dwResponse['00720004']?.Value[0];
  }

  // Hanging Protocol Level
  get HangingProtocolLevel(): string | undefined {
    return this.x00720006;
  }

  get x00720006(): string | undefined {
    const element = this.dwResponse['00720006'];
    return this.dwResponse['00720006']?.Value[0];
  }

  // Hanging Protocol Creator
  get HangingProtocolCreator(): string | undefined {
    return this.x00720008;
  }

  get x00720008(): string | undefined {
    const element = this.dwResponse['00720008'];
    return this.dwResponse['00720008']?.Value[0];
  }

  // Hanging Protocol Creation DateTime
  get HangingProtocolCreationDateTime(): string | undefined {
    return this.x0072000a;
  }

  get x0072000a(): string | undefined {
    const element = this.dwResponse['0072000a'];
    return this.dwResponse['0072000a']?.Value[0];
  }

  // Hanging Protocol Definition Sequence
  get HangingProtocolDefinitionSequence(): Array<Dataset> | undefined {
    return this.x0072000c;
  }

  get x0072000c(): Array<Dataset> | undefined {
    const element = this.dwResponse['0072000c'];
    return this.dwResponse['0072000c']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Hanging Protocol User Identification Code Sequence
  get HangingProtocolUserIdentificationCodeSequence(): Array<Dataset> | undefined {
    return this.x0072000e;
  }

  get x0072000e(): Array<Dataset> | undefined {
    const element = this.dwResponse['0072000e'];
    return this.dwResponse['0072000e']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Hanging Protocol User Group Name
  get HangingProtocolUserGroupName(): string | undefined {
    return this.x00720010;
  }

  get x00720010(): string | undefined {
    const element = this.dwResponse['00720010'];
    return this.dwResponse['00720010']?.Value[0];
  }

  // Source Hanging Protocol Sequence
  get SourceHangingProtocolSequence(): Array<Dataset> | undefined {
    return this.x00720012;
  }

  get x00720012(): Array<Dataset> | undefined {
    const element = this.dwResponse['00720012'];
    return this.dwResponse['00720012']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Number of Priors Referenced
  get NumberOfPriorsReferenced(): number | undefined {
    return this.x00720014;
  }

  get x00720014(): number | undefined {
    const element = this.dwResponse['00720014'];
    return this.dwResponse['00720014']?.Value[0];
  }

  // Image Sets Sequence
  get ImageSetsSequence(): Array<Dataset> | undefined {
    return this.x00720020;
  }

  get x00720020(): Array<Dataset> | undefined {
    const element = this.dwResponse['00720020'];
    return this.dwResponse['00720020']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Image Set Selector Sequence
  get ImageSetSelectorSequence(): Array<Dataset> | undefined {
    return this.x00720022;
  }

  get x00720022(): Array<Dataset> | undefined {
    const element = this.dwResponse['00720022'];
    return this.dwResponse['00720022']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Image Set Selector Usage Flag
  get ImageSetSelectorUsageFlag(): string | undefined {
    return this.x00720024;
  }

  get x00720024(): string | undefined {
    const element = this.dwResponse['00720024'];
    return this.dwResponse['00720024']?.Value[0];
  }

  // Selector Attribute
  get SelectorAttribute(): Uint16Array | undefined {
    return this.x00720026;
  }

  get x00720026(): Uint16Array | undefined {
    const element = this.dwResponse['00720026'];
    return this.dwResponse['00720026']?.Value[0];
  }

  // Selector Value Number
  get SelectorValueNumber(): number | undefined {
    return this.x00720028;
  }

  get x00720028(): number | undefined {
    const element = this.dwResponse['00720028'];
    return this.dwResponse['00720028']?.Value[0];
  }

  // Time Based Image Sets Sequence
  get TimeBasedImageSetsSequence(): Array<Dataset> | undefined {
    return this.x00720030;
  }

  get x00720030(): Array<Dataset> | undefined {
    const element = this.dwResponse['00720030'];
    return this.dwResponse['00720030']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Image Set Number
  get ImageSetNumber(): number | undefined {
    return this.x00720032;
  }

  get x00720032(): number | undefined {
    const element = this.dwResponse['00720032'];
    return this.dwResponse['00720032']?.Value[0];
  }

  // Image Set Selector Category
  get ImageSetSelectorCategory(): string | undefined {
    return this.x00720034;
  }

  get x00720034(): string | undefined {
    const element = this.dwResponse['00720034'];
    return this.dwResponse['00720034']?.Value[0];
  }

  // Relative Time
  get RelativeTime(): Array<number> | undefined {
    return this.x00720038;
  }

  get x00720038(): Array<number> | undefined {
    const element = this.dwResponse['00720038'];
    return this.dwResponse['00720038']?.Value;
  }

  // Relative Time Units
  get RelativeTimeUnits(): string | undefined {
    return this.x0072003a;
  }

  get x0072003a(): string | undefined {
    const element = this.dwResponse['0072003a'];
    return this.dwResponse['0072003a']?.Value[0];
  }

  // Abstract Prior Value
  get AbstractPriorValue(): Array<Uint8Array> | undefined {
    return this.x0072003c;
  }

  get x0072003c(): Array<Uint8Array> | undefined {
    const element = this.dwResponse['0072003c'];
    return this.dwResponse['0072003c']?.Value;
  }

  // Abstract Prior Code Sequence
  get AbstractPriorCodeSequence(): Array<Dataset> | undefined {
    return this.x0072003e;
  }

  get x0072003e(): Array<Dataset> | undefined {
    const element = this.dwResponse['0072003e'];
    return this.dwResponse['0072003e']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Image Set Label
  get ImageSetLabel(): string | undefined {
    return this.x00720040;
  }

  get x00720040(): string | undefined {
    const element = this.dwResponse['00720040'];
    return this.dwResponse['00720040']?.Value[0];
  }

  // Selector Attribute VR
  get SelectorAttributeVR(): string | undefined {
    return this.x00720050;
  }

  get x00720050(): string | undefined {
    const element = this.dwResponse['00720050'];
    return this.dwResponse['00720050']?.Value[0];
  }

  // Selector Sequence Pointer
  get SelectorSequencePointer(): Array<Uint16Array> | undefined {
    return this.x00720052;
  }

  get x00720052(): Array<Uint16Array> | undefined {
    const element = this.dwResponse['00720052'];
    return this.dwResponse['00720052']?.Value;
  }

  // Selector Sequence Pointer Private Creator
  get SelectorSequencePointerPrivateCreator(): Array<string> | undefined {
    return this.x00720054;
  }

  get x00720054(): Array<string> | undefined {
    const element = this.dwResponse['00720054'];
    return this.dwResponse['00720054']?.Value;
  }

  // Selector Attribute Private Creator
  get SelectorAttributePrivateCreator(): string | undefined {
    return this.x00720056;
  }

  get x00720056(): string | undefined {
    const element = this.dwResponse['00720056'];
    return this.dwResponse['00720056']?.Value[0];
  }

  // Selector AT Value
  get SelectorATValue(): Array<Uint16Array> | undefined {
    return this.x00720060;
  }

  get x00720060(): Array<Uint16Array> | undefined {
    const element = this.dwResponse['00720060'];
    return this.dwResponse['00720060']?.Value;
  }

  // Selector CS Value
  get SelectorCSValue(): Array<string> | undefined {
    return this.x00720062;
  }

  get x00720062(): Array<string> | undefined {
    const element = this.dwResponse['00720062'];
    return this.dwResponse['00720062']?.Value;
  }

  // Selector IS Value
  get SelectorISValue(): Array<number> | undefined {
    return this.x00720064;
  }

  get x00720064(): Array<number> | undefined {
    const element = this.dwResponse['00720064'];
    return this.dwResponse['00720064']?.Value;
  }

  // Selector LO Value
  get SelectorLOValue(): Array<string> | undefined {
    return this.x00720066;
  }

  get x00720066(): Array<string> | undefined {
    const element = this.dwResponse['00720066'];
    return this.dwResponse['00720066']?.Value;
  }

  // Selector PN Value
  get SelectorPNValue(): Array<any> | undefined {
    return this.x0072006a;
  }

  get x0072006a(): Array<any> | undefined {
    const element = this.dwResponse['0072006a'];
    return this.dwResponse['0072006a']?.Value;
  }

  // Selector SH Value
  get SelectorSHValue(): Array<string> | undefined {
    return this.x0072006c;
  }

  get x0072006c(): Array<string> | undefined {
    const element = this.dwResponse['0072006c'];
    return this.dwResponse['0072006c']?.Value;
  }

  // Selector DS Value
  get SelectorDSValue(): Array<number> | undefined {
    return this.x00720072;
  }

  get x00720072(): Array<number> | undefined {
    const element = this.dwResponse['00720072'];
    return this.dwResponse['00720072']?.Value;
  }

  // Selector FD Value
  get SelectorFDValue(): Array<number> | undefined {
    return this.x00720074;
  }

  get x00720074(): Array<number> | undefined {
    const element = this.dwResponse['00720074'];
    return this.dwResponse['00720074']?.Value;
  }

  // Selector FL Value
  get SelectorFLValue(): Array<number> | undefined {
    return this.x00720076;
  }

  get x00720076(): Array<number> | undefined {
    const element = this.dwResponse['00720076'];
    return this.dwResponse['00720076']?.Value;
  }

  // Selector UL Value
  get SelectorULValue(): Array<number> | undefined {
    return this.x00720078;
  }

  get x00720078(): Array<number> | undefined {
    const element = this.dwResponse['00720078'];
    return this.dwResponse['00720078']?.Value;
  }

  // Selector US Value
  get SelectorUSValue(): Array<number> | undefined {
    return this.x0072007a;
  }

  get x0072007a(): Array<number> | undefined {
    const element = this.dwResponse['0072007a'];
    return this.dwResponse['0072007a']?.Value;
  }

  // Selector SL Value
  get SelectorSLValue(): Array<number> | undefined {
    return this.x0072007c;
  }

  get x0072007c(): Array<number> | undefined {
    const element = this.dwResponse['0072007c'];
    return this.dwResponse['0072007c']?.Value;
  }

  // Selector SS Value
  get SelectorSSValue(): Array<Uint8Array> | undefined {
    return this.x0072007e;
  }

  get x0072007e(): Array<Uint8Array> | undefined {
    const element = this.dwResponse['0072007e'];
    return this.dwResponse['0072007e']?.Value;
  }

  // Selector Code Sequence Value
  get SelectorCodeSequenceValue(): Array<Dataset> | undefined {
    return this.x00720080;
  }

  get x00720080(): Array<Dataset> | undefined {
    const element = this.dwResponse['00720080'];
    return this.dwResponse['00720080']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Number of Screens
  get NumberOfScreens(): number | undefined {
    return this.x00720100;
  }

  get x00720100(): number | undefined {
    const element = this.dwResponse['00720100'];
    return this.dwResponse['00720100']?.Value[0];
  }

  // Nominal Screen Definition Sequence
  get NominalScreenDefinitionSequence(): Array<Dataset> | undefined {
    return this.x00720102;
  }

  get x00720102(): Array<Dataset> | undefined {
    const element = this.dwResponse['00720102'];
    return this.dwResponse['00720102']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Number of Vertical Pixels
  get NumberOfVerticalPixels(): number | undefined {
    return this.x00720104;
  }

  get x00720104(): number | undefined {
    const element = this.dwResponse['00720104'];
    return this.dwResponse['00720104']?.Value[0];
  }

  // Number of Horizontal Pixels
  get NumberOfHorizontalPixels(): number | undefined {
    return this.x00720106;
  }

  get x00720106(): number | undefined {
    const element = this.dwResponse['00720106'];
    return this.dwResponse['00720106']?.Value[0];
  }

  // Display Environment Spatial Position
  get DisplayEnvironmentSpatialPosition(): Array<number> | undefined {
    return this.x00720108;
  }

  get x00720108(): Array<number> | undefined {
    const element = this.dwResponse['00720108'];
    return this.dwResponse['00720108']?.Value;
  }

  // Screen Minimum Grayscale Bit Depth
  get ScreenMinimumGrayscaleBitDepth(): number | undefined {
    return this.x0072010a;
  }

  get x0072010a(): number | undefined {
    const element = this.dwResponse['0072010a'];
    return this.dwResponse['0072010a']?.Value[0];
  }

  // Screen Minimum Color Bit Depth
  get ScreenMinimumColorBitDepth(): number | undefined {
    return this.x0072010c;
  }

  get x0072010c(): number | undefined {
    const element = this.dwResponse['0072010c'];
    return this.dwResponse['0072010c']?.Value[0];
  }

  // Application Maximum Repaint Time
  get ApplicationMaximumRepaintTime(): number | undefined {
    return this.x0072010e;
  }

  get x0072010e(): number | undefined {
    const element = this.dwResponse['0072010e'];
    return this.dwResponse['0072010e']?.Value[0];
  }

  // Display Sets Sequence
  get DisplaySetsSequence(): Array<Dataset> | undefined {
    return this.x00720200;
  }

  get x00720200(): Array<Dataset> | undefined {
    const element = this.dwResponse['00720200'];
    return this.dwResponse['00720200']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Display Set Number
  get DisplaySetNumber(): number | undefined {
    return this.x00720202;
  }

  get x00720202(): number | undefined {
    const element = this.dwResponse['00720202'];
    return this.dwResponse['00720202']?.Value[0];
  }

  // Display Set Label
  get DisplaySetLabel(): string | undefined {
    return this.x00720203;
  }

  get x00720203(): string | undefined {
    const element = this.dwResponse['00720203'];
    return this.dwResponse['00720203']?.Value[0];
  }

  // Display Set Presentation Group
  get DisplaySetPresentationGroup(): number | undefined {
    return this.x00720204;
  }

  get x00720204(): number | undefined {
    const element = this.dwResponse['00720204'];
    return this.dwResponse['00720204']?.Value[0];
  }

  // Display Set Presentation Group Description
  get DisplaySetPresentationGroupDescription(): string | undefined {
    return this.x00720206;
  }

  get x00720206(): string | undefined {
    const element = this.dwResponse['00720206'];
    return this.dwResponse['00720206']?.Value[0];
  }

  // Partial Data Display Handling
  get PartialDataDisplayHandling(): string | undefined {
    return this.x00720208;
  }

  get x00720208(): string | undefined {
    const element = this.dwResponse['00720208'];
    return this.dwResponse['00720208']?.Value[0];
  }

  // Synchronized Scrolling Sequence
  get SynchronizedScrollingSequence(): Array<Dataset> | undefined {
    return this.x00720210;
  }

  get x00720210(): Array<Dataset> | undefined {
    const element = this.dwResponse['00720210'];
    return this.dwResponse['00720210']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Display Set Scrolling Group
  get DisplaySetScrollingGroup(): Array<number> | undefined {
    return this.x00720212;
  }

  get x00720212(): Array<number> | undefined {
    const element = this.dwResponse['00720212'];
    return this.dwResponse['00720212']?.Value;
  }

  // Navigation Indicator Sequence
  get NavigationIndicatorSequence(): Array<Dataset> | undefined {
    return this.x00720214;
  }

  get x00720214(): Array<Dataset> | undefined {
    const element = this.dwResponse['00720214'];
    return this.dwResponse['00720214']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Navigation Display Set
  get NavigationDisplaySet(): number | undefined {
    return this.x00720216;
  }

  get x00720216(): number | undefined {
    const element = this.dwResponse['00720216'];
    return this.dwResponse['00720216']?.Value[0];
  }

  // Reference Display Sets
  get ReferenceDisplaySets(): Array<number> | undefined {
    return this.x00720218;
  }

  get x00720218(): Array<number> | undefined {
    const element = this.dwResponse['00720218'];
    return this.dwResponse['00720218']?.Value;
  }

  // Image Boxes Sequence
  get ImageBoxesSequence(): Array<Dataset> | undefined {
    return this.x00720300;
  }

  get x00720300(): Array<Dataset> | undefined {
    const element = this.dwResponse['00720300'];
    return this.dwResponse['00720300']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Image Box Number
  get ImageBoxNumber(): number | undefined {
    return this.x00720302;
  }

  get x00720302(): number | undefined {
    const element = this.dwResponse['00720302'];
    return this.dwResponse['00720302']?.Value[0];
  }

  // Image Box Layout Type
  get ImageBoxLayoutType(): string | undefined {
    return this.x00720304;
  }

  get x00720304(): string | undefined {
    const element = this.dwResponse['00720304'];
    return this.dwResponse['00720304']?.Value[0];
  }

  // Image Box Tile Horizontal Dimension
  get ImageBoxTileHorizontalDimension(): number | undefined {
    return this.x00720306;
  }

  get x00720306(): number | undefined {
    const element = this.dwResponse['00720306'];
    return this.dwResponse['00720306']?.Value[0];
  }

  // Image Box Tile Vertical Dimension
  get ImageBoxTileVerticalDimension(): number | undefined {
    return this.x00720308;
  }

  get x00720308(): number | undefined {
    const element = this.dwResponse['00720308'];
    return this.dwResponse['00720308']?.Value[0];
  }

  // Image Box Scroll Direction
  get ImageBoxScrollDirection(): string | undefined {
    return this.x00720310;
  }

  get x00720310(): string | undefined {
    const element = this.dwResponse['00720310'];
    return this.dwResponse['00720310']?.Value[0];
  }

  // Image Box Small Scroll Type
  get ImageBoxSmallScrollType(): string | undefined {
    return this.x00720312;
  }

  get x00720312(): string | undefined {
    const element = this.dwResponse['00720312'];
    return this.dwResponse['00720312']?.Value[0];
  }

  // Image Box Small Scroll Amount
  get ImageBoxSmallScrollAmount(): number | undefined {
    return this.x00720314;
  }

  get x00720314(): number | undefined {
    const element = this.dwResponse['00720314'];
    return this.dwResponse['00720314']?.Value[0];
  }

  // Image Box Large Scroll Type
  get ImageBoxLargeScrollType(): string | undefined {
    return this.x00720316;
  }

  get x00720316(): string | undefined {
    const element = this.dwResponse['00720316'];
    return this.dwResponse['00720316']?.Value[0];
  }

  // Image Box Large Scroll Amount
  get ImageBoxLargeScrollAmount(): number | undefined {
    return this.x00720318;
  }

  get x00720318(): number | undefined {
    const element = this.dwResponse['00720318'];
    return this.dwResponse['00720318']?.Value[0];
  }

  // Image Box Overlap Priority
  get ImageBoxOverlapPriority(): number | undefined {
    return this.x00720320;
  }

  get x00720320(): number | undefined {
    const element = this.dwResponse['00720320'];
    return this.dwResponse['00720320']?.Value[0];
  }

  // Cine Relative to Real-Time
  get CineRelativeToRealTime(): number | undefined {
    return this.x00720330;
  }

  get x00720330(): number | undefined {
    const element = this.dwResponse['00720330'];
    return this.dwResponse['00720330']?.Value[0];
  }

  // Filter Operations Sequence
  get FilterOperationsSequence(): Array<Dataset> | undefined {
    return this.x00720400;
  }

  get x00720400(): Array<Dataset> | undefined {
    const element = this.dwResponse['00720400'];
    return this.dwResponse['00720400']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Filter-by Category
  get FilterByCategory(): string | undefined {
    return this.x00720402;
  }

  get x00720402(): string | undefined {
    const element = this.dwResponse['00720402'];
    return this.dwResponse['00720402']?.Value[0];
  }

  // Filter-by Attribute Presence
  get FilterByAttributePresence(): string | undefined {
    return this.x00720404;
  }

  get x00720404(): string | undefined {
    const element = this.dwResponse['00720404'];
    return this.dwResponse['00720404']?.Value[0];
  }

  // Filter-by Operator
  get FilterByOperator(): string | undefined {
    return this.x00720406;
  }

  get x00720406(): string | undefined {
    const element = this.dwResponse['00720406'];
    return this.dwResponse['00720406']?.Value[0];
  }

  // Structured Display Background CIELab Value
  get StructuredDisplayBackgroundCIELabValue(): Array<number> | undefined {
    return this.x00720420;
  }

  get x00720420(): Array<number> | undefined {
    const element = this.dwResponse['00720420'];
    return this.dwResponse['00720420']?.Value;
  }

  // Empty Image Box CIELab Value
  get EmptyImageBoxCIELabValue(): Array<number> | undefined {
    return this.x00720421;
  }

  get x00720421(): Array<number> | undefined {
    const element = this.dwResponse['00720421'];
    return this.dwResponse['00720421']?.Value;
  }

  // Structured Display Image Box Sequence
  get StructuredDisplayImageBoxSequence(): Array<Dataset> | undefined {
    return this.x00720422;
  }

  get x00720422(): Array<Dataset> | undefined {
    const element = this.dwResponse['00720422'];
    return this.dwResponse['00720422']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Structured Display Text Box Sequence
  get StructuredDisplayTextBoxSequence(): Array<Dataset> | undefined {
    return this.x00720424;
  }

  get x00720424(): Array<Dataset> | undefined {
    const element = this.dwResponse['00720424'];
    return this.dwResponse['00720424']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced First Frame Sequence
  get ReferencedFirstFrameSequence(): Array<Dataset> | undefined {
    return this.x00720427;
  }

  get x00720427(): Array<Dataset> | undefined {
    const element = this.dwResponse['00720427'];
    return this.dwResponse['00720427']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Image Box Synchronization Sequence
  get ImageBoxSynchronizationSequence(): Array<Dataset> | undefined {
    return this.x00720430;
  }

  get x00720430(): Array<Dataset> | undefined {
    const element = this.dwResponse['00720430'];
    return this.dwResponse['00720430']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Synchronized Image Box List
  get SynchronizedImageBoxList(): Array<number> | undefined {
    return this.x00720432;
  }

  get x00720432(): Array<number> | undefined {
    const element = this.dwResponse['00720432'];
    return this.dwResponse['00720432']?.Value;
  }

  // Type of Synchronization
  get TypeOfSynchronization(): string | undefined {
    return this.x00720434;
  }

  get x00720434(): string | undefined {
    const element = this.dwResponse['00720434'];
    return this.dwResponse['00720434']?.Value[0];
  }

  // Blending Operation Type
  get BlendingOperationType(): string | undefined {
    return this.x00720500;
  }

  get x00720500(): string | undefined {
    const element = this.dwResponse['00720500'];
    return this.dwResponse['00720500']?.Value[0];
  }

  // Reformatting Operation Type
  get ReformattingOperationType(): string | undefined {
    return this.x00720510;
  }

  get x00720510(): string | undefined {
    const element = this.dwResponse['00720510'];
    return this.dwResponse['00720510']?.Value[0];
  }

  // Reformatting Thickness
  get ReformattingThickness(): number | undefined {
    return this.x00720512;
  }

  get x00720512(): number | undefined {
    const element = this.dwResponse['00720512'];
    return this.dwResponse['00720512']?.Value[0];
  }

  // Reformatting Interval
  get ReformattingInterval(): number | undefined {
    return this.x00720514;
  }

  get x00720514(): number | undefined {
    const element = this.dwResponse['00720514'];
    return this.dwResponse['00720514']?.Value[0];
  }

  // Reformatting Operation Initial View Direction
  get ReformattingOperationInitialViewDirection(): string | undefined {
    return this.x00720516;
  }

  get x00720516(): string | undefined {
    const element = this.dwResponse['00720516'];
    return this.dwResponse['00720516']?.Value[0];
  }

  // 3D Rendering Type
  get ThreeDRenderingType(): Array<string> | undefined {
    return this.x00720520;
  }

  get x00720520(): Array<string> | undefined {
    const element = this.dwResponse['00720520'];
    return this.dwResponse['00720520']?.Value;
  }

  // Sorting Operations Sequence
  get SortingOperationsSequence(): Array<Dataset> | undefined {
    return this.x00720600;
  }

  get x00720600(): Array<Dataset> | undefined {
    const element = this.dwResponse['00720600'];
    return this.dwResponse['00720600']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Sort-by Category
  get SortByCategory(): string | undefined {
    return this.x00720602;
  }

  get x00720602(): string | undefined {
    const element = this.dwResponse['00720602'];
    return this.dwResponse['00720602']?.Value[0];
  }

  // Sorting Direction
  get SortingDirection(): string | undefined {
    return this.x00720604;
  }

  get x00720604(): string | undefined {
    const element = this.dwResponse['00720604'];
    return this.dwResponse['00720604']?.Value[0];
  }

  // Display Set Patient Orientation
  get DisplaySetPatientOrientation(): Array<string> | undefined {
    return this.x00720700;
  }

  get x00720700(): Array<string> | undefined {
    const element = this.dwResponse['00720700'];
    return this.dwResponse['00720700']?.Value;
  }

  // VOI Type
  get VOIType(): string | undefined {
    return this.x00720702;
  }

  get x00720702(): string | undefined {
    const element = this.dwResponse['00720702'];
    return this.dwResponse['00720702']?.Value[0];
  }

  // Pseudo-Color Type
  get PseudoColorType(): string | undefined {
    return this.x00720704;
  }

  get x00720704(): string | undefined {
    const element = this.dwResponse['00720704'];
    return this.dwResponse['00720704']?.Value[0];
  }

  // Pseudo-Color Palette Instance Reference Sequence
  get PseudoColorPaletteInstanceReferenceSequence(): Array<Dataset> | undefined {
    return this.x00720705;
  }

  get x00720705(): Array<Dataset> | undefined {
    const element = this.dwResponse['00720705'];
    return this.dwResponse['00720705']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Show Grayscale Inverted
  get ShowGrayscaleInverted(): string | undefined {
    return this.x00720706;
  }

  get x00720706(): string | undefined {
    const element = this.dwResponse['00720706'];
    return this.dwResponse['00720706']?.Value[0];
  }

  // Show Image True Size Flag
  get ShowImageTrueSizeFlag(): string | undefined {
    return this.x00720710;
  }

  get x00720710(): string | undefined {
    const element = this.dwResponse['00720710'];
    return this.dwResponse['00720710']?.Value[0];
  }

  // Show Graphic Annotation Flag
  get ShowGraphicAnnotationFlag(): string | undefined {
    return this.x00720712;
  }

  get x00720712(): string | undefined {
    const element = this.dwResponse['00720712'];
    return this.dwResponse['00720712']?.Value[0];
  }

  // Show Patient Demographics Flag
  get ShowPatientDemographicsFlag(): string | undefined {
    return this.x00720714;
  }

  get x00720714(): string | undefined {
    const element = this.dwResponse['00720714'];
    return this.dwResponse['00720714']?.Value[0];
  }

  // Show Acquisition Techniques Flag
  get ShowAcquisitionTechniquesFlag(): string | undefined {
    return this.x00720716;
  }

  get x00720716(): string | undefined {
    const element = this.dwResponse['00720716'];
    return this.dwResponse['00720716']?.Value[0];
  }

  // Display Set Horizontal Justification
  get DisplaySetHorizontalJustification(): string | undefined {
    return this.x00720717;
  }

  get x00720717(): string | undefined {
    const element = this.dwResponse['00720717'];
    return this.dwResponse['00720717']?.Value[0];
  }

  // Display Set Vertical Justification
  get DisplaySetVerticalJustification(): string | undefined {
    return this.x00720718;
  }

  get x00720718(): string | undefined {
    const element = this.dwResponse['00720718'];
    return this.dwResponse['00720718']?.Value[0];
  }

  // Continuation Start Meterset
  get ContinuationStartMeterset(): number | undefined {
    return this.x00740120;
  }

  get x00740120(): number | undefined {
    const element = this.dwResponse['00740120'];
    return this.dwResponse['00740120']?.Value[0];
  }

  // Continuation End Meterset
  get ContinuationEndMeterset(): number | undefined {
    return this.x00740121;
  }

  get x00740121(): number | undefined {
    const element = this.dwResponse['00740121'];
    return this.dwResponse['00740121']?.Value[0];
  }

  // Procedure Step State
  get ProcedureStepState(): string | undefined {
    return this.x00741000;
  }

  get x00741000(): string | undefined {
    const element = this.dwResponse['00741000'];
    return this.dwResponse['00741000']?.Value[0];
  }

  // Procedure Step Progress Information Sequence
  get ProcedureStepProgressInformationSequence(): Array<Dataset> | undefined {
    return this.x00741002;
  }

  get x00741002(): Array<Dataset> | undefined {
    const element = this.dwResponse['00741002'];
    return this.dwResponse['00741002']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Procedure Step Progress
  get ProcedureStepProgress(): number | undefined {
    return this.x00741004;
  }

  get x00741004(): number | undefined {
    const element = this.dwResponse['00741004'];
    return this.dwResponse['00741004']?.Value[0];
  }

  // Procedure Step Communications URI Sequence
  get ProcedureStepCommunicationsURISequence(): Array<Dataset> | undefined {
    return this.x00741008;
  }

  get x00741008(): Array<Dataset> | undefined {
    const element = this.dwResponse['00741008'];
    return this.dwResponse['00741008']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Contact Display Name
  get ContactDisplayName(): string | undefined {
    return this.x0074100c;
  }

  get x0074100c(): string | undefined {
    const element = this.dwResponse['0074100c'];
    return this.dwResponse['0074100c']?.Value[0];
  }

  // Procedure Step Discontinuation Reason Code Sequence
  get ProcedureStepDiscontinuationReasonCodeSequence(): Array<Dataset> | undefined {
    return this.x0074100e;
  }

  get x0074100e(): Array<Dataset> | undefined {
    const element = this.dwResponse['0074100e'];
    return this.dwResponse['0074100e']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Beam Task Sequence
  get BeamTaskSequence(): Array<Dataset> | undefined {
    return this.x00741020;
  }

  get x00741020(): Array<Dataset> | undefined {
    const element = this.dwResponse['00741020'];
    return this.dwResponse['00741020']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Beam Task Type
  get BeamTaskType(): string | undefined {
    return this.x00741022;
  }

  get x00741022(): string | undefined {
    const element = this.dwResponse['00741022'];
    return this.dwResponse['00741022']?.Value[0];
  }

  // Beam Order Index (Trial)
  get BeamOrderIndexTrial(): number | undefined {
    return this.x00741024;
  }

  get x00741024(): number | undefined {
    const element = this.dwResponse['00741024'];
    return this.dwResponse['00741024']?.Value[0];
  }

  // Autosequence Flag
  get AutosequenceFlag(): string | undefined {
    return this.x00741025;
  }

  get x00741025(): string | undefined {
    const element = this.dwResponse['00741025'];
    return this.dwResponse['00741025']?.Value[0];
  }

  // Table Top Vertical Adjusted Position
  get TableTopVerticalAdjustedPosition(): number | undefined {
    return this.x00741026;
  }

  get x00741026(): number | undefined {
    const element = this.dwResponse['00741026'];
    return this.dwResponse['00741026']?.Value[0];
  }

  // Table Top Longitudinal Adjusted Position
  get TableTopLongitudinalAdjustedPosition(): number | undefined {
    return this.x00741027;
  }

  get x00741027(): number | undefined {
    const element = this.dwResponse['00741027'];
    return this.dwResponse['00741027']?.Value[0];
  }

  // Table Top Lateral Adjusted Position
  get TableTopLateralAdjustedPosition(): number | undefined {
    return this.x00741028;
  }

  get x00741028(): number | undefined {
    const element = this.dwResponse['00741028'];
    return this.dwResponse['00741028']?.Value[0];
  }

  // Patient Support Adjusted Angle
  get PatientSupportAdjustedAngle(): number | undefined {
    return this.x0074102a;
  }

  get x0074102a(): number | undefined {
    const element = this.dwResponse['0074102a'];
    return this.dwResponse['0074102a']?.Value[0];
  }

  // Table Top Eccentric Adjusted Angle
  get TableTopEccentricAdjustedAngle(): number | undefined {
    return this.x0074102b;
  }

  get x0074102b(): number | undefined {
    const element = this.dwResponse['0074102b'];
    return this.dwResponse['0074102b']?.Value[0];
  }

  // Table Top Pitch Adjusted Angle
  get TableTopPitchAdjustedAngle(): number | undefined {
    return this.x0074102c;
  }

  get x0074102c(): number | undefined {
    const element = this.dwResponse['0074102c'];
    return this.dwResponse['0074102c']?.Value[0];
  }

  // Table Top Roll Adjusted Angle
  get TableTopRollAdjustedAngle(): number | undefined {
    return this.x0074102d;
  }

  get x0074102d(): number | undefined {
    const element = this.dwResponse['0074102d'];
    return this.dwResponse['0074102d']?.Value[0];
  }

  // Delivery Verification Image Sequence
  get DeliveryVerificationImageSequence(): Array<Dataset> | undefined {
    return this.x00741030;
  }

  get x00741030(): Array<Dataset> | undefined {
    const element = this.dwResponse['00741030'];
    return this.dwResponse['00741030']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Verification Image Timing
  get VerificationImageTiming(): string | undefined {
    return this.x00741032;
  }

  get x00741032(): string | undefined {
    const element = this.dwResponse['00741032'];
    return this.dwResponse['00741032']?.Value[0];
  }

  // Double Exposure Flag
  get DoubleExposureFlag(): string | undefined {
    return this.x00741034;
  }

  get x00741034(): string | undefined {
    const element = this.dwResponse['00741034'];
    return this.dwResponse['00741034']?.Value[0];
  }

  // Double Exposure Ordering
  get DoubleExposureOrdering(): string | undefined {
    return this.x00741036;
  }

  get x00741036(): string | undefined {
    const element = this.dwResponse['00741036'];
    return this.dwResponse['00741036']?.Value[0];
  }

  // Double Exposure Meterset (Trial)
  get DoubleExposureMetersetTrial(): number | undefined {
    return this.x00741038;
  }

  get x00741038(): number | undefined {
    const element = this.dwResponse['00741038'];
    return this.dwResponse['00741038']?.Value[0];
  }

  // Double Exposure Field Delta (Trial)
  get DoubleExposureFieldDeltaTrial(): Array<number> | undefined {
    return this.x0074103a;
  }

  get x0074103a(): Array<number> | undefined {
    const element = this.dwResponse['0074103a'];
    return this.dwResponse['0074103a']?.Value;
  }

  // Related Reference RT Image Sequence
  get RelatedReferenceRTImageSequence(): Array<Dataset> | undefined {
    return this.x00741040;
  }

  get x00741040(): Array<Dataset> | undefined {
    const element = this.dwResponse['00741040'];
    return this.dwResponse['00741040']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // General Machine Verification Sequence
  get GeneralMachineVerificationSequence(): Array<Dataset> | undefined {
    return this.x00741042;
  }

  get x00741042(): Array<Dataset> | undefined {
    const element = this.dwResponse['00741042'];
    return this.dwResponse['00741042']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Conventional Machine Verification Sequence
  get ConventionalMachineVerificationSequence(): Array<Dataset> | undefined {
    return this.x00741044;
  }

  get x00741044(): Array<Dataset> | undefined {
    const element = this.dwResponse['00741044'];
    return this.dwResponse['00741044']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ion Machine Verification Sequence
  get IonMachineVerificationSequence(): Array<Dataset> | undefined {
    return this.x00741046;
  }

  get x00741046(): Array<Dataset> | undefined {
    const element = this.dwResponse['00741046'];
    return this.dwResponse['00741046']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Failed Attributes Sequence
  get FailedAttributesSequence(): Array<Dataset> | undefined {
    return this.x00741048;
  }

  get x00741048(): Array<Dataset> | undefined {
    const element = this.dwResponse['00741048'];
    return this.dwResponse['00741048']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Overridden Attributes Sequence
  get OverriddenAttributesSequence(): Array<Dataset> | undefined {
    return this.x0074104a;
  }

  get x0074104a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0074104a'];
    return this.dwResponse['0074104a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Conventional Control Point Verification Sequence
  get ConventionalControlPointVerificationSequence(): Array<Dataset> | undefined {
    return this.x0074104c;
  }

  get x0074104c(): Array<Dataset> | undefined {
    const element = this.dwResponse['0074104c'];
    return this.dwResponse['0074104c']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ion Control Point Verification Sequence
  get IonControlPointVerificationSequence(): Array<Dataset> | undefined {
    return this.x0074104e;
  }

  get x0074104e(): Array<Dataset> | undefined {
    const element = this.dwResponse['0074104e'];
    return this.dwResponse['0074104e']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Attribute Occurrence Sequence
  get AttributeOccurrenceSequence(): Array<Dataset> | undefined {
    return this.x00741050;
  }

  get x00741050(): Array<Dataset> | undefined {
    const element = this.dwResponse['00741050'];
    return this.dwResponse['00741050']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Attribute Occurrence Pointer
  get AttributeOccurrencePointer(): Uint16Array | undefined {
    return this.x00741052;
  }

  get x00741052(): Uint16Array | undefined {
    const element = this.dwResponse['00741052'];
    return this.dwResponse['00741052']?.Value[0];
  }

  // Attribute Item Selector
  get AttributeItemSelector(): number | undefined {
    return this.x00741054;
  }

  get x00741054(): number | undefined {
    const element = this.dwResponse['00741054'];
    return this.dwResponse['00741054']?.Value[0];
  }

  // Attribute Occurrence Private Creator
  get AttributeOccurrencePrivateCreator(): string | undefined {
    return this.x00741056;
  }

  get x00741056(): string | undefined {
    const element = this.dwResponse['00741056'];
    return this.dwResponse['00741056']?.Value[0];
  }

  // Selector Sequence Pointer Items
  get SelectorSequencePointerItems(): Array<number> | undefined {
    return this.x00741057;
  }

  get x00741057(): Array<number> | undefined {
    const element = this.dwResponse['00741057'];
    return this.dwResponse['00741057']?.Value;
  }

  // Scheduled Procedure Step Priority
  get ScheduledProcedureStepPriority(): string | undefined {
    return this.x00741200;
  }

  get x00741200(): string | undefined {
    const element = this.dwResponse['00741200'];
    return this.dwResponse['00741200']?.Value[0];
  }

  // Worklist Label
  get WorklistLabel(): string | undefined {
    return this.x00741202;
  }

  get x00741202(): string | undefined {
    const element = this.dwResponse['00741202'];
    return this.dwResponse['00741202']?.Value[0];
  }

  // Procedure Step Label
  get ProcedureStepLabel(): string | undefined {
    return this.x00741204;
  }

  get x00741204(): string | undefined {
    const element = this.dwResponse['00741204'];
    return this.dwResponse['00741204']?.Value[0];
  }

  // Scheduled Processing Parameters Sequence
  get ScheduledProcessingParametersSequence(): Array<Dataset> | undefined {
    return this.x00741210;
  }

  get x00741210(): Array<Dataset> | undefined {
    const element = this.dwResponse['00741210'];
    return this.dwResponse['00741210']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Performed Processing Parameters Sequence
  get PerformedProcessingParametersSequence(): Array<Dataset> | undefined {
    return this.x00741212;
  }

  get x00741212(): Array<Dataset> | undefined {
    const element = this.dwResponse['00741212'];
    return this.dwResponse['00741212']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Unified Procedure Step Performed Procedure Sequence
  get UnifiedProcedureStepPerformedProcedureSequence(): Array<Dataset> | undefined {
    return this.x00741216;
  }

  get x00741216(): Array<Dataset> | undefined {
    const element = this.dwResponse['00741216'];
    return this.dwResponse['00741216']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Related Procedure Step Sequence
  get RelatedProcedureStepSequence(): Array<Dataset> | undefined {
    return this.x00741220;
  }

  get x00741220(): Array<Dataset> | undefined {
    const element = this.dwResponse['00741220'];
    return this.dwResponse['00741220']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Procedure Step Relationship Type
  get ProcedureStepRelationshipType(): string | undefined {
    return this.x00741222;
  }

  get x00741222(): string | undefined {
    const element = this.dwResponse['00741222'];
    return this.dwResponse['00741222']?.Value[0];
  }

  // Replaced Procedure Step Sequence
  get ReplacedProcedureStepSequence(): Array<Dataset> | undefined {
    return this.x00741224;
  }

  get x00741224(): Array<Dataset> | undefined {
    const element = this.dwResponse['00741224'];
    return this.dwResponse['00741224']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Deletion Lock
  get DeletionLock(): string | undefined {
    return this.x00741230;
  }

  get x00741230(): string | undefined {
    const element = this.dwResponse['00741230'];
    return this.dwResponse['00741230']?.Value[0];
  }

  // Receiving AE
  get ReceivingAE(): string | undefined {
    return this.x00741234;
  }

  get x00741234(): string | undefined {
    const element = this.dwResponse['00741234'];
    return this.dwResponse['00741234']?.Value[0];
  }

  // Requesting AE
  get RequestingAE(): string | undefined {
    return this.x00741236;
  }

  get x00741236(): string | undefined {
    const element = this.dwResponse['00741236'];
    return this.dwResponse['00741236']?.Value[0];
  }

  // SCP Status
  get SCPStatus(): string | undefined {
    return this.x00741242;
  }

  get x00741242(): string | undefined {
    const element = this.dwResponse['00741242'];
    return this.dwResponse['00741242']?.Value[0];
  }

  // Subscription List Status
  get SubscriptionListStatus(): string | undefined {
    return this.x00741244;
  }

  get x00741244(): string | undefined {
    const element = this.dwResponse['00741244'];
    return this.dwResponse['00741244']?.Value[0];
  }

  // Unified Procedure Step List Status
  get UnifiedProcedureStepListStatus(): string | undefined {
    return this.x00741246;
  }

  get x00741246(): string | undefined {
    const element = this.dwResponse['00741246'];
    return this.dwResponse['00741246']?.Value[0];
  }

  // Beam Order Index
  get BeamOrderIndex(): number | undefined {
    return this.x00741324;
  }

  get x00741324(): number | undefined {
    const element = this.dwResponse['00741324'];
    return this.dwResponse['00741324']?.Value[0];
  }

  // Double Exposure Meterset
  get DoubleExposureMeterset(): number | undefined {
    return this.x00741338;
  }

  get x00741338(): number | undefined {
    const element = this.dwResponse['00741338'];
    return this.dwResponse['00741338']?.Value[0];
  }

  // Double Exposure Field Delta
  get DoubleExposureFieldDelta(): Array<number> | undefined {
    return this.x0074133a;
  }

  get x0074133a(): Array<number> | undefined {
    const element = this.dwResponse['0074133a'];
    return this.dwResponse['0074133a']?.Value;
  }

  // Implant Assembly Template Name
  get ImplantAssemblyTemplateName(): string | undefined {
    return this.x00760001;
  }

  get x00760001(): string | undefined {
    const element = this.dwResponse['00760001'];
    return this.dwResponse['00760001']?.Value[0];
  }

  // Implant Assembly Template Issuer
  get ImplantAssemblyTemplateIssuer(): string | undefined {
    return this.x00760003;
  }

  get x00760003(): string | undefined {
    const element = this.dwResponse['00760003'];
    return this.dwResponse['00760003']?.Value[0];
  }

  // Implant Assembly Template Version
  get ImplantAssemblyTemplateVersion(): string | undefined {
    return this.x00760006;
  }

  get x00760006(): string | undefined {
    const element = this.dwResponse['00760006'];
    return this.dwResponse['00760006']?.Value[0];
  }

  // Replaced Implant Assembly Template Sequence
  get ReplacedImplantAssemblyTemplateSequence(): Array<Dataset> | undefined {
    return this.x00760008;
  }

  get x00760008(): Array<Dataset> | undefined {
    const element = this.dwResponse['00760008'];
    return this.dwResponse['00760008']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Implant Assembly Template Type
  get ImplantAssemblyTemplateType(): string | undefined {
    return this.x0076000a;
  }

  get x0076000a(): string | undefined {
    const element = this.dwResponse['0076000a'];
    return this.dwResponse['0076000a']?.Value[0];
  }

  // Original Implant Assembly Template Sequence
  get OriginalImplantAssemblyTemplateSequence(): Array<Dataset> | undefined {
    return this.x0076000c;
  }

  get x0076000c(): Array<Dataset> | undefined {
    const element = this.dwResponse['0076000c'];
    return this.dwResponse['0076000c']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Derivation Implant Assembly Template Sequence
  get DerivationImplantAssemblyTemplateSequence(): Array<Dataset> | undefined {
    return this.x0076000e;
  }

  get x0076000e(): Array<Dataset> | undefined {
    const element = this.dwResponse['0076000e'];
    return this.dwResponse['0076000e']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Implant Assembly Template Target Anatomy Sequence
  get ImplantAssemblyTemplateTargetAnatomySequence(): Array<Dataset> | undefined {
    return this.x00760010;
  }

  get x00760010(): Array<Dataset> | undefined {
    const element = this.dwResponse['00760010'];
    return this.dwResponse['00760010']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Procedure Type Code Sequence
  get ProcedureTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x00760020;
  }

  get x00760020(): Array<Dataset> | undefined {
    const element = this.dwResponse['00760020'];
    return this.dwResponse['00760020']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Surgical Technique
  get SurgicalTechnique(): string | undefined {
    return this.x00760030;
  }

  get x00760030(): string | undefined {
    const element = this.dwResponse['00760030'];
    return this.dwResponse['00760030']?.Value[0];
  }

  // Component Types Sequence
  get ComponentTypesSequence(): Array<Dataset> | undefined {
    return this.x00760032;
  }

  get x00760032(): Array<Dataset> | undefined {
    const element = this.dwResponse['00760032'];
    return this.dwResponse['00760032']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Component Type Code Sequence
  get ComponentTypeCodeSequence(): string | undefined {
    return this.x00760034;
  }

  get x00760034(): string | undefined {
    const element = this.dwResponse['00760034'];
    return this.dwResponse['00760034']?.Value[0];
  }

  // Exclusive Component Type
  get ExclusiveComponentType(): string | undefined {
    return this.x00760036;
  }

  get x00760036(): string | undefined {
    const element = this.dwResponse['00760036'];
    return this.dwResponse['00760036']?.Value[0];
  }

  // Mandatory Component Type
  get MandatoryComponentType(): string | undefined {
    return this.x00760038;
  }

  get x00760038(): string | undefined {
    const element = this.dwResponse['00760038'];
    return this.dwResponse['00760038']?.Value[0];
  }

  // Component Sequence
  get ComponentSequence(): Array<Dataset> | undefined {
    return this.x00760040;
  }

  get x00760040(): Array<Dataset> | undefined {
    const element = this.dwResponse['00760040'];
    return this.dwResponse['00760040']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Component ID
  get ComponentID(): number | undefined {
    return this.x00760055;
  }

  get x00760055(): number | undefined {
    const element = this.dwResponse['00760055'];
    return this.dwResponse['00760055']?.Value[0];
  }

  // Component Assembly Sequence
  get ComponentAssemblySequence(): Array<Dataset> | undefined {
    return this.x00760060;
  }

  get x00760060(): Array<Dataset> | undefined {
    const element = this.dwResponse['00760060'];
    return this.dwResponse['00760060']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Component 1 Referenced ID
  get Component1ReferencedID(): number | undefined {
    return this.x00760070;
  }

  get x00760070(): number | undefined {
    const element = this.dwResponse['00760070'];
    return this.dwResponse['00760070']?.Value[0];
  }

  // Component 1 Referenced Mating Feature Set ID
  get Component1ReferencedMatingFeatureSetID(): number | undefined {
    return this.x00760080;
  }

  get x00760080(): number | undefined {
    const element = this.dwResponse['00760080'];
    return this.dwResponse['00760080']?.Value[0];
  }

  // Component 1 Referenced Mating Feature ID
  get Component1ReferencedMatingFeatureID(): number | undefined {
    return this.x00760090;
  }

  get x00760090(): number | undefined {
    const element = this.dwResponse['00760090'];
    return this.dwResponse['00760090']?.Value[0];
  }

  // Component 2 Referenced ID
  get Component2ReferencedID(): number | undefined {
    return this.x007600a0;
  }

  get x007600a0(): number | undefined {
    const element = this.dwResponse['007600a0'];
    return this.dwResponse['007600a0']?.Value[0];
  }

  // Component 2 Referenced Mating Feature Set ID
  get Component2ReferencedMatingFeatureSetID(): number | undefined {
    return this.x007600b0;
  }

  get x007600b0(): number | undefined {
    const element = this.dwResponse['007600b0'];
    return this.dwResponse['007600b0']?.Value[0];
  }

  // Component 2 Referenced Mating Feature ID
  get Component2ReferencedMatingFeatureID(): number | undefined {
    return this.x007600c0;
  }

  get x007600c0(): number | undefined {
    const element = this.dwResponse['007600c0'];
    return this.dwResponse['007600c0']?.Value[0];
  }

  // Implant Template Group Name
  get ImplantTemplateGroupName(): string | undefined {
    return this.x00780001;
  }

  get x00780001(): string | undefined {
    const element = this.dwResponse['00780001'];
    return this.dwResponse['00780001']?.Value[0];
  }

  // Implant Template Group Issuer
  get ImplantTemplateGroupIssuer(): string | undefined {
    return this.x00780020;
  }

  get x00780020(): string | undefined {
    const element = this.dwResponse['00780020'];
    return this.dwResponse['00780020']?.Value[0];
  }

  // Implant Template Group Version
  get ImplantTemplateGroupVersion(): string | undefined {
    return this.x00780024;
  }

  get x00780024(): string | undefined {
    const element = this.dwResponse['00780024'];
    return this.dwResponse['00780024']?.Value[0];
  }

  // Replaced Implant Template Group Sequence
  get ReplacedImplantTemplateGroupSequence(): Array<Dataset> | undefined {
    return this.x00780026;
  }

  get x00780026(): Array<Dataset> | undefined {
    const element = this.dwResponse['00780026'];
    return this.dwResponse['00780026']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Implant Template Group Target Anatomy Sequence
  get ImplantTemplateGroupTargetAnatomySequence(): Array<Dataset> | undefined {
    return this.x00780028;
  }

  get x00780028(): Array<Dataset> | undefined {
    const element = this.dwResponse['00780028'];
    return this.dwResponse['00780028']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Implant Template Group Members Sequence
  get ImplantTemplateGroupMembersSequence(): Array<Dataset> | undefined {
    return this.x0078002a;
  }

  get x0078002a(): Array<Dataset> | undefined {
    const element = this.dwResponse['0078002a'];
    return this.dwResponse['0078002a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Implant Template Group Member ID
  get ImplantTemplateGroupMemberID(): number | undefined {
    return this.x0078002e;
  }

  get x0078002e(): number | undefined {
    const element = this.dwResponse['0078002e'];
    return this.dwResponse['0078002e']?.Value[0];
  }

  // 3D Implant Template Group Member Matching Point
  get ThreeDImplantTemplateGroupMemberMatchingPoint(): Array<number> | undefined {
    return this.x00780050;
  }

  get x00780050(): Array<number> | undefined {
    const element = this.dwResponse['00780050'];
    return this.dwResponse['00780050']?.Value;
  }

  // 3D Implant Template Group Member Matching Axes
  get ThreeDImplantTemplateGroupMemberMatchingAxes(): Array<number> | undefined {
    return this.x00780060;
  }

  get x00780060(): Array<number> | undefined {
    const element = this.dwResponse['00780060'];
    return this.dwResponse['00780060']?.Value;
  }

  // Implant Template Group Member Matching 2D Coordinates Sequence
  get ImplantTemplateGroupMemberMatching2DCoordinatesSequence(): Array<Dataset> | undefined {
    return this.x00780070;
  }

  get x00780070(): Array<Dataset> | undefined {
    const element = this.dwResponse['00780070'];
    return this.dwResponse['00780070']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // 2D Implant Template Group Member Matching Point
  get TwoDImplantTemplateGroupMemberMatchingPoint(): Array<number> | undefined {
    return this.x00780090;
  }

  get x00780090(): Array<number> | undefined {
    const element = this.dwResponse['00780090'];
    return this.dwResponse['00780090']?.Value;
  }

  // 2D Implant Template Group Member Matching Axes
  get TwoDImplantTemplateGroupMemberMatchingAxes(): Array<number> | undefined {
    return this.x007800a0;
  }

  get x007800a0(): Array<number> | undefined {
    const element = this.dwResponse['007800a0'];
    return this.dwResponse['007800a0']?.Value;
  }

  // Implant Template Group Variation Dimension Sequence
  get ImplantTemplateGroupVariationDimensionSequence(): Array<Dataset> | undefined {
    return this.x007800b0;
  }

  get x007800b0(): Array<Dataset> | undefined {
    const element = this.dwResponse['007800b0'];
    return this.dwResponse['007800b0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Implant Template Group Variation Dimension Name
  get ImplantTemplateGroupVariationDimensionName(): string | undefined {
    return this.x007800b2;
  }

  get x007800b2(): string | undefined {
    const element = this.dwResponse['007800b2'];
    return this.dwResponse['007800b2']?.Value[0];
  }

  // Implant Template Group Variation Dimension Rank Sequence
  get ImplantTemplateGroupVariationDimensionRankSequence(): Array<Dataset> | undefined {
    return this.x007800b4;
  }

  get x007800b4(): Array<Dataset> | undefined {
    const element = this.dwResponse['007800b4'];
    return this.dwResponse['007800b4']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Implant Template Group Member ID
  get ReferencedImplantTemplateGroupMemberID(): number | undefined {
    return this.x007800b6;
  }

  get x007800b6(): number | undefined {
    const element = this.dwResponse['007800b6'];
    return this.dwResponse['007800b6']?.Value[0];
  }

  // Implant Template Group Variation Dimension Rank
  get ImplantTemplateGroupVariationDimensionRank(): number | undefined {
    return this.x007800b8;
  }

  get x007800b8(): number | undefined {
    const element = this.dwResponse['007800b8'];
    return this.dwResponse['007800b8']?.Value[0];
  }

  // Surface Scan Acquisition Type Code Sequence
  get SurfaceScanAcquisitionTypeCodeSequence(): Array<Dataset> | undefined {
    return this.x00800001;
  }

  get x00800001(): Array<Dataset> | undefined {
    const element = this.dwResponse['00800001'];
    return this.dwResponse['00800001']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Surface Scan Mode Code Sequence
  get SurfaceScanModeCodeSequence(): Array<Dataset> | undefined {
    return this.x00800002;
  }

  get x00800002(): Array<Dataset> | undefined {
    const element = this.dwResponse['00800002'];
    return this.dwResponse['00800002']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Registration Method Code Sequence
  get RegistrationMethodCodeSequence(): Array<Dataset> | undefined {
    return this.x00800003;
  }

  get x00800003(): Array<Dataset> | undefined {
    const element = this.dwResponse['00800003'];
    return this.dwResponse['00800003']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Shot Duration Time
  get ShotDurationTime(): number | undefined {
    return this.x00800004;
  }

  get x00800004(): number | undefined {
    const element = this.dwResponse['00800004'];
    return this.dwResponse['00800004']?.Value[0];
  }

  // Shot Offset Time
  get ShotOffsetTime(): number | undefined {
    return this.x00800005;
  }

  get x00800005(): number | undefined {
    const element = this.dwResponse['00800005'];
    return this.dwResponse['00800005']?.Value[0];
  }

  // Surface Point Presentation Value Data
  get SurfacePointPresentationValueData(): Array<number> | undefined {
    return this.x00800006;
  }

  get x00800006(): Array<number> | undefined {
    const element = this.dwResponse['00800006'];
    return this.dwResponse['00800006']?.Value;
  }

  // Surface Point Color CIELab Value Data
  get SurfacePointColorCIELabValueData(): Array<number> | undefined {
    return this.x00800007;
  }

  get x00800007(): Array<number> | undefined {
    const element = this.dwResponse['00800007'];
    return this.dwResponse['00800007']?.Value;
  }

  // UV Mapping Sequence
  get UVMappingSequence(): Array<Dataset> | undefined {
    return this.x00800008;
  }

  get x00800008(): Array<Dataset> | undefined {
    const element = this.dwResponse['00800008'];
    return this.dwResponse['00800008']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Texture Label
  get TextureLabel(): string | undefined {
    return this.x00800009;
  }

  get x00800009(): string | undefined {
    const element = this.dwResponse['00800009'];
    return this.dwResponse['00800009']?.Value[0];
  }

  // Referenced Texture Sequence
  get ReferencedTextureSequence(): Array<Dataset> | undefined {
    return this.x00800012;
  }

  get x00800012(): Array<Dataset> | undefined {
    const element = this.dwResponse['00800012'];
    return this.dwResponse['00800012']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Surface Data Sequence
  get ReferencedSurfaceDataSequence(): Array<Dataset> | undefined {
    return this.x00800013;
  }

  get x00800013(): Array<Dataset> | undefined {
    const element = this.dwResponse['00800013'];
    return this.dwResponse['00800013']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Storage Media File-set ID
  get StorageMediaFileSetID(): string | undefined {
    return this.x00880130;
  }

  get x00880130(): string | undefined {
    const element = this.dwResponse['00880130'];
    return this.dwResponse['00880130']?.Value[0];
  }

  // Storage Media File-set UID
  get StorageMediaFileSetUID(): string | undefined {
    return this.x00880140;
  }

  get x00880140(): string | undefined {
    const element = this.dwResponse['00880140'];
    return this.dwResponse['00880140']?.Value[0];
  }

  // Icon Image Sequence
  get IconImageSequence(): Array<Dataset> | undefined {
    return this.x00880200;
  }

  get x00880200(): Array<Dataset> | undefined {
    const element = this.dwResponse['00880200'];
    return this.dwResponse['00880200']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Topic Title
  get TopicTitle(): string | undefined {
    return this.x00880904;
  }

  get x00880904(): string | undefined {
    const element = this.dwResponse['00880904'];
    return this.dwResponse['00880904']?.Value[0];
  }

  // Topic Author
  get TopicAuthor(): string | undefined {
    return this.x00880910;
  }

  get x00880910(): string | undefined {
    const element = this.dwResponse['00880910'];
    return this.dwResponse['00880910']?.Value[0];
  }

  // Topic Keywords
  get TopicKeywords(): Array<string> | undefined {
    return this.x00880912;
  }

  get x00880912(): Array<string> | undefined {
    const element = this.dwResponse['00880912'];
    return this.dwResponse['00880912']?.Value;
  }

  // SOP Instance Status
  get SOPInstanceStatus(): string | undefined {
    return this.x01000410;
  }

  get x01000410(): string | undefined {
    const element = this.dwResponse['01000410'];
    return this.dwResponse['01000410']?.Value[0];
  }

  // SOP Authorization DateTime
  get SOPAuthorizationDateTime(): string | undefined {
    return this.x01000420;
  }

  get x01000420(): string | undefined {
    const element = this.dwResponse['01000420'];
    return this.dwResponse['01000420']?.Value[0];
  }

  // Authorization Equipment Certification Number
  get AuthorizationEquipmentCertificationNumber(): string | undefined {
    return this.x01000426;
  }

  get x01000426(): string | undefined {
    const element = this.dwResponse['01000426'];
    return this.dwResponse['01000426']?.Value[0];
  }

  // MAC ID Number
  get MACIDNumber(): number | undefined {
    return this.x04000005;
  }

  get x04000005(): number | undefined {
    const element = this.dwResponse['04000005'];
    return this.dwResponse['04000005']?.Value[0];
  }

  // MAC Calculation Transfer Syntax UID
  get MACCalculationTransferSyntaxUID(): string | undefined {
    return this.x04000010;
  }

  get x04000010(): string | undefined {
    const element = this.dwResponse['04000010'];
    return this.dwResponse['04000010']?.Value[0];
  }

  // MAC Algorithm
  get MACAlgorithm(): string | undefined {
    return this.x04000015;
  }

  get x04000015(): string | undefined {
    const element = this.dwResponse['04000015'];
    return this.dwResponse['04000015']?.Value[0];
  }

  // Data Elements Signed
  get DataElementsSigned(): Array<Uint16Array> | undefined {
    return this.x04000020;
  }

  get x04000020(): Array<Uint16Array> | undefined {
    const element = this.dwResponse['04000020'];
    return this.dwResponse['04000020']?.Value;
  }

  // Digital Signature UID
  get DigitalSignatureUID(): string | undefined {
    return this.x04000100;
  }

  get x04000100(): string | undefined {
    const element = this.dwResponse['04000100'];
    return this.dwResponse['04000100']?.Value[0];
  }

  // Digital Signature DateTime
  get DigitalSignatureDateTime(): string | undefined {
    return this.x04000105;
  }

  get x04000105(): string | undefined {
    const element = this.dwResponse['04000105'];
    return this.dwResponse['04000105']?.Value[0];
  }

  // Certificate Type
  get CertificateType(): string | undefined {
    return this.x04000110;
  }

  get x04000110(): string | undefined {
    const element = this.dwResponse['04000110'];
    return this.dwResponse['04000110']?.Value[0];
  }

  // Certified Timestamp Type
  get CertifiedTimestampType(): string | undefined {
    return this.x04000305;
  }

  get x04000305(): string | undefined {
    const element = this.dwResponse['04000305'];
    return this.dwResponse['04000305']?.Value[0];
  }

  // Digital Signature Purpose Code Sequence
  get DigitalSignaturePurposeCodeSequence(): Array<Dataset> | undefined {
    return this.x04000401;
  }

  get x04000401(): Array<Dataset> | undefined {
    const element = this.dwResponse['04000401'];
    return this.dwResponse['04000401']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Digital Signature Sequence
  get ReferencedDigitalSignatureSequence(): Array<Dataset> | undefined {
    return this.x04000402;
  }

  get x04000402(): Array<Dataset> | undefined {
    const element = this.dwResponse['04000402'];
    return this.dwResponse['04000402']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced SOP Instance MAC Sequence
  get ReferencedSOPInstanceMACSequence(): Array<Dataset> | undefined {
    return this.x04000403;
  }

  get x04000403(): Array<Dataset> | undefined {
    const element = this.dwResponse['04000403'];
    return this.dwResponse['04000403']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Encrypted Attributes Sequence
  get EncryptedAttributesSequence(): Array<Dataset> | undefined {
    return this.x04000500;
  }

  get x04000500(): Array<Dataset> | undefined {
    const element = this.dwResponse['04000500'];
    return this.dwResponse['04000500']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Encrypted Content Transfer Syntax UID
  get EncryptedContentTransferSyntaxUID(): string | undefined {
    return this.x04000510;
  }

  get x04000510(): string | undefined {
    const element = this.dwResponse['04000510'];
    return this.dwResponse['04000510']?.Value[0];
  }

  // Modified Attributes Sequence
  get ModifiedAttributesSequence(): Array<Dataset> | undefined {
    return this.x04000550;
  }

  get x04000550(): Array<Dataset> | undefined {
    const element = this.dwResponse['04000550'];
    return this.dwResponse['04000550']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Original Attributes Sequence
  get OriginalAttributesSequence(): Array<Dataset> | undefined {
    return this.x04000561;
  }

  get x04000561(): Array<Dataset> | undefined {
    const element = this.dwResponse['04000561'];
    return this.dwResponse['04000561']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Attribute Modification DateTime
  get AttributeModificationDateTime(): string | undefined {
    return this.x04000562;
  }

  get x04000562(): string | undefined {
    const element = this.dwResponse['04000562'];
    return this.dwResponse['04000562']?.Value[0];
  }

  // Modifying System
  get ModifyingSystem(): string | undefined {
    return this.x04000563;
  }

  get x04000563(): string | undefined {
    const element = this.dwResponse['04000563'];
    return this.dwResponse['04000563']?.Value[0];
  }

  // Source of Previous Values
  get SourceOfPreviousValues(): string | undefined {
    return this.x04000564;
  }

  get x04000564(): string | undefined {
    const element = this.dwResponse['04000564'];
    return this.dwResponse['04000564']?.Value[0];
  }

  // Reason for the Attribute Modification
  get ReasonForTheAttributeModification(): string | undefined {
    return this.x04000565;
  }

  get x04000565(): string | undefined {
    const element = this.dwResponse['04000565'];
    return this.dwResponse['04000565']?.Value[0];
  }

  // Escape Triplet
  get EscapeTriplet(): Array<number> | undefined {
    return this.x1000xxx0;
  }

  get x1000xxx0(): Array<number> | undefined {
    const element = this.dwResponse['1000xxx0'];
    return this.dwResponse['1000xxx0']?.Value;
  }

  // Run Length Triplet
  get RunLengthTriplet(): Array<number> | undefined {
    return this.x1000xxx1;
  }

  get x1000xxx1(): Array<number> | undefined {
    const element = this.dwResponse['1000xxx1'];
    return this.dwResponse['1000xxx1']?.Value;
  }

  // Huffman Table Size
  get HuffmanTableSize(): number | undefined {
    return this.x1000xxx2;
  }

  get x1000xxx2(): number | undefined {
    const element = this.dwResponse['1000xxx2'];
    return this.dwResponse['1000xxx2']?.Value[0];
  }

  // Huffman Table Triplet
  get HuffmanTableTriplet(): Array<number> | undefined {
    return this.x1000xxx3;
  }

  get x1000xxx3(): Array<number> | undefined {
    const element = this.dwResponse['1000xxx3'];
    return this.dwResponse['1000xxx3']?.Value;
  }

  // Shift Table Size
  get ShiftTableSize(): number | undefined {
    return this.x1000xxx4;
  }

  get x1000xxx4(): number | undefined {
    const element = this.dwResponse['1000xxx4'];
    return this.dwResponse['1000xxx4']?.Value[0];
  }

  // Shift Table Triplet
  get ShiftTableTriplet(): Array<number> | undefined {
    return this.x1000xxx5;
  }

  get x1000xxx5(): Array<number> | undefined {
    const element = this.dwResponse['1000xxx5'];
    return this.dwResponse['1000xxx5']?.Value;
  }

  // Zonal Map
  get ZonalMap(): Array<number> | undefined {
    return this.x1010xxxx;
  }

  get x1010xxxx(): Array<number> | undefined {
    const element = this.dwResponse['1010xxxx'];
    return this.dwResponse['1010xxxx']?.Value;
  }

  // Number of Copies
  get NumberOfCopies(): number | undefined {
    return this.x20000010;
  }

  get x20000010(): number | undefined {
    const element = this.dwResponse['20000010'];
    return this.dwResponse['20000010']?.Value[0];
  }

  // Printer Configuration Sequence
  get PrinterConfigurationSequence(): Array<Dataset> | undefined {
    return this.x2000001e;
  }

  get x2000001e(): Array<Dataset> | undefined {
    const element = this.dwResponse['2000001e'];
    return this.dwResponse['2000001e']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Print Priority
  get PrintPriority(): string | undefined {
    return this.x20000020;
  }

  get x20000020(): string | undefined {
    const element = this.dwResponse['20000020'];
    return this.dwResponse['20000020']?.Value[0];
  }

  // Medium Type
  get MediumType(): string | undefined {
    return this.x20000030;
  }

  get x20000030(): string | undefined {
    const element = this.dwResponse['20000030'];
    return this.dwResponse['20000030']?.Value[0];
  }

  // Film Destination
  get FilmDestination(): string | undefined {
    return this.x20000040;
  }

  get x20000040(): string | undefined {
    const element = this.dwResponse['20000040'];
    return this.dwResponse['20000040']?.Value[0];
  }

  // Film Session Label
  get FilmSessionLabel(): string | undefined {
    return this.x20000050;
  }

  get x20000050(): string | undefined {
    const element = this.dwResponse['20000050'];
    return this.dwResponse['20000050']?.Value[0];
  }

  // Memory Allocation
  get MemoryAllocation(): number | undefined {
    return this.x20000060;
  }

  get x20000060(): number | undefined {
    const element = this.dwResponse['20000060'];
    return this.dwResponse['20000060']?.Value[0];
  }

  // Maximum Memory Allocation
  get MaximumMemoryAllocation(): number | undefined {
    return this.x20000061;
  }

  get x20000061(): number | undefined {
    const element = this.dwResponse['20000061'];
    return this.dwResponse['20000061']?.Value[0];
  }

  // Color Image Printing Flag
  get ColorImagePrintingFlag(): string | undefined {
    return this.x20000062;
  }

  get x20000062(): string | undefined {
    const element = this.dwResponse['20000062'];
    return this.dwResponse['20000062']?.Value[0];
  }

  // Collation Flag
  get CollationFlag(): string | undefined {
    return this.x20000063;
  }

  get x20000063(): string | undefined {
    const element = this.dwResponse['20000063'];
    return this.dwResponse['20000063']?.Value[0];
  }

  // Annotation Flag
  get AnnotationFlag(): string | undefined {
    return this.x20000065;
  }

  get x20000065(): string | undefined {
    const element = this.dwResponse['20000065'];
    return this.dwResponse['20000065']?.Value[0];
  }

  // Image Overlay Flag
  get ImageOverlayFlag(): string | undefined {
    return this.x20000067;
  }

  get x20000067(): string | undefined {
    const element = this.dwResponse['20000067'];
    return this.dwResponse['20000067']?.Value[0];
  }

  // Presentation LUT Flag
  get PresentationLUTFlag(): string | undefined {
    return this.x20000069;
  }

  get x20000069(): string | undefined {
    const element = this.dwResponse['20000069'];
    return this.dwResponse['20000069']?.Value[0];
  }

  // Image Box Presentation LUT Flag
  get ImageBoxPresentationLUTFlag(): string | undefined {
    return this.x2000006a;
  }

  get x2000006a(): string | undefined {
    const element = this.dwResponse['2000006a'];
    return this.dwResponse['2000006a']?.Value[0];
  }

  // Memory Bit Depth
  get MemoryBitDepth(): number | undefined {
    return this.x200000a0;
  }

  get x200000a0(): number | undefined {
    const element = this.dwResponse['200000a0'];
    return this.dwResponse['200000a0']?.Value[0];
  }

  // Printing Bit Depth
  get PrintingBitDepth(): number | undefined {
    return this.x200000a1;
  }

  get x200000a1(): number | undefined {
    const element = this.dwResponse['200000a1'];
    return this.dwResponse['200000a1']?.Value[0];
  }

  // Media Installed Sequence
  get MediaInstalledSequence(): Array<Dataset> | undefined {
    return this.x200000a2;
  }

  get x200000a2(): Array<Dataset> | undefined {
    const element = this.dwResponse['200000a2'];
    return this.dwResponse['200000a2']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Other Media Available Sequence
  get OtherMediaAvailableSequence(): Array<Dataset> | undefined {
    return this.x200000a4;
  }

  get x200000a4(): Array<Dataset> | undefined {
    const element = this.dwResponse['200000a4'];
    return this.dwResponse['200000a4']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Supported Image Display Formats Sequence
  get SupportedImageDisplayFormatsSequence(): Array<Dataset> | undefined {
    return this.x200000a8;
  }

  get x200000a8(): Array<Dataset> | undefined {
    const element = this.dwResponse['200000a8'];
    return this.dwResponse['200000a8']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Film Box Sequence
  get ReferencedFilmBoxSequence(): Array<Dataset> | undefined {
    return this.x20000500;
  }

  get x20000500(): Array<Dataset> | undefined {
    const element = this.dwResponse['20000500'];
    return this.dwResponse['20000500']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Stored Print Sequence
  get ReferencedStoredPrintSequence(): Array<Dataset> | undefined {
    return this.x20000510;
  }

  get x20000510(): Array<Dataset> | undefined {
    const element = this.dwResponse['20000510'];
    return this.dwResponse['20000510']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Annotation Display Format ID
  get AnnotationDisplayFormatID(): string | undefined {
    return this.x20100030;
  }

  get x20100030(): string | undefined {
    const element = this.dwResponse['20100030'];
    return this.dwResponse['20100030']?.Value[0];
  }

  // Film Orientation
  get FilmOrientation(): string | undefined {
    return this.x20100040;
  }

  get x20100040(): string | undefined {
    const element = this.dwResponse['20100040'];
    return this.dwResponse['20100040']?.Value[0];
  }

  // Film Size ID
  get FilmSizeID(): string | undefined {
    return this.x20100050;
  }

  get x20100050(): string | undefined {
    const element = this.dwResponse['20100050'];
    return this.dwResponse['20100050']?.Value[0];
  }

  // Printer Resolution ID
  get PrinterResolutionID(): string | undefined {
    return this.x20100052;
  }

  get x20100052(): string | undefined {
    const element = this.dwResponse['20100052'];
    return this.dwResponse['20100052']?.Value[0];
  }

  // Default Printer Resolution ID
  get DefaultPrinterResolutionID(): string | undefined {
    return this.x20100054;
  }

  get x20100054(): string | undefined {
    const element = this.dwResponse['20100054'];
    return this.dwResponse['20100054']?.Value[0];
  }

  // Magnification Type
  get MagnificationType(): string | undefined {
    return this.x20100060;
  }

  get x20100060(): string | undefined {
    const element = this.dwResponse['20100060'];
    return this.dwResponse['20100060']?.Value[0];
  }

  // Smoothing Type
  get SmoothingType(): string | undefined {
    return this.x20100080;
  }

  get x20100080(): string | undefined {
    const element = this.dwResponse['20100080'];
    return this.dwResponse['20100080']?.Value[0];
  }

  // Default Magnification Type
  get DefaultMagnificationType(): string | undefined {
    return this.x201000a6;
  }

  get x201000a6(): string | undefined {
    const element = this.dwResponse['201000a6'];
    return this.dwResponse['201000a6']?.Value[0];
  }

  // Other Magnification Types Available
  get OtherMagnificationTypesAvailable(): Array<string> | undefined {
    return this.x201000a7;
  }

  get x201000a7(): Array<string> | undefined {
    const element = this.dwResponse['201000a7'];
    return this.dwResponse['201000a7']?.Value;
  }

  // Default Smoothing Type
  get DefaultSmoothingType(): string | undefined {
    return this.x201000a8;
  }

  get x201000a8(): string | undefined {
    const element = this.dwResponse['201000a8'];
    return this.dwResponse['201000a8']?.Value[0];
  }

  // Other Smoothing Types Available
  get OtherSmoothingTypesAvailable(): Array<string> | undefined {
    return this.x201000a9;
  }

  get x201000a9(): Array<string> | undefined {
    const element = this.dwResponse['201000a9'];
    return this.dwResponse['201000a9']?.Value;
  }

  // Border Density
  get BorderDensity(): string | undefined {
    return this.x20100100;
  }

  get x20100100(): string | undefined {
    const element = this.dwResponse['20100100'];
    return this.dwResponse['20100100']?.Value[0];
  }

  // Empty Image Density
  get EmptyImageDensity(): string | undefined {
    return this.x20100110;
  }

  get x20100110(): string | undefined {
    const element = this.dwResponse['20100110'];
    return this.dwResponse['20100110']?.Value[0];
  }

  // Min Density
  get MinDensity(): number | undefined {
    return this.x20100120;
  }

  get x20100120(): number | undefined {
    const element = this.dwResponse['20100120'];
    return this.dwResponse['20100120']?.Value[0];
  }

  // Max Density
  get MaxDensity(): number | undefined {
    return this.x20100130;
  }

  get x20100130(): number | undefined {
    const element = this.dwResponse['20100130'];
    return this.dwResponse['20100130']?.Value[0];
  }

  // Trim
  get Trim(): string | undefined {
    return this.x20100140;
  }

  get x20100140(): string | undefined {
    const element = this.dwResponse['20100140'];
    return this.dwResponse['20100140']?.Value[0];
  }

  // Maximum Collated Films
  get MaximumCollatedFilms(): number | undefined {
    return this.x20100154;
  }

  get x20100154(): number | undefined {
    const element = this.dwResponse['20100154'];
    return this.dwResponse['20100154']?.Value[0];
  }

  // Illumination
  get Illumination(): number | undefined {
    return this.x2010015e;
  }

  get x2010015e(): number | undefined {
    const element = this.dwResponse['2010015e'];
    return this.dwResponse['2010015e']?.Value[0];
  }

  // Reflected Ambient Light
  get ReflectedAmbientLight(): number | undefined {
    return this.x20100160;
  }

  get x20100160(): number | undefined {
    const element = this.dwResponse['20100160'];
    return this.dwResponse['20100160']?.Value[0];
  }

  // Printer Pixel Spacing
  get PrinterPixelSpacing(): Array<number> | undefined {
    return this.x20100376;
  }

  get x20100376(): Array<number> | undefined {
    const element = this.dwResponse['20100376'];
    return this.dwResponse['20100376']?.Value;
  }

  // Referenced Film Session Sequence
  get ReferencedFilmSessionSequence(): Array<Dataset> | undefined {
    return this.x20100500;
  }

  get x20100500(): Array<Dataset> | undefined {
    const element = this.dwResponse['20100500'];
    return this.dwResponse['20100500']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Image Box Sequence
  get ReferencedImageBoxSequence(): Array<Dataset> | undefined {
    return this.x20100510;
  }

  get x20100510(): Array<Dataset> | undefined {
    const element = this.dwResponse['20100510'];
    return this.dwResponse['20100510']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Basic Annotation Box Sequence
  get ReferencedBasicAnnotationBoxSequence(): Array<Dataset> | undefined {
    return this.x20100520;
  }

  get x20100520(): Array<Dataset> | undefined {
    const element = this.dwResponse['20100520'];
    return this.dwResponse['20100520']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Image Box Position
  get ImageBoxPosition(): number | undefined {
    return this.x20200010;
  }

  get x20200010(): number | undefined {
    const element = this.dwResponse['20200010'];
    return this.dwResponse['20200010']?.Value[0];
  }

  // Polarity
  get Polarity(): string | undefined {
    return this.x20200020;
  }

  get x20200020(): string | undefined {
    const element = this.dwResponse['20200020'];
    return this.dwResponse['20200020']?.Value[0];
  }

  // Requested Image Size
  get RequestedImageSize(): number | undefined {
    return this.x20200030;
  }

  get x20200030(): number | undefined {
    const element = this.dwResponse['20200030'];
    return this.dwResponse['20200030']?.Value[0];
  }

  // Requested Decimate/Crop Behavior
  get RequestedDecimateCropBehavior(): string | undefined {
    return this.x20200040;
  }

  get x20200040(): string | undefined {
    const element = this.dwResponse['20200040'];
    return this.dwResponse['20200040']?.Value[0];
  }

  // Requested Resolution ID
  get RequestedResolutionID(): string | undefined {
    return this.x20200050;
  }

  get x20200050(): string | undefined {
    const element = this.dwResponse['20200050'];
    return this.dwResponse['20200050']?.Value[0];
  }

  // Requested Image Size Flag
  get RequestedImageSizeFlag(): string | undefined {
    return this.x202000a0;
  }

  get x202000a0(): string | undefined {
    const element = this.dwResponse['202000a0'];
    return this.dwResponse['202000a0']?.Value[0];
  }

  // Decimate/Crop Result
  get DecimateCropResult(): string | undefined {
    return this.x202000a2;
  }

  get x202000a2(): string | undefined {
    const element = this.dwResponse['202000a2'];
    return this.dwResponse['202000a2']?.Value[0];
  }

  // Basic Grayscale Image Sequence
  get BasicGrayscaleImageSequence(): Array<Dataset> | undefined {
    return this.x20200110;
  }

  get x20200110(): Array<Dataset> | undefined {
    const element = this.dwResponse['20200110'];
    return this.dwResponse['20200110']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Basic Color Image Sequence
  get BasicColorImageSequence(): Array<Dataset> | undefined {
    return this.x20200111;
  }

  get x20200111(): Array<Dataset> | undefined {
    const element = this.dwResponse['20200111'];
    return this.dwResponse['20200111']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Image Overlay Box Sequence
  get ReferencedImageOverlayBoxSequence(): Array<Dataset> | undefined {
    return this.x20200130;
  }

  get x20200130(): Array<Dataset> | undefined {
    const element = this.dwResponse['20200130'];
    return this.dwResponse['20200130']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced VOI LUT Box Sequence
  get ReferencedVOILUTBoxSequence(): Array<Dataset> | undefined {
    return this.x20200140;
  }

  get x20200140(): Array<Dataset> | undefined {
    const element = this.dwResponse['20200140'];
    return this.dwResponse['20200140']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Annotation Position
  get AnnotationPosition(): number | undefined {
    return this.x20300010;
  }

  get x20300010(): number | undefined {
    const element = this.dwResponse['20300010'];
    return this.dwResponse['20300010']?.Value[0];
  }

  // Text String
  get TextString(): string | undefined {
    return this.x20300020;
  }

  get x20300020(): string | undefined {
    const element = this.dwResponse['20300020'];
    return this.dwResponse['20300020']?.Value[0];
  }

  // Referenced Overlay Plane Sequence
  get ReferencedOverlayPlaneSequence(): Array<Dataset> | undefined {
    return this.x20400010;
  }

  get x20400010(): Array<Dataset> | undefined {
    const element = this.dwResponse['20400010'];
    return this.dwResponse['20400010']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Overlay Plane Groups
  get ReferencedOverlayPlaneGroups(): Array<number> | undefined {
    return this.x20400011;
  }

  get x20400011(): Array<number> | undefined {
    const element = this.dwResponse['20400011'];
    return this.dwResponse['20400011']?.Value;
  }

  // Overlay Pixel Data Sequence
  get OverlayPixelDataSequence(): Array<Dataset> | undefined {
    return this.x20400020;
  }

  get x20400020(): Array<Dataset> | undefined {
    const element = this.dwResponse['20400020'];
    return this.dwResponse['20400020']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Overlay Magnification Type
  get OverlayMagnificationType(): string | undefined {
    return this.x20400060;
  }

  get x20400060(): string | undefined {
    const element = this.dwResponse['20400060'];
    return this.dwResponse['20400060']?.Value[0];
  }

  // Overlay Smoothing Type
  get OverlaySmoothingType(): string | undefined {
    return this.x20400070;
  }

  get x20400070(): string | undefined {
    const element = this.dwResponse['20400070'];
    return this.dwResponse['20400070']?.Value[0];
  }

  // Overlay or Image Magnification
  get OverlayOrImageMagnification(): string | undefined {
    return this.x20400072;
  }

  get x20400072(): string | undefined {
    const element = this.dwResponse['20400072'];
    return this.dwResponse['20400072']?.Value[0];
  }

  // Magnify to Number of Columns
  get MagnifyToNumberOfColumns(): number | undefined {
    return this.x20400074;
  }

  get x20400074(): number | undefined {
    const element = this.dwResponse['20400074'];
    return this.dwResponse['20400074']?.Value[0];
  }

  // Overlay Foreground Density
  get OverlayForegroundDensity(): string | undefined {
    return this.x20400080;
  }

  get x20400080(): string | undefined {
    const element = this.dwResponse['20400080'];
    return this.dwResponse['20400080']?.Value[0];
  }

  // Overlay Background Density
  get OverlayBackgroundDensity(): string | undefined {
    return this.x20400082;
  }

  get x20400082(): string | undefined {
    const element = this.dwResponse['20400082'];
    return this.dwResponse['20400082']?.Value[0];
  }

  // Overlay Mode
  get OverlayMode(): string | undefined {
    return this.x20400090;
  }

  get x20400090(): string | undefined {
    const element = this.dwResponse['20400090'];
    return this.dwResponse['20400090']?.Value[0];
  }

  // Threshold Density
  get ThresholdDensity(): string | undefined {
    return this.x20400100;
  }

  get x20400100(): string | undefined {
    const element = this.dwResponse['20400100'];
    return this.dwResponse['20400100']?.Value[0];
  }

  // Referenced Image Box Sequence (Retired)
  get ReferencedImageBoxSequenceRetired(): Array<Dataset> | undefined {
    return this.x20400500;
  }

  get x20400500(): Array<Dataset> | undefined {
    const element = this.dwResponse['20400500'];
    return this.dwResponse['20400500']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Presentation LUT Sequence
  get PresentationLUTSequence(): Array<Dataset> | undefined {
    return this.x20500010;
  }

  get x20500010(): Array<Dataset> | undefined {
    const element = this.dwResponse['20500010'];
    return this.dwResponse['20500010']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Presentation LUT Shape
  get PresentationLUTShape(): string | undefined {
    return this.x20500020;
  }

  get x20500020(): string | undefined {
    const element = this.dwResponse['20500020'];
    return this.dwResponse['20500020']?.Value[0];
  }

  // Referenced Presentation LUT Sequence
  get ReferencedPresentationLUTSequence(): Array<Dataset> | undefined {
    return this.x20500500;
  }

  get x20500500(): Array<Dataset> | undefined {
    const element = this.dwResponse['20500500'];
    return this.dwResponse['20500500']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Print Job ID
  get PrintJobID(): string | undefined {
    return this.x21000010;
  }

  get x21000010(): string | undefined {
    const element = this.dwResponse['21000010'];
    return this.dwResponse['21000010']?.Value[0];
  }

  // Execution Status
  get ExecutionStatus(): string | undefined {
    return this.x21000020;
  }

  get x21000020(): string | undefined {
    const element = this.dwResponse['21000020'];
    return this.dwResponse['21000020']?.Value[0];
  }

  // Execution Status Info
  get ExecutionStatusInfo(): string | undefined {
    return this.x21000030;
  }

  get x21000030(): string | undefined {
    const element = this.dwResponse['21000030'];
    return this.dwResponse['21000030']?.Value[0];
  }

  // Creation Date
  get CreationDate(): Date | undefined {
    return this.x21000040;
  }

  get x21000040(): Date | undefined {
    const element = this.dwResponse['21000040'];
    return this.dwResponse['21000040']?.Value[0];
  }

  // Creation Time
  get CreationTime(): string | undefined {
    return this.x21000050;
  }

  get x21000050(): string | undefined {
    const element = this.dwResponse['21000050'];
    return this.dwResponse['21000050']?.Value[0];
  }

  // Originator
  get Originator(): string | undefined {
    return this.x21000070;
  }

  get x21000070(): string | undefined {
    const element = this.dwResponse['21000070'];
    return this.dwResponse['21000070']?.Value[0];
  }

  // Destination AE
  get DestinationAE(): string | undefined {
    return this.x21000140;
  }

  get x21000140(): string | undefined {
    const element = this.dwResponse['21000140'];
    return this.dwResponse['21000140']?.Value[0];
  }

  // Owner ID
  get OwnerID(): string | undefined {
    return this.x21000160;
  }

  get x21000160(): string | undefined {
    const element = this.dwResponse['21000160'];
    return this.dwResponse['21000160']?.Value[0];
  }

  // Number of Films
  get NumberOfFilms(): number | undefined {
    return this.x21000170;
  }

  get x21000170(): number | undefined {
    const element = this.dwResponse['21000170'];
    return this.dwResponse['21000170']?.Value[0];
  }

  // Referenced Print Job Sequence (Pull Stored Print)
  get ReferencedPrintJobSequencePullStoredPrint(): Array<Dataset> | undefined {
    return this.x21000500;
  }

  get x21000500(): Array<Dataset> | undefined {
    const element = this.dwResponse['21000500'];
    return this.dwResponse['21000500']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Printer Status
  get PrinterStatus(): string | undefined {
    return this.x21100010;
  }

  get x21100010(): string | undefined {
    const element = this.dwResponse['21100010'];
    return this.dwResponse['21100010']?.Value[0];
  }

  // Printer Status Info
  get PrinterStatusInfo(): string | undefined {
    return this.x21100020;
  }

  get x21100020(): string | undefined {
    const element = this.dwResponse['21100020'];
    return this.dwResponse['21100020']?.Value[0];
  }

  // Printer Name
  get PrinterName(): string | undefined {
    return this.x21100030;
  }

  get x21100030(): string | undefined {
    const element = this.dwResponse['21100030'];
    return this.dwResponse['21100030']?.Value[0];
  }

  // Print Queue ID
  get PrintQueueID(): string | undefined {
    return this.x21100099;
  }

  get x21100099(): string | undefined {
    const element = this.dwResponse['21100099'];
    return this.dwResponse['21100099']?.Value[0];
  }

  // Queue Status
  get QueueStatus(): string | undefined {
    return this.x21200010;
  }

  get x21200010(): string | undefined {
    const element = this.dwResponse['21200010'];
    return this.dwResponse['21200010']?.Value[0];
  }

  // Print Job Description Sequence
  get PrintJobDescriptionSequence(): Array<Dataset> | undefined {
    return this.x21200050;
  }

  get x21200050(): Array<Dataset> | undefined {
    const element = this.dwResponse['21200050'];
    return this.dwResponse['21200050']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Print Job Sequence
  get ReferencedPrintJobSequence(): Array<Dataset> | undefined {
    return this.x21200070;
  }

  get x21200070(): Array<Dataset> | undefined {
    const element = this.dwResponse['21200070'];
    return this.dwResponse['21200070']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Print Management Capabilities Sequence
  get PrintManagementCapabilitiesSequence(): Array<Dataset> | undefined {
    return this.x21300010;
  }

  get x21300010(): Array<Dataset> | undefined {
    const element = this.dwResponse['21300010'];
    return this.dwResponse['21300010']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Printer Characteristics Sequence
  get PrinterCharacteristicsSequence(): Array<Dataset> | undefined {
    return this.x21300015;
  }

  get x21300015(): Array<Dataset> | undefined {
    const element = this.dwResponse['21300015'];
    return this.dwResponse['21300015']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Film Box Content Sequence
  get FilmBoxContentSequence(): Array<Dataset> | undefined {
    return this.x21300030;
  }

  get x21300030(): Array<Dataset> | undefined {
    const element = this.dwResponse['21300030'];
    return this.dwResponse['21300030']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Image Box Content Sequence
  get ImageBoxContentSequence(): Array<Dataset> | undefined {
    return this.x21300040;
  }

  get x21300040(): Array<Dataset> | undefined {
    const element = this.dwResponse['21300040'];
    return this.dwResponse['21300040']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Annotation Content Sequence
  get AnnotationContentSequence(): Array<Dataset> | undefined {
    return this.x21300050;
  }

  get x21300050(): Array<Dataset> | undefined {
    const element = this.dwResponse['21300050'];
    return this.dwResponse['21300050']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Image Overlay Box Content Sequence
  get ImageOverlayBoxContentSequence(): Array<Dataset> | undefined {
    return this.x21300060;
  }

  get x21300060(): Array<Dataset> | undefined {
    const element = this.dwResponse['21300060'];
    return this.dwResponse['21300060']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Presentation LUT Content Sequence
  get PresentationLUTContentSequence(): Array<Dataset> | undefined {
    return this.x21300080;
  }

  get x21300080(): Array<Dataset> | undefined {
    const element = this.dwResponse['21300080'];
    return this.dwResponse['21300080']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Proposed Study Sequence
  get ProposedStudySequence(): Array<Dataset> | undefined {
    return this.x213000a0;
  }

  get x213000a0(): Array<Dataset> | undefined {
    const element = this.dwResponse['213000a0'];
    return this.dwResponse['213000a0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Original Image Sequence
  get OriginalImageSequence(): Array<Dataset> | undefined {
    return this.x213000c0;
  }

  get x213000c0(): Array<Dataset> | undefined {
    const element = this.dwResponse['213000c0'];
    return this.dwResponse['213000c0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Label Using Information Extracted From Instances
  get LabelUsingInformationExtractedFromInstances(): string | undefined {
    return this.x22000001;
  }

  get x22000001(): string | undefined {
    const element = this.dwResponse['22000001'];
    return this.dwResponse['22000001']?.Value[0];
  }

  // Label Style Selection
  get LabelStyleSelection(): string | undefined {
    return this.x22000003;
  }

  get x22000003(): string | undefined {
    const element = this.dwResponse['22000003'];
    return this.dwResponse['22000003']?.Value[0];
  }

  // Barcode Symbology
  get BarcodeSymbology(): string | undefined {
    return this.x22000006;
  }

  get x22000006(): string | undefined {
    const element = this.dwResponse['22000006'];
    return this.dwResponse['22000006']?.Value[0];
  }

  // Allow Media Splitting
  get AllowMediaSplitting(): string | undefined {
    return this.x22000007;
  }

  get x22000007(): string | undefined {
    const element = this.dwResponse['22000007'];
    return this.dwResponse['22000007']?.Value[0];
  }

  // Include Non-DICOM Objects
  get IncludeNonDICOMObjects(): string | undefined {
    return this.x22000008;
  }

  get x22000008(): string | undefined {
    const element = this.dwResponse['22000008'];
    return this.dwResponse['22000008']?.Value[0];
  }

  // Include Display Application
  get IncludeDisplayApplication(): string | undefined {
    return this.x22000009;
  }

  get x22000009(): string | undefined {
    const element = this.dwResponse['22000009'];
    return this.dwResponse['22000009']?.Value[0];
  }

  // Preserve Composite Instances After Media Creation
  get PreserveCompositeInstancesAfterMediaCreation(): string | undefined {
    return this.x2200000a;
  }

  get x2200000a(): string | undefined {
    const element = this.dwResponse['2200000a'];
    return this.dwResponse['2200000a']?.Value[0];
  }

  // Total Number of Pieces of Media Created
  get TotalNumberOfPiecesOfMediaCreated(): number | undefined {
    return this.x2200000b;
  }

  get x2200000b(): number | undefined {
    const element = this.dwResponse['2200000b'];
    return this.dwResponse['2200000b']?.Value[0];
  }

  // Requested Media Application Profile
  get RequestedMediaApplicationProfile(): string | undefined {
    return this.x2200000c;
  }

  get x2200000c(): string | undefined {
    const element = this.dwResponse['2200000c'];
    return this.dwResponse['2200000c']?.Value[0];
  }

  // Referenced Storage Media Sequence
  get ReferencedStorageMediaSequence(): Array<Dataset> | undefined {
    return this.x2200000d;
  }

  get x2200000d(): Array<Dataset> | undefined {
    const element = this.dwResponse['2200000d'];
    return this.dwResponse['2200000d']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Failure Attributes
  get FailureAttributes(): Array<Uint16Array> | undefined {
    return this.x2200000e;
  }

  get x2200000e(): Array<Uint16Array> | undefined {
    const element = this.dwResponse['2200000e'];
    return this.dwResponse['2200000e']?.Value;
  }

  // Allow Lossy Compression
  get AllowLossyCompression(): string | undefined {
    return this.x2200000f;
  }

  get x2200000f(): string | undefined {
    const element = this.dwResponse['2200000f'];
    return this.dwResponse['2200000f']?.Value[0];
  }

  // Request Priority
  get RequestPriority(): string | undefined {
    return this.x22000020;
  }

  get x22000020(): string | undefined {
    const element = this.dwResponse['22000020'];
    return this.dwResponse['22000020']?.Value[0];
  }

  // RT Image Label
  get RTImageLabel(): string | undefined {
    return this.x30020002;
  }

  get x30020002(): string | undefined {
    const element = this.dwResponse['30020002'];
    return this.dwResponse['30020002']?.Value[0];
  }

  // RT Image Name
  get RTImageName(): string | undefined {
    return this.x30020003;
  }

  get x30020003(): string | undefined {
    const element = this.dwResponse['30020003'];
    return this.dwResponse['30020003']?.Value[0];
  }

  // Reported Values Origin
  get ReportedValuesOrigin(): string | undefined {
    return this.x3002000a;
  }

  get x3002000a(): string | undefined {
    const element = this.dwResponse['3002000a'];
    return this.dwResponse['3002000a']?.Value[0];
  }

  // RT Image Plane
  get RTImagePlane(): string | undefined {
    return this.x3002000c;
  }

  get x3002000c(): string | undefined {
    const element = this.dwResponse['3002000c'];
    return this.dwResponse['3002000c']?.Value[0];
  }

  // X-Ray Image Receptor Translation
  get XRayImageReceptorTranslation(): Array<number> | undefined {
    return this.x3002000d;
  }

  get x3002000d(): Array<number> | undefined {
    const element = this.dwResponse['3002000d'];
    return this.dwResponse['3002000d']?.Value;
  }

  // X-Ray Image Receptor Angle
  get XRayImageReceptorAngle(): number | undefined {
    return this.x3002000e;
  }

  get x3002000e(): number | undefined {
    const element = this.dwResponse['3002000e'];
    return this.dwResponse['3002000e']?.Value[0];
  }

  // RT Image Orientation
  get RTImageOrientation(): Array<number> | undefined {
    return this.x30020010;
  }

  get x30020010(): Array<number> | undefined {
    const element = this.dwResponse['30020010'];
    return this.dwResponse['30020010']?.Value;
  }

  // Image Plane Pixel Spacing
  get ImagePlanePixelSpacing(): Array<number> | undefined {
    return this.x30020011;
  }

  get x30020011(): Array<number> | undefined {
    const element = this.dwResponse['30020011'];
    return this.dwResponse['30020011']?.Value;
  }

  // RT Image Position
  get RTImagePosition(): Array<number> | undefined {
    return this.x30020012;
  }

  get x30020012(): Array<number> | undefined {
    const element = this.dwResponse['30020012'];
    return this.dwResponse['30020012']?.Value;
  }

  // Radiation Machine Name
  get RadiationMachineName(): string | undefined {
    return this.x30020020;
  }

  get x30020020(): string | undefined {
    const element = this.dwResponse['30020020'];
    return this.dwResponse['30020020']?.Value[0];
  }

  // Radiation Machine SAD
  get RadiationMachineSAD(): number | undefined {
    return this.x30020022;
  }

  get x30020022(): number | undefined {
    const element = this.dwResponse['30020022'];
    return this.dwResponse['30020022']?.Value[0];
  }

  // Radiation Machine SSD
  get RadiationMachineSSD(): number | undefined {
    return this.x30020024;
  }

  get x30020024(): number | undefined {
    const element = this.dwResponse['30020024'];
    return this.dwResponse['30020024']?.Value[0];
  }

  // RT Image SID
  get RTImageSID(): number | undefined {
    return this.x30020026;
  }

  get x30020026(): number | undefined {
    const element = this.dwResponse['30020026'];
    return this.dwResponse['30020026']?.Value[0];
  }

  // Source to Reference Object Distance
  get SourceToReferenceObjectDistance(): number | undefined {
    return this.x30020028;
  }

  get x30020028(): number | undefined {
    const element = this.dwResponse['30020028'];
    return this.dwResponse['30020028']?.Value[0];
  }

  // Fraction Number
  get FractionNumber(): number | undefined {
    return this.x30020029;
  }

  get x30020029(): number | undefined {
    const element = this.dwResponse['30020029'];
    return this.dwResponse['30020029']?.Value[0];
  }

  // Exposure Sequence
  get ExposureSequence(): Array<Dataset> | undefined {
    return this.x30020030;
  }

  get x30020030(): Array<Dataset> | undefined {
    const element = this.dwResponse['30020030'];
    return this.dwResponse['30020030']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Meterset Exposure
  get MetersetExposure(): number | undefined {
    return this.x30020032;
  }

  get x30020032(): number | undefined {
    const element = this.dwResponse['30020032'];
    return this.dwResponse['30020032']?.Value[0];
  }

  // Diaphragm Position
  get DiaphragmPosition(): Array<number> | undefined {
    return this.x30020034;
  }

  get x30020034(): Array<number> | undefined {
    const element = this.dwResponse['30020034'];
    return this.dwResponse['30020034']?.Value;
  }

  // Fluence Map Sequence
  get FluenceMapSequence(): Array<Dataset> | undefined {
    return this.x30020040;
  }

  get x30020040(): Array<Dataset> | undefined {
    const element = this.dwResponse['30020040'];
    return this.dwResponse['30020040']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Fluence Data Source
  get FluenceDataSource(): string | undefined {
    return this.x30020041;
  }

  get x30020041(): string | undefined {
    const element = this.dwResponse['30020041'];
    return this.dwResponse['30020041']?.Value[0];
  }

  // Fluence Data Scale
  get FluenceDataScale(): number | undefined {
    return this.x30020042;
  }

  get x30020042(): number | undefined {
    const element = this.dwResponse['30020042'];
    return this.dwResponse['30020042']?.Value[0];
  }

  // Primary Fluence Mode Sequence
  get PrimaryFluenceModeSequence(): Array<Dataset> | undefined {
    return this.x30020050;
  }

  get x30020050(): Array<Dataset> | undefined {
    const element = this.dwResponse['30020050'];
    return this.dwResponse['30020050']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Fluence Mode
  get FluenceMode(): string | undefined {
    return this.x30020051;
  }

  get x30020051(): string | undefined {
    const element = this.dwResponse['30020051'];
    return this.dwResponse['30020051']?.Value[0];
  }

  // Fluence Mode ID
  get FluenceModeID(): string | undefined {
    return this.x30020052;
  }

  get x30020052(): string | undefined {
    const element = this.dwResponse['30020052'];
    return this.dwResponse['30020052']?.Value[0];
  }

  // DVH Type
  get DVHType(): string | undefined {
    return this.x30040001;
  }

  get x30040001(): string | undefined {
    const element = this.dwResponse['30040001'];
    return this.dwResponse['30040001']?.Value[0];
  }

  // Dose Units
  get DoseUnits(): string | undefined {
    return this.x30040002;
  }

  get x30040002(): string | undefined {
    const element = this.dwResponse['30040002'];
    return this.dwResponse['30040002']?.Value[0];
  }

  // Dose Type
  get DoseType(): string | undefined {
    return this.x30040004;
  }

  get x30040004(): string | undefined {
    const element = this.dwResponse['30040004'];
    return this.dwResponse['30040004']?.Value[0];
  }

  // Spatial Transform of Dose
  get SpatialTransformOfDose(): string | undefined {
    return this.x30040005;
  }

  get x30040005(): string | undefined {
    const element = this.dwResponse['30040005'];
    return this.dwResponse['30040005']?.Value[0];
  }

  // Dose Comment
  get DoseComment(): string | undefined {
    return this.x30040006;
  }

  get x30040006(): string | undefined {
    const element = this.dwResponse['30040006'];
    return this.dwResponse['30040006']?.Value[0];
  }

  // Normalization Point
  get NormalizationPoint(): Array<number> | undefined {
    return this.x30040008;
  }

  get x30040008(): Array<number> | undefined {
    const element = this.dwResponse['30040008'];
    return this.dwResponse['30040008']?.Value;
  }

  // Dose Summation Type
  get DoseSummationType(): string | undefined {
    return this.x3004000a;
  }

  get x3004000a(): string | undefined {
    const element = this.dwResponse['3004000a'];
    return this.dwResponse['3004000a']?.Value[0];
  }

  // Grid Frame Offset Vector
  get GridFrameOffsetVector(): Array<number> | undefined {
    return this.x3004000c;
  }

  get x3004000c(): Array<number> | undefined {
    const element = this.dwResponse['3004000c'];
    return this.dwResponse['3004000c']?.Value;
  }

  // Dose Grid Scaling
  get DoseGridScaling(): number | undefined {
    return this.x3004000e;
  }

  get x3004000e(): number | undefined {
    const element = this.dwResponse['3004000e'];
    return this.dwResponse['3004000e']?.Value[0];
  }

  // RT Dose ROI Sequence
  get RTDoseROISequence(): Array<Dataset> | undefined {
    return this.x30040010;
  }

  get x30040010(): Array<Dataset> | undefined {
    const element = this.dwResponse['30040010'];
    return this.dwResponse['30040010']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Dose Value
  get DoseValue(): number | undefined {
    return this.x30040012;
  }

  get x30040012(): number | undefined {
    const element = this.dwResponse['30040012'];
    return this.dwResponse['30040012']?.Value[0];
  }

  // Tissue Heterogeneity Correction
  get TissueHeterogeneityCorrection(): Array<string> | undefined {
    return this.x30040014;
  }

  get x30040014(): Array<string> | undefined {
    const element = this.dwResponse['30040014'];
    return this.dwResponse['30040014']?.Value;
  }

  // DVH Normalization Point
  get DVHNormalizationPoint(): Array<number> | undefined {
    return this.x30040040;
  }

  get x30040040(): Array<number> | undefined {
    const element = this.dwResponse['30040040'];
    return this.dwResponse['30040040']?.Value;
  }

  // DVH Normalization Dose Value
  get DVHNormalizationDoseValue(): number | undefined {
    return this.x30040042;
  }

  get x30040042(): number | undefined {
    const element = this.dwResponse['30040042'];
    return this.dwResponse['30040042']?.Value[0];
  }

  // DVH Sequence
  get DVHSequence(): Array<Dataset> | undefined {
    return this.x30040050;
  }

  get x30040050(): Array<Dataset> | undefined {
    const element = this.dwResponse['30040050'];
    return this.dwResponse['30040050']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // DVH Dose Scaling
  get DVHDoseScaling(): number | undefined {
    return this.x30040052;
  }

  get x30040052(): number | undefined {
    const element = this.dwResponse['30040052'];
    return this.dwResponse['30040052']?.Value[0];
  }

  // DVH Volume Units
  get DVHVolumeUnits(): string | undefined {
    return this.x30040054;
  }

  get x30040054(): string | undefined {
    const element = this.dwResponse['30040054'];
    return this.dwResponse['30040054']?.Value[0];
  }

  // DVH Number of Bins
  get DVHNumberOfBins(): number | undefined {
    return this.x30040056;
  }

  get x30040056(): number | undefined {
    const element = this.dwResponse['30040056'];
    return this.dwResponse['30040056']?.Value[0];
  }

  // DVH Data
  get DVHData(): Array<number> | undefined {
    return this.x30040058;
  }

  get x30040058(): Array<number> | undefined {
    const element = this.dwResponse['30040058'];
    return this.dwResponse['30040058']?.Value;
  }

  // DVH Referenced ROI Sequence
  get DVHReferencedROISequence(): Array<Dataset> | undefined {
    return this.x30040060;
  }

  get x30040060(): Array<Dataset> | undefined {
    const element = this.dwResponse['30040060'];
    return this.dwResponse['30040060']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // DVH ROI Contribution Type
  get DVHROIContributionType(): string | undefined {
    return this.x30040062;
  }

  get x30040062(): string | undefined {
    const element = this.dwResponse['30040062'];
    return this.dwResponse['30040062']?.Value[0];
  }

  // DVH Minimum Dose
  get DVHMinimumDose(): number | undefined {
    return this.x30040070;
  }

  get x30040070(): number | undefined {
    const element = this.dwResponse['30040070'];
    return this.dwResponse['30040070']?.Value[0];
  }

  // DVH Maximum Dose
  get DVHMaximumDose(): number | undefined {
    return this.x30040072;
  }

  get x30040072(): number | undefined {
    const element = this.dwResponse['30040072'];
    return this.dwResponse['30040072']?.Value[0];
  }

  // DVH Mean Dose
  get DVHMeanDose(): number | undefined {
    return this.x30040074;
  }

  get x30040074(): number | undefined {
    const element = this.dwResponse['30040074'];
    return this.dwResponse['30040074']?.Value[0];
  }

  // Structure Set Label
  get StructureSetLabel(): string | undefined {
    return this.x30060002;
  }

  get x30060002(): string | undefined {
    const element = this.dwResponse['30060002'];
    return this.dwResponse['30060002']?.Value[0];
  }

  // Structure Set Name
  get StructureSetName(): string | undefined {
    return this.x30060004;
  }

  get x30060004(): string | undefined {
    const element = this.dwResponse['30060004'];
    return this.dwResponse['30060004']?.Value[0];
  }

  // Structure Set Date
  get StructureSetDate(): Date | undefined {
    return this.x30060008;
  }

  get x30060008(): Date | undefined {
    const element = this.dwResponse['30060008'];
    return this.dwResponse['30060008']?.Value[0];
  }

  // Structure Set Time
  get StructureSetTime(): string | undefined {
    return this.x30060009;
  }

  get x30060009(): string | undefined {
    const element = this.dwResponse['30060009'];
    return this.dwResponse['30060009']?.Value[0];
  }

  // Referenced Frame of Reference Sequence
  get ReferencedFrameOfReferenceSequence(): Array<Dataset> | undefined {
    return this.x30060010;
  }

  get x30060010(): Array<Dataset> | undefined {
    const element = this.dwResponse['30060010'];
    return this.dwResponse['30060010']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // RT Referenced Study Sequence
  get RTReferencedStudySequence(): Array<Dataset> | undefined {
    return this.x30060012;
  }

  get x30060012(): Array<Dataset> | undefined {
    const element = this.dwResponse['30060012'];
    return this.dwResponse['30060012']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // RT Referenced Series Sequence
  get RTReferencedSeriesSequence(): Array<Dataset> | undefined {
    return this.x30060014;
  }

  get x30060014(): Array<Dataset> | undefined {
    const element = this.dwResponse['30060014'];
    return this.dwResponse['30060014']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Contour Image Sequence
  get ContourImageSequence(): Array<Dataset> | undefined {
    return this.x30060016;
  }

  get x30060016(): Array<Dataset> | undefined {
    const element = this.dwResponse['30060016'];
    return this.dwResponse['30060016']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Predecessor Structure Set Sequence
  get PredecessorStructureSetSequence(): Array<Dataset> | undefined {
    return this.x30060018;
  }

  get x30060018(): Array<Dataset> | undefined {
    const element = this.dwResponse['30060018'];
    return this.dwResponse['30060018']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Structure Set ROI Sequence
  get StructureSetROISequence(): Array<Dataset> | undefined {
    return this.x30060020;
  }

  get x30060020(): Array<Dataset> | undefined {
    const element = this.dwResponse['30060020'];
    return this.dwResponse['30060020']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // ROI Number
  get ROINumber(): number | undefined {
    return this.x30060022;
  }

  get x30060022(): number | undefined {
    const element = this.dwResponse['30060022'];
    return this.dwResponse['30060022']?.Value[0];
  }

  // Referenced Frame of Reference UID
  get ReferencedFrameOfReferenceUID(): string | undefined {
    return this.x30060024;
  }

  get x30060024(): string | undefined {
    const element = this.dwResponse['30060024'];
    return this.dwResponse['30060024']?.Value[0];
  }

  // ROI Name
  get ROIName(): string | undefined {
    return this.x30060026;
  }

  get x30060026(): string | undefined {
    const element = this.dwResponse['30060026'];
    return this.dwResponse['30060026']?.Value[0];
  }

  // ROI Display Color
  get ROIDisplayColor(): Array<number> | undefined {
    return this.x3006002a;
  }

  get x3006002a(): Array<number> | undefined {
    const element = this.dwResponse['3006002a'];
    return this.dwResponse['3006002a']?.Value;
  }

  // ROI Volume
  get ROIVolume(): number | undefined {
    return this.x3006002c;
  }

  get x3006002c(): number | undefined {
    const element = this.dwResponse['3006002c'];
    return this.dwResponse['3006002c']?.Value[0];
  }

  // RT Related ROI Sequence
  get RTRelatedROISequence(): Array<Dataset> | undefined {
    return this.x30060030;
  }

  get x30060030(): Array<Dataset> | undefined {
    const element = this.dwResponse['30060030'];
    return this.dwResponse['30060030']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // RT ROI Relationship
  get RTROIRelationship(): string | undefined {
    return this.x30060033;
  }

  get x30060033(): string | undefined {
    const element = this.dwResponse['30060033'];
    return this.dwResponse['30060033']?.Value[0];
  }

  // ROI Generation Algorithm
  get ROIGenerationAlgorithm(): string | undefined {
    return this.x30060036;
  }

  get x30060036(): string | undefined {
    const element = this.dwResponse['30060036'];
    return this.dwResponse['30060036']?.Value[0];
  }

  // ROI Generation Description
  get ROIGenerationDescription(): string | undefined {
    return this.x30060038;
  }

  get x30060038(): string | undefined {
    const element = this.dwResponse['30060038'];
    return this.dwResponse['30060038']?.Value[0];
  }

  // ROI Contour Sequence
  get ROIContourSequence(): Array<Dataset> | undefined {
    return this.x30060039;
  }

  get x30060039(): Array<Dataset> | undefined {
    const element = this.dwResponse['30060039'];
    return this.dwResponse['30060039']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Contour Sequence
  get ContourSequence(): Array<Dataset> | undefined {
    return this.x30060040;
  }

  get x30060040(): Array<Dataset> | undefined {
    const element = this.dwResponse['30060040'];
    return this.dwResponse['30060040']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Contour Geometric Type
  get ContourGeometricType(): string | undefined {
    return this.x30060042;
  }

  get x30060042(): string | undefined {
    const element = this.dwResponse['30060042'];
    return this.dwResponse['30060042']?.Value[0];
  }

  // Contour Slab Thickness
  get ContourSlabThickness(): number | undefined {
    return this.x30060044;
  }

  get x30060044(): number | undefined {
    const element = this.dwResponse['30060044'];
    return this.dwResponse['30060044']?.Value[0];
  }

  // Contour Offset Vector
  get ContourOffsetVector(): Array<number> | undefined {
    return this.x30060045;
  }

  get x30060045(): Array<number> | undefined {
    const element = this.dwResponse['30060045'];
    return this.dwResponse['30060045']?.Value;
  }

  // Number of Contour Points
  get NumberOfContourPoints(): number | undefined {
    return this.x30060046;
  }

  get x30060046(): number | undefined {
    const element = this.dwResponse['30060046'];
    return this.dwResponse['30060046']?.Value[0];
  }

  // Contour Number
  get ContourNumber(): number | undefined {
    return this.x30060048;
  }

  get x30060048(): number | undefined {
    const element = this.dwResponse['30060048'];
    return this.dwResponse['30060048']?.Value[0];
  }

  // Attached Contours
  get AttachedContours(): Array<number> | undefined {
    return this.x30060049;
  }

  get x30060049(): Array<number> | undefined {
    const element = this.dwResponse['30060049'];
    return this.dwResponse['30060049']?.Value;
  }

  // Contour Data
  get ContourData(): Array<number> | undefined {
    return this.x30060050;
  }

  get x30060050(): Array<number> | undefined {
    const element = this.dwResponse['30060050'];
    return this.dwResponse['30060050']?.Value;
  }

  // RT ROI Observations Sequence
  get RTROIObservationsSequence(): Array<Dataset> | undefined {
    return this.x30060080;
  }

  get x30060080(): Array<Dataset> | undefined {
    const element = this.dwResponse['30060080'];
    return this.dwResponse['30060080']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Observation Number
  get ObservationNumber(): number | undefined {
    return this.x30060082;
  }

  get x30060082(): number | undefined {
    const element = this.dwResponse['30060082'];
    return this.dwResponse['30060082']?.Value[0];
  }

  // Referenced ROI Number
  get ReferencedROINumber(): number | undefined {
    return this.x30060084;
  }

  get x30060084(): number | undefined {
    const element = this.dwResponse['30060084'];
    return this.dwResponse['30060084']?.Value[0];
  }

  // ROI Observation Label
  get ROIObservationLabel(): string | undefined {
    return this.x30060085;
  }

  get x30060085(): string | undefined {
    const element = this.dwResponse['30060085'];
    return this.dwResponse['30060085']?.Value[0];
  }

  // RT ROI Identification Code Sequence
  get RTROIIdentificationCodeSequence(): Array<Dataset> | undefined {
    return this.x30060086;
  }

  get x30060086(): Array<Dataset> | undefined {
    const element = this.dwResponse['30060086'];
    return this.dwResponse['30060086']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Related RT ROI Observations Sequence
  get RelatedRTROIObservationsSequence(): Array<Dataset> | undefined {
    return this.x300600a0;
  }

  get x300600a0(): Array<Dataset> | undefined {
    const element = this.dwResponse['300600a0'];
    return this.dwResponse['300600a0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // RT ROI Interpreted Type
  get RTROIInterpretedType(): string | undefined {
    return this.x300600a4;
  }

  get x300600a4(): string | undefined {
    const element = this.dwResponse['300600a4'];
    return this.dwResponse['300600a4']?.Value[0];
  }

  // ROI Interpreter
  get ROIInterpreter(): any | undefined {
    return this.x300600a6;
  }

  get x300600a6(): any | undefined {
    const element = this.dwResponse['300600a6'];
    return this.dwResponse['300600a6']?.Value[0];
  }

  // ROI Physical Properties Sequence
  get ROIPhysicalPropertiesSequence(): Array<Dataset> | undefined {
    return this.x300600b0;
  }

  get x300600b0(): Array<Dataset> | undefined {
    const element = this.dwResponse['300600b0'];
    return this.dwResponse['300600b0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // ROI Physical Property
  get ROIPhysicalProperty(): string | undefined {
    return this.x300600b2;
  }

  get x300600b2(): string | undefined {
    const element = this.dwResponse['300600b2'];
    return this.dwResponse['300600b2']?.Value[0];
  }

  // ROI Physical Property Value
  get ROIPhysicalPropertyValue(): number | undefined {
    return this.x300600b4;
  }

  get x300600b4(): number | undefined {
    const element = this.dwResponse['300600b4'];
    return this.dwResponse['300600b4']?.Value[0];
  }

  // ROI Elemental Composition Sequence
  get ROIElementalCompositionSequence(): Array<Dataset> | undefined {
    return this.x300600b6;
  }

  get x300600b6(): Array<Dataset> | undefined {
    const element = this.dwResponse['300600b6'];
    return this.dwResponse['300600b6']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // ROI Elemental Composition Atomic Number
  get ROIElementalCompositionAtomicNumber(): number | undefined {
    return this.x300600b7;
  }

  get x300600b7(): number | undefined {
    const element = this.dwResponse['300600b7'];
    return this.dwResponse['300600b7']?.Value[0];
  }

  // ROI Elemental Composition Atomic Mass Fraction
  get ROIElementalCompositionAtomicMassFraction(): number | undefined {
    return this.x300600b8;
  }

  get x300600b8(): number | undefined {
    const element = this.dwResponse['300600b8'];
    return this.dwResponse['300600b8']?.Value[0];
  }

  // Additional RT ROI Identification Code Sequence
  get AdditionalRTROIIdentificationCodeSequence(): Array<Dataset> | undefined {
    return this.x300600b9;
  }

  get x300600b9(): Array<Dataset> | undefined {
    const element = this.dwResponse['300600b9'];
    return this.dwResponse['300600b9']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Frame of Reference Relationship Sequence
  get FrameOfReferenceRelationshipSequence(): Array<Dataset> | undefined {
    return this.x300600c0;
  }

  get x300600c0(): Array<Dataset> | undefined {
    const element = this.dwResponse['300600c0'];
    return this.dwResponse['300600c0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Related Frame of Reference UID
  get RelatedFrameOfReferenceUID(): string | undefined {
    return this.x300600c2;
  }

  get x300600c2(): string | undefined {
    const element = this.dwResponse['300600c2'];
    return this.dwResponse['300600c2']?.Value[0];
  }

  // Frame of Reference Transformation Type
  get FrameOfReferenceTransformationType(): string | undefined {
    return this.x300600c4;
  }

  get x300600c4(): string | undefined {
    const element = this.dwResponse['300600c4'];
    return this.dwResponse['300600c4']?.Value[0];
  }

  // Frame of Reference Transformation Matrix
  get FrameOfReferenceTransformationMatrix(): Array<number> | undefined {
    return this.x300600c6;
  }

  get x300600c6(): Array<number> | undefined {
    const element = this.dwResponse['300600c6'];
    return this.dwResponse['300600c6']?.Value;
  }

  // Frame of Reference Transformation Comment
  get FrameOfReferenceTransformationComment(): string | undefined {
    return this.x300600c8;
  }

  get x300600c8(): string | undefined {
    const element = this.dwResponse['300600c8'];
    return this.dwResponse['300600c8']?.Value[0];
  }

  // Measured Dose Reference Sequence
  get MeasuredDoseReferenceSequence(): Array<Dataset> | undefined {
    return this.x30080010;
  }

  get x30080010(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080010'];
    return this.dwResponse['30080010']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Measured Dose Type
  get MeasuredDoseType(): string | undefined {
    return this.x30080014;
  }

  get x30080014(): string | undefined {
    const element = this.dwResponse['30080014'];
    return this.dwResponse['30080014']?.Value[0];
  }

  // Measured Dose Value
  get MeasuredDoseValue(): number | undefined {
    return this.x30080016;
  }

  get x30080016(): number | undefined {
    const element = this.dwResponse['30080016'];
    return this.dwResponse['30080016']?.Value[0];
  }

  // Treatment Session Beam Sequence
  get TreatmentSessionBeamSequence(): Array<Dataset> | undefined {
    return this.x30080020;
  }

  get x30080020(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080020'];
    return this.dwResponse['30080020']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Treatment Session Ion Beam Sequence
  get TreatmentSessionIonBeamSequence(): Array<Dataset> | undefined {
    return this.x30080021;
  }

  get x30080021(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080021'];
    return this.dwResponse['30080021']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Current Fraction Number
  get CurrentFractionNumber(): number | undefined {
    return this.x30080022;
  }

  get x30080022(): number | undefined {
    const element = this.dwResponse['30080022'];
    return this.dwResponse['30080022']?.Value[0];
  }

  // Treatment Control Point Date
  get TreatmentControlPointDate(): Date | undefined {
    return this.x30080024;
  }

  get x30080024(): Date | undefined {
    const element = this.dwResponse['30080024'];
    return this.dwResponse['30080024']?.Value[0];
  }

  // Treatment Control Point Time
  get TreatmentControlPointTime(): string | undefined {
    return this.x30080025;
  }

  get x30080025(): string | undefined {
    const element = this.dwResponse['30080025'];
    return this.dwResponse['30080025']?.Value[0];
  }

  // Treatment Termination Status
  get TreatmentTerminationStatus(): string | undefined {
    return this.x3008002a;
  }

  get x3008002a(): string | undefined {
    const element = this.dwResponse['3008002a'];
    return this.dwResponse['3008002a']?.Value[0];
  }

  // Treatment Termination Code
  get TreatmentTerminationCode(): string | undefined {
    return this.x3008002b;
  }

  get x3008002b(): string | undefined {
    const element = this.dwResponse['3008002b'];
    return this.dwResponse['3008002b']?.Value[0];
  }

  // Treatment Verification Status
  get TreatmentVerificationStatus(): string | undefined {
    return this.x3008002c;
  }

  get x3008002c(): string | undefined {
    const element = this.dwResponse['3008002c'];
    return this.dwResponse['3008002c']?.Value[0];
  }

  // Referenced Treatment Record Sequence
  get ReferencedTreatmentRecordSequence(): Array<Dataset> | undefined {
    return this.x30080030;
  }

  get x30080030(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080030'];
    return this.dwResponse['30080030']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Specified Primary Meterset
  get SpecifiedPrimaryMeterset(): number | undefined {
    return this.x30080032;
  }

  get x30080032(): number | undefined {
    const element = this.dwResponse['30080032'];
    return this.dwResponse['30080032']?.Value[0];
  }

  // Specified Secondary Meterset
  get SpecifiedSecondaryMeterset(): number | undefined {
    return this.x30080033;
  }

  get x30080033(): number | undefined {
    const element = this.dwResponse['30080033'];
    return this.dwResponse['30080033']?.Value[0];
  }

  // Delivered Primary Meterset
  get DeliveredPrimaryMeterset(): number | undefined {
    return this.x30080036;
  }

  get x30080036(): number | undefined {
    const element = this.dwResponse['30080036'];
    return this.dwResponse['30080036']?.Value[0];
  }

  // Delivered Secondary Meterset
  get DeliveredSecondaryMeterset(): number | undefined {
    return this.x30080037;
  }

  get x30080037(): number | undefined {
    const element = this.dwResponse['30080037'];
    return this.dwResponse['30080037']?.Value[0];
  }

  // Specified Treatment Time
  get SpecifiedTreatmentTime(): number | undefined {
    return this.x3008003a;
  }

  get x3008003a(): number | undefined {
    const element = this.dwResponse['3008003a'];
    return this.dwResponse['3008003a']?.Value[0];
  }

  // Delivered Treatment Time
  get DeliveredTreatmentTime(): number | undefined {
    return this.x3008003b;
  }

  get x3008003b(): number | undefined {
    const element = this.dwResponse['3008003b'];
    return this.dwResponse['3008003b']?.Value[0];
  }

  // Control Point Delivery Sequence
  get ControlPointDeliverySequence(): Array<Dataset> | undefined {
    return this.x30080040;
  }

  get x30080040(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080040'];
    return this.dwResponse['30080040']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ion Control Point Delivery Sequence
  get IonControlPointDeliverySequence(): Array<Dataset> | undefined {
    return this.x30080041;
  }

  get x30080041(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080041'];
    return this.dwResponse['30080041']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Specified Meterset
  get SpecifiedMeterset(): number | undefined {
    return this.x30080042;
  }

  get x30080042(): number | undefined {
    const element = this.dwResponse['30080042'];
    return this.dwResponse['30080042']?.Value[0];
  }

  // Delivered Meterset
  get DeliveredMeterset(): number | undefined {
    return this.x30080044;
  }

  get x30080044(): number | undefined {
    const element = this.dwResponse['30080044'];
    return this.dwResponse['30080044']?.Value[0];
  }

  // Meterset Rate Set
  get MetersetRateSet(): number | undefined {
    return this.x30080045;
  }

  get x30080045(): number | undefined {
    const element = this.dwResponse['30080045'];
    return this.dwResponse['30080045']?.Value[0];
  }

  // Meterset Rate Delivered
  get MetersetRateDelivered(): number | undefined {
    return this.x30080046;
  }

  get x30080046(): number | undefined {
    const element = this.dwResponse['30080046'];
    return this.dwResponse['30080046']?.Value[0];
  }

  // Scan Spot Metersets Delivered
  get ScanSpotMetersetsDelivered(): Array<number> | undefined {
    return this.x30080047;
  }

  get x30080047(): Array<number> | undefined {
    const element = this.dwResponse['30080047'];
    return this.dwResponse['30080047']?.Value;
  }

  // Dose Rate Delivered
  get DoseRateDelivered(): number | undefined {
    return this.x30080048;
  }

  get x30080048(): number | undefined {
    const element = this.dwResponse['30080048'];
    return this.dwResponse['30080048']?.Value[0];
  }

  // Treatment Summary Calculated Dose Reference Sequence
  get TreatmentSummaryCalculatedDoseReferenceSequence(): Array<Dataset> | undefined {
    return this.x30080050;
  }

  get x30080050(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080050'];
    return this.dwResponse['30080050']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Cumulative Dose to Dose Reference
  get CumulativeDoseToDoseReference(): number | undefined {
    return this.x30080052;
  }

  get x30080052(): number | undefined {
    const element = this.dwResponse['30080052'];
    return this.dwResponse['30080052']?.Value[0];
  }

  // First Treatment Date
  get FirstTreatmentDate(): Date | undefined {
    return this.x30080054;
  }

  get x30080054(): Date | undefined {
    const element = this.dwResponse['30080054'];
    return this.dwResponse['30080054']?.Value[0];
  }

  // Most Recent Treatment Date
  get MostRecentTreatmentDate(): Date | undefined {
    return this.x30080056;
  }

  get x30080056(): Date | undefined {
    const element = this.dwResponse['30080056'];
    return this.dwResponse['30080056']?.Value[0];
  }

  // Number of Fractions Delivered
  get NumberOfFractionsDelivered(): number | undefined {
    return this.x3008005a;
  }

  get x3008005a(): number | undefined {
    const element = this.dwResponse['3008005a'];
    return this.dwResponse['3008005a']?.Value[0];
  }

  // Override Sequence
  get OverrideSequence(): Array<Dataset> | undefined {
    return this.x30080060;
  }

  get x30080060(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080060'];
    return this.dwResponse['30080060']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Parameter Sequence Pointer
  get ParameterSequencePointer(): Uint16Array | undefined {
    return this.x30080061;
  }

  get x30080061(): Uint16Array | undefined {
    const element = this.dwResponse['30080061'];
    return this.dwResponse['30080061']?.Value[0];
  }

  // Override Parameter Pointer
  get OverrideParameterPointer(): Uint16Array | undefined {
    return this.x30080062;
  }

  get x30080062(): Uint16Array | undefined {
    const element = this.dwResponse['30080062'];
    return this.dwResponse['30080062']?.Value[0];
  }

  // Parameter Item Index
  get ParameterItemIndex(): number | undefined {
    return this.x30080063;
  }

  get x30080063(): number | undefined {
    const element = this.dwResponse['30080063'];
    return this.dwResponse['30080063']?.Value[0];
  }

  // Measured Dose Reference Number
  get MeasuredDoseReferenceNumber(): number | undefined {
    return this.x30080064;
  }

  get x30080064(): number | undefined {
    const element = this.dwResponse['30080064'];
    return this.dwResponse['30080064']?.Value[0];
  }

  // Parameter Pointer
  get ParameterPointer(): Uint16Array | undefined {
    return this.x30080065;
  }

  get x30080065(): Uint16Array | undefined {
    const element = this.dwResponse['30080065'];
    return this.dwResponse['30080065']?.Value[0];
  }

  // Corrected Parameter Sequence
  get CorrectedParameterSequence(): Array<Dataset> | undefined {
    return this.x30080068;
  }

  get x30080068(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080068'];
    return this.dwResponse['30080068']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Correction Value
  get CorrectionValue(): number | undefined {
    return this.x3008006a;
  }

  get x3008006a(): number | undefined {
    const element = this.dwResponse['3008006a'];
    return this.dwResponse['3008006a']?.Value[0];
  }

  // Calculated Dose Reference Sequence
  get CalculatedDoseReferenceSequence(): Array<Dataset> | undefined {
    return this.x30080070;
  }

  get x30080070(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080070'];
    return this.dwResponse['30080070']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Calculated Dose Reference Number
  get CalculatedDoseReferenceNumber(): number | undefined {
    return this.x30080072;
  }

  get x30080072(): number | undefined {
    const element = this.dwResponse['30080072'];
    return this.dwResponse['30080072']?.Value[0];
  }

  // Calculated Dose Reference Dose Value
  get CalculatedDoseReferenceDoseValue(): number | undefined {
    return this.x30080076;
  }

  get x30080076(): number | undefined {
    const element = this.dwResponse['30080076'];
    return this.dwResponse['30080076']?.Value[0];
  }

  // Start Meterset
  get StartMeterset(): number | undefined {
    return this.x30080078;
  }

  get x30080078(): number | undefined {
    const element = this.dwResponse['30080078'];
    return this.dwResponse['30080078']?.Value[0];
  }

  // End Meterset
  get EndMeterset(): number | undefined {
    return this.x3008007a;
  }

  get x3008007a(): number | undefined {
    const element = this.dwResponse['3008007a'];
    return this.dwResponse['3008007a']?.Value[0];
  }

  // Referenced Measured Dose Reference Sequence
  get ReferencedMeasuredDoseReferenceSequence(): Array<Dataset> | undefined {
    return this.x30080080;
  }

  get x30080080(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080080'];
    return this.dwResponse['30080080']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Measured Dose Reference Number
  get ReferencedMeasuredDoseReferenceNumber(): number | undefined {
    return this.x30080082;
  }

  get x30080082(): number | undefined {
    const element = this.dwResponse['30080082'];
    return this.dwResponse['30080082']?.Value[0];
  }

  // Referenced Calculated Dose Reference Sequence
  get ReferencedCalculatedDoseReferenceSequence(): Array<Dataset> | undefined {
    return this.x30080090;
  }

  get x30080090(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080090'];
    return this.dwResponse['30080090']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Calculated Dose Reference Number
  get ReferencedCalculatedDoseReferenceNumber(): number | undefined {
    return this.x30080092;
  }

  get x30080092(): number | undefined {
    const element = this.dwResponse['30080092'];
    return this.dwResponse['30080092']?.Value[0];
  }

  // Beam Limiting Device Leaf Pairs Sequence
  get BeamLimitingDeviceLeafPairsSequence(): Array<Dataset> | undefined {
    return this.x300800a0;
  }

  get x300800a0(): Array<Dataset> | undefined {
    const element = this.dwResponse['300800a0'];
    return this.dwResponse['300800a0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Recorded Wedge Sequence
  get RecordedWedgeSequence(): Array<Dataset> | undefined {
    return this.x300800b0;
  }

  get x300800b0(): Array<Dataset> | undefined {
    const element = this.dwResponse['300800b0'];
    return this.dwResponse['300800b0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Recorded Compensator Sequence
  get RecordedCompensatorSequence(): Array<Dataset> | undefined {
    return this.x300800c0;
  }

  get x300800c0(): Array<Dataset> | undefined {
    const element = this.dwResponse['300800c0'];
    return this.dwResponse['300800c0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Recorded Block Sequence
  get RecordedBlockSequence(): Array<Dataset> | undefined {
    return this.x300800d0;
  }

  get x300800d0(): Array<Dataset> | undefined {
    const element = this.dwResponse['300800d0'];
    return this.dwResponse['300800d0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Treatment Summary Measured Dose Reference Sequence
  get TreatmentSummaryMeasuredDoseReferenceSequence(): Array<Dataset> | undefined {
    return this.x300800e0;
  }

  get x300800e0(): Array<Dataset> | undefined {
    const element = this.dwResponse['300800e0'];
    return this.dwResponse['300800e0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Recorded Snout Sequence
  get RecordedSnoutSequence(): Array<Dataset> | undefined {
    return this.x300800f0;
  }

  get x300800f0(): Array<Dataset> | undefined {
    const element = this.dwResponse['300800f0'];
    return this.dwResponse['300800f0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Recorded Range Shifter Sequence
  get RecordedRangeShifterSequence(): Array<Dataset> | undefined {
    return this.x300800f2;
  }

  get x300800f2(): Array<Dataset> | undefined {
    const element = this.dwResponse['300800f2'];
    return this.dwResponse['300800f2']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Recorded Lateral Spreading Device Sequence
  get RecordedLateralSpreadingDeviceSequence(): Array<Dataset> | undefined {
    return this.x300800f4;
  }

  get x300800f4(): Array<Dataset> | undefined {
    const element = this.dwResponse['300800f4'];
    return this.dwResponse['300800f4']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Recorded Range Modulator Sequence
  get RecordedRangeModulatorSequence(): Array<Dataset> | undefined {
    return this.x300800f6;
  }

  get x300800f6(): Array<Dataset> | undefined {
    const element = this.dwResponse['300800f6'];
    return this.dwResponse['300800f6']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Recorded Source Sequence
  get RecordedSourceSequence(): Array<Dataset> | undefined {
    return this.x30080100;
  }

  get x30080100(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080100'];
    return this.dwResponse['30080100']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Source Serial Number
  get SourceSerialNumber(): string | undefined {
    return this.x30080105;
  }

  get x30080105(): string | undefined {
    const element = this.dwResponse['30080105'];
    return this.dwResponse['30080105']?.Value[0];
  }

  // Treatment Session Application Setup Sequence
  get TreatmentSessionApplicationSetupSequence(): Array<Dataset> | undefined {
    return this.x30080110;
  }

  get x30080110(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080110'];
    return this.dwResponse['30080110']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Application Setup Check
  get ApplicationSetupCheck(): string | undefined {
    return this.x30080116;
  }

  get x30080116(): string | undefined {
    const element = this.dwResponse['30080116'];
    return this.dwResponse['30080116']?.Value[0];
  }

  // Recorded Brachy Accessory Device Sequence
  get RecordedBrachyAccessoryDeviceSequence(): Array<Dataset> | undefined {
    return this.x30080120;
  }

  get x30080120(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080120'];
    return this.dwResponse['30080120']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Brachy Accessory Device Number
  get ReferencedBrachyAccessoryDeviceNumber(): number | undefined {
    return this.x30080122;
  }

  get x30080122(): number | undefined {
    const element = this.dwResponse['30080122'];
    return this.dwResponse['30080122']?.Value[0];
  }

  // Recorded Channel Sequence
  get RecordedChannelSequence(): Array<Dataset> | undefined {
    return this.x30080130;
  }

  get x30080130(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080130'];
    return this.dwResponse['30080130']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Specified Channel Total Time
  get SpecifiedChannelTotalTime(): number | undefined {
    return this.x30080132;
  }

  get x30080132(): number | undefined {
    const element = this.dwResponse['30080132'];
    return this.dwResponse['30080132']?.Value[0];
  }

  // Delivered Channel Total Time
  get DeliveredChannelTotalTime(): number | undefined {
    return this.x30080134;
  }

  get x30080134(): number | undefined {
    const element = this.dwResponse['30080134'];
    return this.dwResponse['30080134']?.Value[0];
  }

  // Specified Number of Pulses
  get SpecifiedNumberOfPulses(): number | undefined {
    return this.x30080136;
  }

  get x30080136(): number | undefined {
    const element = this.dwResponse['30080136'];
    return this.dwResponse['30080136']?.Value[0];
  }

  // Delivered Number of Pulses
  get DeliveredNumberOfPulses(): number | undefined {
    return this.x30080138;
  }

  get x30080138(): number | undefined {
    const element = this.dwResponse['30080138'];
    return this.dwResponse['30080138']?.Value[0];
  }

  // Specified Pulse Repetition Interval
  get SpecifiedPulseRepetitionInterval(): number | undefined {
    return this.x3008013a;
  }

  get x3008013a(): number | undefined {
    const element = this.dwResponse['3008013a'];
    return this.dwResponse['3008013a']?.Value[0];
  }

  // Delivered Pulse Repetition Interval
  get DeliveredPulseRepetitionInterval(): number | undefined {
    return this.x3008013c;
  }

  get x3008013c(): number | undefined {
    const element = this.dwResponse['3008013c'];
    return this.dwResponse['3008013c']?.Value[0];
  }

  // Recorded Source Applicator Sequence
  get RecordedSourceApplicatorSequence(): Array<Dataset> | undefined {
    return this.x30080140;
  }

  get x30080140(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080140'];
    return this.dwResponse['30080140']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Source Applicator Number
  get ReferencedSourceApplicatorNumber(): number | undefined {
    return this.x30080142;
  }

  get x30080142(): number | undefined {
    const element = this.dwResponse['30080142'];
    return this.dwResponse['30080142']?.Value[0];
  }

  // Recorded Channel Shield Sequence
  get RecordedChannelShieldSequence(): Array<Dataset> | undefined {
    return this.x30080150;
  }

  get x30080150(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080150'];
    return this.dwResponse['30080150']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Channel Shield Number
  get ReferencedChannelShieldNumber(): number | undefined {
    return this.x30080152;
  }

  get x30080152(): number | undefined {
    const element = this.dwResponse['30080152'];
    return this.dwResponse['30080152']?.Value[0];
  }

  // Brachy Control Point Delivered Sequence
  get BrachyControlPointDeliveredSequence(): Array<Dataset> | undefined {
    return this.x30080160;
  }

  get x30080160(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080160'];
    return this.dwResponse['30080160']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Safe Position Exit Date
  get SafePositionExitDate(): Date | undefined {
    return this.x30080162;
  }

  get x30080162(): Date | undefined {
    const element = this.dwResponse['30080162'];
    return this.dwResponse['30080162']?.Value[0];
  }

  // Safe Position Exit Time
  get SafePositionExitTime(): string | undefined {
    return this.x30080164;
  }

  get x30080164(): string | undefined {
    const element = this.dwResponse['30080164'];
    return this.dwResponse['30080164']?.Value[0];
  }

  // Safe Position Return Date
  get SafePositionReturnDate(): Date | undefined {
    return this.x30080166;
  }

  get x30080166(): Date | undefined {
    const element = this.dwResponse['30080166'];
    return this.dwResponse['30080166']?.Value[0];
  }

  // Safe Position Return Time
  get SafePositionReturnTime(): string | undefined {
    return this.x30080168;
  }

  get x30080168(): string | undefined {
    const element = this.dwResponse['30080168'];
    return this.dwResponse['30080168']?.Value[0];
  }

  // Pulse Specific Brachy Control Point Delivered Sequence
  get PulseSpecificBrachyControlPointDeliveredSequence(): Array<Dataset> | undefined {
    return this.x30080171;
  }

  get x30080171(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080171'];
    return this.dwResponse['30080171']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Pulse Number
  get PulseNumber(): number | undefined {
    return this.x30080172;
  }

  get x30080172(): number | undefined {
    const element = this.dwResponse['30080172'];
    return this.dwResponse['30080172']?.Value[0];
  }

  // Brachy Pulse Control Point Delivered Sequence
  get BrachyPulseControlPointDeliveredSequence(): Array<Dataset> | undefined {
    return this.x30080173;
  }

  get x30080173(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080173'];
    return this.dwResponse['30080173']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Current Treatment Status
  get CurrentTreatmentStatus(): string | undefined {
    return this.x30080200;
  }

  get x30080200(): string | undefined {
    const element = this.dwResponse['30080200'];
    return this.dwResponse['30080200']?.Value[0];
  }

  // Fraction Group Summary Sequence
  get FractionGroupSummarySequence(): Array<Dataset> | undefined {
    return this.x30080220;
  }

  get x30080220(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080220'];
    return this.dwResponse['30080220']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Fraction Number
  get ReferencedFractionNumber(): number | undefined {
    return this.x30080223;
  }

  get x30080223(): number | undefined {
    const element = this.dwResponse['30080223'];
    return this.dwResponse['30080223']?.Value[0];
  }

  // Fraction Group Type
  get FractionGroupType(): string | undefined {
    return this.x30080224;
  }

  get x30080224(): string | undefined {
    const element = this.dwResponse['30080224'];
    return this.dwResponse['30080224']?.Value[0];
  }

  // Beam Stopper Position
  get BeamStopperPosition(): string | undefined {
    return this.x30080230;
  }

  get x30080230(): string | undefined {
    const element = this.dwResponse['30080230'];
    return this.dwResponse['30080230']?.Value[0];
  }

  // Fraction Status Summary Sequence
  get FractionStatusSummarySequence(): Array<Dataset> | undefined {
    return this.x30080240;
  }

  get x30080240(): Array<Dataset> | undefined {
    const element = this.dwResponse['30080240'];
    return this.dwResponse['30080240']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Treatment Date
  get TreatmentDate(): Date | undefined {
    return this.x30080250;
  }

  get x30080250(): Date | undefined {
    const element = this.dwResponse['30080250'];
    return this.dwResponse['30080250']?.Value[0];
  }

  // Treatment Time
  get TreatmentTime(): string | undefined {
    return this.x30080251;
  }

  get x30080251(): string | undefined {
    const element = this.dwResponse['30080251'];
    return this.dwResponse['30080251']?.Value[0];
  }

  // RT Plan Label
  get RTPlanLabel(): string | undefined {
    return this.x300a0002;
  }

  get x300a0002(): string | undefined {
    const element = this.dwResponse['300a0002'];
    return this.dwResponse['300a0002']?.Value[0];
  }

  // RT Plan Name
  get RTPlanName(): string | undefined {
    return this.x300a0003;
  }

  get x300a0003(): string | undefined {
    const element = this.dwResponse['300a0003'];
    return this.dwResponse['300a0003']?.Value[0];
  }

  // RT Plan Date
  get RTPlanDate(): Date | undefined {
    return this.x300a0006;
  }

  get x300a0006(): Date | undefined {
    const element = this.dwResponse['300a0006'];
    return this.dwResponse['300a0006']?.Value[0];
  }

  // RT Plan Time
  get RTPlanTime(): string | undefined {
    return this.x300a0007;
  }

  get x300a0007(): string | undefined {
    const element = this.dwResponse['300a0007'];
    return this.dwResponse['300a0007']?.Value[0];
  }

  // Treatment Protocols
  get TreatmentProtocols(): Array<string> | undefined {
    return this.x300a0009;
  }

  get x300a0009(): Array<string> | undefined {
    const element = this.dwResponse['300a0009'];
    return this.dwResponse['300a0009']?.Value;
  }

  // Plan Intent
  get PlanIntent(): string | undefined {
    return this.x300a000a;
  }

  get x300a000a(): string | undefined {
    const element = this.dwResponse['300a000a'];
    return this.dwResponse['300a000a']?.Value[0];
  }

  // Treatment Sites
  get TreatmentSites(): Array<string> | undefined {
    return this.x300a000b;
  }

  get x300a000b(): Array<string> | undefined {
    const element = this.dwResponse['300a000b'];
    return this.dwResponse['300a000b']?.Value;
  }

  // RT Plan Geometry
  get RTPlanGeometry(): string | undefined {
    return this.x300a000c;
  }

  get x300a000c(): string | undefined {
    const element = this.dwResponse['300a000c'];
    return this.dwResponse['300a000c']?.Value[0];
  }

  // Dose Reference Sequence
  get DoseReferenceSequence(): Array<Dataset> | undefined {
    return this.x300a0010;
  }

  get x300a0010(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0010'];
    return this.dwResponse['300a0010']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Dose Reference Number
  get DoseReferenceNumber(): number | undefined {
    return this.x300a0012;
  }

  get x300a0012(): number | undefined {
    const element = this.dwResponse['300a0012'];
    return this.dwResponse['300a0012']?.Value[0];
  }

  // Dose Reference UID
  get DoseReferenceUID(): string | undefined {
    return this.x300a0013;
  }

  get x300a0013(): string | undefined {
    const element = this.dwResponse['300a0013'];
    return this.dwResponse['300a0013']?.Value[0];
  }

  // Dose Reference Structure Type
  get DoseReferenceStructureType(): string | undefined {
    return this.x300a0014;
  }

  get x300a0014(): string | undefined {
    const element = this.dwResponse['300a0014'];
    return this.dwResponse['300a0014']?.Value[0];
  }

  // Nominal Beam Energy Unit
  get NominalBeamEnergyUnit(): string | undefined {
    return this.x300a0015;
  }

  get x300a0015(): string | undefined {
    const element = this.dwResponse['300a0015'];
    return this.dwResponse['300a0015']?.Value[0];
  }

  // Dose Reference Description
  get DoseReferenceDescription(): string | undefined {
    return this.x300a0016;
  }

  get x300a0016(): string | undefined {
    const element = this.dwResponse['300a0016'];
    return this.dwResponse['300a0016']?.Value[0];
  }

  // Dose Reference Point Coordinates
  get DoseReferencePointCoordinates(): Array<number> | undefined {
    return this.x300a0018;
  }

  get x300a0018(): Array<number> | undefined {
    const element = this.dwResponse['300a0018'];
    return this.dwResponse['300a0018']?.Value;
  }

  // Nominal Prior Dose
  get NominalPriorDose(): number | undefined {
    return this.x300a001a;
  }

  get x300a001a(): number | undefined {
    const element = this.dwResponse['300a001a'];
    return this.dwResponse['300a001a']?.Value[0];
  }

  // Dose Reference Type
  get DoseReferenceType(): string | undefined {
    return this.x300a0020;
  }

  get x300a0020(): string | undefined {
    const element = this.dwResponse['300a0020'];
    return this.dwResponse['300a0020']?.Value[0];
  }

  // Constraint Weight
  get ConstraintWeight(): number | undefined {
    return this.x300a0021;
  }

  get x300a0021(): number | undefined {
    const element = this.dwResponse['300a0021'];
    return this.dwResponse['300a0021']?.Value[0];
  }

  // Delivery Warning Dose
  get DeliveryWarningDose(): number | undefined {
    return this.x300a0022;
  }

  get x300a0022(): number | undefined {
    const element = this.dwResponse['300a0022'];
    return this.dwResponse['300a0022']?.Value[0];
  }

  // Delivery Maximum Dose
  get DeliveryMaximumDose(): number | undefined {
    return this.x300a0023;
  }

  get x300a0023(): number | undefined {
    const element = this.dwResponse['300a0023'];
    return this.dwResponse['300a0023']?.Value[0];
  }

  // Target Minimum Dose
  get TargetMinimumDose(): number | undefined {
    return this.x300a0025;
  }

  get x300a0025(): number | undefined {
    const element = this.dwResponse['300a0025'];
    return this.dwResponse['300a0025']?.Value[0];
  }

  // Target Prescription Dose
  get TargetPrescriptionDose(): number | undefined {
    return this.x300a0026;
  }

  get x300a0026(): number | undefined {
    const element = this.dwResponse['300a0026'];
    return this.dwResponse['300a0026']?.Value[0];
  }

  // Target Maximum Dose
  get TargetMaximumDose(): number | undefined {
    return this.x300a0027;
  }

  get x300a0027(): number | undefined {
    const element = this.dwResponse['300a0027'];
    return this.dwResponse['300a0027']?.Value[0];
  }

  // Target Underdose Volume Fraction
  get TargetUnderdoseVolumeFraction(): number | undefined {
    return this.x300a0028;
  }

  get x300a0028(): number | undefined {
    const element = this.dwResponse['300a0028'];
    return this.dwResponse['300a0028']?.Value[0];
  }

  // Organ at Risk Full-volume Dose
  get OrganAtRiskFullVolumeDose(): number | undefined {
    return this.x300a002a;
  }

  get x300a002a(): number | undefined {
    const element = this.dwResponse['300a002a'];
    return this.dwResponse['300a002a']?.Value[0];
  }

  // Organ at Risk Limit Dose
  get OrganAtRiskLimitDose(): number | undefined {
    return this.x300a002b;
  }

  get x300a002b(): number | undefined {
    const element = this.dwResponse['300a002b'];
    return this.dwResponse['300a002b']?.Value[0];
  }

  // Organ at Risk Maximum Dose
  get OrganAtRiskMaximumDose(): number | undefined {
    return this.x300a002c;
  }

  get x300a002c(): number | undefined {
    const element = this.dwResponse['300a002c'];
    return this.dwResponse['300a002c']?.Value[0];
  }

  // Organ at Risk Overdose Volume Fraction
  get OrganAtRiskOverdoseVolumeFraction(): number | undefined {
    return this.x300a002d;
  }

  get x300a002d(): number | undefined {
    const element = this.dwResponse['300a002d'];
    return this.dwResponse['300a002d']?.Value[0];
  }

  // Tolerance Table Sequence
  get ToleranceTableSequence(): Array<Dataset> | undefined {
    return this.x300a0040;
  }

  get x300a0040(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0040'];
    return this.dwResponse['300a0040']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Tolerance Table Number
  get ToleranceTableNumber(): number | undefined {
    return this.x300a0042;
  }

  get x300a0042(): number | undefined {
    const element = this.dwResponse['300a0042'];
    return this.dwResponse['300a0042']?.Value[0];
  }

  // Tolerance Table Label
  get ToleranceTableLabel(): string | undefined {
    return this.x300a0043;
  }

  get x300a0043(): string | undefined {
    const element = this.dwResponse['300a0043'];
    return this.dwResponse['300a0043']?.Value[0];
  }

  // Gantry Angle Tolerance
  get GantryAngleTolerance(): number | undefined {
    return this.x300a0044;
  }

  get x300a0044(): number | undefined {
    const element = this.dwResponse['300a0044'];
    return this.dwResponse['300a0044']?.Value[0];
  }

  // Beam Limiting Device Angle Tolerance
  get BeamLimitingDeviceAngleTolerance(): number | undefined {
    return this.x300a0046;
  }

  get x300a0046(): number | undefined {
    const element = this.dwResponse['300a0046'];
    return this.dwResponse['300a0046']?.Value[0];
  }

  // Beam Limiting Device Tolerance Sequence
  get BeamLimitingDeviceToleranceSequence(): Array<Dataset> | undefined {
    return this.x300a0048;
  }

  get x300a0048(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0048'];
    return this.dwResponse['300a0048']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Beam Limiting Device Position Tolerance
  get BeamLimitingDevicePositionTolerance(): number | undefined {
    return this.x300a004a;
  }

  get x300a004a(): number | undefined {
    const element = this.dwResponse['300a004a'];
    return this.dwResponse['300a004a']?.Value[0];
  }

  // Snout Position Tolerance
  get SnoutPositionTolerance(): number | undefined {
    return this.x300a004b;
  }

  get x300a004b(): number | undefined {
    const element = this.dwResponse['300a004b'];
    return this.dwResponse['300a004b']?.Value[0];
  }

  // Patient Support Angle Tolerance
  get PatientSupportAngleTolerance(): number | undefined {
    return this.x300a004c;
  }

  get x300a004c(): number | undefined {
    const element = this.dwResponse['300a004c'];
    return this.dwResponse['300a004c']?.Value[0];
  }

  // Table Top Eccentric Angle Tolerance
  get TableTopEccentricAngleTolerance(): number | undefined {
    return this.x300a004e;
  }

  get x300a004e(): number | undefined {
    const element = this.dwResponse['300a004e'];
    return this.dwResponse['300a004e']?.Value[0];
  }

  // Table Top Pitch Angle Tolerance
  get TableTopPitchAngleTolerance(): number | undefined {
    return this.x300a004f;
  }

  get x300a004f(): number | undefined {
    const element = this.dwResponse['300a004f'];
    return this.dwResponse['300a004f']?.Value[0];
  }

  // Table Top Roll Angle Tolerance
  get TableTopRollAngleTolerance(): number | undefined {
    return this.x300a0050;
  }

  get x300a0050(): number | undefined {
    const element = this.dwResponse['300a0050'];
    return this.dwResponse['300a0050']?.Value[0];
  }

  // Table Top Vertical Position Tolerance
  get TableTopVerticalPositionTolerance(): number | undefined {
    return this.x300a0051;
  }

  get x300a0051(): number | undefined {
    const element = this.dwResponse['300a0051'];
    return this.dwResponse['300a0051']?.Value[0];
  }

  // Table Top Longitudinal Position Tolerance
  get TableTopLongitudinalPositionTolerance(): number | undefined {
    return this.x300a0052;
  }

  get x300a0052(): number | undefined {
    const element = this.dwResponse['300a0052'];
    return this.dwResponse['300a0052']?.Value[0];
  }

  // Table Top Lateral Position Tolerance
  get TableTopLateralPositionTolerance(): number | undefined {
    return this.x300a0053;
  }

  get x300a0053(): number | undefined {
    const element = this.dwResponse['300a0053'];
    return this.dwResponse['300a0053']?.Value[0];
  }

  // RT Plan Relationship
  get RTPlanRelationship(): string | undefined {
    return this.x300a0055;
  }

  get x300a0055(): string | undefined {
    const element = this.dwResponse['300a0055'];
    return this.dwResponse['300a0055']?.Value[0];
  }

  // Fraction Group Sequence
  get FractionGroupSequence(): Array<Dataset> | undefined {
    return this.x300a0070;
  }

  get x300a0070(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0070'];
    return this.dwResponse['300a0070']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Fraction Group Number
  get FractionGroupNumber(): number | undefined {
    return this.x300a0071;
  }

  get x300a0071(): number | undefined {
    const element = this.dwResponse['300a0071'];
    return this.dwResponse['300a0071']?.Value[0];
  }

  // Fraction Group Description
  get FractionGroupDescription(): string | undefined {
    return this.x300a0072;
  }

  get x300a0072(): string | undefined {
    const element = this.dwResponse['300a0072'];
    return this.dwResponse['300a0072']?.Value[0];
  }

  // Number of Fractions Planned
  get NumberOfFractionsPlanned(): number | undefined {
    return this.x300a0078;
  }

  get x300a0078(): number | undefined {
    const element = this.dwResponse['300a0078'];
    return this.dwResponse['300a0078']?.Value[0];
  }

  // Number of Fraction Pattern Digits Per Day
  get NumberOfFractionPatternDigitsPerDay(): number | undefined {
    return this.x300a0079;
  }

  get x300a0079(): number | undefined {
    const element = this.dwResponse['300a0079'];
    return this.dwResponse['300a0079']?.Value[0];
  }

  // Repeat Fraction Cycle Length
  get RepeatFractionCycleLength(): number | undefined {
    return this.x300a007a;
  }

  get x300a007a(): number | undefined {
    const element = this.dwResponse['300a007a'];
    return this.dwResponse['300a007a']?.Value[0];
  }

  // Number of Beams
  get NumberOfBeams(): number | undefined {
    return this.x300a0080;
  }

  get x300a0080(): number | undefined {
    const element = this.dwResponse['300a0080'];
    return this.dwResponse['300a0080']?.Value[0];
  }

  // Beam Dose Specification Point
  get BeamDoseSpecificationPoint(): Array<number> | undefined {
    return this.x300a0082;
  }

  get x300a0082(): Array<number> | undefined {
    const element = this.dwResponse['300a0082'];
    return this.dwResponse['300a0082']?.Value;
  }

  // Beam Dose
  get BeamDose(): number | undefined {
    return this.x300a0084;
  }

  get x300a0084(): number | undefined {
    const element = this.dwResponse['300a0084'];
    return this.dwResponse['300a0084']?.Value[0];
  }

  // Beam Meterset
  get BeamMeterset(): number | undefined {
    return this.x300a0086;
  }

  get x300a0086(): number | undefined {
    const element = this.dwResponse['300a0086'];
    return this.dwResponse['300a0086']?.Value[0];
  }

  // Beam Dose Point Depth
  get BeamDosePointDepth(): number | undefined {
    return this.x300a0088;
  }

  get x300a0088(): number | undefined {
    const element = this.dwResponse['300a0088'];
    return this.dwResponse['300a0088']?.Value[0];
  }

  // Beam Dose Point Equivalent Depth
  get BeamDosePointEquivalentDepth(): number | undefined {
    return this.x300a0089;
  }

  get x300a0089(): number | undefined {
    const element = this.dwResponse['300a0089'];
    return this.dwResponse['300a0089']?.Value[0];
  }

  // Beam Dose Point SSD
  get BeamDosePointSSD(): number | undefined {
    return this.x300a008a;
  }

  get x300a008a(): number | undefined {
    const element = this.dwResponse['300a008a'];
    return this.dwResponse['300a008a']?.Value[0];
  }

  // Beam Dose Meaning
  get BeamDoseMeaning(): string | undefined {
    return this.x300a008b;
  }

  get x300a008b(): string | undefined {
    const element = this.dwResponse['300a008b'];
    return this.dwResponse['300a008b']?.Value[0];
  }

  // Beam Dose Verification Control Point Sequence
  get BeamDoseVerificationControlPointSequence(): Array<Dataset> | undefined {
    return this.x300a008c;
  }

  get x300a008c(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a008c'];
    return this.dwResponse['300a008c']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Average Beam Dose Point Depth
  get AverageBeamDosePointDepth(): number | undefined {
    return this.x300a008d;
  }

  get x300a008d(): number | undefined {
    const element = this.dwResponse['300a008d'];
    return this.dwResponse['300a008d']?.Value[0];
  }

  // Average Beam Dose Point Equivalent Depth
  get AverageBeamDosePointEquivalentDepth(): number | undefined {
    return this.x300a008e;
  }

  get x300a008e(): number | undefined {
    const element = this.dwResponse['300a008e'];
    return this.dwResponse['300a008e']?.Value[0];
  }

  // Average Beam Dose Point SSD
  get AverageBeamDosePointSSD(): number | undefined {
    return this.x300a008f;
  }

  get x300a008f(): number | undefined {
    const element = this.dwResponse['300a008f'];
    return this.dwResponse['300a008f']?.Value[0];
  }

  // Number of Brachy Application Setups
  get NumberOfBrachyApplicationSetups(): number | undefined {
    return this.x300a00a0;
  }

  get x300a00a0(): number | undefined {
    const element = this.dwResponse['300a00a0'];
    return this.dwResponse['300a00a0']?.Value[0];
  }

  // Brachy Application Setup Dose Specification Point
  get BrachyApplicationSetupDoseSpecificationPoint(): Array<number> | undefined {
    return this.x300a00a2;
  }

  get x300a00a2(): Array<number> | undefined {
    const element = this.dwResponse['300a00a2'];
    return this.dwResponse['300a00a2']?.Value;
  }

  // Brachy Application Setup Dose
  get BrachyApplicationSetupDose(): number | undefined {
    return this.x300a00a4;
  }

  get x300a00a4(): number | undefined {
    const element = this.dwResponse['300a00a4'];
    return this.dwResponse['300a00a4']?.Value[0];
  }

  // Beam Sequence
  get BeamSequence(): Array<Dataset> | undefined {
    return this.x300a00b0;
  }

  get x300a00b0(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a00b0'];
    return this.dwResponse['300a00b0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Treatment Machine Name
  get TreatmentMachineName(): string | undefined {
    return this.x300a00b2;
  }

  get x300a00b2(): string | undefined {
    const element = this.dwResponse['300a00b2'];
    return this.dwResponse['300a00b2']?.Value[0];
  }

  // Primary Dosimeter Unit
  get PrimaryDosimeterUnit(): string | undefined {
    return this.x300a00b3;
  }

  get x300a00b3(): string | undefined {
    const element = this.dwResponse['300a00b3'];
    return this.dwResponse['300a00b3']?.Value[0];
  }

  // Source-Axis Distance
  get SourceAxisDistance(): number | undefined {
    return this.x300a00b4;
  }

  get x300a00b4(): number | undefined {
    const element = this.dwResponse['300a00b4'];
    return this.dwResponse['300a00b4']?.Value[0];
  }

  // Beam Limiting Device Sequence
  get BeamLimitingDeviceSequence(): Array<Dataset> | undefined {
    return this.x300a00b6;
  }

  get x300a00b6(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a00b6'];
    return this.dwResponse['300a00b6']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // RT Beam Limiting Device Type
  get RTBeamLimitingDeviceType(): string | undefined {
    return this.x300a00b8;
  }

  get x300a00b8(): string | undefined {
    const element = this.dwResponse['300a00b8'];
    return this.dwResponse['300a00b8']?.Value[0];
  }

  // Source to Beam Limiting Device Distance
  get SourceToBeamLimitingDeviceDistance(): number | undefined {
    return this.x300a00ba;
  }

  get x300a00ba(): number | undefined {
    const element = this.dwResponse['300a00ba'];
    return this.dwResponse['300a00ba']?.Value[0];
  }

  // Isocenter to Beam Limiting Device Distance
  get IsocenterToBeamLimitingDeviceDistance(): number | undefined {
    return this.x300a00bb;
  }

  get x300a00bb(): number | undefined {
    const element = this.dwResponse['300a00bb'];
    return this.dwResponse['300a00bb']?.Value[0];
  }

  // Number of Leaf/Jaw Pairs
  get NumberOfLeafJawPairs(): number | undefined {
    return this.x300a00bc;
  }

  get x300a00bc(): number | undefined {
    const element = this.dwResponse['300a00bc'];
    return this.dwResponse['300a00bc']?.Value[0];
  }

  // Leaf Position Boundaries
  get LeafPositionBoundaries(): Array<number> | undefined {
    return this.x300a00be;
  }

  get x300a00be(): Array<number> | undefined {
    const element = this.dwResponse['300a00be'];
    return this.dwResponse['300a00be']?.Value;
  }

  // Beam Number
  get BeamNumber(): number | undefined {
    return this.x300a00c0;
  }

  get x300a00c0(): number | undefined {
    const element = this.dwResponse['300a00c0'];
    return this.dwResponse['300a00c0']?.Value[0];
  }

  // Beam Name
  get BeamName(): string | undefined {
    return this.x300a00c2;
  }

  get x300a00c2(): string | undefined {
    const element = this.dwResponse['300a00c2'];
    return this.dwResponse['300a00c2']?.Value[0];
  }

  // Beam Type
  get BeamType(): string | undefined {
    return this.x300a00c4;
  }

  get x300a00c4(): string | undefined {
    const element = this.dwResponse['300a00c4'];
    return this.dwResponse['300a00c4']?.Value[0];
  }

  // Beam Delivery Duration Limit
  get BeamDeliveryDurationLimit(): number | undefined {
    return this.x300a00c5;
  }

  get x300a00c5(): number | undefined {
    const element = this.dwResponse['300a00c5'];
    return this.dwResponse['300a00c5']?.Value[0];
  }

  // Radiation Type
  get RadiationType(): string | undefined {
    return this.x300a00c6;
  }

  get x300a00c6(): string | undefined {
    const element = this.dwResponse['300a00c6'];
    return this.dwResponse['300a00c6']?.Value[0];
  }

  // High-Dose Technique Type
  get HighDoseTechniqueType(): string | undefined {
    return this.x300a00c7;
  }

  get x300a00c7(): string | undefined {
    const element = this.dwResponse['300a00c7'];
    return this.dwResponse['300a00c7']?.Value[0];
  }

  // Reference Image Number
  get ReferenceImageNumber(): number | undefined {
    return this.x300a00c8;
  }

  get x300a00c8(): number | undefined {
    const element = this.dwResponse['300a00c8'];
    return this.dwResponse['300a00c8']?.Value[0];
  }

  // Planned Verification Image Sequence
  get PlannedVerificationImageSequence(): Array<Dataset> | undefined {
    return this.x300a00ca;
  }

  get x300a00ca(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a00ca'];
    return this.dwResponse['300a00ca']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Imaging Device-Specific Acquisition Parameters
  get ImagingDeviceSpecificAcquisitionParameters(): Array<string> | undefined {
    return this.x300a00cc;
  }

  get x300a00cc(): Array<string> | undefined {
    const element = this.dwResponse['300a00cc'];
    return this.dwResponse['300a00cc']?.Value;
  }

  // Treatment Delivery Type
  get TreatmentDeliveryType(): string | undefined {
    return this.x300a00ce;
  }

  get x300a00ce(): string | undefined {
    const element = this.dwResponse['300a00ce'];
    return this.dwResponse['300a00ce']?.Value[0];
  }

  // Number of Wedges
  get NumberOfWedges(): number | undefined {
    return this.x300a00d0;
  }

  get x300a00d0(): number | undefined {
    const element = this.dwResponse['300a00d0'];
    return this.dwResponse['300a00d0']?.Value[0];
  }

  // Wedge Sequence
  get WedgeSequence(): Array<Dataset> | undefined {
    return this.x300a00d1;
  }

  get x300a00d1(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a00d1'];
    return this.dwResponse['300a00d1']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Wedge Number
  get WedgeNumber(): number | undefined {
    return this.x300a00d2;
  }

  get x300a00d2(): number | undefined {
    const element = this.dwResponse['300a00d2'];
    return this.dwResponse['300a00d2']?.Value[0];
  }

  // Wedge Type
  get WedgeType(): string | undefined {
    return this.x300a00d3;
  }

  get x300a00d3(): string | undefined {
    const element = this.dwResponse['300a00d3'];
    return this.dwResponse['300a00d3']?.Value[0];
  }

  // Wedge ID
  get WedgeID(): string | undefined {
    return this.x300a00d4;
  }

  get x300a00d4(): string | undefined {
    const element = this.dwResponse['300a00d4'];
    return this.dwResponse['300a00d4']?.Value[0];
  }

  // Wedge Angle
  get WedgeAngle(): number | undefined {
    return this.x300a00d5;
  }

  get x300a00d5(): number | undefined {
    const element = this.dwResponse['300a00d5'];
    return this.dwResponse['300a00d5']?.Value[0];
  }

  // Wedge Factor
  get WedgeFactor(): number | undefined {
    return this.x300a00d6;
  }

  get x300a00d6(): number | undefined {
    const element = this.dwResponse['300a00d6'];
    return this.dwResponse['300a00d6']?.Value[0];
  }

  // Total Wedge Tray Water-Equivalent Thickness
  get TotalWedgeTrayWaterEquivalentThickness(): number | undefined {
    return this.x300a00d7;
  }

  get x300a00d7(): number | undefined {
    const element = this.dwResponse['300a00d7'];
    return this.dwResponse['300a00d7']?.Value[0];
  }

  // Wedge Orientation
  get WedgeOrientation(): number | undefined {
    return this.x300a00d8;
  }

  get x300a00d8(): number | undefined {
    const element = this.dwResponse['300a00d8'];
    return this.dwResponse['300a00d8']?.Value[0];
  }

  // Isocenter to Wedge Tray Distance
  get IsocenterToWedgeTrayDistance(): number | undefined {
    return this.x300a00d9;
  }

  get x300a00d9(): number | undefined {
    const element = this.dwResponse['300a00d9'];
    return this.dwResponse['300a00d9']?.Value[0];
  }

  // Source to Wedge Tray Distance
  get SourceToWedgeTrayDistance(): number | undefined {
    return this.x300a00da;
  }

  get x300a00da(): number | undefined {
    const element = this.dwResponse['300a00da'];
    return this.dwResponse['300a00da']?.Value[0];
  }

  // Wedge Thin Edge Position
  get WedgeThinEdgePosition(): number | undefined {
    return this.x300a00db;
  }

  get x300a00db(): number | undefined {
    const element = this.dwResponse['300a00db'];
    return this.dwResponse['300a00db']?.Value[0];
  }

  // Bolus ID
  get BolusID(): string | undefined {
    return this.x300a00dc;
  }

  get x300a00dc(): string | undefined {
    const element = this.dwResponse['300a00dc'];
    return this.dwResponse['300a00dc']?.Value[0];
  }

  // Number of Compensators
  get NumberOfCompensators(): number | undefined {
    return this.x300a00e0;
  }

  get x300a00e0(): number | undefined {
    const element = this.dwResponse['300a00e0'];
    return this.dwResponse['300a00e0']?.Value[0];
  }

  // Material ID
  get MaterialID(): string | undefined {
    return this.x300a00e1;
  }

  get x300a00e1(): string | undefined {
    const element = this.dwResponse['300a00e1'];
    return this.dwResponse['300a00e1']?.Value[0];
  }

  // Total Compensator Tray Factor
  get TotalCompensatorTrayFactor(): number | undefined {
    return this.x300a00e2;
  }

  get x300a00e2(): number | undefined {
    const element = this.dwResponse['300a00e2'];
    return this.dwResponse['300a00e2']?.Value[0];
  }

  // Compensator Sequence
  get CompensatorSequence(): Array<Dataset> | undefined {
    return this.x300a00e3;
  }

  get x300a00e3(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a00e3'];
    return this.dwResponse['300a00e3']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Compensator Number
  get CompensatorNumber(): number | undefined {
    return this.x300a00e4;
  }

  get x300a00e4(): number | undefined {
    const element = this.dwResponse['300a00e4'];
    return this.dwResponse['300a00e4']?.Value[0];
  }

  // Compensator ID
  get CompensatorID(): string | undefined {
    return this.x300a00e5;
  }

  get x300a00e5(): string | undefined {
    const element = this.dwResponse['300a00e5'];
    return this.dwResponse['300a00e5']?.Value[0];
  }

  // Source to Compensator Tray Distance
  get SourceToCompensatorTrayDistance(): number | undefined {
    return this.x300a00e6;
  }

  get x300a00e6(): number | undefined {
    const element = this.dwResponse['300a00e6'];
    return this.dwResponse['300a00e6']?.Value[0];
  }

  // Compensator Rows
  get CompensatorRows(): number | undefined {
    return this.x300a00e7;
  }

  get x300a00e7(): number | undefined {
    const element = this.dwResponse['300a00e7'];
    return this.dwResponse['300a00e7']?.Value[0];
  }

  // Compensator Columns
  get CompensatorColumns(): number | undefined {
    return this.x300a00e8;
  }

  get x300a00e8(): number | undefined {
    const element = this.dwResponse['300a00e8'];
    return this.dwResponse['300a00e8']?.Value[0];
  }

  // Compensator Pixel Spacing
  get CompensatorPixelSpacing(): Array<number> | undefined {
    return this.x300a00e9;
  }

  get x300a00e9(): Array<number> | undefined {
    const element = this.dwResponse['300a00e9'];
    return this.dwResponse['300a00e9']?.Value;
  }

  // Compensator Position
  get CompensatorPosition(): Array<number> | undefined {
    return this.x300a00ea;
  }

  get x300a00ea(): Array<number> | undefined {
    const element = this.dwResponse['300a00ea'];
    return this.dwResponse['300a00ea']?.Value;
  }

  // Compensator Transmission Data
  get CompensatorTransmissionData(): Array<number> | undefined {
    return this.x300a00eb;
  }

  get x300a00eb(): Array<number> | undefined {
    const element = this.dwResponse['300a00eb'];
    return this.dwResponse['300a00eb']?.Value;
  }

  // Compensator Thickness Data
  get CompensatorThicknessData(): Array<number> | undefined {
    return this.x300a00ec;
  }

  get x300a00ec(): Array<number> | undefined {
    const element = this.dwResponse['300a00ec'];
    return this.dwResponse['300a00ec']?.Value;
  }

  // Number of Boli
  get NumberOfBoli(): number | undefined {
    return this.x300a00ed;
  }

  get x300a00ed(): number | undefined {
    const element = this.dwResponse['300a00ed'];
    return this.dwResponse['300a00ed']?.Value[0];
  }

  // Compensator Type
  get CompensatorType(): string | undefined {
    return this.x300a00ee;
  }

  get x300a00ee(): string | undefined {
    const element = this.dwResponse['300a00ee'];
    return this.dwResponse['300a00ee']?.Value[0];
  }

  // Compensator Tray ID
  get CompensatorTrayID(): string | undefined {
    return this.x300a00ef;
  }

  get x300a00ef(): string | undefined {
    const element = this.dwResponse['300a00ef'];
    return this.dwResponse['300a00ef']?.Value[0];
  }

  // Number of Blocks
  get NumberOfBlocks(): number | undefined {
    return this.x300a00f0;
  }

  get x300a00f0(): number | undefined {
    const element = this.dwResponse['300a00f0'];
    return this.dwResponse['300a00f0']?.Value[0];
  }

  // Total Block Tray Factor
  get TotalBlockTrayFactor(): number | undefined {
    return this.x300a00f2;
  }

  get x300a00f2(): number | undefined {
    const element = this.dwResponse['300a00f2'];
    return this.dwResponse['300a00f2']?.Value[0];
  }

  // Total Block Tray Water-Equivalent Thickness
  get TotalBlockTrayWaterEquivalentThickness(): number | undefined {
    return this.x300a00f3;
  }

  get x300a00f3(): number | undefined {
    const element = this.dwResponse['300a00f3'];
    return this.dwResponse['300a00f3']?.Value[0];
  }

  // Block Sequence
  get BlockSequence(): Array<Dataset> | undefined {
    return this.x300a00f4;
  }

  get x300a00f4(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a00f4'];
    return this.dwResponse['300a00f4']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Block Tray ID
  get BlockTrayID(): string | undefined {
    return this.x300a00f5;
  }

  get x300a00f5(): string | undefined {
    const element = this.dwResponse['300a00f5'];
    return this.dwResponse['300a00f5']?.Value[0];
  }

  // Source to Block Tray Distance
  get SourceToBlockTrayDistance(): number | undefined {
    return this.x300a00f6;
  }

  get x300a00f6(): number | undefined {
    const element = this.dwResponse['300a00f6'];
    return this.dwResponse['300a00f6']?.Value[0];
  }

  // Isocenter to Block Tray Distance
  get IsocenterToBlockTrayDistance(): number | undefined {
    return this.x300a00f7;
  }

  get x300a00f7(): number | undefined {
    const element = this.dwResponse['300a00f7'];
    return this.dwResponse['300a00f7']?.Value[0];
  }

  // Block Type
  get BlockType(): string | undefined {
    return this.x300a00f8;
  }

  get x300a00f8(): string | undefined {
    const element = this.dwResponse['300a00f8'];
    return this.dwResponse['300a00f8']?.Value[0];
  }

  // Accessory Code
  get AccessoryCode(): string | undefined {
    return this.x300a00f9;
  }

  get x300a00f9(): string | undefined {
    const element = this.dwResponse['300a00f9'];
    return this.dwResponse['300a00f9']?.Value[0];
  }

  // Block Divergence
  get BlockDivergence(): string | undefined {
    return this.x300a00fa;
  }

  get x300a00fa(): string | undefined {
    const element = this.dwResponse['300a00fa'];
    return this.dwResponse['300a00fa']?.Value[0];
  }

  // Block Mounting Position
  get BlockMountingPosition(): string | undefined {
    return this.x300a00fb;
  }

  get x300a00fb(): string | undefined {
    const element = this.dwResponse['300a00fb'];
    return this.dwResponse['300a00fb']?.Value[0];
  }

  // Block Number
  get BlockNumber(): number | undefined {
    return this.x300a00fc;
  }

  get x300a00fc(): number | undefined {
    const element = this.dwResponse['300a00fc'];
    return this.dwResponse['300a00fc']?.Value[0];
  }

  // Block Name
  get BlockName(): string | undefined {
    return this.x300a00fe;
  }

  get x300a00fe(): string | undefined {
    const element = this.dwResponse['300a00fe'];
    return this.dwResponse['300a00fe']?.Value[0];
  }

  // Block Thickness
  get BlockThickness(): number | undefined {
    return this.x300a0100;
  }

  get x300a0100(): number | undefined {
    const element = this.dwResponse['300a0100'];
    return this.dwResponse['300a0100']?.Value[0];
  }

  // Block Transmission
  get BlockTransmission(): number | undefined {
    return this.x300a0102;
  }

  get x300a0102(): number | undefined {
    const element = this.dwResponse['300a0102'];
    return this.dwResponse['300a0102']?.Value[0];
  }

  // Block Number of Points
  get BlockNumberOfPoints(): number | undefined {
    return this.x300a0104;
  }

  get x300a0104(): number | undefined {
    const element = this.dwResponse['300a0104'];
    return this.dwResponse['300a0104']?.Value[0];
  }

  // Block Data
  get BlockData(): Array<number> | undefined {
    return this.x300a0106;
  }

  get x300a0106(): Array<number> | undefined {
    const element = this.dwResponse['300a0106'];
    return this.dwResponse['300a0106']?.Value;
  }

  // Applicator Sequence
  get ApplicatorSequence(): Array<Dataset> | undefined {
    return this.x300a0107;
  }

  get x300a0107(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0107'];
    return this.dwResponse['300a0107']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Applicator ID
  get ApplicatorID(): string | undefined {
    return this.x300a0108;
  }

  get x300a0108(): string | undefined {
    const element = this.dwResponse['300a0108'];
    return this.dwResponse['300a0108']?.Value[0];
  }

  // Applicator Type
  get ApplicatorType(): string | undefined {
    return this.x300a0109;
  }

  get x300a0109(): string | undefined {
    const element = this.dwResponse['300a0109'];
    return this.dwResponse['300a0109']?.Value[0];
  }

  // Applicator Description
  get ApplicatorDescription(): string | undefined {
    return this.x300a010a;
  }

  get x300a010a(): string | undefined {
    const element = this.dwResponse['300a010a'];
    return this.dwResponse['300a010a']?.Value[0];
  }

  // Cumulative Dose Reference Coefficient
  get CumulativeDoseReferenceCoefficient(): number | undefined {
    return this.x300a010c;
  }

  get x300a010c(): number | undefined {
    const element = this.dwResponse['300a010c'];
    return this.dwResponse['300a010c']?.Value[0];
  }

  // Final Cumulative Meterset Weight
  get FinalCumulativeMetersetWeight(): number | undefined {
    return this.x300a010e;
  }

  get x300a010e(): number | undefined {
    const element = this.dwResponse['300a010e'];
    return this.dwResponse['300a010e']?.Value[0];
  }

  // Number of Control Points
  get NumberOfControlPoints(): number | undefined {
    return this.x300a0110;
  }

  get x300a0110(): number | undefined {
    const element = this.dwResponse['300a0110'];
    return this.dwResponse['300a0110']?.Value[0];
  }

  // Control Point Sequence
  get ControlPointSequence(): Array<Dataset> | undefined {
    return this.x300a0111;
  }

  get x300a0111(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0111'];
    return this.dwResponse['300a0111']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Control Point Index
  get ControlPointIndex(): number | undefined {
    return this.x300a0112;
  }

  get x300a0112(): number | undefined {
    const element = this.dwResponse['300a0112'];
    return this.dwResponse['300a0112']?.Value[0];
  }

  // Nominal Beam Energy
  get NominalBeamEnergy(): number | undefined {
    return this.x300a0114;
  }

  get x300a0114(): number | undefined {
    const element = this.dwResponse['300a0114'];
    return this.dwResponse['300a0114']?.Value[0];
  }

  // Dose Rate Set
  get DoseRateSet(): number | undefined {
    return this.x300a0115;
  }

  get x300a0115(): number | undefined {
    const element = this.dwResponse['300a0115'];
    return this.dwResponse['300a0115']?.Value[0];
  }

  // Wedge Position Sequence
  get WedgePositionSequence(): Array<Dataset> | undefined {
    return this.x300a0116;
  }

  get x300a0116(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0116'];
    return this.dwResponse['300a0116']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Wedge Position
  get WedgePosition(): string | undefined {
    return this.x300a0118;
  }

  get x300a0118(): string | undefined {
    const element = this.dwResponse['300a0118'];
    return this.dwResponse['300a0118']?.Value[0];
  }

  // Beam Limiting Device Position Sequence
  get BeamLimitingDevicePositionSequence(): Array<Dataset> | undefined {
    return this.x300a011a;
  }

  get x300a011a(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a011a'];
    return this.dwResponse['300a011a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Leaf/Jaw Positions
  get LeafJawPositions(): Array<number> | undefined {
    return this.x300a011c;
  }

  get x300a011c(): Array<number> | undefined {
    const element = this.dwResponse['300a011c'];
    return this.dwResponse['300a011c']?.Value;
  }

  // Gantry Angle
  get GantryAngle(): number | undefined {
    return this.x300a011e;
  }

  get x300a011e(): number | undefined {
    const element = this.dwResponse['300a011e'];
    return this.dwResponse['300a011e']?.Value[0];
  }

  // Gantry Rotation Direction
  get GantryRotationDirection(): string | undefined {
    return this.x300a011f;
  }

  get x300a011f(): string | undefined {
    const element = this.dwResponse['300a011f'];
    return this.dwResponse['300a011f']?.Value[0];
  }

  // Beam Limiting Device Angle
  get BeamLimitingDeviceAngle(): number | undefined {
    return this.x300a0120;
  }

  get x300a0120(): number | undefined {
    const element = this.dwResponse['300a0120'];
    return this.dwResponse['300a0120']?.Value[0];
  }

  // Beam Limiting Device Rotation Direction
  get BeamLimitingDeviceRotationDirection(): string | undefined {
    return this.x300a0121;
  }

  get x300a0121(): string | undefined {
    const element = this.dwResponse['300a0121'];
    return this.dwResponse['300a0121']?.Value[0];
  }

  // Patient Support Angle
  get PatientSupportAngle(): number | undefined {
    return this.x300a0122;
  }

  get x300a0122(): number | undefined {
    const element = this.dwResponse['300a0122'];
    return this.dwResponse['300a0122']?.Value[0];
  }

  // Patient Support Rotation Direction
  get PatientSupportRotationDirection(): string | undefined {
    return this.x300a0123;
  }

  get x300a0123(): string | undefined {
    const element = this.dwResponse['300a0123'];
    return this.dwResponse['300a0123']?.Value[0];
  }

  // Table Top Eccentric Axis Distance
  get TableTopEccentricAxisDistance(): number | undefined {
    return this.x300a0124;
  }

  get x300a0124(): number | undefined {
    const element = this.dwResponse['300a0124'];
    return this.dwResponse['300a0124']?.Value[0];
  }

  // Table Top Eccentric Angle
  get TableTopEccentricAngle(): number | undefined {
    return this.x300a0125;
  }

  get x300a0125(): number | undefined {
    const element = this.dwResponse['300a0125'];
    return this.dwResponse['300a0125']?.Value[0];
  }

  // Table Top Eccentric Rotation Direction
  get TableTopEccentricRotationDirection(): string | undefined {
    return this.x300a0126;
  }

  get x300a0126(): string | undefined {
    const element = this.dwResponse['300a0126'];
    return this.dwResponse['300a0126']?.Value[0];
  }

  // Table Top Vertical Position
  get TableTopVerticalPosition(): number | undefined {
    return this.x300a0128;
  }

  get x300a0128(): number | undefined {
    const element = this.dwResponse['300a0128'];
    return this.dwResponse['300a0128']?.Value[0];
  }

  // Table Top Longitudinal Position
  get TableTopLongitudinalPosition(): number | undefined {
    return this.x300a0129;
  }

  get x300a0129(): number | undefined {
    const element = this.dwResponse['300a0129'];
    return this.dwResponse['300a0129']?.Value[0];
  }

  // Table Top Lateral Position
  get TableTopLateralPosition(): number | undefined {
    return this.x300a012a;
  }

  get x300a012a(): number | undefined {
    const element = this.dwResponse['300a012a'];
    return this.dwResponse['300a012a']?.Value[0];
  }

  // Isocenter Position
  get IsocenterPosition(): Array<number> | undefined {
    return this.x300a012c;
  }

  get x300a012c(): Array<number> | undefined {
    const element = this.dwResponse['300a012c'];
    return this.dwResponse['300a012c']?.Value;
  }

  // Surface Entry Point
  get SurfaceEntryPoint(): Array<number> | undefined {
    return this.x300a012e;
  }

  get x300a012e(): Array<number> | undefined {
    const element = this.dwResponse['300a012e'];
    return this.dwResponse['300a012e']?.Value;
  }

  // Source to Surface Distance
  get SourceToSurfaceDistance(): number | undefined {
    return this.x300a0130;
  }

  get x300a0130(): number | undefined {
    const element = this.dwResponse['300a0130'];
    return this.dwResponse['300a0130']?.Value[0];
  }

  // Cumulative Meterset Weight
  get CumulativeMetersetWeight(): number | undefined {
    return this.x300a0134;
  }

  get x300a0134(): number | undefined {
    const element = this.dwResponse['300a0134'];
    return this.dwResponse['300a0134']?.Value[0];
  }

  // Table Top Pitch Angle
  get TableTopPitchAngle(): number | undefined {
    return this.x300a0140;
  }

  get x300a0140(): number | undefined {
    const element = this.dwResponse['300a0140'];
    return this.dwResponse['300a0140']?.Value[0];
  }

  // Table Top Pitch Rotation Direction
  get TableTopPitchRotationDirection(): string | undefined {
    return this.x300a0142;
  }

  get x300a0142(): string | undefined {
    const element = this.dwResponse['300a0142'];
    return this.dwResponse['300a0142']?.Value[0];
  }

  // Table Top Roll Angle
  get TableTopRollAngle(): number | undefined {
    return this.x300a0144;
  }

  get x300a0144(): number | undefined {
    const element = this.dwResponse['300a0144'];
    return this.dwResponse['300a0144']?.Value[0];
  }

  // Table Top Roll Rotation Direction
  get TableTopRollRotationDirection(): string | undefined {
    return this.x300a0146;
  }

  get x300a0146(): string | undefined {
    const element = this.dwResponse['300a0146'];
    return this.dwResponse['300a0146']?.Value[0];
  }

  // Head Fixation Angle
  get HeadFixationAngle(): number | undefined {
    return this.x300a0148;
  }

  get x300a0148(): number | undefined {
    const element = this.dwResponse['300a0148'];
    return this.dwResponse['300a0148']?.Value[0];
  }

  // Gantry Pitch Angle
  get GantryPitchAngle(): number | undefined {
    return this.x300a014a;
  }

  get x300a014a(): number | undefined {
    const element = this.dwResponse['300a014a'];
    return this.dwResponse['300a014a']?.Value[0];
  }

  // Gantry Pitch Rotation Direction
  get GantryPitchRotationDirection(): string | undefined {
    return this.x300a014c;
  }

  get x300a014c(): string | undefined {
    const element = this.dwResponse['300a014c'];
    return this.dwResponse['300a014c']?.Value[0];
  }

  // Gantry Pitch Angle Tolerance
  get GantryPitchAngleTolerance(): number | undefined {
    return this.x300a014e;
  }

  get x300a014e(): number | undefined {
    const element = this.dwResponse['300a014e'];
    return this.dwResponse['300a014e']?.Value[0];
  }

  // Patient Setup Sequence
  get PatientSetupSequence(): Array<Dataset> | undefined {
    return this.x300a0180;
  }

  get x300a0180(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0180'];
    return this.dwResponse['300a0180']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Patient Setup Number
  get PatientSetupNumber(): number | undefined {
    return this.x300a0182;
  }

  get x300a0182(): number | undefined {
    const element = this.dwResponse['300a0182'];
    return this.dwResponse['300a0182']?.Value[0];
  }

  // Patient Setup Label
  get PatientSetupLabel(): string | undefined {
    return this.x300a0183;
  }

  get x300a0183(): string | undefined {
    const element = this.dwResponse['300a0183'];
    return this.dwResponse['300a0183']?.Value[0];
  }

  // Patient Additional Position
  get PatientAdditionalPosition(): string | undefined {
    return this.x300a0184;
  }

  get x300a0184(): string | undefined {
    const element = this.dwResponse['300a0184'];
    return this.dwResponse['300a0184']?.Value[0];
  }

  // Fixation Device Sequence
  get FixationDeviceSequence(): Array<Dataset> | undefined {
    return this.x300a0190;
  }

  get x300a0190(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0190'];
    return this.dwResponse['300a0190']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Fixation Device Type
  get FixationDeviceType(): string | undefined {
    return this.x300a0192;
  }

  get x300a0192(): string | undefined {
    const element = this.dwResponse['300a0192'];
    return this.dwResponse['300a0192']?.Value[0];
  }

  // Fixation Device Label
  get FixationDeviceLabel(): string | undefined {
    return this.x300a0194;
  }

  get x300a0194(): string | undefined {
    const element = this.dwResponse['300a0194'];
    return this.dwResponse['300a0194']?.Value[0];
  }

  // Fixation Device Position
  get FixationDevicePosition(): string | undefined {
    return this.x300a0198;
  }

  get x300a0198(): string | undefined {
    const element = this.dwResponse['300a0198'];
    return this.dwResponse['300a0198']?.Value[0];
  }

  // Fixation Device Pitch Angle
  get FixationDevicePitchAngle(): number | undefined {
    return this.x300a0199;
  }

  get x300a0199(): number | undefined {
    const element = this.dwResponse['300a0199'];
    return this.dwResponse['300a0199']?.Value[0];
  }

  // Fixation Device Roll Angle
  get FixationDeviceRollAngle(): number | undefined {
    return this.x300a019a;
  }

  get x300a019a(): number | undefined {
    const element = this.dwResponse['300a019a'];
    return this.dwResponse['300a019a']?.Value[0];
  }

  // Shielding Device Sequence
  get ShieldingDeviceSequence(): Array<Dataset> | undefined {
    return this.x300a01a0;
  }

  get x300a01a0(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a01a0'];
    return this.dwResponse['300a01a0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Shielding Device Type
  get ShieldingDeviceType(): string | undefined {
    return this.x300a01a2;
  }

  get x300a01a2(): string | undefined {
    const element = this.dwResponse['300a01a2'];
    return this.dwResponse['300a01a2']?.Value[0];
  }

  // Shielding Device Label
  get ShieldingDeviceLabel(): string | undefined {
    return this.x300a01a4;
  }

  get x300a01a4(): string | undefined {
    const element = this.dwResponse['300a01a4'];
    return this.dwResponse['300a01a4']?.Value[0];
  }

  // Shielding Device Position
  get ShieldingDevicePosition(): string | undefined {
    return this.x300a01a8;
  }

  get x300a01a8(): string | undefined {
    const element = this.dwResponse['300a01a8'];
    return this.dwResponse['300a01a8']?.Value[0];
  }

  // Setup Technique
  get SetupTechnique(): string | undefined {
    return this.x300a01b0;
  }

  get x300a01b0(): string | undefined {
    const element = this.dwResponse['300a01b0'];
    return this.dwResponse['300a01b0']?.Value[0];
  }

  // Setup Device Sequence
  get SetupDeviceSequence(): Array<Dataset> | undefined {
    return this.x300a01b4;
  }

  get x300a01b4(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a01b4'];
    return this.dwResponse['300a01b4']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Setup Device Type
  get SetupDeviceType(): string | undefined {
    return this.x300a01b6;
  }

  get x300a01b6(): string | undefined {
    const element = this.dwResponse['300a01b6'];
    return this.dwResponse['300a01b6']?.Value[0];
  }

  // Setup Device Label
  get SetupDeviceLabel(): string | undefined {
    return this.x300a01b8;
  }

  get x300a01b8(): string | undefined {
    const element = this.dwResponse['300a01b8'];
    return this.dwResponse['300a01b8']?.Value[0];
  }

  // Setup Device Parameter
  get SetupDeviceParameter(): number | undefined {
    return this.x300a01bc;
  }

  get x300a01bc(): number | undefined {
    const element = this.dwResponse['300a01bc'];
    return this.dwResponse['300a01bc']?.Value[0];
  }

  // Table Top Vertical Setup Displacement
  get TableTopVerticalSetupDisplacement(): number | undefined {
    return this.x300a01d2;
  }

  get x300a01d2(): number | undefined {
    const element = this.dwResponse['300a01d2'];
    return this.dwResponse['300a01d2']?.Value[0];
  }

  // Table Top Longitudinal Setup Displacement
  get TableTopLongitudinalSetupDisplacement(): number | undefined {
    return this.x300a01d4;
  }

  get x300a01d4(): number | undefined {
    const element = this.dwResponse['300a01d4'];
    return this.dwResponse['300a01d4']?.Value[0];
  }

  // Table Top Lateral Setup Displacement
  get TableTopLateralSetupDisplacement(): number | undefined {
    return this.x300a01d6;
  }

  get x300a01d6(): number | undefined {
    const element = this.dwResponse['300a01d6'];
    return this.dwResponse['300a01d6']?.Value[0];
  }

  // Brachy Treatment Technique
  get BrachyTreatmentTechnique(): string | undefined {
    return this.x300a0200;
  }

  get x300a0200(): string | undefined {
    const element = this.dwResponse['300a0200'];
    return this.dwResponse['300a0200']?.Value[0];
  }

  // Brachy Treatment Type
  get BrachyTreatmentType(): string | undefined {
    return this.x300a0202;
  }

  get x300a0202(): string | undefined {
    const element = this.dwResponse['300a0202'];
    return this.dwResponse['300a0202']?.Value[0];
  }

  // Treatment Machine Sequence
  get TreatmentMachineSequence(): Array<Dataset> | undefined {
    return this.x300a0206;
  }

  get x300a0206(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0206'];
    return this.dwResponse['300a0206']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Source Sequence
  get SourceSequence(): Array<Dataset> | undefined {
    return this.x300a0210;
  }

  get x300a0210(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0210'];
    return this.dwResponse['300a0210']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Source Number
  get SourceNumber(): number | undefined {
    return this.x300a0212;
  }

  get x300a0212(): number | undefined {
    const element = this.dwResponse['300a0212'];
    return this.dwResponse['300a0212']?.Value[0];
  }

  // Source Type
  get SourceType(): string | undefined {
    return this.x300a0214;
  }

  get x300a0214(): string | undefined {
    const element = this.dwResponse['300a0214'];
    return this.dwResponse['300a0214']?.Value[0];
  }

  // Source Manufacturer
  get SourceManufacturer(): string | undefined {
    return this.x300a0216;
  }

  get x300a0216(): string | undefined {
    const element = this.dwResponse['300a0216'];
    return this.dwResponse['300a0216']?.Value[0];
  }

  // Active Source Diameter
  get ActiveSourceDiameter(): number | undefined {
    return this.x300a0218;
  }

  get x300a0218(): number | undefined {
    const element = this.dwResponse['300a0218'];
    return this.dwResponse['300a0218']?.Value[0];
  }

  // Active Source Length
  get ActiveSourceLength(): number | undefined {
    return this.x300a021a;
  }

  get x300a021a(): number | undefined {
    const element = this.dwResponse['300a021a'];
    return this.dwResponse['300a021a']?.Value[0];
  }

  // Source Model ID
  get SourceModelID(): string | undefined {
    return this.x300a021b;
  }

  get x300a021b(): string | undefined {
    const element = this.dwResponse['300a021b'];
    return this.dwResponse['300a021b']?.Value[0];
  }

  // Source Description
  get SourceDescription(): string | undefined {
    return this.x300a021c;
  }

  get x300a021c(): string | undefined {
    const element = this.dwResponse['300a021c'];
    return this.dwResponse['300a021c']?.Value[0];
  }

  // Source Encapsulation Nominal Thickness
  get SourceEncapsulationNominalThickness(): number | undefined {
    return this.x300a0222;
  }

  get x300a0222(): number | undefined {
    const element = this.dwResponse['300a0222'];
    return this.dwResponse['300a0222']?.Value[0];
  }

  // Source Encapsulation Nominal Transmission
  get SourceEncapsulationNominalTransmission(): number | undefined {
    return this.x300a0224;
  }

  get x300a0224(): number | undefined {
    const element = this.dwResponse['300a0224'];
    return this.dwResponse['300a0224']?.Value[0];
  }

  // Source Isotope Name
  get SourceIsotopeName(): string | undefined {
    return this.x300a0226;
  }

  get x300a0226(): string | undefined {
    const element = this.dwResponse['300a0226'];
    return this.dwResponse['300a0226']?.Value[0];
  }

  // Source Isotope Half Life
  get SourceIsotopeHalfLife(): number | undefined {
    return this.x300a0228;
  }

  get x300a0228(): number | undefined {
    const element = this.dwResponse['300a0228'];
    return this.dwResponse['300a0228']?.Value[0];
  }

  // Source Strength Units
  get SourceStrengthUnits(): string | undefined {
    return this.x300a0229;
  }

  get x300a0229(): string | undefined {
    const element = this.dwResponse['300a0229'];
    return this.dwResponse['300a0229']?.Value[0];
  }

  // Reference Air Kerma Rate
  get ReferenceAirKermaRate(): number | undefined {
    return this.x300a022a;
  }

  get x300a022a(): number | undefined {
    const element = this.dwResponse['300a022a'];
    return this.dwResponse['300a022a']?.Value[0];
  }

  // Source Strength
  get SourceStrength(): number | undefined {
    return this.x300a022b;
  }

  get x300a022b(): number | undefined {
    const element = this.dwResponse['300a022b'];
    return this.dwResponse['300a022b']?.Value[0];
  }

  // Source Strength Reference Date
  get SourceStrengthReferenceDate(): Date | undefined {
    return this.x300a022c;
  }

  get x300a022c(): Date | undefined {
    const element = this.dwResponse['300a022c'];
    return this.dwResponse['300a022c']?.Value[0];
  }

  // Source Strength Reference Time
  get SourceStrengthReferenceTime(): string | undefined {
    return this.x300a022e;
  }

  get x300a022e(): string | undefined {
    const element = this.dwResponse['300a022e'];
    return this.dwResponse['300a022e']?.Value[0];
  }

  // Application Setup Sequence
  get ApplicationSetupSequence(): Array<Dataset> | undefined {
    return this.x300a0230;
  }

  get x300a0230(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0230'];
    return this.dwResponse['300a0230']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Application Setup Type
  get ApplicationSetupType(): string | undefined {
    return this.x300a0232;
  }

  get x300a0232(): string | undefined {
    const element = this.dwResponse['300a0232'];
    return this.dwResponse['300a0232']?.Value[0];
  }

  // Application Setup Number
  get ApplicationSetupNumber(): number | undefined {
    return this.x300a0234;
  }

  get x300a0234(): number | undefined {
    const element = this.dwResponse['300a0234'];
    return this.dwResponse['300a0234']?.Value[0];
  }

  // Application Setup Name
  get ApplicationSetupName(): string | undefined {
    return this.x300a0236;
  }

  get x300a0236(): string | undefined {
    const element = this.dwResponse['300a0236'];
    return this.dwResponse['300a0236']?.Value[0];
  }

  // Application Setup Manufacturer
  get ApplicationSetupManufacturer(): string | undefined {
    return this.x300a0238;
  }

  get x300a0238(): string | undefined {
    const element = this.dwResponse['300a0238'];
    return this.dwResponse['300a0238']?.Value[0];
  }

  // Template Number
  get TemplateNumber(): number | undefined {
    return this.x300a0240;
  }

  get x300a0240(): number | undefined {
    const element = this.dwResponse['300a0240'];
    return this.dwResponse['300a0240']?.Value[0];
  }

  // Template Type
  get TemplateType(): string | undefined {
    return this.x300a0242;
  }

  get x300a0242(): string | undefined {
    const element = this.dwResponse['300a0242'];
    return this.dwResponse['300a0242']?.Value[0];
  }

  // Template Name
  get TemplateName(): string | undefined {
    return this.x300a0244;
  }

  get x300a0244(): string | undefined {
    const element = this.dwResponse['300a0244'];
    return this.dwResponse['300a0244']?.Value[0];
  }

  // Total Reference Air Kerma
  get TotalReferenceAirKerma(): number | undefined {
    return this.x300a0250;
  }

  get x300a0250(): number | undefined {
    const element = this.dwResponse['300a0250'];
    return this.dwResponse['300a0250']?.Value[0];
  }

  // Brachy Accessory Device Sequence
  get BrachyAccessoryDeviceSequence(): Array<Dataset> | undefined {
    return this.x300a0260;
  }

  get x300a0260(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0260'];
    return this.dwResponse['300a0260']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Brachy Accessory Device Number
  get BrachyAccessoryDeviceNumber(): number | undefined {
    return this.x300a0262;
  }

  get x300a0262(): number | undefined {
    const element = this.dwResponse['300a0262'];
    return this.dwResponse['300a0262']?.Value[0];
  }

  // Brachy Accessory Device ID
  get BrachyAccessoryDeviceID(): string | undefined {
    return this.x300a0263;
  }

  get x300a0263(): string | undefined {
    const element = this.dwResponse['300a0263'];
    return this.dwResponse['300a0263']?.Value[0];
  }

  // Brachy Accessory Device Type
  get BrachyAccessoryDeviceType(): string | undefined {
    return this.x300a0264;
  }

  get x300a0264(): string | undefined {
    const element = this.dwResponse['300a0264'];
    return this.dwResponse['300a0264']?.Value[0];
  }

  // Brachy Accessory Device Name
  get BrachyAccessoryDeviceName(): string | undefined {
    return this.x300a0266;
  }

  get x300a0266(): string | undefined {
    const element = this.dwResponse['300a0266'];
    return this.dwResponse['300a0266']?.Value[0];
  }

  // Brachy Accessory Device Nominal Thickness
  get BrachyAccessoryDeviceNominalThickness(): number | undefined {
    return this.x300a026a;
  }

  get x300a026a(): number | undefined {
    const element = this.dwResponse['300a026a'];
    return this.dwResponse['300a026a']?.Value[0];
  }

  // Brachy Accessory Device Nominal Transmission
  get BrachyAccessoryDeviceNominalTransmission(): number | undefined {
    return this.x300a026c;
  }

  get x300a026c(): number | undefined {
    const element = this.dwResponse['300a026c'];
    return this.dwResponse['300a026c']?.Value[0];
  }

  // Channel Sequence
  get ChannelSequence(): Array<Dataset> | undefined {
    return this.x300a0280;
  }

  get x300a0280(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0280'];
    return this.dwResponse['300a0280']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Channel Number
  get ChannelNumber(): number | undefined {
    return this.x300a0282;
  }

  get x300a0282(): number | undefined {
    const element = this.dwResponse['300a0282'];
    return this.dwResponse['300a0282']?.Value[0];
  }

  // Channel Length
  get ChannelLength(): number | undefined {
    return this.x300a0284;
  }

  get x300a0284(): number | undefined {
    const element = this.dwResponse['300a0284'];
    return this.dwResponse['300a0284']?.Value[0];
  }

  // Channel Total Time
  get ChannelTotalTime(): number | undefined {
    return this.x300a0286;
  }

  get x300a0286(): number | undefined {
    const element = this.dwResponse['300a0286'];
    return this.dwResponse['300a0286']?.Value[0];
  }

  // Source Movement Type
  get SourceMovementType(): string | undefined {
    return this.x300a0288;
  }

  get x300a0288(): string | undefined {
    const element = this.dwResponse['300a0288'];
    return this.dwResponse['300a0288']?.Value[0];
  }

  // Number of Pulses
  get NumberOfPulses(): number | undefined {
    return this.x300a028a;
  }

  get x300a028a(): number | undefined {
    const element = this.dwResponse['300a028a'];
    return this.dwResponse['300a028a']?.Value[0];
  }

  // Pulse Repetition Interval
  get PulseRepetitionInterval(): number | undefined {
    return this.x300a028c;
  }

  get x300a028c(): number | undefined {
    const element = this.dwResponse['300a028c'];
    return this.dwResponse['300a028c']?.Value[0];
  }

  // Source Applicator Number
  get SourceApplicatorNumber(): number | undefined {
    return this.x300a0290;
  }

  get x300a0290(): number | undefined {
    const element = this.dwResponse['300a0290'];
    return this.dwResponse['300a0290']?.Value[0];
  }

  // Source Applicator ID
  get SourceApplicatorID(): string | undefined {
    return this.x300a0291;
  }

  get x300a0291(): string | undefined {
    const element = this.dwResponse['300a0291'];
    return this.dwResponse['300a0291']?.Value[0];
  }

  // Source Applicator Type
  get SourceApplicatorType(): string | undefined {
    return this.x300a0292;
  }

  get x300a0292(): string | undefined {
    const element = this.dwResponse['300a0292'];
    return this.dwResponse['300a0292']?.Value[0];
  }

  // Source Applicator Name
  get SourceApplicatorName(): string | undefined {
    return this.x300a0294;
  }

  get x300a0294(): string | undefined {
    const element = this.dwResponse['300a0294'];
    return this.dwResponse['300a0294']?.Value[0];
  }

  // Source Applicator Length
  get SourceApplicatorLength(): number | undefined {
    return this.x300a0296;
  }

  get x300a0296(): number | undefined {
    const element = this.dwResponse['300a0296'];
    return this.dwResponse['300a0296']?.Value[0];
  }

  // Source Applicator Manufacturer
  get SourceApplicatorManufacturer(): string | undefined {
    return this.x300a0298;
  }

  get x300a0298(): string | undefined {
    const element = this.dwResponse['300a0298'];
    return this.dwResponse['300a0298']?.Value[0];
  }

  // Source Applicator Wall Nominal Thickness
  get SourceApplicatorWallNominalThickness(): number | undefined {
    return this.x300a029c;
  }

  get x300a029c(): number | undefined {
    const element = this.dwResponse['300a029c'];
    return this.dwResponse['300a029c']?.Value[0];
  }

  // Source Applicator Wall Nominal Transmission
  get SourceApplicatorWallNominalTransmission(): number | undefined {
    return this.x300a029e;
  }

  get x300a029e(): number | undefined {
    const element = this.dwResponse['300a029e'];
    return this.dwResponse['300a029e']?.Value[0];
  }

  // Source Applicator Step Size
  get SourceApplicatorStepSize(): number | undefined {
    return this.x300a02a0;
  }

  get x300a02a0(): number | undefined {
    const element = this.dwResponse['300a02a0'];
    return this.dwResponse['300a02a0']?.Value[0];
  }

  // Transfer Tube Number
  get TransferTubeNumber(): number | undefined {
    return this.x300a02a2;
  }

  get x300a02a2(): number | undefined {
    const element = this.dwResponse['300a02a2'];
    return this.dwResponse['300a02a2']?.Value[0];
  }

  // Transfer Tube Length
  get TransferTubeLength(): number | undefined {
    return this.x300a02a4;
  }

  get x300a02a4(): number | undefined {
    const element = this.dwResponse['300a02a4'];
    return this.dwResponse['300a02a4']?.Value[0];
  }

  // Channel Shield Sequence
  get ChannelShieldSequence(): Array<Dataset> | undefined {
    return this.x300a02b0;
  }

  get x300a02b0(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a02b0'];
    return this.dwResponse['300a02b0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Channel Shield Number
  get ChannelShieldNumber(): number | undefined {
    return this.x300a02b2;
  }

  get x300a02b2(): number | undefined {
    const element = this.dwResponse['300a02b2'];
    return this.dwResponse['300a02b2']?.Value[0];
  }

  // Channel Shield ID
  get ChannelShieldID(): string | undefined {
    return this.x300a02b3;
  }

  get x300a02b3(): string | undefined {
    const element = this.dwResponse['300a02b3'];
    return this.dwResponse['300a02b3']?.Value[0];
  }

  // Channel Shield Name
  get ChannelShieldName(): string | undefined {
    return this.x300a02b4;
  }

  get x300a02b4(): string | undefined {
    const element = this.dwResponse['300a02b4'];
    return this.dwResponse['300a02b4']?.Value[0];
  }

  // Channel Shield Nominal Thickness
  get ChannelShieldNominalThickness(): number | undefined {
    return this.x300a02b8;
  }

  get x300a02b8(): number | undefined {
    const element = this.dwResponse['300a02b8'];
    return this.dwResponse['300a02b8']?.Value[0];
  }

  // Channel Shield Nominal Transmission
  get ChannelShieldNominalTransmission(): number | undefined {
    return this.x300a02ba;
  }

  get x300a02ba(): number | undefined {
    const element = this.dwResponse['300a02ba'];
    return this.dwResponse['300a02ba']?.Value[0];
  }

  // Final Cumulative Time Weight
  get FinalCumulativeTimeWeight(): number | undefined {
    return this.x300a02c8;
  }

  get x300a02c8(): number | undefined {
    const element = this.dwResponse['300a02c8'];
    return this.dwResponse['300a02c8']?.Value[0];
  }

  // Brachy Control Point Sequence
  get BrachyControlPointSequence(): Array<Dataset> | undefined {
    return this.x300a02d0;
  }

  get x300a02d0(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a02d0'];
    return this.dwResponse['300a02d0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Control Point Relative Position
  get ControlPointRelativePosition(): number | undefined {
    return this.x300a02d2;
  }

  get x300a02d2(): number | undefined {
    const element = this.dwResponse['300a02d2'];
    return this.dwResponse['300a02d2']?.Value[0];
  }

  // Control Point 3D Position
  get ControlPoint3DPosition(): Array<number> | undefined {
    return this.x300a02d4;
  }

  get x300a02d4(): Array<number> | undefined {
    const element = this.dwResponse['300a02d4'];
    return this.dwResponse['300a02d4']?.Value;
  }

  // Cumulative Time Weight
  get CumulativeTimeWeight(): number | undefined {
    return this.x300a02d6;
  }

  get x300a02d6(): number | undefined {
    const element = this.dwResponse['300a02d6'];
    return this.dwResponse['300a02d6']?.Value[0];
  }

  // Compensator Divergence
  get CompensatorDivergence(): string | undefined {
    return this.x300a02e0;
  }

  get x300a02e0(): string | undefined {
    const element = this.dwResponse['300a02e0'];
    return this.dwResponse['300a02e0']?.Value[0];
  }

  // Compensator Mounting Position
  get CompensatorMountingPosition(): string | undefined {
    return this.x300a02e1;
  }

  get x300a02e1(): string | undefined {
    const element = this.dwResponse['300a02e1'];
    return this.dwResponse['300a02e1']?.Value[0];
  }

  // Source to Compensator Distance
  get SourceToCompensatorDistance(): Array<number> | undefined {
    return this.x300a02e2;
  }

  get x300a02e2(): Array<number> | undefined {
    const element = this.dwResponse['300a02e2'];
    return this.dwResponse['300a02e2']?.Value;
  }

  // Total Compensator Tray Water-Equivalent Thickness
  get TotalCompensatorTrayWaterEquivalentThickness(): number | undefined {
    return this.x300a02e3;
  }

  get x300a02e3(): number | undefined {
    const element = this.dwResponse['300a02e3'];
    return this.dwResponse['300a02e3']?.Value[0];
  }

  // Isocenter to Compensator Tray Distance
  get IsocenterToCompensatorTrayDistance(): number | undefined {
    return this.x300a02e4;
  }

  get x300a02e4(): number | undefined {
    const element = this.dwResponse['300a02e4'];
    return this.dwResponse['300a02e4']?.Value[0];
  }

  // Compensator Column Offset
  get CompensatorColumnOffset(): number | undefined {
    return this.x300a02e5;
  }

  get x300a02e5(): number | undefined {
    const element = this.dwResponse['300a02e5'];
    return this.dwResponse['300a02e5']?.Value[0];
  }

  // Isocenter to Compensator Distances
  get IsocenterToCompensatorDistances(): Array<number> | undefined {
    return this.x300a02e6;
  }

  get x300a02e6(): Array<number> | undefined {
    const element = this.dwResponse['300a02e6'];
    return this.dwResponse['300a02e6']?.Value;
  }

  // Compensator Relative Stopping Power Ratio
  get CompensatorRelativeStoppingPowerRatio(): number | undefined {
    return this.x300a02e7;
  }

  get x300a02e7(): number | undefined {
    const element = this.dwResponse['300a02e7'];
    return this.dwResponse['300a02e7']?.Value[0];
  }

  // Compensator Milling Tool Diameter
  get CompensatorMillingToolDiameter(): number | undefined {
    return this.x300a02e8;
  }

  get x300a02e8(): number | undefined {
    const element = this.dwResponse['300a02e8'];
    return this.dwResponse['300a02e8']?.Value[0];
  }

  // Ion Range Compensator Sequence
  get IonRangeCompensatorSequence(): Array<Dataset> | undefined {
    return this.x300a02ea;
  }

  get x300a02ea(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a02ea'];
    return this.dwResponse['300a02ea']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Radiation Mass Number
  get RadiationMassNumber(): number | undefined {
    return this.x300a0302;
  }

  get x300a0302(): number | undefined {
    const element = this.dwResponse['300a0302'];
    return this.dwResponse['300a0302']?.Value[0];
  }

  // Radiation Atomic Number
  get RadiationAtomicNumber(): number | undefined {
    return this.x300a0304;
  }

  get x300a0304(): number | undefined {
    const element = this.dwResponse['300a0304'];
    return this.dwResponse['300a0304']?.Value[0];
  }

  // Radiation Charge State
  get RadiationChargeState(): Uint8Array | undefined {
    return this.x300a0306;
  }

  get x300a0306(): Uint8Array | undefined {
    const element = this.dwResponse['300a0306'];
    return this.dwResponse['300a0306']?.Value[0];
  }

  // Scan Mode
  get ScanMode(): string | undefined {
    return this.x300a0308;
  }

  get x300a0308(): string | undefined {
    const element = this.dwResponse['300a0308'];
    return this.dwResponse['300a0308']?.Value[0];
  }

  // Virtual Source-Axis Distances
  get VirtualSourceAxisDistances(): Array<number> | undefined {
    return this.x300a030a;
  }

  get x300a030a(): Array<number> | undefined {
    const element = this.dwResponse['300a030a'];
    return this.dwResponse['300a030a']?.Value;
  }

  // Snout Sequence
  get SnoutSequence(): Array<Dataset> | undefined {
    return this.x300a030c;
  }

  get x300a030c(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a030c'];
    return this.dwResponse['300a030c']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Snout Position
  get SnoutPosition(): number | undefined {
    return this.x300a030d;
  }

  get x300a030d(): number | undefined {
    const element = this.dwResponse['300a030d'];
    return this.dwResponse['300a030d']?.Value[0];
  }

  // Snout ID
  get SnoutID(): string | undefined {
    return this.x300a030f;
  }

  get x300a030f(): string | undefined {
    const element = this.dwResponse['300a030f'];
    return this.dwResponse['300a030f']?.Value[0];
  }

  // Number of Range Shifters
  get NumberOfRangeShifters(): number | undefined {
    return this.x300a0312;
  }

  get x300a0312(): number | undefined {
    const element = this.dwResponse['300a0312'];
    return this.dwResponse['300a0312']?.Value[0];
  }

  // Range Shifter Sequence
  get RangeShifterSequence(): Array<Dataset> | undefined {
    return this.x300a0314;
  }

  get x300a0314(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0314'];
    return this.dwResponse['300a0314']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Range Shifter Number
  get RangeShifterNumber(): number | undefined {
    return this.x300a0316;
  }

  get x300a0316(): number | undefined {
    const element = this.dwResponse['300a0316'];
    return this.dwResponse['300a0316']?.Value[0];
  }

  // Range Shifter ID
  get RangeShifterID(): string | undefined {
    return this.x300a0318;
  }

  get x300a0318(): string | undefined {
    const element = this.dwResponse['300a0318'];
    return this.dwResponse['300a0318']?.Value[0];
  }

  // Range Shifter Type
  get RangeShifterType(): string | undefined {
    return this.x300a0320;
  }

  get x300a0320(): string | undefined {
    const element = this.dwResponse['300a0320'];
    return this.dwResponse['300a0320']?.Value[0];
  }

  // Range Shifter Description
  get RangeShifterDescription(): string | undefined {
    return this.x300a0322;
  }

  get x300a0322(): string | undefined {
    const element = this.dwResponse['300a0322'];
    return this.dwResponse['300a0322']?.Value[0];
  }

  // Number of Lateral Spreading Devices
  get NumberOfLateralSpreadingDevices(): number | undefined {
    return this.x300a0330;
  }

  get x300a0330(): number | undefined {
    const element = this.dwResponse['300a0330'];
    return this.dwResponse['300a0330']?.Value[0];
  }

  // Lateral Spreading Device Sequence
  get LateralSpreadingDeviceSequence(): Array<Dataset> | undefined {
    return this.x300a0332;
  }

  get x300a0332(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0332'];
    return this.dwResponse['300a0332']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Lateral Spreading Device Number
  get LateralSpreadingDeviceNumber(): number | undefined {
    return this.x300a0334;
  }

  get x300a0334(): number | undefined {
    const element = this.dwResponse['300a0334'];
    return this.dwResponse['300a0334']?.Value[0];
  }

  // Lateral Spreading Device ID
  get LateralSpreadingDeviceID(): string | undefined {
    return this.x300a0336;
  }

  get x300a0336(): string | undefined {
    const element = this.dwResponse['300a0336'];
    return this.dwResponse['300a0336']?.Value[0];
  }

  // Lateral Spreading Device Type
  get LateralSpreadingDeviceType(): string | undefined {
    return this.x300a0338;
  }

  get x300a0338(): string | undefined {
    const element = this.dwResponse['300a0338'];
    return this.dwResponse['300a0338']?.Value[0];
  }

  // Lateral Spreading Device Description
  get LateralSpreadingDeviceDescription(): string | undefined {
    return this.x300a033a;
  }

  get x300a033a(): string | undefined {
    const element = this.dwResponse['300a033a'];
    return this.dwResponse['300a033a']?.Value[0];
  }

  // Lateral Spreading Device Water Equivalent Thickness
  get LateralSpreadingDeviceWaterEquivalentThickness(): number | undefined {
    return this.x300a033c;
  }

  get x300a033c(): number | undefined {
    const element = this.dwResponse['300a033c'];
    return this.dwResponse['300a033c']?.Value[0];
  }

  // Number of Range Modulators
  get NumberOfRangeModulators(): number | undefined {
    return this.x300a0340;
  }

  get x300a0340(): number | undefined {
    const element = this.dwResponse['300a0340'];
    return this.dwResponse['300a0340']?.Value[0];
  }

  // Range Modulator Sequence
  get RangeModulatorSequence(): Array<Dataset> | undefined {
    return this.x300a0342;
  }

  get x300a0342(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0342'];
    return this.dwResponse['300a0342']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Range Modulator Number
  get RangeModulatorNumber(): number | undefined {
    return this.x300a0344;
  }

  get x300a0344(): number | undefined {
    const element = this.dwResponse['300a0344'];
    return this.dwResponse['300a0344']?.Value[0];
  }

  // Range Modulator ID
  get RangeModulatorID(): string | undefined {
    return this.x300a0346;
  }

  get x300a0346(): string | undefined {
    const element = this.dwResponse['300a0346'];
    return this.dwResponse['300a0346']?.Value[0];
  }

  // Range Modulator Type
  get RangeModulatorType(): string | undefined {
    return this.x300a0348;
  }

  get x300a0348(): string | undefined {
    const element = this.dwResponse['300a0348'];
    return this.dwResponse['300a0348']?.Value[0];
  }

  // Range Modulator Description
  get RangeModulatorDescription(): string | undefined {
    return this.x300a034a;
  }

  get x300a034a(): string | undefined {
    const element = this.dwResponse['300a034a'];
    return this.dwResponse['300a034a']?.Value[0];
  }

  // Beam Current Modulation ID
  get BeamCurrentModulationID(): string | undefined {
    return this.x300a034c;
  }

  get x300a034c(): string | undefined {
    const element = this.dwResponse['300a034c'];
    return this.dwResponse['300a034c']?.Value[0];
  }

  // Patient Support Type
  get PatientSupportType(): string | undefined {
    return this.x300a0350;
  }

  get x300a0350(): string | undefined {
    const element = this.dwResponse['300a0350'];
    return this.dwResponse['300a0350']?.Value[0];
  }

  // Patient Support ID
  get PatientSupportID(): string | undefined {
    return this.x300a0352;
  }

  get x300a0352(): string | undefined {
    const element = this.dwResponse['300a0352'];
    return this.dwResponse['300a0352']?.Value[0];
  }

  // Patient Support Accessory Code
  get PatientSupportAccessoryCode(): string | undefined {
    return this.x300a0354;
  }

  get x300a0354(): string | undefined {
    const element = this.dwResponse['300a0354'];
    return this.dwResponse['300a0354']?.Value[0];
  }

  // Fixation Light Azimuthal Angle
  get FixationLightAzimuthalAngle(): number | undefined {
    return this.x300a0356;
  }

  get x300a0356(): number | undefined {
    const element = this.dwResponse['300a0356'];
    return this.dwResponse['300a0356']?.Value[0];
  }

  // Fixation Light Polar Angle
  get FixationLightPolarAngle(): number | undefined {
    return this.x300a0358;
  }

  get x300a0358(): number | undefined {
    const element = this.dwResponse['300a0358'];
    return this.dwResponse['300a0358']?.Value[0];
  }

  // Meterset Rate
  get MetersetRate(): number | undefined {
    return this.x300a035a;
  }

  get x300a035a(): number | undefined {
    const element = this.dwResponse['300a035a'];
    return this.dwResponse['300a035a']?.Value[0];
  }

  // Range Shifter Settings Sequence
  get RangeShifterSettingsSequence(): Array<Dataset> | undefined {
    return this.x300a0360;
  }

  get x300a0360(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0360'];
    return this.dwResponse['300a0360']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Range Shifter Setting
  get RangeShifterSetting(): string | undefined {
    return this.x300a0362;
  }

  get x300a0362(): string | undefined {
    const element = this.dwResponse['300a0362'];
    return this.dwResponse['300a0362']?.Value[0];
  }

  // Isocenter to Range Shifter Distance
  get IsocenterToRangeShifterDistance(): number | undefined {
    return this.x300a0364;
  }

  get x300a0364(): number | undefined {
    const element = this.dwResponse['300a0364'];
    return this.dwResponse['300a0364']?.Value[0];
  }

  // Range Shifter Water Equivalent Thickness
  get RangeShifterWaterEquivalentThickness(): number | undefined {
    return this.x300a0366;
  }

  get x300a0366(): number | undefined {
    const element = this.dwResponse['300a0366'];
    return this.dwResponse['300a0366']?.Value[0];
  }

  // Lateral Spreading Device Settings Sequence
  get LateralSpreadingDeviceSettingsSequence(): Array<Dataset> | undefined {
    return this.x300a0370;
  }

  get x300a0370(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0370'];
    return this.dwResponse['300a0370']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Lateral Spreading Device Setting
  get LateralSpreadingDeviceSetting(): string | undefined {
    return this.x300a0372;
  }

  get x300a0372(): string | undefined {
    const element = this.dwResponse['300a0372'];
    return this.dwResponse['300a0372']?.Value[0];
  }

  // Isocenter to Lateral Spreading Device Distance
  get IsocenterToLateralSpreadingDeviceDistance(): number | undefined {
    return this.x300a0374;
  }

  get x300a0374(): number | undefined {
    const element = this.dwResponse['300a0374'];
    return this.dwResponse['300a0374']?.Value[0];
  }

  // Range Modulator Settings Sequence
  get RangeModulatorSettingsSequence(): Array<Dataset> | undefined {
    return this.x300a0380;
  }

  get x300a0380(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0380'];
    return this.dwResponse['300a0380']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Range Modulator Gating Start Value
  get RangeModulatorGatingStartValue(): number | undefined {
    return this.x300a0382;
  }

  get x300a0382(): number | undefined {
    const element = this.dwResponse['300a0382'];
    return this.dwResponse['300a0382']?.Value[0];
  }

  // Range Modulator Gating Stop Value
  get RangeModulatorGatingStopValue(): number | undefined {
    return this.x300a0384;
  }

  get x300a0384(): number | undefined {
    const element = this.dwResponse['300a0384'];
    return this.dwResponse['300a0384']?.Value[0];
  }

  // Range Modulator Gating Start Water Equivalent Thickness
  get RangeModulatorGatingStartWaterEquivalentThickness(): number | undefined {
    return this.x300a0386;
  }

  get x300a0386(): number | undefined {
    const element = this.dwResponse['300a0386'];
    return this.dwResponse['300a0386']?.Value[0];
  }

  // Range Modulator Gating Stop Water Equivalent Thickness
  get RangeModulatorGatingStopWaterEquivalentThickness(): number | undefined {
    return this.x300a0388;
  }

  get x300a0388(): number | undefined {
    const element = this.dwResponse['300a0388'];
    return this.dwResponse['300a0388']?.Value[0];
  }

  // Isocenter to Range Modulator Distance
  get IsocenterToRangeModulatorDistance(): number | undefined {
    return this.x300a038a;
  }

  get x300a038a(): number | undefined {
    const element = this.dwResponse['300a038a'];
    return this.dwResponse['300a038a']?.Value[0];
  }

  // Scan Spot Tune ID
  get ScanSpotTuneID(): string | undefined {
    return this.x300a0390;
  }

  get x300a0390(): string | undefined {
    const element = this.dwResponse['300a0390'];
    return this.dwResponse['300a0390']?.Value[0];
  }

  // Number of Scan Spot Positions
  get NumberOfScanSpotPositions(): number | undefined {
    return this.x300a0392;
  }

  get x300a0392(): number | undefined {
    const element = this.dwResponse['300a0392'];
    return this.dwResponse['300a0392']?.Value[0];
  }

  // Scan Spot Position Map
  get ScanSpotPositionMap(): Array<number> | undefined {
    return this.x300a0394;
  }

  get x300a0394(): Array<number> | undefined {
    const element = this.dwResponse['300a0394'];
    return this.dwResponse['300a0394']?.Value;
  }

  // Scan Spot Meterset Weights
  get ScanSpotMetersetWeights(): Array<number> | undefined {
    return this.x300a0396;
  }

  get x300a0396(): Array<number> | undefined {
    const element = this.dwResponse['300a0396'];
    return this.dwResponse['300a0396']?.Value;
  }

  // Scanning Spot Size
  get ScanningSpotSize(): Array<number> | undefined {
    return this.x300a0398;
  }

  get x300a0398(): Array<number> | undefined {
    const element = this.dwResponse['300a0398'];
    return this.dwResponse['300a0398']?.Value;
  }

  // Number of Paintings
  get NumberOfPaintings(): number | undefined {
    return this.x300a039a;
  }

  get x300a039a(): number | undefined {
    const element = this.dwResponse['300a039a'];
    return this.dwResponse['300a039a']?.Value[0];
  }

  // Ion Tolerance Table Sequence
  get IonToleranceTableSequence(): Array<Dataset> | undefined {
    return this.x300a03a0;
  }

  get x300a03a0(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a03a0'];
    return this.dwResponse['300a03a0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ion Beam Sequence
  get IonBeamSequence(): Array<Dataset> | undefined {
    return this.x300a03a2;
  }

  get x300a03a2(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a03a2'];
    return this.dwResponse['300a03a2']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ion Beam Limiting Device Sequence
  get IonBeamLimitingDeviceSequence(): Array<Dataset> | undefined {
    return this.x300a03a4;
  }

  get x300a03a4(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a03a4'];
    return this.dwResponse['300a03a4']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ion Block Sequence
  get IonBlockSequence(): Array<Dataset> | undefined {
    return this.x300a03a6;
  }

  get x300a03a6(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a03a6'];
    return this.dwResponse['300a03a6']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ion Control Point Sequence
  get IonControlPointSequence(): Array<Dataset> | undefined {
    return this.x300a03a8;
  }

  get x300a03a8(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a03a8'];
    return this.dwResponse['300a03a8']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ion Wedge Sequence
  get IonWedgeSequence(): Array<Dataset> | undefined {
    return this.x300a03aa;
  }

  get x300a03aa(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a03aa'];
    return this.dwResponse['300a03aa']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Ion Wedge Position Sequence
  get IonWedgePositionSequence(): Array<Dataset> | undefined {
    return this.x300a03ac;
  }

  get x300a03ac(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a03ac'];
    return this.dwResponse['300a03ac']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Setup Image Sequence
  get ReferencedSetupImageSequence(): Array<Dataset> | undefined {
    return this.x300a0401;
  }

  get x300a0401(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0401'];
    return this.dwResponse['300a0401']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Motion Synchronization Sequence
  get MotionSynchronizationSequence(): Array<Dataset> | undefined {
    return this.x300a0410;
  }

  get x300a0410(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0410'];
    return this.dwResponse['300a0410']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Control Point Orientation
  get ControlPointOrientation(): Array<number> | undefined {
    return this.x300a0412;
  }

  get x300a0412(): Array<number> | undefined {
    const element = this.dwResponse['300a0412'];
    return this.dwResponse['300a0412']?.Value;
  }

  // General Accessory Sequence
  get GeneralAccessorySequence(): Array<Dataset> | undefined {
    return this.x300a0420;
  }

  get x300a0420(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0420'];
    return this.dwResponse['300a0420']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // General Accessory ID
  get GeneralAccessoryID(): string | undefined {
    return this.x300a0421;
  }

  get x300a0421(): string | undefined {
    const element = this.dwResponse['300a0421'];
    return this.dwResponse['300a0421']?.Value[0];
  }

  // General Accessory Type
  get GeneralAccessoryType(): string | undefined {
    return this.x300a0423;
  }

  get x300a0423(): string | undefined {
    const element = this.dwResponse['300a0423'];
    return this.dwResponse['300a0423']?.Value[0];
  }

  // General Accessory Number
  get GeneralAccessoryNumber(): number | undefined {
    return this.x300a0424;
  }

  get x300a0424(): number | undefined {
    const element = this.dwResponse['300a0424'];
    return this.dwResponse['300a0424']?.Value[0];
  }

  // Source to General Accessory Distance
  get SourceToGeneralAccessoryDistance(): number | undefined {
    return this.x300a0425;
  }

  get x300a0425(): number | undefined {
    const element = this.dwResponse['300a0425'];
    return this.dwResponse['300a0425']?.Value[0];
  }

  // Applicator Geometry Sequence
  get ApplicatorGeometrySequence(): Array<Dataset> | undefined {
    return this.x300a0431;
  }

  get x300a0431(): Array<Dataset> | undefined {
    const element = this.dwResponse['300a0431'];
    return this.dwResponse['300a0431']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Applicator Aperture Shape
  get ApplicatorApertureShape(): string | undefined {
    return this.x300a0432;
  }

  get x300a0432(): string | undefined {
    const element = this.dwResponse['300a0432'];
    return this.dwResponse['300a0432']?.Value[0];
  }

  // Applicator Opening
  get ApplicatorOpening(): number | undefined {
    return this.x300a0433;
  }

  get x300a0433(): number | undefined {
    const element = this.dwResponse['300a0433'];
    return this.dwResponse['300a0433']?.Value[0];
  }

  // Applicator Opening X
  get ApplicatorOpeningX(): number | undefined {
    return this.x300a0434;
  }

  get x300a0434(): number | undefined {
    const element = this.dwResponse['300a0434'];
    return this.dwResponse['300a0434']?.Value[0];
  }

  // Applicator Opening Y
  get ApplicatorOpeningY(): number | undefined {
    return this.x300a0435;
  }

  get x300a0435(): number | undefined {
    const element = this.dwResponse['300a0435'];
    return this.dwResponse['300a0435']?.Value[0];
  }

  // Source to Applicator Mounting Position Distance
  get SourceToApplicatorMountingPositionDistance(): number | undefined {
    return this.x300a0436;
  }

  get x300a0436(): number | undefined {
    const element = this.dwResponse['300a0436'];
    return this.dwResponse['300a0436']?.Value[0];
  }

  // Referenced RT Plan Sequence
  get ReferencedRTPlanSequence(): Array<Dataset> | undefined {
    return this.x300c0002;
  }

  get x300c0002(): Array<Dataset> | undefined {
    const element = this.dwResponse['300c0002'];
    return this.dwResponse['300c0002']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Beam Sequence
  get ReferencedBeamSequence(): Array<Dataset> | undefined {
    return this.x300c0004;
  }

  get x300c0004(): Array<Dataset> | undefined {
    const element = this.dwResponse['300c0004'];
    return this.dwResponse['300c0004']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Beam Number
  get ReferencedBeamNumber(): number | undefined {
    return this.x300c0006;
  }

  get x300c0006(): number | undefined {
    const element = this.dwResponse['300c0006'];
    return this.dwResponse['300c0006']?.Value[0];
  }

  // Referenced Reference Image Number
  get ReferencedReferenceImageNumber(): number | undefined {
    return this.x300c0007;
  }

  get x300c0007(): number | undefined {
    const element = this.dwResponse['300c0007'];
    return this.dwResponse['300c0007']?.Value[0];
  }

  // Start Cumulative Meterset Weight
  get StartCumulativeMetersetWeight(): number | undefined {
    return this.x300c0008;
  }

  get x300c0008(): number | undefined {
    const element = this.dwResponse['300c0008'];
    return this.dwResponse['300c0008']?.Value[0];
  }

  // End Cumulative Meterset Weight
  get EndCumulativeMetersetWeight(): number | undefined {
    return this.x300c0009;
  }

  get x300c0009(): number | undefined {
    const element = this.dwResponse['300c0009'];
    return this.dwResponse['300c0009']?.Value[0];
  }

  // Referenced Brachy Application Setup Sequence
  get ReferencedBrachyApplicationSetupSequence(): Array<Dataset> | undefined {
    return this.x300c000a;
  }

  get x300c000a(): Array<Dataset> | undefined {
    const element = this.dwResponse['300c000a'];
    return this.dwResponse['300c000a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Brachy Application Setup Number
  get ReferencedBrachyApplicationSetupNumber(): number | undefined {
    return this.x300c000c;
  }

  get x300c000c(): number | undefined {
    const element = this.dwResponse['300c000c'];
    return this.dwResponse['300c000c']?.Value[0];
  }

  // Referenced Source Number
  get ReferencedSourceNumber(): number | undefined {
    return this.x300c000e;
  }

  get x300c000e(): number | undefined {
    const element = this.dwResponse['300c000e'];
    return this.dwResponse['300c000e']?.Value[0];
  }

  // Referenced Fraction Group Sequence
  get ReferencedFractionGroupSequence(): Array<Dataset> | undefined {
    return this.x300c0020;
  }

  get x300c0020(): Array<Dataset> | undefined {
    const element = this.dwResponse['300c0020'];
    return this.dwResponse['300c0020']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Fraction Group Number
  get ReferencedFractionGroupNumber(): number | undefined {
    return this.x300c0022;
  }

  get x300c0022(): number | undefined {
    const element = this.dwResponse['300c0022'];
    return this.dwResponse['300c0022']?.Value[0];
  }

  // Referenced Verification Image Sequence
  get ReferencedVerificationImageSequence(): Array<Dataset> | undefined {
    return this.x300c0040;
  }

  get x300c0040(): Array<Dataset> | undefined {
    const element = this.dwResponse['300c0040'];
    return this.dwResponse['300c0040']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Reference Image Sequence
  get ReferencedReferenceImageSequence(): Array<Dataset> | undefined {
    return this.x300c0042;
  }

  get x300c0042(): Array<Dataset> | undefined {
    const element = this.dwResponse['300c0042'];
    return this.dwResponse['300c0042']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Dose Reference Sequence
  get ReferencedDoseReferenceSequence(): Array<Dataset> | undefined {
    return this.x300c0050;
  }

  get x300c0050(): Array<Dataset> | undefined {
    const element = this.dwResponse['300c0050'];
    return this.dwResponse['300c0050']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Dose Reference Number
  get ReferencedDoseReferenceNumber(): number | undefined {
    return this.x300c0051;
  }

  get x300c0051(): number | undefined {
    const element = this.dwResponse['300c0051'];
    return this.dwResponse['300c0051']?.Value[0];
  }

  // Brachy Referenced Dose Reference Sequence
  get BrachyReferencedDoseReferenceSequence(): Array<Dataset> | undefined {
    return this.x300c0055;
  }

  get x300c0055(): Array<Dataset> | undefined {
    const element = this.dwResponse['300c0055'];
    return this.dwResponse['300c0055']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Structure Set Sequence
  get ReferencedStructureSetSequence(): Array<Dataset> | undefined {
    return this.x300c0060;
  }

  get x300c0060(): Array<Dataset> | undefined {
    const element = this.dwResponse['300c0060'];
    return this.dwResponse['300c0060']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Patient Setup Number
  get ReferencedPatientSetupNumber(): number | undefined {
    return this.x300c006a;
  }

  get x300c006a(): number | undefined {
    const element = this.dwResponse['300c006a'];
    return this.dwResponse['300c006a']?.Value[0];
  }

  // Referenced Dose Sequence
  get ReferencedDoseSequence(): Array<Dataset> | undefined {
    return this.x300c0080;
  }

  get x300c0080(): Array<Dataset> | undefined {
    const element = this.dwResponse['300c0080'];
    return this.dwResponse['300c0080']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Tolerance Table Number
  get ReferencedToleranceTableNumber(): number | undefined {
    return this.x300c00a0;
  }

  get x300c00a0(): number | undefined {
    const element = this.dwResponse['300c00a0'];
    return this.dwResponse['300c00a0']?.Value[0];
  }

  // Referenced Bolus Sequence
  get ReferencedBolusSequence(): Array<Dataset> | undefined {
    return this.x300c00b0;
  }

  get x300c00b0(): Array<Dataset> | undefined {
    const element = this.dwResponse['300c00b0'];
    return this.dwResponse['300c00b0']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Wedge Number
  get ReferencedWedgeNumber(): number | undefined {
    return this.x300c00c0;
  }

  get x300c00c0(): number | undefined {
    const element = this.dwResponse['300c00c0'];
    return this.dwResponse['300c00c0']?.Value[0];
  }

  // Referenced Compensator Number
  get ReferencedCompensatorNumber(): number | undefined {
    return this.x300c00d0;
  }

  get x300c00d0(): number | undefined {
    const element = this.dwResponse['300c00d0'];
    return this.dwResponse['300c00d0']?.Value[0];
  }

  // Referenced Block Number
  get ReferencedBlockNumber(): number | undefined {
    return this.x300c00e0;
  }

  get x300c00e0(): number | undefined {
    const element = this.dwResponse['300c00e0'];
    return this.dwResponse['300c00e0']?.Value[0];
  }

  // Referenced Control Point Index
  get ReferencedControlPointIndex(): number | undefined {
    return this.x300c00f0;
  }

  get x300c00f0(): number | undefined {
    const element = this.dwResponse['300c00f0'];
    return this.dwResponse['300c00f0']?.Value[0];
  }

  // Referenced Control Point Sequence
  get ReferencedControlPointSequence(): Array<Dataset> | undefined {
    return this.x300c00f2;
  }

  get x300c00f2(): Array<Dataset> | undefined {
    const element = this.dwResponse['300c00f2'];
    return this.dwResponse['300c00f2']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced Start Control Point Index
  get ReferencedStartControlPointIndex(): number | undefined {
    return this.x300c00f4;
  }

  get x300c00f4(): number | undefined {
    const element = this.dwResponse['300c00f4'];
    return this.dwResponse['300c00f4']?.Value[0];
  }

  // Referenced Stop Control Point Index
  get ReferencedStopControlPointIndex(): number | undefined {
    return this.x300c00f6;
  }

  get x300c00f6(): number | undefined {
    const element = this.dwResponse['300c00f6'];
    return this.dwResponse['300c00f6']?.Value[0];
  }

  // Referenced Range Shifter Number
  get ReferencedRangeShifterNumber(): number | undefined {
    return this.x300c0100;
  }

  get x300c0100(): number | undefined {
    const element = this.dwResponse['300c0100'];
    return this.dwResponse['300c0100']?.Value[0];
  }

  // Referenced Lateral Spreading Device Number
  get ReferencedLateralSpreadingDeviceNumber(): number | undefined {
    return this.x300c0102;
  }

  get x300c0102(): number | undefined {
    const element = this.dwResponse['300c0102'];
    return this.dwResponse['300c0102']?.Value[0];
  }

  // Referenced Range Modulator Number
  get ReferencedRangeModulatorNumber(): number | undefined {
    return this.x300c0104;
  }

  get x300c0104(): number | undefined {
    const element = this.dwResponse['300c0104'];
    return this.dwResponse['300c0104']?.Value[0];
  }

  // Approval Status
  get ApprovalStatus(): string | undefined {
    return this.x300e0002;
  }

  get x300e0002(): string | undefined {
    const element = this.dwResponse['300e0002'];
    return this.dwResponse['300e0002']?.Value[0];
  }

  // Review Date
  get ReviewDate(): Date | undefined {
    return this.x300e0004;
  }

  get x300e0004(): Date | undefined {
    const element = this.dwResponse['300e0004'];
    return this.dwResponse['300e0004']?.Value[0];
  }

  // Review Time
  get ReviewTime(): string | undefined {
    return this.x300e0005;
  }

  get x300e0005(): string | undefined {
    const element = this.dwResponse['300e0005'];
    return this.dwResponse['300e0005']?.Value[0];
  }

  // Reviewer Name
  get ReviewerName(): any | undefined {
    return this.x300e0008;
  }

  get x300e0008(): any | undefined {
    const element = this.dwResponse['300e0008'];
    return this.dwResponse['300e0008']?.Value[0];
  }

  // Results ID
  get ResultsID(): string | undefined {
    return this.x40080040;
  }

  get x40080040(): string | undefined {
    const element = this.dwResponse['40080040'];
    return this.dwResponse['40080040']?.Value[0];
  }

  // Results ID Issuer
  get ResultsIDIssuer(): string | undefined {
    return this.x40080042;
  }

  get x40080042(): string | undefined {
    const element = this.dwResponse['40080042'];
    return this.dwResponse['40080042']?.Value[0];
  }

  // Referenced Interpretation Sequence
  get ReferencedInterpretationSequence(): Array<Dataset> | undefined {
    return this.x40080050;
  }

  get x40080050(): Array<Dataset> | undefined {
    const element = this.dwResponse['40080050'];
    return this.dwResponse['40080050']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Report Production Status (Trial)
  get ReportProductionStatusTrial(): string | undefined {
    return this.x400800ff;
  }

  get x400800ff(): string | undefined {
    const element = this.dwResponse['400800ff'];
    return this.dwResponse['400800ff']?.Value[0];
  }

  // Interpretation Recorded Date
  get InterpretationRecordedDate(): Date | undefined {
    return this.x40080100;
  }

  get x40080100(): Date | undefined {
    const element = this.dwResponse['40080100'];
    return this.dwResponse['40080100']?.Value[0];
  }

  // Interpretation Recorded Time
  get InterpretationRecordedTime(): string | undefined {
    return this.x40080101;
  }

  get x40080101(): string | undefined {
    const element = this.dwResponse['40080101'];
    return this.dwResponse['40080101']?.Value[0];
  }

  // Interpretation Recorder
  get InterpretationRecorder(): any | undefined {
    return this.x40080102;
  }

  get x40080102(): any | undefined {
    const element = this.dwResponse['40080102'];
    return this.dwResponse['40080102']?.Value[0];
  }

  // Reference to Recorded Sound
  get ReferenceToRecordedSound(): string | undefined {
    return this.x40080103;
  }

  get x40080103(): string | undefined {
    const element = this.dwResponse['40080103'];
    return this.dwResponse['40080103']?.Value[0];
  }

  // Interpretation Transcription Date
  get InterpretationTranscriptionDate(): Date | undefined {
    return this.x40080108;
  }

  get x40080108(): Date | undefined {
    const element = this.dwResponse['40080108'];
    return this.dwResponse['40080108']?.Value[0];
  }

  // Interpretation Transcription Time
  get InterpretationTranscriptionTime(): string | undefined {
    return this.x40080109;
  }

  get x40080109(): string | undefined {
    const element = this.dwResponse['40080109'];
    return this.dwResponse['40080109']?.Value[0];
  }

  // Interpretation Transcriber
  get InterpretationTranscriber(): any | undefined {
    return this.x4008010a;
  }

  get x4008010a(): any | undefined {
    const element = this.dwResponse['4008010a'];
    return this.dwResponse['4008010a']?.Value[0];
  }

  // Interpretation Author
  get InterpretationAuthor(): any | undefined {
    return this.x4008010c;
  }

  get x4008010c(): any | undefined {
    const element = this.dwResponse['4008010c'];
    return this.dwResponse['4008010c']?.Value[0];
  }

  // Interpretation Approver Sequence
  get InterpretationApproverSequence(): Array<Dataset> | undefined {
    return this.x40080111;
  }

  get x40080111(): Array<Dataset> | undefined {
    const element = this.dwResponse['40080111'];
    return this.dwResponse['40080111']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Interpretation Approval Date
  get InterpretationApprovalDate(): Date | undefined {
    return this.x40080112;
  }

  get x40080112(): Date | undefined {
    const element = this.dwResponse['40080112'];
    return this.dwResponse['40080112']?.Value[0];
  }

  // Interpretation Approval Time
  get InterpretationApprovalTime(): string | undefined {
    return this.x40080113;
  }

  get x40080113(): string | undefined {
    const element = this.dwResponse['40080113'];
    return this.dwResponse['40080113']?.Value[0];
  }

  // Physician Approving Interpretation
  get PhysicianApprovingInterpretation(): any | undefined {
    return this.x40080114;
  }

  get x40080114(): any | undefined {
    const element = this.dwResponse['40080114'];
    return this.dwResponse['40080114']?.Value[0];
  }

  // Interpretation Diagnosis Code Sequence
  get InterpretationDiagnosisCodeSequence(): Array<Dataset> | undefined {
    return this.x40080117;
  }

  get x40080117(): Array<Dataset> | undefined {
    const element = this.dwResponse['40080117'];
    return this.dwResponse['40080117']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Results Distribution List Sequence
  get ResultsDistributionListSequence(): Array<Dataset> | undefined {
    return this.x40080118;
  }

  get x40080118(): Array<Dataset> | undefined {
    const element = this.dwResponse['40080118'];
    return this.dwResponse['40080118']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Distribution Name
  get DistributionName(): any | undefined {
    return this.x40080119;
  }

  get x40080119(): any | undefined {
    const element = this.dwResponse['40080119'];
    return this.dwResponse['40080119']?.Value[0];
  }

  // Distribution Address
  get DistributionAddress(): string | undefined {
    return this.x4008011a;
  }

  get x4008011a(): string | undefined {
    const element = this.dwResponse['4008011a'];
    return this.dwResponse['4008011a']?.Value[0];
  }

  // Interpretation ID
  get InterpretationID(): string | undefined {
    return this.x40080200;
  }

  get x40080200(): string | undefined {
    const element = this.dwResponse['40080200'];
    return this.dwResponse['40080200']?.Value[0];
  }

  // Interpretation ID Issuer
  get InterpretationIDIssuer(): string | undefined {
    return this.x40080202;
  }

  get x40080202(): string | undefined {
    const element = this.dwResponse['40080202'];
    return this.dwResponse['40080202']?.Value[0];
  }

  // Interpretation Type ID
  get InterpretationTypeID(): string | undefined {
    return this.x40080210;
  }

  get x40080210(): string | undefined {
    const element = this.dwResponse['40080210'];
    return this.dwResponse['40080210']?.Value[0];
  }

  // Interpretation Status ID
  get InterpretationStatusID(): string | undefined {
    return this.x40080212;
  }

  get x40080212(): string | undefined {
    const element = this.dwResponse['40080212'];
    return this.dwResponse['40080212']?.Value[0];
  }

  // Low Energy Detectors
  get LowEnergyDetectors(): string | undefined {
    return this.x40100001;
  }

  get x40100001(): string | undefined {
    const element = this.dwResponse['40100001'];
    return this.dwResponse['40100001']?.Value[0];
  }

  // High Energy Detectors
  get HighEnergyDetectors(): string | undefined {
    return this.x40100002;
  }

  get x40100002(): string | undefined {
    const element = this.dwResponse['40100002'];
    return this.dwResponse['40100002']?.Value[0];
  }

  // Detector Geometry Sequence
  get DetectorGeometrySequence(): Array<Dataset> | undefined {
    return this.x40100004;
  }

  get x40100004(): Array<Dataset> | undefined {
    const element = this.dwResponse['40100004'];
    return this.dwResponse['40100004']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Threat ROI Voxel Sequence
  get ThreatROIVoxelSequence(): Array<Dataset> | undefined {
    return this.x40101001;
  }

  get x40101001(): Array<Dataset> | undefined {
    const element = this.dwResponse['40101001'];
    return this.dwResponse['40101001']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Threat ROI Base
  get ThreatROIBase(): Array<number> | undefined {
    return this.x40101004;
  }

  get x40101004(): Array<number> | undefined {
    const element = this.dwResponse['40101004'];
    return this.dwResponse['40101004']?.Value;
  }

  // Threat ROI Extents
  get ThreatROIExtents(): Array<number> | undefined {
    return this.x40101005;
  }

  get x40101005(): Array<number> | undefined {
    const element = this.dwResponse['40101005'];
    return this.dwResponse['40101005']?.Value;
  }

  // Route Segment ID
  get RouteSegmentID(): string | undefined {
    return this.x40101007;
  }

  get x40101007(): string | undefined {
    const element = this.dwResponse['40101007'];
    return this.dwResponse['40101007']?.Value[0];
  }

  // Gantry Type
  get GantryType(): string | undefined {
    return this.x40101008;
  }

  get x40101008(): string | undefined {
    const element = this.dwResponse['40101008'];
    return this.dwResponse['40101008']?.Value[0];
  }

  // OOI Owner Type
  get OOIOwnerType(): string | undefined {
    return this.x40101009;
  }

  get x40101009(): string | undefined {
    const element = this.dwResponse['40101009'];
    return this.dwResponse['40101009']?.Value[0];
  }

  // Route Segment Sequence
  get RouteSegmentSequence(): Array<Dataset> | undefined {
    return this.x4010100a;
  }

  get x4010100a(): Array<Dataset> | undefined {
    const element = this.dwResponse['4010100a'];
    return this.dwResponse['4010100a']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Potential Threat Object ID
  get PotentialThreatObjectID(): number | undefined {
    return this.x40101010;
  }

  get x40101010(): number | undefined {
    const element = this.dwResponse['40101010'];
    return this.dwResponse['40101010']?.Value[0];
  }

  // Threat Sequence
  get ThreatSequence(): Array<Dataset> | undefined {
    return this.x40101011;
  }

  get x40101011(): Array<Dataset> | undefined {
    const element = this.dwResponse['40101011'];
    return this.dwResponse['40101011']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Threat Category
  get ThreatCategory(): string | undefined {
    return this.x40101012;
  }

  get x40101012(): string | undefined {
    const element = this.dwResponse['40101012'];
    return this.dwResponse['40101012']?.Value[0];
  }

  // ATD Ability Assessment
  get ATDAbilityAssessment(): string | undefined {
    return this.x40101014;
  }

  get x40101014(): string | undefined {
    const element = this.dwResponse['40101014'];
    return this.dwResponse['40101014']?.Value[0];
  }

  // ATD Assessment Flag
  get ATDAssessmentFlag(): string | undefined {
    return this.x40101015;
  }

  get x40101015(): string | undefined {
    const element = this.dwResponse['40101015'];
    return this.dwResponse['40101015']?.Value[0];
  }

  // ATD Assessment Probability
  get ATDAssessmentProbability(): number | undefined {
    return this.x40101016;
  }

  get x40101016(): number | undefined {
    const element = this.dwResponse['40101016'];
    return this.dwResponse['40101016']?.Value[0];
  }

  // Mass
  get Mass(): number | undefined {
    return this.x40101017;
  }

  get x40101017(): number | undefined {
    const element = this.dwResponse['40101017'];
    return this.dwResponse['40101017']?.Value[0];
  }

  // Density
  get Density(): number | undefined {
    return this.x40101018;
  }

  get x40101018(): number | undefined {
    const element = this.dwResponse['40101018'];
    return this.dwResponse['40101018']?.Value[0];
  }

  // Z Effective
  get ZEffective(): number | undefined {
    return this.x40101019;
  }

  get x40101019(): number | undefined {
    const element = this.dwResponse['40101019'];
    return this.dwResponse['40101019']?.Value[0];
  }

  // Boarding Pass ID
  get BoardingPassID(): string | undefined {
    return this.x4010101a;
  }

  get x4010101a(): string | undefined {
    const element = this.dwResponse['4010101a'];
    return this.dwResponse['4010101a']?.Value[0];
  }

  // Center of Mass
  get CenterOfMass(): Array<number> | undefined {
    return this.x4010101b;
  }

  get x4010101b(): Array<number> | undefined {
    const element = this.dwResponse['4010101b'];
    return this.dwResponse['4010101b']?.Value;
  }

  // Center of PTO
  get CenterOfPTO(): Array<number> | undefined {
    return this.x4010101c;
  }

  get x4010101c(): Array<number> | undefined {
    const element = this.dwResponse['4010101c'];
    return this.dwResponse['4010101c']?.Value;
  }

  // Bounding Polygon
  get BoundingPolygon(): Array<number> | undefined {
    return this.x4010101d;
  }

  get x4010101d(): Array<number> | undefined {
    const element = this.dwResponse['4010101d'];
    return this.dwResponse['4010101d']?.Value;
  }

  // Route Segment Start Location ID
  get RouteSegmentStartLocationID(): string | undefined {
    return this.x4010101e;
  }

  get x4010101e(): string | undefined {
    const element = this.dwResponse['4010101e'];
    return this.dwResponse['4010101e']?.Value[0];
  }

  // Route Segment End Location ID
  get RouteSegmentEndLocationID(): string | undefined {
    return this.x4010101f;
  }

  get x4010101f(): string | undefined {
    const element = this.dwResponse['4010101f'];
    return this.dwResponse['4010101f']?.Value[0];
  }

  // Route Segment Location ID Type
  get RouteSegmentLocationIDType(): string | undefined {
    return this.x40101020;
  }

  get x40101020(): string | undefined {
    const element = this.dwResponse['40101020'];
    return this.dwResponse['40101020']?.Value[0];
  }

  // Abort Reason
  get AbortReason(): Array<string> | undefined {
    return this.x40101021;
  }

  get x40101021(): Array<string> | undefined {
    const element = this.dwResponse['40101021'];
    return this.dwResponse['40101021']?.Value;
  }

  // Volume of PTO
  get VolumeOfPTO(): number | undefined {
    return this.x40101023;
  }

  get x40101023(): number | undefined {
    const element = this.dwResponse['40101023'];
    return this.dwResponse['40101023']?.Value[0];
  }

  // Abort Flag
  get AbortFlag(): string | undefined {
    return this.x40101024;
  }

  get x40101024(): string | undefined {
    const element = this.dwResponse['40101024'];
    return this.dwResponse['40101024']?.Value[0];
  }

  // Route Segment Start Time
  get RouteSegmentStartTime(): string | undefined {
    return this.x40101025;
  }

  get x40101025(): string | undefined {
    const element = this.dwResponse['40101025'];
    return this.dwResponse['40101025']?.Value[0];
  }

  // Route Segment End Time
  get RouteSegmentEndTime(): string | undefined {
    return this.x40101026;
  }

  get x40101026(): string | undefined {
    const element = this.dwResponse['40101026'];
    return this.dwResponse['40101026']?.Value[0];
  }

  // TDR Type
  get TDRType(): string | undefined {
    return this.x40101027;
  }

  get x40101027(): string | undefined {
    const element = this.dwResponse['40101027'];
    return this.dwResponse['40101027']?.Value[0];
  }

  // International Route Segment
  get InternationalRouteSegment(): string | undefined {
    return this.x40101028;
  }

  get x40101028(): string | undefined {
    const element = this.dwResponse['40101028'];
    return this.dwResponse['40101028']?.Value[0];
  }

  // Threat Detection Algorithm and Version
  get ThreatDetectionAlgorithmandVersion(): Array<string> | undefined {
    return this.x40101029;
  }

  get x40101029(): Array<string> | undefined {
    const element = this.dwResponse['40101029'];
    return this.dwResponse['40101029']?.Value;
  }

  // Assigned Location
  get AssignedLocation(): string | undefined {
    return this.x4010102a;
  }

  get x4010102a(): string | undefined {
    const element = this.dwResponse['4010102a'];
    return this.dwResponse['4010102a']?.Value[0];
  }

  // Alarm Decision Time
  get AlarmDecisionTime(): string | undefined {
    return this.x4010102b;
  }

  get x4010102b(): string | undefined {
    const element = this.dwResponse['4010102b'];
    return this.dwResponse['4010102b']?.Value[0];
  }

  // Alarm Decision
  get AlarmDecision(): string | undefined {
    return this.x40101031;
  }

  get x40101031(): string | undefined {
    const element = this.dwResponse['40101031'];
    return this.dwResponse['40101031']?.Value[0];
  }

  // Number of Total Objects
  get NumberOfTotalObjects(): number | undefined {
    return this.x40101033;
  }

  get x40101033(): number | undefined {
    const element = this.dwResponse['40101033'];
    return this.dwResponse['40101033']?.Value[0];
  }

  // Number of Alarm Objects
  get NumberOfAlarmObjects(): number | undefined {
    return this.x40101034;
  }

  get x40101034(): number | undefined {
    const element = this.dwResponse['40101034'];
    return this.dwResponse['40101034']?.Value[0];
  }

  // PTO Representation Sequence
  get PTORepresentationSequence(): Array<Dataset> | undefined {
    return this.x40101037;
  }

  get x40101037(): Array<Dataset> | undefined {
    const element = this.dwResponse['40101037'];
    return this.dwResponse['40101037']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // ATD Assessment Sequence
  get ATDAssessmentSequence(): Array<Dataset> | undefined {
    return this.x40101038;
  }

  get x40101038(): Array<Dataset> | undefined {
    const element = this.dwResponse['40101038'];
    return this.dwResponse['40101038']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // TIP Type
  get TIPType(): string | undefined {
    return this.x40101039;
  }

  get x40101039(): string | undefined {
    const element = this.dwResponse['40101039'];
    return this.dwResponse['40101039']?.Value[0];
  }

  // DICOS Version
  get DICOSVersion(): string | undefined {
    return this.x4010103a;
  }

  get x4010103a(): string | undefined {
    const element = this.dwResponse['4010103a'];
    return this.dwResponse['4010103a']?.Value[0];
  }

  // OOI Owner Creation Time
  get OOIOwnerCreationTime(): string | undefined {
    return this.x40101041;
  }

  get x40101041(): string | undefined {
    const element = this.dwResponse['40101041'];
    return this.dwResponse['40101041']?.Value[0];
  }

  // OOI Type
  get OOIType(): string | undefined {
    return this.x40101042;
  }

  get x40101042(): string | undefined {
    const element = this.dwResponse['40101042'];
    return this.dwResponse['40101042']?.Value[0];
  }

  // OOI Size
  get OOISize(): Array<number> | undefined {
    return this.x40101043;
  }

  get x40101043(): Array<number> | undefined {
    const element = this.dwResponse['40101043'];
    return this.dwResponse['40101043']?.Value;
  }

  // Acquisition Status
  get AcquisitionStatus(): string | undefined {
    return this.x40101044;
  }

  get x40101044(): string | undefined {
    const element = this.dwResponse['40101044'];
    return this.dwResponse['40101044']?.Value[0];
  }

  // Basis Materials Code Sequence
  get BasisMaterialsCodeSequence(): Array<Dataset> | undefined {
    return this.x40101045;
  }

  get x40101045(): Array<Dataset> | undefined {
    const element = this.dwResponse['40101045'];
    return this.dwResponse['40101045']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Phantom Type
  get PhantomType(): string | undefined {
    return this.x40101046;
  }

  get x40101046(): string | undefined {
    const element = this.dwResponse['40101046'];
    return this.dwResponse['40101046']?.Value[0];
  }

  // OOI Owner Sequence
  get OOIOwnerSequence(): Array<Dataset> | undefined {
    return this.x40101047;
  }

  get x40101047(): Array<Dataset> | undefined {
    const element = this.dwResponse['40101047'];
    return this.dwResponse['40101047']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Scan Type
  get ScanType(): string | undefined {
    return this.x40101048;
  }

  get x40101048(): string | undefined {
    const element = this.dwResponse['40101048'];
    return this.dwResponse['40101048']?.Value[0];
  }

  // Itinerary ID
  get ItineraryID(): string | undefined {
    return this.x40101051;
  }

  get x40101051(): string | undefined {
    const element = this.dwResponse['40101051'];
    return this.dwResponse['40101051']?.Value[0];
  }

  // Itinerary ID Type
  get ItineraryIDType(): string | undefined {
    return this.x40101052;
  }

  get x40101052(): string | undefined {
    const element = this.dwResponse['40101052'];
    return this.dwResponse['40101052']?.Value[0];
  }

  // Itinerary ID Assigning Authority
  get ItineraryIDAssigningAuthority(): string | undefined {
    return this.x40101053;
  }

  get x40101053(): string | undefined {
    const element = this.dwResponse['40101053'];
    return this.dwResponse['40101053']?.Value[0];
  }

  // Route ID
  get RouteID(): string | undefined {
    return this.x40101054;
  }

  get x40101054(): string | undefined {
    const element = this.dwResponse['40101054'];
    return this.dwResponse['40101054']?.Value[0];
  }

  // Route ID Assigning Authority
  get RouteIDAssigningAuthority(): string | undefined {
    return this.x40101055;
  }

  get x40101055(): string | undefined {
    const element = this.dwResponse['40101055'];
    return this.dwResponse['40101055']?.Value[0];
  }

  // Inbound Arrival Type
  get InboundArrivalType(): string | undefined {
    return this.x40101056;
  }

  get x40101056(): string | undefined {
    const element = this.dwResponse['40101056'];
    return this.dwResponse['40101056']?.Value[0];
  }

  // Carrier ID
  get CarrierID(): string | undefined {
    return this.x40101058;
  }

  get x40101058(): string | undefined {
    const element = this.dwResponse['40101058'];
    return this.dwResponse['40101058']?.Value[0];
  }

  // Carrier ID Assigning Authority
  get CarrierIDAssigningAuthority(): string | undefined {
    return this.x40101059;
  }

  get x40101059(): string | undefined {
    const element = this.dwResponse['40101059'];
    return this.dwResponse['40101059']?.Value[0];
  }

  // Source Orientation
  get SourceOrientation(): Array<number> | undefined {
    return this.x40101060;
  }

  get x40101060(): Array<number> | undefined {
    const element = this.dwResponse['40101060'];
    return this.dwResponse['40101060']?.Value;
  }

  // Source Position
  get SourcePosition(): Array<number> | undefined {
    return this.x40101061;
  }

  get x40101061(): Array<number> | undefined {
    const element = this.dwResponse['40101061'];
    return this.dwResponse['40101061']?.Value;
  }

  // Belt Height
  get BeltHeight(): number | undefined {
    return this.x40101062;
  }

  get x40101062(): number | undefined {
    const element = this.dwResponse['40101062'];
    return this.dwResponse['40101062']?.Value[0];
  }

  // Algorithm Routing Code Sequence
  get AlgorithmRoutingCodeSequence(): Array<Dataset> | undefined {
    return this.x40101064;
  }

  get x40101064(): Array<Dataset> | undefined {
    const element = this.dwResponse['40101064'];
    return this.dwResponse['40101064']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Transport Classification
  get TransportClassification(): string | undefined {
    return this.x40101067;
  }

  get x40101067(): string | undefined {
    const element = this.dwResponse['40101067'];
    return this.dwResponse['40101067']?.Value[0];
  }

  // Total Processing Time
  get TotalProcessingTime(): number | undefined {
    return this.x40101069;
  }

  get x40101069(): number | undefined {
    const element = this.dwResponse['40101069'];
    return this.dwResponse['40101069']?.Value[0];
  }

  // Additional Screening Performed
  get AdditionalScreeningPerformed(): string | undefined {
    return this.x4010106d;
  }

  get x4010106d(): string | undefined {
    const element = this.dwResponse['4010106d'];
    return this.dwResponse['4010106d']?.Value[0];
  }

  // Additional Inspection Selection Criteria
  get AdditionalInspectionSelectionCriteria(): string | undefined {
    return this.x4010106e;
  }

  get x4010106e(): string | undefined {
    const element = this.dwResponse['4010106e'];
    return this.dwResponse['4010106e']?.Value[0];
  }

  // Additional Inspection Method Sequence
  get AdditionalInspectionMethodSequence(): Array<Dataset> | undefined {
    return this.x4010106f;
  }

  get x4010106f(): Array<Dataset> | undefined {
    const element = this.dwResponse['4010106f'];
    return this.dwResponse['4010106f']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // AIT Device Type
  get AITDeviceType(): string | undefined {
    return this.x40101070;
  }

  get x40101070(): string | undefined {
    const element = this.dwResponse['40101070'];
    return this.dwResponse['40101070']?.Value[0];
  }

  // QR Measurements Sequence
  get QRMeasurementsSequence(): Array<Dataset> | undefined {
    return this.x40101071;
  }

  get x40101071(): Array<Dataset> | undefined {
    const element = this.dwResponse['40101071'];
    return this.dwResponse['40101071']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Target Material Sequence
  get TargetMaterialSequence(): Array<Dataset> | undefined {
    return this.x40101072;
  }

  get x40101072(): Array<Dataset> | undefined {
    const element = this.dwResponse['40101072'];
    return this.dwResponse['40101072']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // SNR Threshold
  get SNRThreshold(): number | undefined {
    return this.x40101073;
  }

  get x40101073(): number | undefined {
    const element = this.dwResponse['40101073'];
    return this.dwResponse['40101073']?.Value[0];
  }

  // Image Scale Representation
  get ImageScaleRepresentation(): number | undefined {
    return this.x40101075;
  }

  get x40101075(): number | undefined {
    const element = this.dwResponse['40101075'];
    return this.dwResponse['40101075']?.Value[0];
  }

  // Referenced PTO Sequence
  get ReferencedPTOSequence(): Array<Dataset> | undefined {
    return this.x40101076;
  }

  get x40101076(): Array<Dataset> | undefined {
    const element = this.dwResponse['40101076'];
    return this.dwResponse['40101076']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Referenced TDR Instance Sequence
  get ReferencedTDRInstanceSequence(): Array<Dataset> | undefined {
    return this.x40101077;
  }

  get x40101077(): Array<Dataset> | undefined {
    const element = this.dwResponse['40101077'];
    return this.dwResponse['40101077']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Anomaly Locator Indicator Sequence
  get AnomalyLocatorIndicatorSequence(): Array<Dataset> | undefined {
    return this.x40101079;
  }

  get x40101079(): Array<Dataset> | undefined {
    const element = this.dwResponse['40101079'];
    return this.dwResponse['40101079']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Anomaly Locator Indicator
  get AnomalyLocatorIndicator(): Array<number> | undefined {
    return this.x4010107a;
  }

  get x4010107a(): Array<number> | undefined {
    const element = this.dwResponse['4010107a'];
    return this.dwResponse['4010107a']?.Value;
  }

  // PTO Region Sequence
  get PTORegionSequence(): Array<Dataset> | undefined {
    return this.x4010107b;
  }

  get x4010107b(): Array<Dataset> | undefined {
    const element = this.dwResponse['4010107b'];
    return this.dwResponse['4010107b']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Inspection Selection Criteria
  get InspectionSelectionCriteria(): string | undefined {
    return this.x4010107c;
  }

  get x4010107c(): string | undefined {
    const element = this.dwResponse['4010107c'];
    return this.dwResponse['4010107c']?.Value[0];
  }

  // Secondary Inspection Method Sequence
  get SecondaryInspectionMethodSequence(): Array<Dataset> | undefined {
    return this.x4010107d;
  }

  get x4010107d(): Array<Dataset> | undefined {
    const element = this.dwResponse['4010107d'];
    return this.dwResponse['4010107d']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // PRCS to RCS Orientation
  get PRCSToRCSOrientation(): Array<number> | undefined {
    return this.x4010107e;
  }

  get x4010107e(): Array<number> | undefined {
    const element = this.dwResponse['4010107e'];
    return this.dwResponse['4010107e']?.Value;
  }

  // MAC Parameters Sequence
  get MACParametersSequence(): Array<Dataset> | undefined {
    return this.x4ffe0001;
  }

  get x4ffe0001(): Array<Dataset> | undefined {
    const element = this.dwResponse['4ffe0001'];
    return this.dwResponse['4ffe0001']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Curve Dimensions
  get CurveDimensions(): number | undefined {
    return this.x50xx0005;
  }

  get x50xx0005(): number | undefined {
    const element = this.dwResponse['50xx0005'];
    return this.dwResponse['50xx0005']?.Value[0];
  }

  // Number of Points
  get NumberOfPoints(): number | undefined {
    return this.x50xx0010;
  }

  get x50xx0010(): number | undefined {
    const element = this.dwResponse['50xx0010'];
    return this.dwResponse['50xx0010']?.Value[0];
  }

  // Type of Data
  get TypeOfData(): string | undefined {
    return this.x50xx0020;
  }

  get x50xx0020(): string | undefined {
    const element = this.dwResponse['50xx0020'];
    return this.dwResponse['50xx0020']?.Value[0];
  }

  // Curve Description
  get CurveDescription(): string | undefined {
    return this.x50xx0022;
  }

  get x50xx0022(): string | undefined {
    const element = this.dwResponse['50xx0022'];
    return this.dwResponse['50xx0022']?.Value[0];
  }

  // Axis Units
  get AxisUnits(): Array<string> | undefined {
    return this.x50xx0030;
  }

  get x50xx0030(): Array<string> | undefined {
    const element = this.dwResponse['50xx0030'];
    return this.dwResponse['50xx0030']?.Value;
  }

  // Axis Labels
  get AxisLabels(): Array<string> | undefined {
    return this.x50xx0040;
  }

  get x50xx0040(): Array<string> | undefined {
    const element = this.dwResponse['50xx0040'];
    return this.dwResponse['50xx0040']?.Value;
  }

  // Data Value Representation
  get DataValueRepresentation(): number | undefined {
    return this.x50xx0103;
  }

  get x50xx0103(): number | undefined {
    const element = this.dwResponse['50xx0103'];
    return this.dwResponse['50xx0103']?.Value[0];
  }

  // Minimum Coordinate Value
  get MinimumCoordinateValue(): Array<number> | undefined {
    return this.x50xx0104;
  }

  get x50xx0104(): Array<number> | undefined {
    const element = this.dwResponse['50xx0104'];
    return this.dwResponse['50xx0104']?.Value;
  }

  // Maximum Coordinate Value
  get MaximumCoordinateValue(): Array<number> | undefined {
    return this.x50xx0105;
  }

  get x50xx0105(): Array<number> | undefined {
    const element = this.dwResponse['50xx0105'];
    return this.dwResponse['50xx0105']?.Value;
  }

  // Curve Range
  get CurveRange(): Array<string> | undefined {
    return this.x50xx0106;
  }

  get x50xx0106(): Array<string> | undefined {
    const element = this.dwResponse['50xx0106'];
    return this.dwResponse['50xx0106']?.Value;
  }

  // Curve Data Descriptor
  get CurveDataDescriptor(): Array<number> | undefined {
    return this.x50xx0110;
  }

  get x50xx0110(): Array<number> | undefined {
    const element = this.dwResponse['50xx0110'];
    return this.dwResponse['50xx0110']?.Value;
  }

  // Coordinate Start Value
  get CoordinateStartValue(): Array<number> | undefined {
    return this.x50xx0112;
  }

  get x50xx0112(): Array<number> | undefined {
    const element = this.dwResponse['50xx0112'];
    return this.dwResponse['50xx0112']?.Value;
  }

  // Coordinate Step Value
  get CoordinateStepValue(): Array<number> | undefined {
    return this.x50xx0114;
  }

  get x50xx0114(): Array<number> | undefined {
    const element = this.dwResponse['50xx0114'];
    return this.dwResponse['50xx0114']?.Value;
  }

  // Curve Activation Layer
  get CurveActivationLayer(): string | undefined {
    return this.x50xx1001;
  }

  get x50xx1001(): string | undefined {
    const element = this.dwResponse['50xx1001'];
    return this.dwResponse['50xx1001']?.Value[0];
  }

  // Audio Type
  get AudioType(): number | undefined {
    return this.x50xx2000;
  }

  get x50xx2000(): number | undefined {
    const element = this.dwResponse['50xx2000'];
    return this.dwResponse['50xx2000']?.Value[0];
  }

  // Audio Sample Format
  get AudioSampleFormat(): number | undefined {
    return this.x50xx2002;
  }

  get x50xx2002(): number | undefined {
    const element = this.dwResponse['50xx2002'];
    return this.dwResponse['50xx2002']?.Value[0];
  }

  // Number of Channels
  get NumberOfChannels(): number | undefined {
    return this.x50xx2004;
  }

  get x50xx2004(): number | undefined {
    const element = this.dwResponse['50xx2004'];
    return this.dwResponse['50xx2004']?.Value[0];
  }

  // Number of Samples
  get NumberOfSamples(): number | undefined {
    return this.x50xx2006;
  }

  get x50xx2006(): number | undefined {
    const element = this.dwResponse['50xx2006'];
    return this.dwResponse['50xx2006']?.Value[0];
  }

  // Sample Rate
  get SampleRate(): number | undefined {
    return this.x50xx2008;
  }

  get x50xx2008(): number | undefined {
    const element = this.dwResponse['50xx2008'];
    return this.dwResponse['50xx2008']?.Value[0];
  }

  // Total Time
  get TotalTime(): number | undefined {
    return this.x50xx200a;
  }

  get x50xx200a(): number | undefined {
    const element = this.dwResponse['50xx200a'];
    return this.dwResponse['50xx200a']?.Value[0];
  }

  // Curve Label
  get CurveLabel(): string | undefined {
    return this.x50xx2500;
  }

  get x50xx2500(): string | undefined {
    const element = this.dwResponse['50xx2500'];
    return this.dwResponse['50xx2500']?.Value[0];
  }

  // Curve Referenced Overlay Sequence
  get CurveReferencedOverlaySequence(): Array<Dataset> | undefined {
    return this.x50xx2600;
  }

  get x50xx2600(): Array<Dataset> | undefined {
    const element = this.dwResponse['50xx2600'];
    return this.dwResponse['50xx2600']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Curve Referenced Overlay Group
  get CurveReferencedOverlayGroup(): number | undefined {
    return this.x50xx2610;
  }

  get x50xx2610(): number | undefined {
    const element = this.dwResponse['50xx2610'];
    return this.dwResponse['50xx2610']?.Value[0];
  }

  // Shared Functional Groups Sequence
  get SharedFunctionalGroupsSequence(): Array<Dataset> | undefined {
    return this.x52009229;
  }

  get x52009229(): Array<Dataset> | undefined {
    const element = this.dwResponse['52009229'];
    return this.dwResponse['52009229']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Per-frame Functional Groups Sequence
  get PerFrameFunctionalGroupsSequence(): Array<Dataset> | undefined {
    return this.x52009230;
  }

  get x52009230(): Array<Dataset> | undefined {
    const element = this.dwResponse['52009230'];
    return this.dwResponse['52009230']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Waveform Sequence
  get WaveformSequence(): Array<Dataset> | undefined {
    return this.x54000100;
  }

  get x54000100(): Array<Dataset> | undefined {
    const element = this.dwResponse['54000100'];
    return this.dwResponse['54000100']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  // Waveform Bits Allocated
  get WaveformBitsAllocated(): number | undefined {
    return this.x54001004;
  }

  get x54001004(): number | undefined {
    const element = this.dwResponse['54001004'];
    return this.dwResponse['54001004']?.Value[0];
  }

  // Waveform Sample Interpretation
  get WaveformSampleInterpretation(): string | undefined {
    return this.x54001006;
  }

  get x54001006(): string | undefined {
    const element = this.dwResponse['54001006'];
    return this.dwResponse['54001006']?.Value[0];
  }

  // Overlay Rows
  get OverlayRows(): number | undefined {
    return this.x60xx0010;
  }

  get x60xx0010(): number | undefined {
    const element = this.dwResponse['60xx0010'];
    return this.dwResponse['60xx0010']?.Value[0];
  }

  // Overlay Columns
  get OverlayColumns(): number | undefined {
    return this.x60xx0011;
  }

  get x60xx0011(): number | undefined {
    const element = this.dwResponse['60xx0011'];
    return this.dwResponse['60xx0011']?.Value[0];
  }

  // Overlay Planes
  get OverlayPlanes(): number | undefined {
    return this.x60xx0012;
  }

  get x60xx0012(): number | undefined {
    const element = this.dwResponse['60xx0012'];
    return this.dwResponse['60xx0012']?.Value[0];
  }

  // Number of Frames in Overlay
  get NumberOfFramesInOverlay(): number | undefined {
    return this.x60xx0015;
  }

  get x60xx0015(): number | undefined {
    const element = this.dwResponse['60xx0015'];
    return this.dwResponse['60xx0015']?.Value[0];
  }

  // Overlay Description
  get OverlayDescription(): string | undefined {
    return this.x60xx0022;
  }

  get x60xx0022(): string | undefined {
    const element = this.dwResponse['60xx0022'];
    return this.dwResponse['60xx0022']?.Value[0];
  }

  // Overlay Type
  get OverlayType(): string | undefined {
    return this.x60xx0040;
  }

  get x60xx0040(): string | undefined {
    const element = this.dwResponse['60xx0040'];
    return this.dwResponse['60xx0040']?.Value[0];
  }

  // Overlay Subtype
  get OverlaySubtype(): string | undefined {
    return this.x60xx0045;
  }

  get x60xx0045(): string | undefined {
    const element = this.dwResponse['60xx0045'];
    return this.dwResponse['60xx0045']?.Value[0];
  }

  // Overlay Origin
  get OverlayOrigin(): Array<Uint8Array> | undefined {
    return this.x60xx0050;
  }

  get x60xx0050(): Array<Uint8Array> | undefined {
    const element = this.dwResponse['60xx0050'];
    return this.dwResponse['60xx0050']?.Value;
  }

  // Image Frame Origin
  get ImageFrameOrigin(): number | undefined {
    return this.x60xx0051;
  }

  get x60xx0051(): number | undefined {
    const element = this.dwResponse['60xx0051'];
    return this.dwResponse['60xx0051']?.Value[0];
  }

  // Overlay Plane Origin
  get OverlayPlaneOrigin(): number | undefined {
    return this.x60xx0052;
  }

  get x60xx0052(): number | undefined {
    const element = this.dwResponse['60xx0052'];
    return this.dwResponse['60xx0052']?.Value[0];
  }

  // Overlay Compression Code
  get OverlayCompressionCode(): string | undefined {
    return this.x60xx0060;
  }

  get x60xx0060(): string | undefined {
    const element = this.dwResponse['60xx0060'];
    return this.dwResponse['60xx0060']?.Value[0];
  }

  // Overlay Compression Originator
  get OverlayCompressionOriginator(): string | undefined {
    return this.x60xx0061;
  }

  get x60xx0061(): string | undefined {
    const element = this.dwResponse['60xx0061'];
    return this.dwResponse['60xx0061']?.Value[0];
  }

  // Overlay Compression Label
  get OverlayCompressionLabel(): string | undefined {
    return this.x60xx0062;
  }

  get x60xx0062(): string | undefined {
    const element = this.dwResponse['60xx0062'];
    return this.dwResponse['60xx0062']?.Value[0];
  }

  // Overlay Compression Description
  get OverlayCompressionDescription(): string | undefined {
    return this.x60xx0063;
  }

  get x60xx0063(): string | undefined {
    const element = this.dwResponse['60xx0063'];
    return this.dwResponse['60xx0063']?.Value[0];
  }

  // Overlay Compression Step Pointers
  get OverlayCompressionStepPointers(): Array<Uint16Array> | undefined {
    return this.x60xx0066;
  }

  get x60xx0066(): Array<Uint16Array> | undefined {
    const element = this.dwResponse['60xx0066'];
    return this.dwResponse['60xx0066']?.Value;
  }

  // Overlay Repeat Interval
  get OverlayRepeatInterval(): number | undefined {
    return this.x60xx0068;
  }

  get x60xx0068(): number | undefined {
    const element = this.dwResponse['60xx0068'];
    return this.dwResponse['60xx0068']?.Value[0];
  }

  // Overlay Bits Grouped
  get OverlayBitsGrouped(): number | undefined {
    return this.x60xx0069;
  }

  get x60xx0069(): number | undefined {
    const element = this.dwResponse['60xx0069'];
    return this.dwResponse['60xx0069']?.Value[0];
  }

  // Overlay Bits Allocated
  get OverlayBitsAllocated(): number | undefined {
    return this.x60xx0100;
  }

  get x60xx0100(): number | undefined {
    const element = this.dwResponse['60xx0100'];
    return this.dwResponse['60xx0100']?.Value[0];
  }

  // Overlay Bit Position
  get OverlayBitPosition(): number | undefined {
    return this.x60xx0102;
  }

  get x60xx0102(): number | undefined {
    const element = this.dwResponse['60xx0102'];
    return this.dwResponse['60xx0102']?.Value[0];
  }

  // Overlay Format
  get OverlayFormat(): string | undefined {
    return this.x60xx0110;
  }

  get x60xx0110(): string | undefined {
    const element = this.dwResponse['60xx0110'];
    return this.dwResponse['60xx0110']?.Value[0];
  }

  // Overlay Location
  get OverlayLocation(): number | undefined {
    return this.x60xx0200;
  }

  get x60xx0200(): number | undefined {
    const element = this.dwResponse['60xx0200'];
    return this.dwResponse['60xx0200']?.Value[0];
  }

  // Overlay Code Label
  get OverlayCodeLabel(): Array<string> | undefined {
    return this.x60xx0800;
  }

  get x60xx0800(): Array<string> | undefined {
    const element = this.dwResponse['60xx0800'];
    return this.dwResponse['60xx0800']?.Value;
  }

  // Overlay Number of Tables
  get OverlayNumberOfTables(): number | undefined {
    return this.x60xx0802;
  }

  get x60xx0802(): number | undefined {
    const element = this.dwResponse['60xx0802'];
    return this.dwResponse['60xx0802']?.Value[0];
  }

  // Overlay Code Table Location
  get OverlayCodeTableLocation(): Array<Uint16Array> | undefined {
    return this.x60xx0803;
  }

  get x60xx0803(): Array<Uint16Array> | undefined {
    const element = this.dwResponse['60xx0803'];
    return this.dwResponse['60xx0803']?.Value;
  }

  // Overlay Bits For Code Word
  get OverlayBitsForCodeWord(): number | undefined {
    return this.x60xx0804;
  }

  get x60xx0804(): number | undefined {
    const element = this.dwResponse['60xx0804'];
    return this.dwResponse['60xx0804']?.Value[0];
  }

  // Overlay Activation Layer
  get OverlayActivationLayer(): string | undefined {
    return this.x60xx1001;
  }

  get x60xx1001(): string | undefined {
    const element = this.dwResponse['60xx1001'];
    return this.dwResponse['60xx1001']?.Value[0];
  }

  // Overlay Descriptor - Gray
  get OverlayDescriptorGray(): number | undefined {
    return this.x60xx1100;
  }

  get x60xx1100(): number | undefined {
    const element = this.dwResponse['60xx1100'];
    return this.dwResponse['60xx1100']?.Value[0];
  }

  // Overlay Descriptor - Red
  get OverlayDescriptorRed(): number | undefined {
    return this.x60xx1101;
  }

  get x60xx1101(): number | undefined {
    const element = this.dwResponse['60xx1101'];
    return this.dwResponse['60xx1101']?.Value[0];
  }

  // Overlay Descriptor - Green
  get OverlayDescriptorGreen(): number | undefined {
    return this.x60xx1102;
  }

  get x60xx1102(): number | undefined {
    const element = this.dwResponse['60xx1102'];
    return this.dwResponse['60xx1102']?.Value[0];
  }

  // Overlay Descriptor - Blue
  get OverlayDescriptorBlue(): number | undefined {
    return this.x60xx1103;
  }

  get x60xx1103(): number | undefined {
    const element = this.dwResponse['60xx1103'];
    return this.dwResponse['60xx1103']?.Value[0];
  }

  // Overlays - Gray
  get OverlaysGray(): Array<number> | undefined {
    return this.x60xx1200;
  }

  get x60xx1200(): Array<number> | undefined {
    const element = this.dwResponse['60xx1200'];
    return this.dwResponse['60xx1200']?.Value;
  }

  // Overlays - Red
  get OverlaysRed(): Array<number> | undefined {
    return this.x60xx1201;
  }

  get x60xx1201(): Array<number> | undefined {
    const element = this.dwResponse['60xx1201'];
    return this.dwResponse['60xx1201']?.Value;
  }

  // Overlays - Green
  get OverlaysGreen(): Array<number> | undefined {
    return this.x60xx1202;
  }

  get x60xx1202(): Array<number> | undefined {
    const element = this.dwResponse['60xx1202'];
    return this.dwResponse['60xx1202']?.Value;
  }

  // Overlays - Blue
  get OverlaysBlue(): Array<number> | undefined {
    return this.x60xx1203;
  }

  get x60xx1203(): Array<number> | undefined {
    const element = this.dwResponse['60xx1203'];
    return this.dwResponse['60xx1203']?.Value;
  }

  // ROI Area
  get ROIArea(): number | undefined {
    return this.x60xx1301;
  }

  get x60xx1301(): number | undefined {
    const element = this.dwResponse['60xx1301'];
    return this.dwResponse['60xx1301']?.Value[0];
  }

  // ROI Mean
  get ROIMean(): number | undefined {
    return this.x60xx1302;
  }

  get x60xx1302(): number | undefined {
    const element = this.dwResponse['60xx1302'];
    return this.dwResponse['60xx1302']?.Value[0];
  }

  // ROI Standard Deviation
  get ROIStandardDeviation(): number | undefined {
    return this.x60xx1303;
  }

  get x60xx1303(): number | undefined {
    const element = this.dwResponse['60xx1303'];
    return this.dwResponse['60xx1303']?.Value[0];
  }

  // Overlay Label
  get OverlayLabel(): string | undefined {
    return this.x60xx1500;
  }

  get x60xx1500(): string | undefined {
    const element = this.dwResponse['60xx1500'];
    return this.dwResponse['60xx1500']?.Value[0];
  }

  // Variable Next Data Group
  get VariableNextDataGroup(): number | undefined {
    return this.x7fxx0011;
  }

  get x7fxx0011(): number | undefined {
    const element = this.dwResponse['7fxx0011'];
    return this.dwResponse['7fxx0011']?.Value[0];
  }

  // Digital Signatures Sequence
  get DigitalSignaturesSequence(): Array<Dataset> | undefined {
    return this.xfffafffa;
  }

  get xfffafffa(): Array<Dataset> | undefined {
    const element = this.dwResponse['fffafffa'];
    return this.dwResponse['fffafffa']?.Value.map(v => new DICOMWebDataset(v, this.requester));
    
  }


  // Bulkdata ------------------------------------------------------------------

  // File Meta Information Version
  get FileMetaInformationVersion(): Uint8Array | string | undefined {
    return this.x00020001;
  }

  get x00020001(): Uint8Array | string | undefined {
    const element = this.dwResponse['00020001'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getFileMetaInformationVersion(): Promise<Uint8Array> {
    const element = this.dwResponse['00020001'];
    if (typeof element !== 'string') {
      return this.x00020001 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Private Information
  get PrivateInformation(): Uint8Array | string | undefined {
    return this.x00020102;
  }

  get x00020102(): Uint8Array | string | undefined {
    const element = this.dwResponse['00020102'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getPrivateInformation(): Promise<Uint8Array> {
    const element = this.dwResponse['00020102'];
    if (typeof element !== 'string') {
      return this.x00020102 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Institution Address
  get InstitutionAddress(): string | string | undefined {
    return this.x00080081;
  }

  get x00080081(): string | string | undefined {
    const element = this.dwResponse['00080081'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getInstitutionAddress(): Promise<string> {
    const element = this.dwResponse['00080081'];
    if (typeof element !== 'string') {
      return this.x00080081 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Referring Physician's Address
  get ReferringPhysicianAddress(): string | string | undefined {
    return this.x00080092;
  }

  get x00080092(): string | string | undefined {
    const element = this.dwResponse['00080092'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getReferringPhysicianAddress(): Promise<string> {
    const element = this.dwResponse['00080092'];
    if (typeof element !== 'string') {
      return this.x00080092 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Extended Code Meaning
  get ExtendedCodeMeaning(): string | string | undefined {
    return this.x00080108;
  }

  get x00080108(): string | string | undefined {
    const element = this.dwResponse['00080108'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getExtendedCodeMeaning(): Promise<string> {
    const element = this.dwResponse['00080108'];
    if (typeof element !== 'string') {
      return this.x00080108 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Coding Scheme External ID
  get CodingSchemeExternalID(): string | string | undefined {
    return this.x00080114;
  }

  get x00080114(): string | string | undefined {
    const element = this.dwResponse['00080114'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCodingSchemeExternalID(): Promise<string> {
    const element = this.dwResponse['00080114'];
    if (typeof element !== 'string') {
      return this.x00080114 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Coding Scheme Name
  get CodingSchemeName(): string | string | undefined {
    return this.x00080115;
  }

  get x00080115(): string | string | undefined {
    const element = this.dwResponse['00080115'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCodingSchemeName(): Promise<string> {
    const element = this.dwResponse['00080115'];
    if (typeof element !== 'string') {
      return this.x00080115 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Coding Scheme Responsible Organization
  get CodingSchemeResponsibleOrganization(): string | string | undefined {
    return this.x00080116;
  }

  get x00080116(): string | string | undefined {
    const element = this.dwResponse['00080116'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCodingSchemeResponsibleOrganization(): Promise<string> {
    const element = this.dwResponse['00080116'];
    if (typeof element !== 'string') {
      return this.x00080116 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Retrieve URL
  get RetrieveURL(): string | string | undefined {
    return this.x00081190;
  }

  get x00081190(): string | string | undefined {
    const element = this.dwResponse['00081190'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getRetrieveURL(): Promise<string> {
    const element = this.dwResponse['00081190'];
    if (typeof element !== 'string') {
      return this.x00081190 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Derivation Description
  get DerivationDescription(): string | string | undefined {
    return this.x00082111;
  }

  get x00082111(): string | string | undefined {
    const element = this.dwResponse['00082111'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getDerivationDescription(): Promise<string> {
    const element = this.dwResponse['00082111'];
    if (typeof element !== 'string') {
      return this.x00082111 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Anatomic Perspective Description (Trial)
  get AnatomicPerspectiveDescriptionTrial(): string | string | undefined {
    return this.x00082256;
  }

  get x00082256(): string | string | undefined {
    const element = this.dwResponse['00082256'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getAnatomicPerspectiveDescriptionTrial(): Promise<string> {
    const element = this.dwResponse['00082256'];
    if (typeof element !== 'string') {
      return this.x00082256 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Anatomic Location Of Examining Instrument Description (Trial)
  get AnatomicLocationOfExaminingInstrumentDescriptionTrial(): string | string | undefined {
    return this.x00082258;
  }

  get x00082258(): string | string | undefined {
    const element = this.dwResponse['00082258'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getAnatomicLocationOfExaminingInstrumentDescriptionTrial(): Promise<string> {
    const element = this.dwResponse['00082258'];
    if (typeof element !== 'string') {
      return this.x00082258 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Identifying Comments
  get IdentifyingComments(): string | string | undefined {
    return this.x00084000;
  }

  get x00084000(): string | string | undefined {
    const element = this.dwResponse['00084000'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getIdentifyingComments(): Promise<string> {
    const element = this.dwResponse['00084000'];
    if (typeof element !== 'string') {
      return this.x00084000 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Additional Patient History
  get AdditionalPatientHistory(): string | string | undefined {
    return this.x001021b0;
  }

  get x001021b0(): string | string | undefined {
    const element = this.dwResponse['001021b0'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getAdditionalPatientHistory(): Promise<string> {
    const element = this.dwResponse['001021b0'];
    if (typeof element !== 'string') {
      return this.x001021b0 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Patient Comments
  get PatientComments(): string | string | undefined {
    return this.x00104000;
  }

  get x00104000(): string | string | undefined {
    const element = this.dwResponse['00104000'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getPatientComments(): Promise<string> {
    const element = this.dwResponse['00104000'];
    if (typeof element !== 'string') {
      return this.x00104000 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Clinical Trial Time Point Description
  get ClinicalTrialTimePointDescription(): string | string | undefined {
    return this.x00120051;
  }

  get x00120051(): string | string | undefined {
    const element = this.dwResponse['00120051'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getClinicalTrialTimePointDescription(): Promise<string> {
    const element = this.dwResponse['00120051'];
    if (typeof element !== 'string') {
      return this.x00120051 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // CAD File Format
  get CADFileFormat(): Array<string> | string | undefined {
    return this.x00140023;
  }

  get x00140023(): Array<string> | string | undefined {
    const element = this.dwResponse['00140023'];
    return typeof element === 'string' ? element : element.Value;
  }

  async getCADFileFormat(): Promise<Array<string>> {
    const element = this.dwResponse['00140023'];
    if (typeof element !== 'string') {
      return this.x00140023 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Component Reference System
  get ComponentReferenceSystem(): Array<string> | string | undefined {
    return this.x00140024;
  }

  get x00140024(): Array<string> | string | undefined {
    const element = this.dwResponse['00140024'];
    return typeof element === 'string' ? element : element.Value;
  }

  async getComponentReferenceSystem(): Promise<Array<string>> {
    const element = this.dwResponse['00140024'];
    if (typeof element !== 'string') {
      return this.x00140024 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Component Manufacturing Procedure
  get ComponentManufacturingProcedure(): Array<string> | string | undefined {
    return this.x00140025;
  }

  get x00140025(): Array<string> | string | undefined {
    const element = this.dwResponse['00140025'];
    return typeof element === 'string' ? element : element.Value;
  }

  async getComponentManufacturingProcedure(): Promise<Array<string>> {
    const element = this.dwResponse['00140025'];
    if (typeof element !== 'string') {
      return this.x00140025 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Component Manufacturer
  get ComponentManufacturer(): Array<string> | string | undefined {
    return this.x00140028;
  }

  get x00140028(): Array<string> | string | undefined {
    const element = this.dwResponse['00140028'];
    return typeof element === 'string' ? element : element.Value;
  }

  async getComponentManufacturer(): Promise<Array<string>> {
    const element = this.dwResponse['00140028'];
    if (typeof element !== 'string') {
      return this.x00140028 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Material Grade
  get MaterialGrade(): Array<string> | string | undefined {
    return this.x00140042;
  }

  get x00140042(): Array<string> | string | undefined {
    const element = this.dwResponse['00140042'];
    return typeof element === 'string' ? element : element.Value;
  }

  async getMaterialGrade(): Promise<Array<string>> {
    const element = this.dwResponse['00140042'];
    if (typeof element !== 'string') {
      return this.x00140042 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Material Properties Description
  get MaterialPropertiesDescription(): Array<string> | string | undefined {
    return this.x00140044;
  }

  get x00140044(): Array<string> | string | undefined {
    const element = this.dwResponse['00140044'];
    return typeof element === 'string' ? element : element.Value;
  }

  async getMaterialPropertiesDescription(): Promise<Array<string>> {
    const element = this.dwResponse['00140044'];
    if (typeof element !== 'string') {
      return this.x00140044 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Material Properties File Format (Retired)
  get MaterialPropertiesFileFormatRetired(): Array<string> | string | undefined {
    return this.x00140045;
  }

  get x00140045(): Array<string> | string | undefined {
    const element = this.dwResponse['00140045'];
    return typeof element === 'string' ? element : element.Value;
  }

  async getMaterialPropertiesFileFormatRetired(): Promise<Array<string>> {
    const element = this.dwResponse['00140045'];
    if (typeof element !== 'string') {
      return this.x00140045 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Material Notes
  get MaterialNotes(): string | string | undefined {
    return this.x00140046;
  }

  get x00140046(): string | string | undefined {
    const element = this.dwResponse['00140046'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getMaterialNotes(): Promise<string> {
    const element = this.dwResponse['00140046'];
    if (typeof element !== 'string') {
      return this.x00140046 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Actual Environmental Conditions
  get ActualEnvironmentalConditions(): string | string | undefined {
    return this.x00141010;
  }

  get x00141010(): string | string | undefined {
    const element = this.dwResponse['00141010'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getActualEnvironmentalConditions(): Promise<string> {
    const element = this.dwResponse['00141010'];
    if (typeof element !== 'string') {
      return this.x00141010 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Environmental Conditions
  get EnvironmentalConditions(): string | string | undefined {
    return this.x00141040;
  }

  get x00141040(): string | string | undefined {
    const element = this.dwResponse['00141040'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getEnvironmentalConditions(): Promise<string> {
    const element = this.dwResponse['00141040'];
    if (typeof element !== 'string') {
      return this.x00141040 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Indication Description
  get IndicationDescription(): string | string | undefined {
    return this.x00142018;
  }

  get x00142018(): string | string | undefined {
    const element = this.dwResponse['00142018'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getIndicationDescription(): Promise<string> {
    const element = this.dwResponse['00142018'];
    if (typeof element !== 'string') {
      return this.x00142018 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Coordinate System Axis Description
  get CoordinateSystemAxisDescription(): string | string | undefined {
    return this.x00142206;
  }

  get x00142206(): string | string | undefined {
    const element = this.dwResponse['00142206'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCoordinateSystemAxisDescription(): Promise<string> {
    const element = this.dwResponse['00142206'];
    if (typeof element !== 'string') {
      return this.x00142206 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Coordinate System Axis Values
  get CoordinateSystemAxisValues(): Uint8Array | string | undefined {
    return this.x00142210;
  }

  get x00142210(): Uint8Array | string | undefined {
    const element = this.dwResponse['00142210'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCoordinateSystemAxisValues(): Promise<Uint8Array> {
    const element = this.dwResponse['00142210'];
    if (typeof element !== 'string') {
      return this.x00142210 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Transform Description
  get TransformDescription(): string | string | undefined {
    return this.x00142222;
  }

  get x00142222(): string | string | undefined {
    const element = this.dwResponse['00142222'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getTransformDescription(): Promise<string> {
    const element = this.dwResponse['00142222'];
    if (typeof element !== 'string') {
      return this.x00142222 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Sensor Name
  get SensorName(): string | string | undefined {
    return this.x00143022;
  }

  get x00143022(): string | string | undefined {
    const element = this.dwResponse['00143022'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getSensorName(): Promise<string> {
    const element = this.dwResponse['00143022'];
    if (typeof element !== 'string') {
      return this.x00143022 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Dark Current Counts
  get DarkCurrentCounts(): Uint8Array | string | undefined {
    return this.x00143050;
  }

  get x00143050(): Uint8Array | string | undefined {
    const element = this.dwResponse['00143050'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getDarkCurrentCounts(): Promise<Uint8Array> {
    const element = this.dwResponse['00143050'];
    if (typeof element !== 'string') {
      return this.x00143050 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Air Counts
  get AirCounts(): Uint8Array | string | undefined {
    return this.x00143070;
  }

  get x00143070(): Uint8Array | string | undefined {
    const element = this.dwResponse['00143070'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getAirCounts(): Promise<Uint8Array> {
    const element = this.dwResponse['00143070'];
    if (typeof element !== 'string') {
      return this.x00143070 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Bad Pixel Image
  get BadPixelImage(): Uint8Array | string | undefined {
    return this.x00143080;
  }

  get x00143080(): Uint8Array | string | undefined {
    const element = this.dwResponse['00143080'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getBadPixelImage(): Promise<Uint8Array> {
    const element = this.dwResponse['00143080'];
    if (typeof element !== 'string') {
      return this.x00143080 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Calibration Notes
  get CalibrationNotes(): string | string | undefined {
    return this.x00143099;
  }

  get x00143099(): string | string | undefined {
    const element = this.dwResponse['00143099'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCalibrationNotes(): Promise<string> {
    const element = this.dwResponse['00143099'];
    if (typeof element !== 'string') {
      return this.x00143099 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Pulser Notes
  get PulserNotes(): string | string | undefined {
    return this.x00144006;
  }

  get x00144006(): string | string | undefined {
    const element = this.dwResponse['00144006'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getPulserNotes(): Promise<string> {
    const element = this.dwResponse['00144006'];
    if (typeof element !== 'string') {
      return this.x00144006 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Receiver Notes
  get ReceiverNotes(): string | string | undefined {
    return this.x0014400c;
  }

  get x0014400c(): string | string | undefined {
    const element = this.dwResponse['0014400c'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getReceiverNotes(): Promise<string> {
    const element = this.dwResponse['0014400c'];
    if (typeof element !== 'string') {
      return this.x0014400c as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Pre-Amplifier Notes
  get PreAmplifierNotes(): string | string | undefined {
    return this.x0014400f;
  }

  get x0014400f(): string | string | undefined {
    const element = this.dwResponse['0014400f'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getPreAmplifierNotes(): Promise<string> {
    const element = this.dwResponse['0014400f'];
    if (typeof element !== 'string') {
      return this.x0014400f as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Coupling Technique
  get CouplingTechnique(): string | string | undefined {
    return this.x00144054;
  }

  get x00144054(): string | string | undefined {
    const element = this.dwResponse['00144054'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCouplingTechnique(): Promise<string> {
    const element = this.dwResponse['00144054'];
    if (typeof element !== 'string') {
      return this.x00144054 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Coupling Medium
  get CouplingMedium(): string | string | undefined {
    return this.x00144056;
  }

  get x00144056(): string | string | undefined {
    const element = this.dwResponse['00144056'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCouplingMedium(): Promise<string> {
    const element = this.dwResponse['00144056'];
    if (typeof element !== 'string') {
      return this.x00144056 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Delay Law Identifier
  get DelayLawIdentifier(): string | string | undefined {
    return this.x0014405c;
  }

  get x0014405c(): string | string | undefined {
    const element = this.dwResponse['0014405c'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getDelayLawIdentifier(): Promise<string> {
    const element = this.dwResponse['0014405c'];
    if (typeof element !== 'string') {
      return this.x0014405c as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Calibration Procedure
  get CalibrationProcedure(): string | string | undefined {
    return this.x00144072;
  }

  get x00144072(): string | string | undefined {
    const element = this.dwResponse['00144072'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCalibrationProcedure(): Promise<string> {
    const element = this.dwResponse['00144072'];
    if (typeof element !== 'string') {
      return this.x00144072 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Probe Drive Notes
  get ProbeDriveNotes(): string | string | undefined {
    return this.x00144082;
  }

  get x00144082(): string | string | undefined {
    const element = this.dwResponse['00144082'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getProbeDriveNotes(): Promise<string> {
    const element = this.dwResponse['00144082'];
    if (typeof element !== 'string') {
      return this.x00144082 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Scan Procedure
  get ScanProcedure(): string | string | undefined {
    return this.x0014409b;
  }

  get x0014409b(): string | string | undefined {
    const element = this.dwResponse['0014409b'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getScanProcedure(): Promise<string> {
    const element = this.dwResponse['0014409b'];
    if (typeof element !== 'string') {
      return this.x0014409b as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Intervention Description
  get InterventionDescription(): string | string | undefined {
    return this.x0018003a;
  }

  get x0018003a(): string | string | undefined {
    const element = this.dwResponse['0018003a'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getInterventionDescription(): Promise<string> {
    const element = this.dwResponse['0018003a'];
    if (typeof element !== 'string') {
      return this.x0018003a as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Acquisition Comments
  get AcquisitionComments(): string | string | undefined {
    return this.x00184000;
  }

  get x00184000(): string | string | undefined {
    const element = this.dwResponse['00184000'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getAcquisitionComments(): Promise<string> {
    const element = this.dwResponse['00184000'];
    if (typeof element !== 'string') {
      return this.x00184000 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Detector Description
  get DetectorDescription(): string | string | undefined {
    return this.x00187006;
  }

  get x00187006(): string | string | undefined {
    const element = this.dwResponse['00187006'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getDetectorDescription(): Promise<string> {
    const element = this.dwResponse['00187006'];
    if (typeof element !== 'string') {
      return this.x00187006 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Detector Mode
  get DetectorMode(): string | string | undefined {
    return this.x00187008;
  }

  get x00187008(): string | string | undefined {
    const element = this.dwResponse['00187008'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getDetectorMode(): Promise<string> {
    const element = this.dwResponse['00187008'];
    if (typeof element !== 'string') {
      return this.x00187008 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Grid Absorbing Material
  get GridAbsorbingMaterial(): string | string | undefined {
    return this.x00187040;
  }

  get x00187040(): string | string | undefined {
    const element = this.dwResponse['00187040'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getGridAbsorbingMaterial(): Promise<string> {
    const element = this.dwResponse['00187040'];
    if (typeof element !== 'string') {
      return this.x00187040 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Grid Spacing Material
  get GridSpacingMaterial(): string | string | undefined {
    return this.x00187041;
  }

  get x00187041(): string | string | undefined {
    const element = this.dwResponse['00187041'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getGridSpacingMaterial(): Promise<string> {
    const element = this.dwResponse['00187041'];
    if (typeof element !== 'string') {
      return this.x00187041 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Exposure Control Mode Description
  get ExposureControlModeDescription(): string | string | undefined {
    return this.x00187062;
  }

  get x00187062(): string | string | undefined {
    const element = this.dwResponse['00187062'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getExposureControlModeDescription(): Promise<string> {
    const element = this.dwResponse['00187062'];
    if (typeof element !== 'string') {
      return this.x00187062 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Metabolite Map Description
  get MetaboliteMapDescription(): string | string | undefined {
    return this.x00189080;
  }

  get x00189080(): string | string | undefined {
    const element = this.dwResponse['00189080'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getMetaboliteMapDescription(): Promise<string> {
    const element = this.dwResponse['00189080'];
    if (typeof element !== 'string') {
      return this.x00189080 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Respiratory Motion Compensation Technique Description
  get RespiratoryMotionCompensationTechniqueDescription(): string | string | undefined {
    return this.x00189185;
  }

  get x00189185(): string | string | undefined {
    const element = this.dwResponse['00189185'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getRespiratoryMotionCompensationTechniqueDescription(): Promise<string> {
    const element = this.dwResponse['00189185'];
    if (typeof element !== 'string') {
      return this.x00189185 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Acquisition Protocol Description
  get AcquisitionProtocolDescription(): string | string | undefined {
    return this.x00189424;
  }

  get x00189424(): string | string | undefined {
    const element = this.dwResponse['00189424'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getAcquisitionProtocolDescription(): Promise<string> {
    const element = this.dwResponse['00189424'];
    if (typeof element !== 'string') {
      return this.x00189424 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Contribution Description
  get ContributionDescription(): string | string | undefined {
    return this.x0018a003;
  }

  get x0018a003(): string | string | undefined {
    const element = this.dwResponse['0018a003'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getContributionDescription(): Promise<string> {
    const element = this.dwResponse['0018a003'];
    if (typeof element !== 'string') {
      return this.x0018a003 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Image Comments
  get ImageComments(): string | string | undefined {
    return this.x00204000;
  }

  get x00204000(): string | string | undefined {
    const element = this.dwResponse['00204000'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getImageComments(): Promise<string> {
    const element = this.dwResponse['00204000'];
    if (typeof element !== 'string') {
      return this.x00204000 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Frame Comments
  get FrameComments(): string | string | undefined {
    return this.x00209158;
  }

  get x00209158(): string | string | undefined {
    const element = this.dwResponse['00209158'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getFrameComments(): Promise<string> {
    const element = this.dwResponse['00209158'];
    if (typeof element !== 'string') {
      return this.x00209158 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Comments on Patient's Performance of Visual Field
  get CommentsOnPatientPerformanceOfVisualField(): string | string | undefined {
    return this.x00240044;
  }

  get x00240044(): string | string | undefined {
    const element = this.dwResponse['00240044'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCommentsOnPatientPerformanceOfVisualField(): Promise<string> {
    const element = this.dwResponse['00240044'];
    if (typeof element !== 'string') {
      return this.x00240044 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Gray Lookup Table Data
  get GrayLookupTableData(): Array<number> | string | undefined {
    return this.x00281200;
  }

  get x00281200(): Array<number> | string | undefined {
    const element = this.dwResponse['00281200'];
    return typeof element === 'string' ? element : element.Value;
  }

  async getGrayLookupTableData(): Promise<Array<number>> {
    const element = this.dwResponse['00281200'];
    if (typeof element !== 'string') {
      return this.x00281200 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Red Palette Color Lookup Table Data
  get RedPaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281201;
  }

  get x00281201(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281201'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getRedPaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281201'];
    if (typeof element !== 'string') {
      return this.x00281201 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Green Palette Color Lookup Table Data
  get GreenPaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281202;
  }

  get x00281202(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281202'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getGreenPaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281202'];
    if (typeof element !== 'string') {
      return this.x00281202 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Blue Palette Color Lookup Table Data
  get BluePaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281203;
  }

  get x00281203(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281203'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getBluePaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281203'];
    if (typeof element !== 'string') {
      return this.x00281203 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Alpha Palette Color Lookup Table Data
  get AlphaPaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281204;
  }

  get x00281204(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281204'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getAlphaPaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281204'];
    if (typeof element !== 'string') {
      return this.x00281204 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Large Red Palette Color Lookup Table Data
  get LargeRedPaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281211;
  }

  get x00281211(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281211'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getLargeRedPaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281211'];
    if (typeof element !== 'string') {
      return this.x00281211 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Large Green Palette Color Lookup Table Data
  get LargeGreenPaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281212;
  }

  get x00281212(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281212'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getLargeGreenPaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281212'];
    if (typeof element !== 'string') {
      return this.x00281212 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Large Blue Palette Color Lookup Table Data
  get LargeBluePaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281213;
  }

  get x00281213(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281213'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getLargeBluePaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281213'];
    if (typeof element !== 'string') {
      return this.x00281213 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Segmented Red Palette Color Lookup Table Data
  get SegmentedRedPaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281221;
  }

  get x00281221(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281221'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getSegmentedRedPaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281221'];
    if (typeof element !== 'string') {
      return this.x00281221 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Segmented Green Palette Color Lookup Table Data
  get SegmentedGreenPaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281222;
  }

  get x00281222(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281222'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getSegmentedGreenPaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281222'];
    if (typeof element !== 'string') {
      return this.x00281222 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Segmented Blue Palette Color Lookup Table Data
  get SegmentedBluePaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281223;
  }

  get x00281223(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281223'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getSegmentedBluePaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281223'];
    if (typeof element !== 'string') {
      return this.x00281223 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Partial View Description
  get PartialViewDescription(): string | string | undefined {
    return this.x00281351;
  }

  get x00281351(): string | string | undefined {
    const element = this.dwResponse['00281351'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getPartialViewDescription(): Promise<string> {
    const element = this.dwResponse['00281351'];
    if (typeof element !== 'string') {
      return this.x00281351 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Blending Lookup Table Data
  get BlendingLookupTableData(): Uint8Array | string | undefined {
    return this.x00281408;
  }

  get x00281408(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281408'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getBlendingLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281408'];
    if (typeof element !== 'string') {
      return this.x00281408 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // ICC Profile
  get ICCProfile(): Uint8Array | string | undefined {
    return this.x00282000;
  }

  get x00282000(): Uint8Array | string | undefined {
    const element = this.dwResponse['00282000'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getICCProfile(): Promise<Uint8Array> {
    const element = this.dwResponse['00282000'];
    if (typeof element !== 'string') {
      return this.x00282000 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // LUT Data
  get LUTData(): Array<number> | string | undefined {
    return this.x00283006;
  }

  get x00283006(): Array<number> | string | undefined {
    const element = this.dwResponse['00283006'];
    return typeof element === 'string' ? element : element.Value;
  }

  async getLUTData(): Promise<Array<number>> {
    const element = this.dwResponse['00283006'];
    if (typeof element !== 'string') {
      return this.x00283006 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Image Presentation Comments
  get ImagePresentationComments(): string | string | undefined {
    return this.x00284000;
  }

  get x00284000(): string | string | undefined {
    const element = this.dwResponse['00284000'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getImagePresentationComments(): Promise<string> {
    const element = this.dwResponse['00284000'];
    if (typeof element !== 'string') {
      return this.x00284000 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Mask Operation Explanation
  get MaskOperationExplanation(): string | string | undefined {
    return this.x00286190;
  }

  get x00286190(): string | string | undefined {
    const element = this.dwResponse['00286190'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getMaskOperationExplanation(): Promise<string> {
    const element = this.dwResponse['00286190'];
    if (typeof element !== 'string') {
      return this.x00286190 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Pixel Data Provider URL
  get PixelDataProviderURL(): string | string | undefined {
    return this.x00287fe0;
  }

  get x00287fe0(): string | string | undefined {
    const element = this.dwResponse['00287fe0'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getPixelDataProviderURL(): Promise<string> {
    const element = this.dwResponse['00287fe0'];
    if (typeof element !== 'string') {
      return this.x00287fe0 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Study Comments
  get StudyComments(): string | string | undefined {
    return this.x00324000;
  }

  get x00324000(): string | string | undefined {
    const element = this.dwResponse['00324000'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getStudyComments(): Promise<string> {
    const element = this.dwResponse['00324000'];
    if (typeof element !== 'string') {
      return this.x00324000 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Visit Comments
  get VisitComments(): string | string | undefined {
    return this.x00384000;
  }

  get x00384000(): string | string | undefined {
    const element = this.dwResponse['00384000'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getVisitComments(): Promise<string> {
    const element = this.dwResponse['00384000'];
    if (typeof element !== 'string') {
      return this.x00384000 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Local Namespace Entity ID
  get LocalNamespaceEntityID(): string | string | undefined {
    return this.x00400031;
  }

  get x00400031(): string | string | undefined {
    const element = this.dwResponse['00400031'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getLocalNamespaceEntityID(): Promise<string> {
    const element = this.dwResponse['00400031'];
    if (typeof element !== 'string') {
      return this.x00400031 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Universal Entity ID
  get UniversalEntityID(): string | string | undefined {
    return this.x00400032;
  }

  get x00400032(): string | string | undefined {
    const element = this.dwResponse['00400032'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getUniversalEntityID(): Promise<string> {
    const element = this.dwResponse['00400032'];
    if (typeof element !== 'string') {
      return this.x00400032 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Comments on the Performed Procedure Step
  get CommentsOnThePerformedProcedureStep(): string | string | undefined {
    return this.x00400280;
  }

  get x00400280(): string | string | undefined {
    const element = this.dwResponse['00400280'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCommentsOnThePerformedProcedureStep(): Promise<string> {
    const element = this.dwResponse['00400280'];
    if (typeof element !== 'string') {
      return this.x00400280 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Comments on Radiation Dose
  get CommentsOnRadiationDose(): string | string | undefined {
    return this.x00400310;
  }

  get x00400310(): string | string | undefined {
    const element = this.dwResponse['00400310'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCommentsOnRadiationDose(): Promise<string> {
    const element = this.dwResponse['00400310'];
    if (typeof element !== 'string') {
      return this.x00400310 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Comments on the Scheduled Procedure Step
  get CommentsOnTheScheduledProcedureStep(): string | string | undefined {
    return this.x00400400;
  }

  get x00400400(): string | string | undefined {
    const element = this.dwResponse['00400400'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCommentsOnTheScheduledProcedureStep(): Promise<string> {
    const element = this.dwResponse['00400400'];
    if (typeof element !== 'string') {
      return this.x00400400 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Specimen Description (Trial)
  get SpecimenDescriptionTrial(): string | string | undefined {
    return this.x00400553;
  }

  get x00400553(): string | string | undefined {
    const element = this.dwResponse['00400553'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getSpecimenDescriptionTrial(): Promise<string> {
    const element = this.dwResponse['00400553'];
    if (typeof element !== 'string') {
      return this.x00400553 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Acquisition Context Description
  get AcquisitionContextDescription(): string | string | undefined {
    return this.x00400556;
  }

  get x00400556(): string | string | undefined {
    const element = this.dwResponse['00400556'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getAcquisitionContextDescription(): Promise<string> {
    const element = this.dwResponse['00400556'];
    if (typeof element !== 'string') {
      return this.x00400556 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Specimen Detailed Description
  get SpecimenDetailedDescription(): string | string | undefined {
    return this.x00400602;
  }

  get x00400602(): string | string | undefined {
    const element = this.dwResponse['00400602'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getSpecimenDetailedDescription(): Promise<string> {
    const element = this.dwResponse['00400602'];
    if (typeof element !== 'string') {
      return this.x00400602 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Person's Address
  get PersonAddress(): string | string | undefined {
    return this.x00401102;
  }

  get x00401102(): string | string | undefined {
    const element = this.dwResponse['00401102'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getPersonAddress(): Promise<string> {
    const element = this.dwResponse['00401102'];
    if (typeof element !== 'string') {
      return this.x00401102 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Requested Procedure Comments
  get RequestedProcedureComments(): string | string | undefined {
    return this.x00401400;
  }

  get x00401400(): string | string | undefined {
    const element = this.dwResponse['00401400'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getRequestedProcedureComments(): Promise<string> {
    const element = this.dwResponse['00401400'];
    if (typeof element !== 'string') {
      return this.x00401400 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Imaging Service Request Comments
  get ImagingServiceRequestComments(): string | string | undefined {
    return this.x00402400;
  }

  get x00402400(): string | string | undefined {
    const element = this.dwResponse['00402400'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getImagingServiceRequestComments(): Promise<string> {
    const element = this.dwResponse['00402400'];
    if (typeof element !== 'string') {
      return this.x00402400 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Object Binary Identifier (Trial)
  get ObjectBinaryIdentifierTrial(): Uint8Array | string | undefined {
    return this.x0040a074;
  }

  get x0040a074(): Uint8Array | string | undefined {
    const element = this.dwResponse['0040a074'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getObjectBinaryIdentifierTrial(): Promise<Uint8Array> {
    const element = this.dwResponse['0040a074'];
    if (typeof element !== 'string') {
      return this.x0040a074 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Object Directory Binary Identifier (Trial)
  get ObjectDirectoryBinaryIdentifierTrial(): Uint8Array | string | undefined {
    return this.x0040a089;
  }

  get x0040a089(): Uint8Array | string | undefined {
    const element = this.dwResponse['0040a089'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getObjectDirectoryBinaryIdentifierTrial(): Promise<Uint8Array> {
    const element = this.dwResponse['0040a089'];
    if (typeof element !== 'string') {
      return this.x0040a089 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Text Value
  get TextValue(): string | string | undefined {
    return this.x0040a160;
  }

  get x0040a160(): string | string | undefined {
    const element = this.dwResponse['0040a160'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getTextValue(): Promise<string> {
    const element = this.dwResponse['0040a160'];
    if (typeof element !== 'string') {
      return this.x0040a160 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Bibliographic Citation (Trial)
  get BibliographicCitationTrial(): string | string | undefined {
    return this.x0040a16a;
  }

  get x0040a16a(): string | string | undefined {
    const element = this.dwResponse['0040a16a'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getBibliographicCitationTrial(): Promise<string> {
    const element = this.dwResponse['0040a16a'];
    if (typeof element !== 'string') {
      return this.x0040a16a as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Identification Description (Trial)
  get IdentificationDescriptionTrial(): string | string | undefined {
    return this.x0040a224;
  }

  get x0040a224(): string | string | undefined {
    const element = this.dwResponse['0040a224'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getIdentificationDescriptionTrial(): Promise<string> {
    const element = this.dwResponse['0040a224'];
    if (typeof element !== 'string') {
      return this.x0040a224 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Algorithm Description (Trial)
  get AlgorithmDescriptionTrial(): string | string | undefined {
    return this.x0040a297;
  }

  get x0040a297(): string | string | undefined {
    const element = this.dwResponse['0040a297'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getAlgorithmDescriptionTrial(): Promise<string> {
    const element = this.dwResponse['0040a297'];
    if (typeof element !== 'string') {
      return this.x0040a297 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Report Status Comment (Trial)
  get ReportStatusCommentTrial(): string | string | undefined {
    return this.x0040a33a;
  }

  get x0040a33a(): string | string | undefined {
    const element = this.dwResponse['0040a33a'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getReportStatusCommentTrial(): Promise<string> {
    const element = this.dwResponse['0040a33a'];
    if (typeof element !== 'string') {
      return this.x0040a33a as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Address (Trial)
  get AddressTrial(): string | string | undefined {
    return this.x0040a353;
  }

  get x0040a353(): string | string | undefined {
    const element = this.dwResponse['0040a353'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getAddressTrial(): Promise<string> {
    const element = this.dwResponse['0040a353'];
    if (typeof element !== 'string') {
      return this.x0040a353 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Uniform Resource Locator (Trial)
  get UniformResourceLocatorTrial(): string | string | undefined {
    return this.x0040a992;
  }

  get x0040a992(): string | string | undefined {
    const element = this.dwResponse['0040a992'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getUniformResourceLocatorTrial(): Promise<string> {
    const element = this.dwResponse['0040a992'];
    if (typeof element !== 'string') {
      return this.x0040a992 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // HL7 Instance Identifier
  get HL7InstanceIdentifier(): string | string | undefined {
    return this.x0040e001;
  }

  get x0040e001(): string | string | undefined {
    const element = this.dwResponse['0040e001'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getHL7InstanceIdentifier(): Promise<string> {
    const element = this.dwResponse['0040e001'];
    if (typeof element !== 'string') {
      return this.x0040e001 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Retrieve URI
  get RetrieveURI(): string | string | undefined {
    return this.x0040e010;
  }

  get x0040e010(): string | string | undefined {
    const element = this.dwResponse['0040e010'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getRetrieveURI(): Promise<string> {
    const element = this.dwResponse['0040e010'];
    if (typeof element !== 'string') {
      return this.x0040e010 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Document Title
  get DocumentTitle(): string | string | undefined {
    return this.x00420010;
  }

  get x00420010(): string | string | undefined {
    const element = this.dwResponse['00420010'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getDocumentTitle(): Promise<string> {
    const element = this.dwResponse['00420010'];
    if (typeof element !== 'string') {
      return this.x00420010 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Encapsulated Document
  get EncapsulatedDocument(): Uint8Array | string | undefined {
    return this.x00420011;
  }

  get x00420011(): Uint8Array | string | undefined {
    const element = this.dwResponse['00420011'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getEncapsulatedDocument(): Promise<Uint8Array> {
    const element = this.dwResponse['00420011'];
    if (typeof element !== 'string') {
      return this.x00420011 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Product Package Identifier
  get ProductPackageIdentifier(): string | string | undefined {
    return this.x00440001;
  }

  get x00440001(): string | string | undefined {
    const element = this.dwResponse['00440001'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getProductPackageIdentifier(): Promise<string> {
    const element = this.dwResponse['00440001'];
    if (typeof element !== 'string') {
      return this.x00440001 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Approval Status Further Description
  get ApprovalStatusFurtherDescription(): string | string | undefined {
    return this.x00440003;
  }

  get x00440003(): string | string | undefined {
    const element = this.dwResponse['00440003'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getApprovalStatusFurtherDescription(): Promise<string> {
    const element = this.dwResponse['00440003'];
    if (typeof element !== 'string') {
      return this.x00440003 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Product Description
  get ProductDescription(): string | string | undefined {
    return this.x00440009;
  }

  get x00440009(): string | string | undefined {
    const element = this.dwResponse['00440009'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getProductDescription(): Promise<string> {
    const element = this.dwResponse['00440009'];
    if (typeof element !== 'string') {
      return this.x00440009 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Optical Path Description
  get OpticalPathDescription(): string | string | undefined {
    return this.x00480107;
  }

  get x00480107(): string | string | undefined {
    const element = this.dwResponse['00480107'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getOpticalPathDescription(): Promise<string> {
    const element = this.dwResponse['00480107'];
    if (typeof element !== 'string') {
      return this.x00480107 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Segment Description
  get SegmentDescription(): string | string | undefined {
    return this.x00620006;
  }

  get x00620006(): string | string | undefined {
    const element = this.dwResponse['00620006'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getSegmentDescription(): Promise<string> {
    const element = this.dwResponse['00620006'];
    if (typeof element !== 'string') {
      return this.x00620006 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Vector Grid Data
  get VectorGridData(): Float32Array | string | undefined {
    return this.x00640009;
  }

  get x00640009(): Float32Array | string | undefined {
    const element = this.dwResponse['00640009'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getVectorGridData(): Promise<Float32Array> {
    const element = this.dwResponse['00640009'];
    if (typeof element !== 'string') {
      return this.x00640009 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Surface Comments
  get SurfaceComments(): string | string | undefined {
    return this.x00660004;
  }

  get x00660004(): string | string | undefined {
    const element = this.dwResponse['00660004'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getSurfaceComments(): Promise<string> {
    const element = this.dwResponse['00660004'];
    if (typeof element !== 'string') {
      return this.x00660004 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Point Coordinates Data
  get PointCoordinatesData(): Float32Array | string | undefined {
    return this.x00660016;
  }

  get x00660016(): Float32Array | string | undefined {
    const element = this.dwResponse['00660016'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getPointCoordinatesData(): Promise<Float32Array> {
    const element = this.dwResponse['00660016'];
    if (typeof element !== 'string') {
      return this.x00660016 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Vector Coordinate Data
  get VectorCoordinateData(): Float32Array | string | undefined {
    return this.x00660021;
  }

  get x00660021(): Float32Array | string | undefined {
    const element = this.dwResponse['00660021'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getVectorCoordinateData(): Promise<Float32Array> {
    const element = this.dwResponse['00660021'];
    if (typeof element !== 'string') {
      return this.x00660021 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Triangle Point Index List
  get TrianglePointIndexList(): Uint8Array | string | undefined {
    return this.x00660023;
  }

  get x00660023(): Uint8Array | string | undefined {
    const element = this.dwResponse['00660023'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getTrianglePointIndexList(): Promise<Uint8Array> {
    const element = this.dwResponse['00660023'];
    if (typeof element !== 'string') {
      return this.x00660023 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Edge Point Index List
  get EdgePointIndexList(): Uint8Array | string | undefined {
    return this.x00660024;
  }

  get x00660024(): Uint8Array | string | undefined {
    const element = this.dwResponse['00660024'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getEdgePointIndexList(): Promise<Uint8Array> {
    const element = this.dwResponse['00660024'];
    if (typeof element !== 'string') {
      return this.x00660024 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Vertex Point Index List
  get VertexPointIndexList(): Uint8Array | string | undefined {
    return this.x00660025;
  }

  get x00660025(): Uint8Array | string | undefined {
    const element = this.dwResponse['00660025'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getVertexPointIndexList(): Promise<Uint8Array> {
    const element = this.dwResponse['00660025'];
    if (typeof element !== 'string') {
      return this.x00660025 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Primitive Point Index List
  get PrimitivePointIndexList(): Uint8Array | string | undefined {
    return this.x00660029;
  }

  get x00660029(): Uint8Array | string | undefined {
    const element = this.dwResponse['00660029'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getPrimitivePointIndexList(): Promise<Uint8Array> {
    const element = this.dwResponse['00660029'];
    if (typeof element !== 'string') {
      return this.x00660029 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Algorithm Parameters
  get AlgorithmParameters(): string | string | undefined {
    return this.x00660032;
  }

  get x00660032(): string | string | undefined {
    const element = this.dwResponse['00660032'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getAlgorithmParameters(): Promise<string> {
    const element = this.dwResponse['00660032'];
    if (typeof element !== 'string') {
      return this.x00660032 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Information Summary
  get InformationSummary(): string | string | undefined {
    return this.x00686280;
  }

  get x00686280(): string | string | undefined {
    const element = this.dwResponse['00686280'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getInformationSummary(): Promise<string> {
    const element = this.dwResponse['00686280'];
    if (typeof element !== 'string') {
      return this.x00686280 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // HPGL Document
  get HPGLDocument(): Uint8Array | string | undefined {
    return this.x00686300;
  }

  get x00686300(): Uint8Array | string | undefined {
    const element = this.dwResponse['00686300'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getHPGLDocument(): Promise<Uint8Array> {
    const element = this.dwResponse['00686300'];
    if (typeof element !== 'string') {
      return this.x00686300 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // HPGL Pen Description
  get HPGLPenDescription(): string | string | undefined {
    return this.x00686345;
  }

  get x00686345(): string | string | undefined {
    const element = this.dwResponse['00686345'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getHPGLPenDescription(): Promise<string> {
    const element = this.dwResponse['00686345'];
    if (typeof element !== 'string') {
      return this.x00686345 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Unformatted Text Value
  get UnformattedTextValue(): string | string | undefined {
    return this.x00700006;
  }

  get x00700006(): string | string | undefined {
    const element = this.dwResponse['00700006'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getUnformattedTextValue(): Promise<string> {
    const element = this.dwResponse['00700006'];
    if (typeof element !== 'string') {
      return this.x00700006 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Graphic Group Description
  get GraphicGroupDescription(): string | string | undefined {
    return this.x00700208;
  }

  get x00700208(): string | string | undefined {
    const element = this.dwResponse['00700208'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getGraphicGroupDescription(): Promise<string> {
    const element = this.dwResponse['00700208'];
    if (typeof element !== 'string') {
      return this.x00700208 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Fill Pattern
  get FillPattern(): Uint8Array | string | undefined {
    return this.x00700256;
  }

  get x00700256(): Uint8Array | string | undefined {
    const element = this.dwResponse['00700256'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getFillPattern(): Promise<Uint8Array> {
    const element = this.dwResponse['00700256'];
    if (typeof element !== 'string') {
      return this.x00700256 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Fiducial Description
  get FiducialDescription(): string | string | undefined {
    return this.x0070030f;
  }

  get x0070030f(): string | string | undefined {
    const element = this.dwResponse['0070030f'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getFiducialDescription(): Promise<string> {
    const element = this.dwResponse['0070030f'];
    if (typeof element !== 'string') {
      return this.x0070030f as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Selector LT Value
  get SelectorLTValue(): string | string | undefined {
    return this.x00720068;
  }

  get x00720068(): string | string | undefined {
    const element = this.dwResponse['00720068'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getSelectorLTValue(): Promise<string> {
    const element = this.dwResponse['00720068'];
    if (typeof element !== 'string') {
      return this.x00720068 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Selector ST Value
  get SelectorSTValue(): string | string | undefined {
    return this.x0072006e;
  }

  get x0072006e(): string | string | undefined {
    const element = this.dwResponse['0072006e'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getSelectorSTValue(): Promise<string> {
    const element = this.dwResponse['0072006e'];
    if (typeof element !== 'string') {
      return this.x0072006e as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Selector UT Value
  get SelectorUTValue(): string | string | undefined {
    return this.x00720070;
  }

  get x00720070(): string | string | undefined {
    const element = this.dwResponse['00720070'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getSelectorUTValue(): Promise<string> {
    const element = this.dwResponse['00720070'];
    if (typeof element !== 'string') {
      return this.x00720070 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Procedure Step Progress Description
  get ProcedureStepProgressDescription(): string | string | undefined {
    return this.x00741006;
  }

  get x00741006(): string | string | undefined {
    const element = this.dwResponse['00741006'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getProcedureStepProgressDescription(): Promise<string> {
    const element = this.dwResponse['00741006'];
    if (typeof element !== 'string') {
      return this.x00741006 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Contact URI
  get ContactURI(): string | string | undefined {
    return this.x0074100a;
  }

  get x0074100a(): string | string | undefined {
    const element = this.dwResponse['0074100a'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getContactURI(): Promise<string> {
    const element = this.dwResponse['0074100a'];
    if (typeof element !== 'string') {
      return this.x0074100a as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Reason for Cancellation
  get ReasonForCancellation(): string | string | undefined {
    return this.x00741238;
  }

  get x00741238(): string | string | undefined {
    const element = this.dwResponse['00741238'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getReasonForCancellation(): Promise<string> {
    const element = this.dwResponse['00741238'];
    if (typeof element !== 'string') {
      return this.x00741238 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Implant Template Group Description
  get ImplantTemplateGroupDescription(): string | string | undefined {
    return this.x00780010;
  }

  get x00780010(): string | string | undefined {
    const element = this.dwResponse['00780010'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getImplantTemplateGroupDescription(): Promise<string> {
    const element = this.dwResponse['00780010'];
    if (typeof element !== 'string') {
      return this.x00780010 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // U Value Data
  get UValueData(): Array<Float32Array> | string | undefined {
    return this.x00800010;
  }

  get x00800010(): Array<Float32Array> | string | undefined {
    const element = this.dwResponse['00800010'];
    return typeof element === 'string' ? element : element.Value;
  }

  async getUValueData(): Promise<Array<Float32Array>> {
    const element = this.dwResponse['00800010'];
    if (typeof element !== 'string') {
      return this.x00800010 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // V Value Data
  get VValueData(): Array<Float32Array> | string | undefined {
    return this.x00800011;
  }

  get x00800011(): Array<Float32Array> | string | undefined {
    const element = this.dwResponse['00800011'];
    return typeof element === 'string' ? element : element.Value;
  }

  async getVValueData(): Promise<Array<Float32Array>> {
    const element = this.dwResponse['00800011'];
    if (typeof element !== 'string') {
      return this.x00800011 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Topic Subject
  get TopicSubject(): string | string | undefined {
    return this.x00880906;
  }

  get x00880906(): string | string | undefined {
    const element = this.dwResponse['00880906'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getTopicSubject(): Promise<string> {
    const element = this.dwResponse['00880906'];
    if (typeof element !== 'string') {
      return this.x00880906 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // SOP Authorization Comment
  get SOPAuthorizationComment(): string | string | undefined {
    return this.x01000424;
  }

  get x01000424(): string | string | undefined {
    const element = this.dwResponse['01000424'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getSOPAuthorizationComment(): Promise<string> {
    const element = this.dwResponse['01000424'];
    if (typeof element !== 'string') {
      return this.x01000424 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Certificate of Signer
  get CertificateOfSigner(): Uint8Array | string | undefined {
    return this.x04000115;
  }

  get x04000115(): Uint8Array | string | undefined {
    const element = this.dwResponse['04000115'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCertificateOfSigner(): Promise<Uint8Array> {
    const element = this.dwResponse['04000115'];
    if (typeof element !== 'string') {
      return this.x04000115 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Signature
  get Signature(): Uint8Array | string | undefined {
    return this.x04000120;
  }

  get x04000120(): Uint8Array | string | undefined {
    const element = this.dwResponse['04000120'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getSignature(): Promise<Uint8Array> {
    const element = this.dwResponse['04000120'];
    if (typeof element !== 'string') {
      return this.x04000120 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Certified Timestamp
  get CertifiedTimestamp(): Uint8Array | string | undefined {
    return this.x04000310;
  }

  get x04000310(): Uint8Array | string | undefined {
    const element = this.dwResponse['04000310'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCertifiedTimestamp(): Promise<Uint8Array> {
    const element = this.dwResponse['04000310'];
    if (typeof element !== 'string') {
      return this.x04000310 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // MAC
  get MAC(): Uint8Array | string | undefined {
    return this.x04000404;
  }

  get x04000404(): Uint8Array | string | undefined {
    const element = this.dwResponse['04000404'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getMAC(): Promise<Uint8Array> {
    const element = this.dwResponse['04000404'];
    if (typeof element !== 'string') {
      return this.x04000404 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Encrypted Content
  get EncryptedContent(): Uint8Array | string | undefined {
    return this.x04000520;
  }

  get x04000520(): Uint8Array | string | undefined {
    const element = this.dwResponse['04000520'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getEncryptedContent(): Promise<Uint8Array> {
    const element = this.dwResponse['04000520'];
    if (typeof element !== 'string') {
      return this.x04000520 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Image Display Format
  get ImageDisplayFormat(): string | string | undefined {
    return this.x20100010;
  }

  get x20100010(): string | string | undefined {
    const element = this.dwResponse['20100010'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getImageDisplayFormat(): Promise<string> {
    const element = this.dwResponse['20100010'];
    if (typeof element !== 'string') {
      return this.x20100010 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Configuration Information
  get ConfigurationInformation(): string | string | undefined {
    return this.x20100150;
  }

  get x20100150(): string | string | undefined {
    const element = this.dwResponse['20100150'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getConfigurationInformation(): Promise<string> {
    const element = this.dwResponse['20100150'];
    if (typeof element !== 'string') {
      return this.x20100150 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Configuration Information Description
  get ConfigurationInformationDescription(): string | string | undefined {
    return this.x20100152;
  }

  get x20100152(): string | string | undefined {
    const element = this.dwResponse['20100152'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getConfigurationInformationDescription(): Promise<string> {
    const element = this.dwResponse['20100152'];
    if (typeof element !== 'string') {
      return this.x20100152 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Label Text
  get LabelText(): string | string | undefined {
    return this.x22000002;
  }

  get x22000002(): string | string | undefined {
    const element = this.dwResponse['22000002'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getLabelText(): Promise<string> {
    const element = this.dwResponse['22000002'];
    if (typeof element !== 'string') {
      return this.x22000002 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Media Disposition
  get MediaDisposition(): string | string | undefined {
    return this.x22000004;
  }

  get x22000004(): string | string | undefined {
    const element = this.dwResponse['22000004'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getMediaDisposition(): Promise<string> {
    const element = this.dwResponse['22000004'];
    if (typeof element !== 'string') {
      return this.x22000004 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Barcode Value
  get BarcodeValue(): string | string | undefined {
    return this.x22000005;
  }

  get x22000005(): string | string | undefined {
    const element = this.dwResponse['22000005'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getBarcodeValue(): Promise<string> {
    const element = this.dwResponse['22000005'];
    if (typeof element !== 'string') {
      return this.x22000005 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // RT Image Description
  get RTImageDescription(): string | string | undefined {
    return this.x30020004;
  }

  get x30020004(): string | string | undefined {
    const element = this.dwResponse['30020004'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getRTImageDescription(): Promise<string> {
    const element = this.dwResponse['30020004'];
    if (typeof element !== 'string') {
      return this.x30020004 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Structure Set Description
  get StructureSetDescription(): string | string | undefined {
    return this.x30060006;
  }

  get x30060006(): string | string | undefined {
    const element = this.dwResponse['30060006'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getStructureSetDescription(): Promise<string> {
    const element = this.dwResponse['30060006'];
    if (typeof element !== 'string') {
      return this.x30060006 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // ROI Description
  get ROIDescription(): string | string | undefined {
    return this.x30060028;
  }

  get x30060028(): string | string | undefined {
    const element = this.dwResponse['30060028'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getROIDescription(): Promise<string> {
    const element = this.dwResponse['30060028'];
    if (typeof element !== 'string') {
      return this.x30060028 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // ROI Observation Description
  get ROIObservationDescription(): string | string | undefined {
    return this.x30060088;
  }

  get x30060088(): string | string | undefined {
    const element = this.dwResponse['30060088'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getROIObservationDescription(): Promise<string> {
    const element = this.dwResponse['30060088'];
    if (typeof element !== 'string') {
      return this.x30060088 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Measured Dose Description
  get MeasuredDoseDescription(): string | string | undefined {
    return this.x30080012;
  }

  get x30080012(): string | string | undefined {
    const element = this.dwResponse['30080012'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getMeasuredDoseDescription(): Promise<string> {
    const element = this.dwResponse['30080012'];
    if (typeof element !== 'string') {
      return this.x30080012 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Override Reason
  get OverrideReason(): string | string | undefined {
    return this.x30080066;
  }

  get x30080066(): string | string | undefined {
    const element = this.dwResponse['30080066'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getOverrideReason(): Promise<string> {
    const element = this.dwResponse['30080066'];
    if (typeof element !== 'string') {
      return this.x30080066 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Calculated Dose Reference Description
  get CalculatedDoseReferenceDescription(): string | string | undefined {
    return this.x30080074;
  }

  get x30080074(): string | string | undefined {
    const element = this.dwResponse['30080074'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCalculatedDoseReferenceDescription(): Promise<string> {
    const element = this.dwResponse['30080074'];
    if (typeof element !== 'string') {
      return this.x30080074 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Treatment Status Comment
  get TreatmentStatusComment(): string | string | undefined {
    return this.x30080202;
  }

  get x30080202(): string | string | undefined {
    const element = this.dwResponse['30080202'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getTreatmentStatusComment(): Promise<string> {
    const element = this.dwResponse['30080202'];
    if (typeof element !== 'string') {
      return this.x30080202 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // RT Plan Description
  get RTPlanDescription(): string | string | undefined {
    return this.x300a0004;
  }

  get x300a0004(): string | string | undefined {
    const element = this.dwResponse['300a0004'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getRTPlanDescription(): Promise<string> {
    const element = this.dwResponse['300a0004'];
    if (typeof element !== 'string') {
      return this.x300a0004 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Prescription Description
  get PrescriptionDescription(): string | string | undefined {
    return this.x300a000e;
  }

  get x300a000e(): string | string | undefined {
    const element = this.dwResponse['300a000e'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getPrescriptionDescription(): Promise<string> {
    const element = this.dwResponse['300a000e'];
    if (typeof element !== 'string') {
      return this.x300a000e as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Fraction Pattern
  get FractionPattern(): string | string | undefined {
    return this.x300a007b;
  }

  get x300a007b(): string | string | undefined {
    const element = this.dwResponse['300a007b'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getFractionPattern(): Promise<string> {
    const element = this.dwResponse['300a007b'];
    if (typeof element !== 'string') {
      return this.x300a007b as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Beam Description
  get BeamDescription(): string | string | undefined {
    return this.x300a00c3;
  }

  get x300a00c3(): string | string | undefined {
    const element = this.dwResponse['300a00c3'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getBeamDescription(): Promise<string> {
    const element = this.dwResponse['300a00c3'];
    if (typeof element !== 'string') {
      return this.x300a00c3 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Bolus Description
  get BolusDescription(): string | string | undefined {
    return this.x300a00dd;
  }

  get x300a00dd(): string | string | undefined {
    const element = this.dwResponse['300a00dd'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getBolusDescription(): Promise<string> {
    const element = this.dwResponse['300a00dd'];
    if (typeof element !== 'string') {
      return this.x300a00dd as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Fixation Device Description
  get FixationDeviceDescription(): string | string | undefined {
    return this.x300a0196;
  }

  get x300a0196(): string | string | undefined {
    const element = this.dwResponse['300a0196'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getFixationDeviceDescription(): Promise<string> {
    const element = this.dwResponse['300a0196'];
    if (typeof element !== 'string') {
      return this.x300a0196 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Shielding Device Description
  get ShieldingDeviceDescription(): string | string | undefined {
    return this.x300a01a6;
  }

  get x300a01a6(): string | string | undefined {
    const element = this.dwResponse['300a01a6'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getShieldingDeviceDescription(): Promise<string> {
    const element = this.dwResponse['300a01a6'];
    if (typeof element !== 'string') {
      return this.x300a01a6 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Setup Technique Description
  get SetupTechniqueDescription(): string | string | undefined {
    return this.x300a01b2;
  }

  get x300a01b2(): string | string | undefined {
    const element = this.dwResponse['300a01b2'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getSetupTechniqueDescription(): Promise<string> {
    const element = this.dwResponse['300a01b2'];
    if (typeof element !== 'string') {
      return this.x300a01b2 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Setup Device Description
  get SetupDeviceDescription(): string | string | undefined {
    return this.x300a01ba;
  }

  get x300a01ba(): string | string | undefined {
    const element = this.dwResponse['300a01ba'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getSetupDeviceDescription(): Promise<string> {
    const element = this.dwResponse['300a01ba'];
    if (typeof element !== 'string') {
      return this.x300a01ba as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Setup Reference Description
  get SetupReferenceDescription(): string | string | undefined {
    return this.x300a01d0;
  }

  get x300a01d0(): string | string | undefined {
    const element = this.dwResponse['300a01d0'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getSetupReferenceDescription(): Promise<string> {
    const element = this.dwResponse['300a01d0'];
    if (typeof element !== 'string') {
      return this.x300a01d0 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Compensator Description
  get CompensatorDescription(): string | string | undefined {
    return this.x300a02eb;
  }

  get x300a02eb(): string | string | undefined {
    const element = this.dwResponse['300a02eb'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCompensatorDescription(): Promise<string> {
    const element = this.dwResponse['300a02eb'];
    if (typeof element !== 'string') {
      return this.x300a02eb as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Setup Image Comment
  get SetupImageComment(): string | string | undefined {
    return this.x300a0402;
  }

  get x300a0402(): string | string | undefined {
    const element = this.dwResponse['300a0402'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getSetupImageComment(): Promise<string> {
    const element = this.dwResponse['300a0402'];
    if (typeof element !== 'string') {
      return this.x300a0402 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // General Accessory Description
  get GeneralAccessoryDescription(): string | string | undefined {
    return this.x300a0422;
  }

  get x300a0422(): string | string | undefined {
    const element = this.dwResponse['300a0422'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getGeneralAccessoryDescription(): Promise<string> {
    const element = this.dwResponse['300a0422'];
    if (typeof element !== 'string') {
      return this.x300a0422 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Arbitrary
  get Arbitrary(): string | string | undefined {
    return this.x40000010;
  }

  get x40000010(): string | string | undefined {
    const element = this.dwResponse['40000010'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getArbitrary(): Promise<string> {
    const element = this.dwResponse['40000010'];
    if (typeof element !== 'string') {
      return this.x40000010 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Text Comments
  get TextComments(): string | string | undefined {
    return this.x40004000;
  }

  get x40004000(): string | string | undefined {
    const element = this.dwResponse['40004000'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getTextComments(): Promise<string> {
    const element = this.dwResponse['40004000'];
    if (typeof element !== 'string') {
      return this.x40004000 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Interpretation Text
  get InterpretationText(): string | string | undefined {
    return this.x4008010b;
  }

  get x4008010b(): string | string | undefined {
    const element = this.dwResponse['4008010b'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getInterpretationText(): Promise<string> {
    const element = this.dwResponse['4008010b'];
    if (typeof element !== 'string') {
      return this.x4008010b as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Interpretation Diagnosis Description
  get InterpretationDiagnosisDescription(): string | string | undefined {
    return this.x40080115;
  }

  get x40080115(): string | string | undefined {
    const element = this.dwResponse['40080115'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getInterpretationDiagnosisDescription(): Promise<string> {
    const element = this.dwResponse['40080115'];
    if (typeof element !== 'string') {
      return this.x40080115 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Impressions
  get Impressions(): string | string | undefined {
    return this.x40080300;
  }

  get x40080300(): string | string | undefined {
    const element = this.dwResponse['40080300'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getImpressions(): Promise<string> {
    const element = this.dwResponse['40080300'];
    if (typeof element !== 'string') {
      return this.x40080300 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Results Comments
  get ResultsComments(): string | string | undefined {
    return this.x40084000;
  }

  get x40084000(): string | string | undefined {
    const element = this.dwResponse['40084000'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getResultsComments(): Promise<string> {
    const element = this.dwResponse['40084000'];
    if (typeof element !== 'string') {
      return this.x40084000 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Threat ROI Bitmap
  get ThreatROIBitmap(): Uint8Array | string | undefined {
    return this.x40101006;
  }

  get x40101006(): Uint8Array | string | undefined {
    const element = this.dwResponse['40101006'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getThreatROIBitmap(): Promise<Uint8Array> {
    const element = this.dwResponse['40101006'];
    if (typeof element !== 'string') {
      return this.x40101006 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Threat Category Description
  get ThreatCategoryDescription(): string | string | undefined {
    return this.x40101013;
  }

  get x40101013(): string | string | undefined {
    const element = this.dwResponse['40101013'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getThreatCategoryDescription(): Promise<string> {
    const element = this.dwResponse['40101013'];
    if (typeof element !== 'string') {
      return this.x40101013 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // OOI Type Descriptor
  get OOITypeDescriptor(): string | string | undefined {
    return this.x40101068;
  }

  get x40101068(): string | string | undefined {
    const element = this.dwResponse['40101068'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getOOITypeDescriptor(): Promise<string> {
    const element = this.dwResponse['40101068'];
    if (typeof element !== 'string') {
      return this.x40101068 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Detector Calibration Data
  get DetectorCalibrationData(): Uint8Array | string | undefined {
    return this.x4010106c;
  }

  get x4010106c(): Uint8Array | string | undefined {
    const element = this.dwResponse['4010106c'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getDetectorCalibrationData(): Promise<Uint8Array> {
    const element = this.dwResponse['4010106c'];
    if (typeof element !== 'string') {
      return this.x4010106c as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // PTO Location Description
  get PTOLocationDescription(): string | string | undefined {
    return this.x40101078;
  }

  get x40101078(): string | string | undefined {
    const element = this.dwResponse['40101078'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getPTOLocationDescription(): Promise<string> {
    const element = this.dwResponse['40101078'];
    if (typeof element !== 'string') {
      return this.x40101078 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Audio Sample Data
  get AudioSampleData(): Uint8Array | string | undefined {
    return this.x50xx200c;
  }

  get x50xx200c(): Uint8Array | string | undefined {
    const element = this.dwResponse['50xx200c'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getAudioSampleData(): Promise<Uint8Array> {
    const element = this.dwResponse['50xx200c'];
    if (typeof element !== 'string') {
      return this.x50xx200c as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Audio Comments
  get AudioComments(): string | string | undefined {
    return this.x50xx200e;
  }

  get x50xx200e(): string | string | undefined {
    const element = this.dwResponse['50xx200e'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getAudioComments(): Promise<string> {
    const element = this.dwResponse['50xx200e'];
    if (typeof element !== 'string') {
      return this.x50xx200e as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Curve Data
  get CurveData(): Uint8Array | string | undefined {
    return this.x50xx3000;
  }

  get x50xx3000(): Uint8Array | string | undefined {
    const element = this.dwResponse['50xx3000'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCurveData(): Promise<Uint8Array> {
    const element = this.dwResponse['50xx3000'];
    if (typeof element !== 'string') {
      return this.x50xx3000 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Channel Minimum Value
  get ChannelMinimumValue(): Uint8Array | string | undefined {
    return this.x54000110;
  }

  get x54000110(): Uint8Array | string | undefined {
    const element = this.dwResponse['54000110'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getChannelMinimumValue(): Promise<Uint8Array> {
    const element = this.dwResponse['54000110'];
    if (typeof element !== 'string') {
      return this.x54000110 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Channel Maximum Value
  get ChannelMaximumValue(): Uint8Array | string | undefined {
    return this.x54000112;
  }

  get x54000112(): Uint8Array | string | undefined {
    const element = this.dwResponse['54000112'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getChannelMaximumValue(): Promise<Uint8Array> {
    const element = this.dwResponse['54000112'];
    if (typeof element !== 'string') {
      return this.x54000112 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Waveform Padding Value
  get WaveformPaddingValue(): Uint8Array | string | undefined {
    return this.x5400100a;
  }

  get x5400100a(): Uint8Array | string | undefined {
    const element = this.dwResponse['5400100a'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getWaveformPaddingValue(): Promise<Uint8Array> {
    const element = this.dwResponse['5400100a'];
    if (typeof element !== 'string') {
      return this.x5400100a as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Waveform Data
  get WaveformData(): Uint8Array | string | undefined {
    return this.x54001010;
  }

  get x54001010(): Uint8Array | string | undefined {
    const element = this.dwResponse['54001010'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getWaveformData(): Promise<Uint8Array> {
    const element = this.dwResponse['54001010'];
    if (typeof element !== 'string') {
      return this.x54001010 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // First Order Phase Correction Angle
  get FirstOrderPhaseCorrectionAngle(): Float32Array | string | undefined {
    return this.x56000010;
  }

  get x56000010(): Float32Array | string | undefined {
    const element = this.dwResponse['56000010'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getFirstOrderPhaseCorrectionAngle(): Promise<Float32Array> {
    const element = this.dwResponse['56000010'];
    if (typeof element !== 'string') {
      return this.x56000010 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Spectroscopy Data
  get SpectroscopyData(): Float32Array | string | undefined {
    return this.x56000020;
  }

  get x56000020(): Float32Array | string | undefined {
    const element = this.dwResponse['56000020'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getSpectroscopyData(): Promise<Float32Array> {
    const element = this.dwResponse['56000020'];
    if (typeof element !== 'string') {
      return this.x56000020 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Overlay Data
  get OverlayData(): Uint8Array | string | undefined {
    return this.x60xx3000;
  }

  get x60xx3000(): Uint8Array | string | undefined {
    const element = this.dwResponse['60xx3000'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getOverlayData(): Promise<Uint8Array> {
    const element = this.dwResponse['60xx3000'];
    if (typeof element !== 'string') {
      return this.x60xx3000 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Overlay Comments
  get OverlayComments(): string | string | undefined {
    return this.x60xx4000;
  }

  get x60xx4000(): string | string | undefined {
    const element = this.dwResponse['60xx4000'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getOverlayComments(): Promise<string> {
    const element = this.dwResponse['60xx4000'];
    if (typeof element !== 'string') {
      return this.x60xx4000 as any;
    }
    const response = await this.requester.qido({ path: element });
    return response.text();
    
  }

  // Pixel Data
  get PixelData(): Uint8Array | string | undefined {
    return this.x7fe00010;
  }

  get x7fe00010(): Uint8Array | string | undefined {
    const element = this.dwResponse['7fe00010'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getPixelData(): Promise<Uint8Array> {
    const element = this.dwResponse['7fe00010'];
    if (typeof element !== 'string') {
      return this.x7fe00010 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Coefficients SDVN
  get CoefficientsSDVN(): Uint8Array | string | undefined {
    return this.x7fe00020;
  }

  get x7fe00020(): Uint8Array | string | undefined {
    const element = this.dwResponse['7fe00020'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCoefficientsSDVN(): Promise<Uint8Array> {
    const element = this.dwResponse['7fe00020'];
    if (typeof element !== 'string') {
      return this.x7fe00020 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Coefficients SDHN
  get CoefficientsSDHN(): Uint8Array | string | undefined {
    return this.x7fe00030;
  }

  get x7fe00030(): Uint8Array | string | undefined {
    const element = this.dwResponse['7fe00030'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCoefficientsSDHN(): Promise<Uint8Array> {
    const element = this.dwResponse['7fe00030'];
    if (typeof element !== 'string') {
      return this.x7fe00030 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Coefficients SDDN
  get CoefficientsSDDN(): Uint8Array | string | undefined {
    return this.x7fe00040;
  }

  get x7fe00040(): Uint8Array | string | undefined {
    const element = this.dwResponse['7fe00040'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getCoefficientsSDDN(): Promise<Uint8Array> {
    const element = this.dwResponse['7fe00040'];
    if (typeof element !== 'string') {
      return this.x7fe00040 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Variable Pixel Data
  get VariablePixelData(): Uint8Array | string | undefined {
    return this.x7fxx0010;
  }

  get x7fxx0010(): Uint8Array | string | undefined {
    const element = this.dwResponse['7fxx0010'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getVariablePixelData(): Promise<Uint8Array> {
    const element = this.dwResponse['7fxx0010'];
    if (typeof element !== 'string') {
      return this.x7fxx0010 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Variable Coefficients SDVN
  get VariableCoefficientsSDVN(): Uint8Array | string | undefined {
    return this.x7fxx0020;
  }

  get x7fxx0020(): Uint8Array | string | undefined {
    const element = this.dwResponse['7fxx0020'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getVariableCoefficientsSDVN(): Promise<Uint8Array> {
    const element = this.dwResponse['7fxx0020'];
    if (typeof element !== 'string') {
      return this.x7fxx0020 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Variable Coefficients SDHN
  get VariableCoefficientsSDHN(): Uint8Array | string | undefined {
    return this.x7fxx0030;
  }

  get x7fxx0030(): Uint8Array | string | undefined {
    const element = this.dwResponse['7fxx0030'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getVariableCoefficientsSDHN(): Promise<Uint8Array> {
    const element = this.dwResponse['7fxx0030'];
    if (typeof element !== 'string') {
      return this.x7fxx0030 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Variable Coefficients SDDN
  get VariableCoefficientsSDDN(): Uint8Array | string | undefined {
    return this.x7fxx0040;
  }

  get x7fxx0040(): Uint8Array | string | undefined {
    const element = this.dwResponse['7fxx0040'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getVariableCoefficientsSDDN(): Promise<Uint8Array> {
    const element = this.dwResponse['7fxx0040'];
    if (typeof element !== 'string') {
      return this.x7fxx0040 as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

  // Data Set Trailing Padding
  get DataSetTrailingPadding(): Uint8Array | string | undefined {
    return this.xfffcfffc;
  }

  get xfffcfffc(): Uint8Array | string | undefined {
    const element = this.dwResponse['fffcfffc'];
    return typeof element === 'string' ? element : element.Value[0];
  }

  async getDataSetTrailingPadding(): Promise<Uint8Array> {
    const element = this.dwResponse['fffcfffc'];
    if (typeof element !== 'string') {
      return this.xfffcfffc as any;
    }
    const response = await this.requester.qido({ path: element });
    return new Uint8Array(await response.arrayBuffer());
    
  }

}

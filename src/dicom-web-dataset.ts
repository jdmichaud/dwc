// Copyright (c) 2023 Jean-Daniel Michaud
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

/* eslint-disable */
import { Dataset } from '@jdmichaud/dicom-model';

import { DICOMWebResponse, Element } from './dicom-web-response';
import { Requester } from './requester';

import { convert } from './converter';

/**
 * Implements a Dataset. All the fields are optional and can thus be undefined.
 */
export class DICOMWebDataset implements Dataset {
  constructor(public readonly dwResponse: DICOMWebResponse, protected readonly requester: Requester) {
    if (dwResponse === undefined) {
      throw new Error('DICOMWebDataset requires a DICOM valid DICOMWeb response as parameter');
    }
  }

  private async retrieveWideField<T>(element: string): Promise<Response> {
    return await (async () => {
      const response = await this.requester.qido({
        path: element,
      });
      return await response;
    })();
  }

  // Metadata ------------------------------------------------------------------

  // File Meta Information Group Length
  get FileMetaInformationGroupLength(): number | undefined {
    return this.x00020000;
  }

  get x00020000(): number | undefined {
    const value = this.dwResponse['00020000']?.Value;
    return convert(value?.[0], 0x00020000, 'number');
  }

  getFileMetaInformationGroupLength(): number {
    const value = this.x00020000;
    if (value === undefined) {
      throw new Error('FileMetaInformationGroupLength is undefined');
    }
    return value;
  }

  // Media Storage SOP Class UID
  get MediaStorageSOPClassUID(): string | undefined {
    return this.x00020002;
  }

  get x00020002(): string | undefined {
    const value = this.dwResponse['00020002']?.Value;
    return convert(value?.[0], 0x00020002, 'string');
  }

  getMediaStorageSOPClassUID(): string {
    const value = this.x00020002;
    if (value === undefined) {
      throw new Error('MediaStorageSOPClassUID is undefined');
    }
    return value;
  }

  // Media Storage SOP Instance UID
  get MediaStorageSOPInstanceUID(): string | undefined {
    return this.x00020003;
  }

  get x00020003(): string | undefined {
    const value = this.dwResponse['00020003']?.Value;
    return convert(value?.[0], 0x00020003, 'string');
  }

  getMediaStorageSOPInstanceUID(): string {
    const value = this.x00020003;
    if (value === undefined) {
      throw new Error('MediaStorageSOPInstanceUID is undefined');
    }
    return value;
  }

  // Transfer Syntax UID
  get TransferSyntaxUID(): string | undefined {
    return this.x00020010;
  }

  get x00020010(): string | undefined {
    const value = this.dwResponse['00020010']?.Value;
    return convert(value?.[0], 0x00020010, 'string');
  }

  getTransferSyntaxUID(): string {
    const value = this.x00020010;
    if (value === undefined) {
      throw new Error('TransferSyntaxUID is undefined');
    }
    return value;
  }

  // Implementation Class UID
  get ImplementationClassUID(): string | undefined {
    return this.x00020012;
  }

  get x00020012(): string | undefined {
    const value = this.dwResponse['00020012']?.Value;
    return convert(value?.[0], 0x00020012, 'string');
  }

  getImplementationClassUID(): string {
    const value = this.x00020012;
    if (value === undefined) {
      throw new Error('ImplementationClassUID is undefined');
    }
    return value;
  }

  // Implementation Version Name
  get ImplementationVersionName(): string | undefined {
    return this.x00020013;
  }

  get x00020013(): string | undefined {
    const value = this.dwResponse['00020013']?.Value;
    return convert(value?.[0], 0x00020013, 'string');
  }

  getImplementationVersionName(): string {
    const value = this.x00020013;
    if (value === undefined) {
      throw new Error('ImplementationVersionName is undefined');
    }
    return value;
  }

  // Source Application Entity Title
  get SourceApplicationEntityTitle(): string | undefined {
    return this.x00020016;
  }

  get x00020016(): string | undefined {
    const value = this.dwResponse['00020016']?.Value;
    return convert(value?.[0], 0x00020016, 'string');
  }

  getSourceApplicationEntityTitle(): string {
    const value = this.x00020016;
    if (value === undefined) {
      throw new Error('SourceApplicationEntityTitle is undefined');
    }
    return value;
  }

  // Sending Application Entity Title
  get SendingApplicationEntityTitle(): string | undefined {
    return this.x00020017;
  }

  get x00020017(): string | undefined {
    const value = this.dwResponse['00020017']?.Value;
    return convert(value?.[0], 0x00020017, 'string');
  }

  getSendingApplicationEntityTitle(): string {
    const value = this.x00020017;
    if (value === undefined) {
      throw new Error('SendingApplicationEntityTitle is undefined');
    }
    return value;
  }

  // Receiving Application Entity Title
  get ReceivingApplicationEntityTitle(): string | undefined {
    return this.x00020018;
  }

  get x00020018(): string | undefined {
    const value = this.dwResponse['00020018']?.Value;
    return convert(value?.[0], 0x00020018, 'string');
  }

  getReceivingApplicationEntityTitle(): string {
    const value = this.x00020018;
    if (value === undefined) {
      throw new Error('ReceivingApplicationEntityTitle is undefined');
    }
    return value;
  }

  // Private Information Creator UID
  get PrivateInformationCreatorUID(): string | undefined {
    return this.x00020100;
  }

  get x00020100(): string | undefined {
    const value = this.dwResponse['00020100']?.Value;
    return convert(value?.[0], 0x00020100, 'string');
  }

  getPrivateInformationCreatorUID(): string {
    const value = this.x00020100;
    if (value === undefined) {
      throw new Error('PrivateInformationCreatorUID is undefined');
    }
    return value;
  }

  // File-set ID
  get FileSetID(): string | undefined {
    return this.x00041130;
  }

  get x00041130(): string | undefined {
    const value = this.dwResponse['00041130']?.Value;
    return convert(value?.[0], 0x00041130, 'string');
  }

  getFileSetID(): string {
    const value = this.x00041130;
    if (value === undefined) {
      throw new Error('FileSetID is undefined');
    }
    return value;
  }

  // File-set Descriptor File ID
  get FileSetDescriptorFileID(): Array<string | undefined> | undefined {
    return this.x00041141;
  }

  get x00041141(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00041141']?.Value;
    return convert(value, 0x00041141, 'Array<string | undefined>');
  }

  getFileSetDescriptorFileID(): Array<string | undefined> {
    const value = this.x00041141;
    if (value === undefined) {
      throw new Error('FileSetDescriptorFileID is undefined');
    }
    return value;
  }

  // Specific Character Set of File-set Descriptor File
  get SpecificCharacterSetOfFileSetDescriptorFile(): string | undefined {
    return this.x00041142;
  }

  get x00041142(): string | undefined {
    const value = this.dwResponse['00041142']?.Value;
    return convert(value?.[0], 0x00041142, 'string');
  }

  getSpecificCharacterSetOfFileSetDescriptorFile(): string {
    const value = this.x00041142;
    if (value === undefined) {
      throw new Error('SpecificCharacterSetOfFileSetDescriptorFile is undefined');
    }
    return value;
  }

  // Offset of the First Directory Record of the Root Directory Entity
  get OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity(): number | undefined {
    return this.x00041200;
  }

  get x00041200(): number | undefined {
    const value = this.dwResponse['00041200']?.Value;
    return convert(value?.[0], 0x00041200, 'number');
  }

  getOffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity(): number {
    const value = this.x00041200;
    if (value === undefined) {
      throw new Error('OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity is undefined');
    }
    return value;
  }

  // Offset of the Last Directory Record of the Root Directory Entity
  get OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity(): number | undefined {
    return this.x00041202;
  }

  get x00041202(): number | undefined {
    const value = this.dwResponse['00041202']?.Value;
    return convert(value?.[0], 0x00041202, 'number');
  }

  getOffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity(): number {
    const value = this.x00041202;
    if (value === undefined) {
      throw new Error('OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity is undefined');
    }
    return value;
  }

  // File-set Consistency Flag
  get FileSetConsistencyFlag(): number | undefined {
    return this.x00041212;
  }

  get x00041212(): number | undefined {
    const value = this.dwResponse['00041212']?.Value;
    return convert(value?.[0], 0x00041212, 'number');
  }

  getFileSetConsistencyFlag(): number {
    const value = this.x00041212;
    if (value === undefined) {
      throw new Error('FileSetConsistencyFlag is undefined');
    }
    return value;
  }

  // Directory Record Sequence
  get DirectoryRecordSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00041220;
  }

  get x00041220(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00041220']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDirectoryRecordSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00041220;
    if (value === undefined) {
      throw new Error('DirectoryRecordSequence is undefined');
    }
    return value;
  }

  // Offset of the Next Directory Record
  get OffsetOfTheNextDirectoryRecord(): number | undefined {
    return this.x00041400;
  }

  get x00041400(): number | undefined {
    const value = this.dwResponse['00041400']?.Value;
    return convert(value?.[0], 0x00041400, 'number');
  }

  getOffsetOfTheNextDirectoryRecord(): number {
    const value = this.x00041400;
    if (value === undefined) {
      throw new Error('OffsetOfTheNextDirectoryRecord is undefined');
    }
    return value;
  }

  // Record In-use Flag
  get RecordInUseFlag(): number | undefined {
    return this.x00041410;
  }

  get x00041410(): number | undefined {
    const value = this.dwResponse['00041410']?.Value;
    return convert(value?.[0], 0x00041410, 'number');
  }

  getRecordInUseFlag(): number {
    const value = this.x00041410;
    if (value === undefined) {
      throw new Error('RecordInUseFlag is undefined');
    }
    return value;
  }

  // Offset of Referenced Lower-Level Directory Entity
  get OffsetOfReferencedLowerLevelDirectoryEntity(): number | undefined {
    return this.x00041420;
  }

  get x00041420(): number | undefined {
    const value = this.dwResponse['00041420']?.Value;
    return convert(value?.[0], 0x00041420, 'number');
  }

  getOffsetOfReferencedLowerLevelDirectoryEntity(): number {
    const value = this.x00041420;
    if (value === undefined) {
      throw new Error('OffsetOfReferencedLowerLevelDirectoryEntity is undefined');
    }
    return value;
  }

  // Directory Record Type
  get DirectoryRecordType(): string | undefined {
    return this.x00041430;
  }

  get x00041430(): string | undefined {
    const value = this.dwResponse['00041430']?.Value;
    return convert(value?.[0], 0x00041430, 'string');
  }

  getDirectoryRecordType(): string {
    const value = this.x00041430;
    if (value === undefined) {
      throw new Error('DirectoryRecordType is undefined');
    }
    return value;
  }

  // Private Record UID
  get PrivateRecordUID(): string | undefined {
    return this.x00041432;
  }

  get x00041432(): string | undefined {
    const value = this.dwResponse['00041432']?.Value;
    return convert(value?.[0], 0x00041432, 'string');
  }

  getPrivateRecordUID(): string {
    const value = this.x00041432;
    if (value === undefined) {
      throw new Error('PrivateRecordUID is undefined');
    }
    return value;
  }

  // Referenced File ID
  get ReferencedFileID(): Array<string | undefined> | undefined {
    return this.x00041500;
  }

  get x00041500(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00041500']?.Value;
    return convert(value, 0x00041500, 'Array<string | undefined>');
  }

  getReferencedFileID(): Array<string | undefined> {
    const value = this.x00041500;
    if (value === undefined) {
      throw new Error('ReferencedFileID is undefined');
    }
    return value;
  }

  // MRDR Directory Record Offset
  get MRDRDirectoryRecordOffset(): number | undefined {
    return this.x00041504;
  }

  get x00041504(): number | undefined {
    const value = this.dwResponse['00041504']?.Value;
    return convert(value?.[0], 0x00041504, 'number');
  }

  getMRDRDirectoryRecordOffset(): number {
    const value = this.x00041504;
    if (value === undefined) {
      throw new Error('MRDRDirectoryRecordOffset is undefined');
    }
    return value;
  }

  // Referenced SOP Class UID in File
  get ReferencedSOPClassUIDInFile(): string | undefined {
    return this.x00041510;
  }

  get x00041510(): string | undefined {
    const value = this.dwResponse['00041510']?.Value;
    return convert(value?.[0], 0x00041510, 'string');
  }

  getReferencedSOPClassUIDInFile(): string {
    const value = this.x00041510;
    if (value === undefined) {
      throw new Error('ReferencedSOPClassUIDInFile is undefined');
    }
    return value;
  }

  // Referenced SOP Instance UID in File
  get ReferencedSOPInstanceUIDInFile(): string | undefined {
    return this.x00041511;
  }

  get x00041511(): string | undefined {
    const value = this.dwResponse['00041511']?.Value;
    return convert(value?.[0], 0x00041511, 'string');
  }

  getReferencedSOPInstanceUIDInFile(): string {
    const value = this.x00041511;
    if (value === undefined) {
      throw new Error('ReferencedSOPInstanceUIDInFile is undefined');
    }
    return value;
  }

  // Referenced Transfer Syntax UID in File
  get ReferencedTransferSyntaxUIDInFile(): string | undefined {
    return this.x00041512;
  }

  get x00041512(): string | undefined {
    const value = this.dwResponse['00041512']?.Value;
    return convert(value?.[0], 0x00041512, 'string');
  }

  getReferencedTransferSyntaxUIDInFile(): string {
    const value = this.x00041512;
    if (value === undefined) {
      throw new Error('ReferencedTransferSyntaxUIDInFile is undefined');
    }
    return value;
  }

  // Referenced Related General SOP Class UID in File
  get ReferencedRelatedGeneralSOPClassUIDInFile(): Array<string | undefined> | undefined {
    return this.x0004151a;
  }

  get x0004151a(): Array<string | undefined> | undefined {
    const value = this.dwResponse['0004151A']?.Value;
    return convert(value, 0x0004151a, 'Array<string | undefined>');
  }

  getReferencedRelatedGeneralSOPClassUIDInFile(): Array<string | undefined> {
    const value = this.x0004151a;
    if (value === undefined) {
      throw new Error('ReferencedRelatedGeneralSOPClassUIDInFile is undefined');
    }
    return value;
  }

  // Number of References
  get NumberOfReferences(): number | undefined {
    return this.x00041600;
  }

  get x00041600(): number | undefined {
    const value = this.dwResponse['00041600']?.Value;
    return convert(value?.[0], 0x00041600, 'number');
  }

  getNumberOfReferences(): number {
    const value = this.x00041600;
    if (value === undefined) {
      throw new Error('NumberOfReferences is undefined');
    }
    return value;
  }

  // Length to End
  get LengthToEnd(): number | undefined {
    return this.x00080001;
  }

  get x00080001(): number | undefined {
    const value = this.dwResponse['00080001']?.Value;
    return convert(value?.[0], 0x00080001, 'number');
  }

  getLengthToEnd(): number {
    const value = this.x00080001;
    if (value === undefined) {
      throw new Error('LengthToEnd is undefined');
    }
    return value;
  }

  // Specific Character Set
  get SpecificCharacterSet(): Array<string | undefined> | undefined {
    return this.x00080005;
  }

  get x00080005(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00080005']?.Value;
    return convert(value, 0x00080005, 'Array<string | undefined>');
  }

  getSpecificCharacterSet(): Array<string | undefined> {
    const value = this.x00080005;
    if (value === undefined) {
      throw new Error('SpecificCharacterSet is undefined');
    }
    return value;
  }

  // Language Code Sequence
  get LanguageCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00080006;
  }

  get x00080006(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00080006']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getLanguageCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00080006;
    if (value === undefined) {
      throw new Error('LanguageCodeSequence is undefined');
    }
    return value;
  }

  // Image Type
  get ImageType(): Array<string | undefined> | undefined {
    return this.x00080008;
  }

  get x00080008(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00080008']?.Value;
    return convert(value, 0x00080008, 'Array<string | undefined>');
  }

  getImageType(): Array<string | undefined> {
    const value = this.x00080008;
    if (value === undefined) {
      throw new Error('ImageType is undefined');
    }
    return value;
  }

  // Recognition Code
  get RecognitionCode(): string | undefined {
    return this.x00080010;
  }

  get x00080010(): string | undefined {
    const value = this.dwResponse['00080010']?.Value;
    return convert(value?.[0], 0x00080010, 'string');
  }

  getRecognitionCode(): string {
    const value = this.x00080010;
    if (value === undefined) {
      throw new Error('RecognitionCode is undefined');
    }
    return value;
  }

  // Instance Creation Date
  get InstanceCreationDate(): Date | undefined {
    return this.x00080012;
  }

  get x00080012(): Date | undefined {
    const value = this.dwResponse['00080012']?.Value;
    return convert(value?.[0], 0x00080012, 'Date');
  }

  getInstanceCreationDate(): Date {
    const value = this.x00080012;
    if (value === undefined) {
      throw new Error('InstanceCreationDate is undefined');
    }
    return value;
  }

  // Instance Creation Time
  get InstanceCreationTime(): string | undefined {
    return this.x00080013;
  }

  get x00080013(): string | undefined {
    const value = this.dwResponse['00080013']?.Value;
    return convert(value?.[0], 0x00080013, 'string');
  }

  getInstanceCreationTime(): string {
    const value = this.x00080013;
    if (value === undefined) {
      throw new Error('InstanceCreationTime is undefined');
    }
    return value;
  }

  // Instance Creator UID
  get InstanceCreatorUID(): string | undefined {
    return this.x00080014;
  }

  get x00080014(): string | undefined {
    const value = this.dwResponse['00080014']?.Value;
    return convert(value?.[0], 0x00080014, 'string');
  }

  getInstanceCreatorUID(): string {
    const value = this.x00080014;
    if (value === undefined) {
      throw new Error('InstanceCreatorUID is undefined');
    }
    return value;
  }

  // Instance Coercion DateTime
  get InstanceCoercionDateTime(): string | undefined {
    return this.x00080015;
  }

  get x00080015(): string | undefined {
    const value = this.dwResponse['00080015']?.Value;
    return convert(value?.[0], 0x00080015, 'string');
  }

  getInstanceCoercionDateTime(): string {
    const value = this.x00080015;
    if (value === undefined) {
      throw new Error('InstanceCoercionDateTime is undefined');
    }
    return value;
  }

  // SOP Class UID
  get SOPClassUID(): string | undefined {
    return this.x00080016;
  }

  get x00080016(): string | undefined {
    const value = this.dwResponse['00080016']?.Value;
    return convert(value?.[0], 0x00080016, 'string');
  }

  getSOPClassUID(): string {
    const value = this.x00080016;
    if (value === undefined) {
      throw new Error('SOPClassUID is undefined');
    }
    return value;
  }

  // SOP Instance UID
  get SOPInstanceUID(): string | undefined {
    return this.x00080018;
  }

  get x00080018(): string | undefined {
    const value = this.dwResponse['00080018']?.Value;
    return convert(value?.[0], 0x00080018, 'string');
  }

  getSOPInstanceUID(): string {
    const value = this.x00080018;
    if (value === undefined) {
      throw new Error('SOPInstanceUID is undefined');
    }
    return value;
  }

  // Related General SOP Class UID
  get RelatedGeneralSOPClassUID(): Array<string | undefined> | undefined {
    return this.x0008001a;
  }

  get x0008001a(): Array<string | undefined> | undefined {
    const value = this.dwResponse['0008001A']?.Value;
    return convert(value, 0x0008001a, 'Array<string | undefined>');
  }

  getRelatedGeneralSOPClassUID(): Array<string | undefined> {
    const value = this.x0008001a;
    if (value === undefined) {
      throw new Error('RelatedGeneralSOPClassUID is undefined');
    }
    return value;
  }

  // Original Specialized SOP Class UID
  get OriginalSpecializedSOPClassUID(): string | undefined {
    return this.x0008001b;
  }

  get x0008001b(): string | undefined {
    const value = this.dwResponse['0008001B']?.Value;
    return convert(value?.[0], 0x0008001b, 'string');
  }

  getOriginalSpecializedSOPClassUID(): string {
    const value = this.x0008001b;
    if (value === undefined) {
      throw new Error('OriginalSpecializedSOPClassUID is undefined');
    }
    return value;
  }

  // Study Date
  get StudyDate(): Date | undefined {
    return this.x00080020;
  }

  get x00080020(): Date | undefined {
    const value = this.dwResponse['00080020']?.Value;
    return convert(value?.[0], 0x00080020, 'Date');
  }

  getStudyDate(): Date {
    const value = this.x00080020;
    if (value === undefined) {
      throw new Error('StudyDate is undefined');
    }
    return value;
  }

  // Series Date
  get SeriesDate(): Date | undefined {
    return this.x00080021;
  }

  get x00080021(): Date | undefined {
    const value = this.dwResponse['00080021']?.Value;
    return convert(value?.[0], 0x00080021, 'Date');
  }

  getSeriesDate(): Date {
    const value = this.x00080021;
    if (value === undefined) {
      throw new Error('SeriesDate is undefined');
    }
    return value;
  }

  // Acquisition Date
  get AcquisitionDate(): Date | undefined {
    return this.x00080022;
  }

  get x00080022(): Date | undefined {
    const value = this.dwResponse['00080022']?.Value;
    return convert(value?.[0], 0x00080022, 'Date');
  }

  getAcquisitionDate(): Date {
    const value = this.x00080022;
    if (value === undefined) {
      throw new Error('AcquisitionDate is undefined');
    }
    return value;
  }

  // Content Date
  get ContentDate(): Date | undefined {
    return this.x00080023;
  }

  get x00080023(): Date | undefined {
    const value = this.dwResponse['00080023']?.Value;
    return convert(value?.[0], 0x00080023, 'Date');
  }

  getContentDate(): Date {
    const value = this.x00080023;
    if (value === undefined) {
      throw new Error('ContentDate is undefined');
    }
    return value;
  }

  // Overlay Date
  get OverlayDate(): Date | undefined {
    return this.x00080024;
  }

  get x00080024(): Date | undefined {
    const value = this.dwResponse['00080024']?.Value;
    return convert(value?.[0], 0x00080024, 'Date');
  }

  getOverlayDate(): Date {
    const value = this.x00080024;
    if (value === undefined) {
      throw new Error('OverlayDate is undefined');
    }
    return value;
  }

  // Curve Date
  get CurveDate(): Date | undefined {
    return this.x00080025;
  }

  get x00080025(): Date | undefined {
    const value = this.dwResponse['00080025']?.Value;
    return convert(value?.[0], 0x00080025, 'Date');
  }

  getCurveDate(): Date {
    const value = this.x00080025;
    if (value === undefined) {
      throw new Error('CurveDate is undefined');
    }
    return value;
  }

  // Acquisition DateTime
  get AcquisitionDateTime(): string | undefined {
    return this.x0008002a;
  }

  get x0008002a(): string | undefined {
    const value = this.dwResponse['0008002A']?.Value;
    return convert(value?.[0], 0x0008002a, 'string');
  }

  getAcquisitionDateTime(): string {
    const value = this.x0008002a;
    if (value === undefined) {
      throw new Error('AcquisitionDateTime is undefined');
    }
    return value;
  }

  // Study Time
  get StudyTime(): string | undefined {
    return this.x00080030;
  }

  get x00080030(): string | undefined {
    const value = this.dwResponse['00080030']?.Value;
    return convert(value?.[0], 0x00080030, 'string');
  }

  getStudyTime(): string {
    const value = this.x00080030;
    if (value === undefined) {
      throw new Error('StudyTime is undefined');
    }
    return value;
  }

  // Series Time
  get SeriesTime(): string | undefined {
    return this.x00080031;
  }

  get x00080031(): string | undefined {
    const value = this.dwResponse['00080031']?.Value;
    return convert(value?.[0], 0x00080031, 'string');
  }

  getSeriesTime(): string {
    const value = this.x00080031;
    if (value === undefined) {
      throw new Error('SeriesTime is undefined');
    }
    return value;
  }

  // Acquisition Time
  get AcquisitionTime(): string | undefined {
    return this.x00080032;
  }

  get x00080032(): string | undefined {
    const value = this.dwResponse['00080032']?.Value;
    return convert(value?.[0], 0x00080032, 'string');
  }

  getAcquisitionTime(): string {
    const value = this.x00080032;
    if (value === undefined) {
      throw new Error('AcquisitionTime is undefined');
    }
    return value;
  }

  // Content Time
  get ContentTime(): string | undefined {
    return this.x00080033;
  }

  get x00080033(): string | undefined {
    const value = this.dwResponse['00080033']?.Value;
    return convert(value?.[0], 0x00080033, 'string');
  }

  getContentTime(): string {
    const value = this.x00080033;
    if (value === undefined) {
      throw new Error('ContentTime is undefined');
    }
    return value;
  }

  // Overlay Time
  get OverlayTime(): string | undefined {
    return this.x00080034;
  }

  get x00080034(): string | undefined {
    const value = this.dwResponse['00080034']?.Value;
    return convert(value?.[0], 0x00080034, 'string');
  }

  getOverlayTime(): string {
    const value = this.x00080034;
    if (value === undefined) {
      throw new Error('OverlayTime is undefined');
    }
    return value;
  }

  // Curve Time
  get CurveTime(): string | undefined {
    return this.x00080035;
  }

  get x00080035(): string | undefined {
    const value = this.dwResponse['00080035']?.Value;
    return convert(value?.[0], 0x00080035, 'string');
  }

  getCurveTime(): string {
    const value = this.x00080035;
    if (value === undefined) {
      throw new Error('CurveTime is undefined');
    }
    return value;
  }

  // Data Set Type
  get DataSetType(): number | undefined {
    return this.x00080040;
  }

  get x00080040(): number | undefined {
    const value = this.dwResponse['00080040']?.Value;
    return convert(value?.[0], 0x00080040, 'number');
  }

  getDataSetType(): number {
    const value = this.x00080040;
    if (value === undefined) {
      throw new Error('DataSetType is undefined');
    }
    return value;
  }

  // Data Set Subtype
  get DataSetSubtype(): string | undefined {
    return this.x00080041;
  }

  get x00080041(): string | undefined {
    const value = this.dwResponse['00080041']?.Value;
    return convert(value?.[0], 0x00080041, 'string');
  }

  getDataSetSubtype(): string {
    const value = this.x00080041;
    if (value === undefined) {
      throw new Error('DataSetSubtype is undefined');
    }
    return value;
  }

  // Nuclear Medicine Series Type
  get NuclearMedicineSeriesType(): string | undefined {
    return this.x00080042;
  }

  get x00080042(): string | undefined {
    const value = this.dwResponse['00080042']?.Value;
    return convert(value?.[0], 0x00080042, 'string');
  }

  getNuclearMedicineSeriesType(): string {
    const value = this.x00080042;
    if (value === undefined) {
      throw new Error('NuclearMedicineSeriesType is undefined');
    }
    return value;
  }

  // Accession Number
  get AccessionNumber(): string | undefined {
    return this.x00080050;
  }

  get x00080050(): string | undefined {
    const value = this.dwResponse['00080050']?.Value;
    return convert(value?.[0], 0x00080050, 'string');
  }

  getAccessionNumber(): string {
    const value = this.x00080050;
    if (value === undefined) {
      throw new Error('AccessionNumber is undefined');
    }
    return value;
  }

  // Issuer of Accession Number Sequence
  get IssuerOfAccessionNumberSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00080051;
  }

  get x00080051(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00080051']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIssuerOfAccessionNumberSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00080051;
    if (value === undefined) {
      throw new Error('IssuerOfAccessionNumberSequence is undefined');
    }
    return value;
  }

  // Query/Retrieve Level
  get QueryRetrieveLevel(): string | undefined {
    return this.x00080052;
  }

  get x00080052(): string | undefined {
    const value = this.dwResponse['00080052']?.Value;
    return convert(value?.[0], 0x00080052, 'string');
  }

  getQueryRetrieveLevel(): string {
    const value = this.x00080052;
    if (value === undefined) {
      throw new Error('QueryRetrieveLevel is undefined');
    }
    return value;
  }

  // Query/Retrieve View
  get QueryRetrieveView(): string | undefined {
    return this.x00080053;
  }

  get x00080053(): string | undefined {
    const value = this.dwResponse['00080053']?.Value;
    return convert(value?.[0], 0x00080053, 'string');
  }

  getQueryRetrieveView(): string {
    const value = this.x00080053;
    if (value === undefined) {
      throw new Error('QueryRetrieveView is undefined');
    }
    return value;
  }

  // Retrieve AE Title
  get RetrieveAETitle(): Array<string | undefined> | undefined {
    return this.x00080054;
  }

  get x00080054(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00080054']?.Value;
    return convert(value, 0x00080054, 'Array<string | undefined>');
  }

  getRetrieveAETitle(): Array<string | undefined> {
    const value = this.x00080054;
    if (value === undefined) {
      throw new Error('RetrieveAETitle is undefined');
    }
    return value;
  }

  // Instance Availability
  get InstanceAvailability(): string | undefined {
    return this.x00080056;
  }

  get x00080056(): string | undefined {
    const value = this.dwResponse['00080056']?.Value;
    return convert(value?.[0], 0x00080056, 'string');
  }

  getInstanceAvailability(): string {
    const value = this.x00080056;
    if (value === undefined) {
      throw new Error('InstanceAvailability is undefined');
    }
    return value;
  }

  // Failed SOP Instance UID List
  get FailedSOPInstanceUIDList(): Array<string | undefined> | undefined {
    return this.x00080058;
  }

  get x00080058(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00080058']?.Value;
    return convert(value, 0x00080058, 'Array<string | undefined>');
  }

  getFailedSOPInstanceUIDList(): Array<string | undefined> {
    const value = this.x00080058;
    if (value === undefined) {
      throw new Error('FailedSOPInstanceUIDList is undefined');
    }
    return value;
  }

  // Modality
  get Modality(): string | undefined {
    return this.x00080060;
  }

  get x00080060(): string | undefined {
    const value = this.dwResponse['00080060']?.Value;
    return convert(value?.[0], 0x00080060, 'string');
  }

  getModality(): string {
    const value = this.x00080060;
    if (value === undefined) {
      throw new Error('Modality is undefined');
    }
    return value;
  }

  // Modalities in Study
  get ModalitiesInStudy(): Array<string | undefined> | undefined {
    return this.x00080061;
  }

  get x00080061(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00080061']?.Value;
    return convert(value, 0x00080061, 'Array<string | undefined>');
  }

  getModalitiesInStudy(): Array<string | undefined> {
    const value = this.x00080061;
    if (value === undefined) {
      throw new Error('ModalitiesInStudy is undefined');
    }
    return value;
  }

  // SOP Classes in Study
  get SOPClassesInStudy(): Array<string | undefined> | undefined {
    return this.x00080062;
  }

  get x00080062(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00080062']?.Value;
    return convert(value, 0x00080062, 'Array<string | undefined>');
  }

  getSOPClassesInStudy(): Array<string | undefined> {
    const value = this.x00080062;
    if (value === undefined) {
      throw new Error('SOPClassesInStudy is undefined');
    }
    return value;
  }

  // Conversion Type
  get ConversionType(): string | undefined {
    return this.x00080064;
  }

  get x00080064(): string | undefined {
    const value = this.dwResponse['00080064']?.Value;
    return convert(value?.[0], 0x00080064, 'string');
  }

  getConversionType(): string {
    const value = this.x00080064;
    if (value === undefined) {
      throw new Error('ConversionType is undefined');
    }
    return value;
  }

  // Presentation Intent Type
  get PresentationIntentType(): string | undefined {
    return this.x00080068;
  }

  get x00080068(): string | undefined {
    const value = this.dwResponse['00080068']?.Value;
    return convert(value?.[0], 0x00080068, 'string');
  }

  getPresentationIntentType(): string {
    const value = this.x00080068;
    if (value === undefined) {
      throw new Error('PresentationIntentType is undefined');
    }
    return value;
  }

  // Manufacturer
  get Manufacturer(): string | undefined {
    return this.x00080070;
  }

  get x00080070(): string | undefined {
    const value = this.dwResponse['00080070']?.Value;
    return convert(value?.[0], 0x00080070, 'string');
  }

  getManufacturer(): string {
    const value = this.x00080070;
    if (value === undefined) {
      throw new Error('Manufacturer is undefined');
    }
    return value;
  }

  // Institution Name
  get InstitutionName(): string | undefined {
    return this.x00080080;
  }

  get x00080080(): string | undefined {
    const value = this.dwResponse['00080080']?.Value;
    return convert(value?.[0], 0x00080080, 'string');
  }

  getInstitutionName(): string {
    const value = this.x00080080;
    if (value === undefined) {
      throw new Error('InstitutionName is undefined');
    }
    return value;
  }

  // Institution Code Sequence
  get InstitutionCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00080082;
  }

  get x00080082(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00080082']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getInstitutionCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00080082;
    if (value === undefined) {
      throw new Error('InstitutionCodeSequence is undefined');
    }
    return value;
  }

  // Referring Physician's Name
  get ReferringPhysicianName(): any | undefined {
    return this.x00080090;
  }

  get x00080090(): any | undefined {
    const value = this.dwResponse['00080090']?.Value;
    return convert(value?.[0], 0x00080090, 'any');
  }

  getReferringPhysicianName(): any {
    const value = this.x00080090;
    if (value === undefined) {
      throw new Error('ReferringPhysicianName is undefined');
    }
    return value;
  }

  // Referring Physician's Telephone Numbers
  get ReferringPhysicianTelephoneNumbers(): Array<string | undefined> | undefined {
    return this.x00080094;
  }

  get x00080094(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00080094']?.Value;
    return convert(value, 0x00080094, 'Array<string | undefined>');
  }

  getReferringPhysicianTelephoneNumbers(): Array<string | undefined> {
    const value = this.x00080094;
    if (value === undefined) {
      throw new Error('ReferringPhysicianTelephoneNumbers is undefined');
    }
    return value;
  }

  // Referring Physician Identification Sequence
  get ReferringPhysicianIdentificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00080096;
  }

  get x00080096(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00080096']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferringPhysicianIdentificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00080096;
    if (value === undefined) {
      throw new Error('ReferringPhysicianIdentificationSequence is undefined');
    }
    return value;
  }

  // Code Value
  get CodeValue(): string | undefined {
    return this.x00080100;
  }

  get x00080100(): string | undefined {
    const value = this.dwResponse['00080100']?.Value;
    return convert(value?.[0], 0x00080100, 'string');
  }

  getCodeValue(): string {
    const value = this.x00080100;
    if (value === undefined) {
      throw new Error('CodeValue is undefined');
    }
    return value;
  }

  // Extended Code Value
  get ExtendedCodeValue(): string | undefined {
    return this.x00080101;
  }

  get x00080101(): string | undefined {
    const value = this.dwResponse['00080101']?.Value;
    return convert(value?.[0], 0x00080101, 'string');
  }

  getExtendedCodeValue(): string {
    const value = this.x00080101;
    if (value === undefined) {
      throw new Error('ExtendedCodeValue is undefined');
    }
    return value;
  }

  // Coding Scheme Designator
  get CodingSchemeDesignator(): string | undefined {
    return this.x00080102;
  }

  get x00080102(): string | undefined {
    const value = this.dwResponse['00080102']?.Value;
    return convert(value?.[0], 0x00080102, 'string');
  }

  getCodingSchemeDesignator(): string {
    const value = this.x00080102;
    if (value === undefined) {
      throw new Error('CodingSchemeDesignator is undefined');
    }
    return value;
  }

  // Coding Scheme Version
  get CodingSchemeVersion(): string | undefined {
    return this.x00080103;
  }

  get x00080103(): string | undefined {
    const value = this.dwResponse['00080103']?.Value;
    return convert(value?.[0], 0x00080103, 'string');
  }

  getCodingSchemeVersion(): string {
    const value = this.x00080103;
    if (value === undefined) {
      throw new Error('CodingSchemeVersion is undefined');
    }
    return value;
  }

  // Code Meaning
  get CodeMeaning(): string | undefined {
    return this.x00080104;
  }

  get x00080104(): string | undefined {
    const value = this.dwResponse['00080104']?.Value;
    return convert(value?.[0], 0x00080104, 'string');
  }

  getCodeMeaning(): string {
    const value = this.x00080104;
    if (value === undefined) {
      throw new Error('CodeMeaning is undefined');
    }
    return value;
  }

  // Mapping Resource
  get MappingResource(): string | undefined {
    return this.x00080105;
  }

  get x00080105(): string | undefined {
    const value = this.dwResponse['00080105']?.Value;
    return convert(value?.[0], 0x00080105, 'string');
  }

  getMappingResource(): string {
    const value = this.x00080105;
    if (value === undefined) {
      throw new Error('MappingResource is undefined');
    }
    return value;
  }

  // Context Group Version
  get ContextGroupVersion(): string | undefined {
    return this.x00080106;
  }

  get x00080106(): string | undefined {
    const value = this.dwResponse['00080106']?.Value;
    return convert(value?.[0], 0x00080106, 'string');
  }

  getContextGroupVersion(): string {
    const value = this.x00080106;
    if (value === undefined) {
      throw new Error('ContextGroupVersion is undefined');
    }
    return value;
  }

  // Context Group Local Version
  get ContextGroupLocalVersion(): string | undefined {
    return this.x00080107;
  }

  get x00080107(): string | undefined {
    const value = this.dwResponse['00080107']?.Value;
    return convert(value?.[0], 0x00080107, 'string');
  }

  getContextGroupLocalVersion(): string {
    const value = this.x00080107;
    if (value === undefined) {
      throw new Error('ContextGroupLocalVersion is undefined');
    }
    return value;
  }

  // Context Group Extension Flag
  get ContextGroupExtensionFlag(): string | undefined {
    return this.x0008010b;
  }

  get x0008010b(): string | undefined {
    const value = this.dwResponse['0008010B']?.Value;
    return convert(value?.[0], 0x0008010b, 'string');
  }

  getContextGroupExtensionFlag(): string {
    const value = this.x0008010b;
    if (value === undefined) {
      throw new Error('ContextGroupExtensionFlag is undefined');
    }
    return value;
  }

  // Coding Scheme UID
  get CodingSchemeUID(): string | undefined {
    return this.x0008010c;
  }

  get x0008010c(): string | undefined {
    const value = this.dwResponse['0008010C']?.Value;
    return convert(value?.[0], 0x0008010c, 'string');
  }

  getCodingSchemeUID(): string {
    const value = this.x0008010c;
    if (value === undefined) {
      throw new Error('CodingSchemeUID is undefined');
    }
    return value;
  }

  // Context Group Extension Creator UID
  get ContextGroupExtensionCreatorUID(): string | undefined {
    return this.x0008010d;
  }

  get x0008010d(): string | undefined {
    const value = this.dwResponse['0008010D']?.Value;
    return convert(value?.[0], 0x0008010d, 'string');
  }

  getContextGroupExtensionCreatorUID(): string {
    const value = this.x0008010d;
    if (value === undefined) {
      throw new Error('ContextGroupExtensionCreatorUID is undefined');
    }
    return value;
  }

  // Context Identifier
  get ContextIdentifier(): string | undefined {
    return this.x0008010f;
  }

  get x0008010f(): string | undefined {
    const value = this.dwResponse['0008010F']?.Value;
    return convert(value?.[0], 0x0008010f, 'string');
  }

  getContextIdentifier(): string {
    const value = this.x0008010f;
    if (value === undefined) {
      throw new Error('ContextIdentifier is undefined');
    }
    return value;
  }

  // Coding Scheme Identification Sequence
  get CodingSchemeIdentificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00080110;
  }

  get x00080110(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00080110']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCodingSchemeIdentificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00080110;
    if (value === undefined) {
      throw new Error('CodingSchemeIdentificationSequence is undefined');
    }
    return value;
  }

  // Coding Scheme Registry
  get CodingSchemeRegistry(): string | undefined {
    return this.x00080112;
  }

  get x00080112(): string | undefined {
    const value = this.dwResponse['00080112']?.Value;
    return convert(value?.[0], 0x00080112, 'string');
  }

  getCodingSchemeRegistry(): string {
    const value = this.x00080112;
    if (value === undefined) {
      throw new Error('CodingSchemeRegistry is undefined');
    }
    return value;
  }

  // Context UID
  get ContextUID(): string | undefined {
    return this.x00080117;
  }

  get x00080117(): string | undefined {
    const value = this.dwResponse['00080117']?.Value;
    return convert(value?.[0], 0x00080117, 'string');
  }

  getContextUID(): string {
    const value = this.x00080117;
    if (value === undefined) {
      throw new Error('ContextUID is undefined');
    }
    return value;
  }

  // Timezone Offset From UTC
  get TimezoneOffsetFromUTC(): string | undefined {
    return this.x00080201;
  }

  get x00080201(): string | undefined {
    const value = this.dwResponse['00080201']?.Value;
    return convert(value?.[0], 0x00080201, 'string');
  }

  getTimezoneOffsetFromUTC(): string {
    const value = this.x00080201;
    if (value === undefined) {
      throw new Error('TimezoneOffsetFromUTC is undefined');
    }
    return value;
  }

  // Network ID
  get NetworkID(): string | undefined {
    return this.x00081000;
  }

  get x00081000(): string | undefined {
    const value = this.dwResponse['00081000']?.Value;
    return convert(value?.[0], 0x00081000, 'string');
  }

  getNetworkID(): string {
    const value = this.x00081000;
    if (value === undefined) {
      throw new Error('NetworkID is undefined');
    }
    return value;
  }

  // Station Name
  get StationName(): string | undefined {
    return this.x00081010;
  }

  get x00081010(): string | undefined {
    const value = this.dwResponse['00081010']?.Value;
    return convert(value?.[0], 0x00081010, 'string');
  }

  getStationName(): string {
    const value = this.x00081010;
    if (value === undefined) {
      throw new Error('StationName is undefined');
    }
    return value;
  }

  // Study Description
  get StudyDescription(): string | undefined {
    return this.x00081030;
  }

  get x00081030(): string | undefined {
    const value = this.dwResponse['00081030']?.Value;
    return convert(value?.[0], 0x00081030, 'string');
  }

  getStudyDescription(): string {
    const value = this.x00081030;
    if (value === undefined) {
      throw new Error('StudyDescription is undefined');
    }
    return value;
  }

  // Procedure Code Sequence
  get ProcedureCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081032;
  }

  get x00081032(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081032']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getProcedureCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081032;
    if (value === undefined) {
      throw new Error('ProcedureCodeSequence is undefined');
    }
    return value;
  }

  // Series Description
  get SeriesDescription(): string | undefined {
    return this.x0008103e;
  }

  get x0008103e(): string | undefined {
    const value = this.dwResponse['0008103E']?.Value;
    return convert(value?.[0], 0x0008103e, 'string');
  }

  getSeriesDescription(): string {
    const value = this.x0008103e;
    if (value === undefined) {
      throw new Error('SeriesDescription is undefined');
    }
    return value;
  }

  // Series Description Code Sequence
  get SeriesDescriptionCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0008103f;
  }

  get x0008103f(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0008103F']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSeriesDescriptionCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0008103f;
    if (value === undefined) {
      throw new Error('SeriesDescriptionCodeSequence is undefined');
    }
    return value;
  }

  // Institutional Department Name
  get InstitutionalDepartmentName(): string | undefined {
    return this.x00081040;
  }

  get x00081040(): string | undefined {
    const value = this.dwResponse['00081040']?.Value;
    return convert(value?.[0], 0x00081040, 'string');
  }

  getInstitutionalDepartmentName(): string {
    const value = this.x00081040;
    if (value === undefined) {
      throw new Error('InstitutionalDepartmentName is undefined');
    }
    return value;
  }

  // Physician(s) of Record
  get PhysiciansOfRecord(): Array<any | undefined> | undefined {
    return this.x00081048;
  }

  get x00081048(): Array<any | undefined> | undefined {
    const value = this.dwResponse['00081048']?.Value;
    return convert(value, 0x00081048, 'Array<any | undefined>');
  }

  getPhysiciansOfRecord(): Array<any | undefined> {
    const value = this.x00081048;
    if (value === undefined) {
      throw new Error('PhysiciansOfRecord is undefined');
    }
    return value;
  }

  // Physician(s) of Record Identification Sequence
  get PhysiciansOfRecordIdentificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081049;
  }

  get x00081049(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081049']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPhysiciansOfRecordIdentificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081049;
    if (value === undefined) {
      throw new Error('PhysiciansOfRecordIdentificationSequence is undefined');
    }
    return value;
  }

  // Performing Physician's Name
  get PerformingPhysicianName(): Array<any | undefined> | undefined {
    return this.x00081050;
  }

  get x00081050(): Array<any | undefined> | undefined {
    const value = this.dwResponse['00081050']?.Value;
    return convert(value, 0x00081050, 'Array<any | undefined>');
  }

  getPerformingPhysicianName(): Array<any | undefined> {
    const value = this.x00081050;
    if (value === undefined) {
      throw new Error('PerformingPhysicianName is undefined');
    }
    return value;
  }

  // Performing Physician Identification Sequence
  get PerformingPhysicianIdentificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081052;
  }

  get x00081052(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081052']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPerformingPhysicianIdentificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081052;
    if (value === undefined) {
      throw new Error('PerformingPhysicianIdentificationSequence is undefined');
    }
    return value;
  }

  // Name of Physician(s) Reading Study
  get NameOfPhysiciansReadingStudy(): Array<any | undefined> | undefined {
    return this.x00081060;
  }

  get x00081060(): Array<any | undefined> | undefined {
    const value = this.dwResponse['00081060']?.Value;
    return convert(value, 0x00081060, 'Array<any | undefined>');
  }

  getNameOfPhysiciansReadingStudy(): Array<any | undefined> {
    const value = this.x00081060;
    if (value === undefined) {
      throw new Error('NameOfPhysiciansReadingStudy is undefined');
    }
    return value;
  }

  // Physician(s) Reading Study Identification Sequence
  get PhysiciansReadingStudyIdentificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081062;
  }

  get x00081062(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081062']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPhysiciansReadingStudyIdentificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081062;
    if (value === undefined) {
      throw new Error('PhysiciansReadingStudyIdentificationSequence is undefined');
    }
    return value;
  }

  // Operators' Name
  get OperatorsName(): Array<any | undefined> | undefined {
    return this.x00081070;
  }

  get x00081070(): Array<any | undefined> | undefined {
    const value = this.dwResponse['00081070']?.Value;
    return convert(value, 0x00081070, 'Array<any | undefined>');
  }

  getOperatorsName(): Array<any | undefined> {
    const value = this.x00081070;
    if (value === undefined) {
      throw new Error('OperatorsName is undefined');
    }
    return value;
  }

  // Operator Identification Sequence
  get OperatorIdentificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081072;
  }

  get x00081072(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081072']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOperatorIdentificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081072;
    if (value === undefined) {
      throw new Error('OperatorIdentificationSequence is undefined');
    }
    return value;
  }

  // Admitting Diagnoses Description
  get AdmittingDiagnosesDescription(): Array<string | undefined> | undefined {
    return this.x00081080;
  }

  get x00081080(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00081080']?.Value;
    return convert(value, 0x00081080, 'Array<string | undefined>');
  }

  getAdmittingDiagnosesDescription(): Array<string | undefined> {
    const value = this.x00081080;
    if (value === undefined) {
      throw new Error('AdmittingDiagnosesDescription is undefined');
    }
    return value;
  }

  // Admitting Diagnoses Code Sequence
  get AdmittingDiagnosesCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081084;
  }

  get x00081084(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081084']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAdmittingDiagnosesCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081084;
    if (value === undefined) {
      throw new Error('AdmittingDiagnosesCodeSequence is undefined');
    }
    return value;
  }

  // Manufacturer's Model Name
  get ManufacturerModelName(): string | undefined {
    return this.x00081090;
  }

  get x00081090(): string | undefined {
    const value = this.dwResponse['00081090']?.Value;
    return convert(value?.[0], 0x00081090, 'string');
  }

  getManufacturerModelName(): string {
    const value = this.x00081090;
    if (value === undefined) {
      throw new Error('ManufacturerModelName is undefined');
    }
    return value;
  }

  // Referenced Results Sequence
  get ReferencedResultsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081100;
  }

  get x00081100(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081100']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedResultsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081100;
    if (value === undefined) {
      throw new Error('ReferencedResultsSequence is undefined');
    }
    return value;
  }

  // Referenced Study Sequence
  get ReferencedStudySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081110;
  }

  get x00081110(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081110']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedStudySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081110;
    if (value === undefined) {
      throw new Error('ReferencedStudySequence is undefined');
    }
    return value;
  }

  // Referenced Performed Procedure Step Sequence
  get ReferencedPerformedProcedureStepSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081111;
  }

  get x00081111(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081111']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedPerformedProcedureStepSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081111;
    if (value === undefined) {
      throw new Error('ReferencedPerformedProcedureStepSequence is undefined');
    }
    return value;
  }

  // Referenced Series Sequence
  get ReferencedSeriesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081115;
  }

  get x00081115(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081115']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedSeriesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081115;
    if (value === undefined) {
      throw new Error('ReferencedSeriesSequence is undefined');
    }
    return value;
  }

  // Referenced Patient Sequence
  get ReferencedPatientSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081120;
  }

  get x00081120(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081120']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedPatientSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081120;
    if (value === undefined) {
      throw new Error('ReferencedPatientSequence is undefined');
    }
    return value;
  }

  // Referenced Visit Sequence
  get ReferencedVisitSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081125;
  }

  get x00081125(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081125']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedVisitSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081125;
    if (value === undefined) {
      throw new Error('ReferencedVisitSequence is undefined');
    }
    return value;
  }

  // Referenced Overlay Sequence
  get ReferencedOverlaySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081130;
  }

  get x00081130(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081130']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedOverlaySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081130;
    if (value === undefined) {
      throw new Error('ReferencedOverlaySequence is undefined');
    }
    return value;
  }

  // Referenced Stereometric Instance Sequence
  get ReferencedStereometricInstanceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081134;
  }

  get x00081134(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081134']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedStereometricInstanceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081134;
    if (value === undefined) {
      throw new Error('ReferencedStereometricInstanceSequence is undefined');
    }
    return value;
  }

  // Referenced Waveform Sequence
  get ReferencedWaveformSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0008113a;
  }

  get x0008113a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0008113A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedWaveformSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0008113a;
    if (value === undefined) {
      throw new Error('ReferencedWaveformSequence is undefined');
    }
    return value;
  }

  // Referenced Image Sequence
  get ReferencedImageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081140;
  }

  get x00081140(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081140']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedImageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081140;
    if (value === undefined) {
      throw new Error('ReferencedImageSequence is undefined');
    }
    return value;
  }

  // Referenced Curve Sequence
  get ReferencedCurveSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081145;
  }

  get x00081145(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081145']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedCurveSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081145;
    if (value === undefined) {
      throw new Error('ReferencedCurveSequence is undefined');
    }
    return value;
  }

  // Referenced Instance Sequence
  get ReferencedInstanceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0008114a;
  }

  get x0008114a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0008114A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedInstanceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0008114a;
    if (value === undefined) {
      throw new Error('ReferencedInstanceSequence is undefined');
    }
    return value;
  }

  // Referenced Real World Value Mapping Instance Sequence
  get ReferencedRealWorldValueMappingInstanceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0008114b;
  }

  get x0008114b(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0008114B']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedRealWorldValueMappingInstanceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0008114b;
    if (value === undefined) {
      throw new Error('ReferencedRealWorldValueMappingInstanceSequence is undefined');
    }
    return value;
  }

  // Referenced SOP Class UID
  get ReferencedSOPClassUID(): string | undefined {
    return this.x00081150;
  }

  get x00081150(): string | undefined {
    const value = this.dwResponse['00081150']?.Value;
    return convert(value?.[0], 0x00081150, 'string');
  }

  getReferencedSOPClassUID(): string {
    const value = this.x00081150;
    if (value === undefined) {
      throw new Error('ReferencedSOPClassUID is undefined');
    }
    return value;
  }

  // Referenced SOP Instance UID
  get ReferencedSOPInstanceUID(): string | undefined {
    return this.x00081155;
  }

  get x00081155(): string | undefined {
    const value = this.dwResponse['00081155']?.Value;
    return convert(value?.[0], 0x00081155, 'string');
  }

  getReferencedSOPInstanceUID(): string {
    const value = this.x00081155;
    if (value === undefined) {
      throw new Error('ReferencedSOPInstanceUID is undefined');
    }
    return value;
  }

  // SOP Classes Supported
  get SOPClassesSupported(): Array<string | undefined> | undefined {
    return this.x0008115a;
  }

  get x0008115a(): Array<string | undefined> | undefined {
    const value = this.dwResponse['0008115A']?.Value;
    return convert(value, 0x0008115a, 'Array<string | undefined>');
  }

  getSOPClassesSupported(): Array<string | undefined> {
    const value = this.x0008115a;
    if (value === undefined) {
      throw new Error('SOPClassesSupported is undefined');
    }
    return value;
  }

  // Referenced Frame Number
  get ReferencedFrameNumber(): Array<number | undefined> | undefined {
    return this.x00081160;
  }

  get x00081160(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00081160']?.Value;
    return convert(value, 0x00081160, 'Array<number | undefined>');
  }

  getReferencedFrameNumber(): Array<number | undefined> {
    const value = this.x00081160;
    if (value === undefined) {
      throw new Error('ReferencedFrameNumber is undefined');
    }
    return value;
  }

  // Simple Frame List
  get SimpleFrameList(): Array<number | undefined> | undefined {
    return this.x00081161;
  }

  get x00081161(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00081161']?.Value;
    return convert(value, 0x00081161, 'Array<number | undefined>');
  }

  getSimpleFrameList(): Array<number | undefined> {
    const value = this.x00081161;
    if (value === undefined) {
      throw new Error('SimpleFrameList is undefined');
    }
    return value;
  }

  // Calculated Frame List
  get CalculatedFrameList(): Array<number | undefined> | undefined {
    return this.x00081162;
  }

  get x00081162(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00081162']?.Value;
    return convert(value, 0x00081162, 'Array<number | undefined>');
  }

  getCalculatedFrameList(): Array<number | undefined> {
    const value = this.x00081162;
    if (value === undefined) {
      throw new Error('CalculatedFrameList is undefined');
    }
    return value;
  }

  // Time Range
  get TimeRange(): Array<number | undefined> | undefined {
    return this.x00081163;
  }

  get x00081163(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00081163']?.Value;
    return convert(value, 0x00081163, 'Array<number | undefined>');
  }

  getTimeRange(): Array<number | undefined> {
    const value = this.x00081163;
    if (value === undefined) {
      throw new Error('TimeRange is undefined');
    }
    return value;
  }

  // Frame Extraction Sequence
  get FrameExtractionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081164;
  }

  get x00081164(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081164']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFrameExtractionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081164;
    if (value === undefined) {
      throw new Error('FrameExtractionSequence is undefined');
    }
    return value;
  }

  // Multi-frame Source SOP Instance UID
  get MultiFrameSourceSOPInstanceUID(): string | undefined {
    return this.x00081167;
  }

  get x00081167(): string | undefined {
    const value = this.dwResponse['00081167']?.Value;
    return convert(value?.[0], 0x00081167, 'string');
  }

  getMultiFrameSourceSOPInstanceUID(): string {
    const value = this.x00081167;
    if (value === undefined) {
      throw new Error('MultiFrameSourceSOPInstanceUID is undefined');
    }
    return value;
  }

  // Transaction UID
  get TransactionUID(): string | undefined {
    return this.x00081195;
  }

  get x00081195(): string | undefined {
    const value = this.dwResponse['00081195']?.Value;
    return convert(value?.[0], 0x00081195, 'string');
  }

  getTransactionUID(): string {
    const value = this.x00081195;
    if (value === undefined) {
      throw new Error('TransactionUID is undefined');
    }
    return value;
  }

  // Warning Reason
  get WarningReason(): number | undefined {
    return this.x00081196;
  }

  get x00081196(): number | undefined {
    const value = this.dwResponse['00081196']?.Value;
    return convert(value?.[0], 0x00081196, 'number');
  }

  getWarningReason(): number {
    const value = this.x00081196;
    if (value === undefined) {
      throw new Error('WarningReason is undefined');
    }
    return value;
  }

  // Failure Reason
  get FailureReason(): number | undefined {
    return this.x00081197;
  }

  get x00081197(): number | undefined {
    const value = this.dwResponse['00081197']?.Value;
    return convert(value?.[0], 0x00081197, 'number');
  }

  getFailureReason(): number {
    const value = this.x00081197;
    if (value === undefined) {
      throw new Error('FailureReason is undefined');
    }
    return value;
  }

  // Failed SOP Sequence
  get FailedSOPSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081198;
  }

  get x00081198(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081198']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFailedSOPSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081198;
    if (value === undefined) {
      throw new Error('FailedSOPSequence is undefined');
    }
    return value;
  }

  // Referenced SOP Sequence
  get ReferencedSOPSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081199;
  }

  get x00081199(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081199']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedSOPSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081199;
    if (value === undefined) {
      throw new Error('ReferencedSOPSequence is undefined');
    }
    return value;
  }

  // Studies Containing Other Referenced Instances Sequence
  get StudiesContainingOtherReferencedInstancesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081200;
  }

  get x00081200(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081200']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getStudiesContainingOtherReferencedInstancesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081200;
    if (value === undefined) {
      throw new Error('StudiesContainingOtherReferencedInstancesSequence is undefined');
    }
    return value;
  }

  // Related Series Sequence
  get RelatedSeriesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00081250;
  }

  get x00081250(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00081250']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRelatedSeriesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00081250;
    if (value === undefined) {
      throw new Error('RelatedSeriesSequence is undefined');
    }
    return value;
  }

  // Lossy Image Compression (Retired)
  get LossyImageCompressionRetired(): string | undefined {
    return this.x00082110;
  }

  get x00082110(): string | undefined {
    const value = this.dwResponse['00082110']?.Value;
    return convert(value?.[0], 0x00082110, 'string');
  }

  getLossyImageCompressionRetired(): string {
    const value = this.x00082110;
    if (value === undefined) {
      throw new Error('LossyImageCompressionRetired is undefined');
    }
    return value;
  }

  // Source Image Sequence
  get SourceImageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00082112;
  }

  get x00082112(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00082112']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSourceImageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00082112;
    if (value === undefined) {
      throw new Error('SourceImageSequence is undefined');
    }
    return value;
  }

  // Stage Name
  get StageName(): string | undefined {
    return this.x00082120;
  }

  get x00082120(): string | undefined {
    const value = this.dwResponse['00082120']?.Value;
    return convert(value?.[0], 0x00082120, 'string');
  }

  getStageName(): string {
    const value = this.x00082120;
    if (value === undefined) {
      throw new Error('StageName is undefined');
    }
    return value;
  }

  // Stage Number
  get StageNumber(): number | undefined {
    return this.x00082122;
  }

  get x00082122(): number | undefined {
    const value = this.dwResponse['00082122']?.Value;
    return convert(value?.[0], 0x00082122, 'number');
  }

  getStageNumber(): number {
    const value = this.x00082122;
    if (value === undefined) {
      throw new Error('StageNumber is undefined');
    }
    return value;
  }

  // Number of Stages
  get NumberOfStages(): number | undefined {
    return this.x00082124;
  }

  get x00082124(): number | undefined {
    const value = this.dwResponse['00082124']?.Value;
    return convert(value?.[0], 0x00082124, 'number');
  }

  getNumberOfStages(): number {
    const value = this.x00082124;
    if (value === undefined) {
      throw new Error('NumberOfStages is undefined');
    }
    return value;
  }

  // View Name
  get ViewName(): string | undefined {
    return this.x00082127;
  }

  get x00082127(): string | undefined {
    const value = this.dwResponse['00082127']?.Value;
    return convert(value?.[0], 0x00082127, 'string');
  }

  getViewName(): string {
    const value = this.x00082127;
    if (value === undefined) {
      throw new Error('ViewName is undefined');
    }
    return value;
  }

  // View Number
  get ViewNumber(): number | undefined {
    return this.x00082128;
  }

  get x00082128(): number | undefined {
    const value = this.dwResponse['00082128']?.Value;
    return convert(value?.[0], 0x00082128, 'number');
  }

  getViewNumber(): number {
    const value = this.x00082128;
    if (value === undefined) {
      throw new Error('ViewNumber is undefined');
    }
    return value;
  }

  // Number of Event Timers
  get NumberOfEventTimers(): number | undefined {
    return this.x00082129;
  }

  get x00082129(): number | undefined {
    const value = this.dwResponse['00082129']?.Value;
    return convert(value?.[0], 0x00082129, 'number');
  }

  getNumberOfEventTimers(): number {
    const value = this.x00082129;
    if (value === undefined) {
      throw new Error('NumberOfEventTimers is undefined');
    }
    return value;
  }

  // Number of Views in Stage
  get NumberOfViewsInStage(): number | undefined {
    return this.x0008212a;
  }

  get x0008212a(): number | undefined {
    const value = this.dwResponse['0008212A']?.Value;
    return convert(value?.[0], 0x0008212a, 'number');
  }

  getNumberOfViewsInStage(): number {
    const value = this.x0008212a;
    if (value === undefined) {
      throw new Error('NumberOfViewsInStage is undefined');
    }
    return value;
  }

  // Event Elapsed Time(s)
  get EventElapsedTimes(): Array<number | undefined> | undefined {
    return this.x00082130;
  }

  get x00082130(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00082130']?.Value;
    return convert(value, 0x00082130, 'Array<number | undefined>');
  }

  getEventElapsedTimes(): Array<number | undefined> {
    const value = this.x00082130;
    if (value === undefined) {
      throw new Error('EventElapsedTimes is undefined');
    }
    return value;
  }

  // Event Timer Name(s)
  get EventTimerNames(): Array<string | undefined> | undefined {
    return this.x00082132;
  }

  get x00082132(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00082132']?.Value;
    return convert(value, 0x00082132, 'Array<string | undefined>');
  }

  getEventTimerNames(): Array<string | undefined> {
    const value = this.x00082132;
    if (value === undefined) {
      throw new Error('EventTimerNames is undefined');
    }
    return value;
  }

  // Event Timer Sequence
  get EventTimerSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00082133;
  }

  get x00082133(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00082133']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getEventTimerSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00082133;
    if (value === undefined) {
      throw new Error('EventTimerSequence is undefined');
    }
    return value;
  }

  // Event Time Offset
  get EventTimeOffset(): number | undefined {
    return this.x00082134;
  }

  get x00082134(): number | undefined {
    const value = this.dwResponse['00082134']?.Value;
    return convert(value?.[0], 0x00082134, 'number');
  }

  getEventTimeOffset(): number {
    const value = this.x00082134;
    if (value === undefined) {
      throw new Error('EventTimeOffset is undefined');
    }
    return value;
  }

  // Event Code Sequence
  get EventCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00082135;
  }

  get x00082135(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00082135']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getEventCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00082135;
    if (value === undefined) {
      throw new Error('EventCodeSequence is undefined');
    }
    return value;
  }

  // Start Trim
  get StartTrim(): number | undefined {
    return this.x00082142;
  }

  get x00082142(): number | undefined {
    const value = this.dwResponse['00082142']?.Value;
    return convert(value?.[0], 0x00082142, 'number');
  }

  getStartTrim(): number {
    const value = this.x00082142;
    if (value === undefined) {
      throw new Error('StartTrim is undefined');
    }
    return value;
  }

  // Stop Trim
  get StopTrim(): number | undefined {
    return this.x00082143;
  }

  get x00082143(): number | undefined {
    const value = this.dwResponse['00082143']?.Value;
    return convert(value?.[0], 0x00082143, 'number');
  }

  getStopTrim(): number {
    const value = this.x00082143;
    if (value === undefined) {
      throw new Error('StopTrim is undefined');
    }
    return value;
  }

  // Recommended Display Frame Rate
  get RecommendedDisplayFrameRate(): number | undefined {
    return this.x00082144;
  }

  get x00082144(): number | undefined {
    const value = this.dwResponse['00082144']?.Value;
    return convert(value?.[0], 0x00082144, 'number');
  }

  getRecommendedDisplayFrameRate(): number {
    const value = this.x00082144;
    if (value === undefined) {
      throw new Error('RecommendedDisplayFrameRate is undefined');
    }
    return value;
  }

  // Transducer Position
  get TransducerPosition(): string | undefined {
    return this.x00082200;
  }

  get x00082200(): string | undefined {
    const value = this.dwResponse['00082200']?.Value;
    return convert(value?.[0], 0x00082200, 'string');
  }

  getTransducerPosition(): string {
    const value = this.x00082200;
    if (value === undefined) {
      throw new Error('TransducerPosition is undefined');
    }
    return value;
  }

  // Transducer Orientation
  get TransducerOrientation(): string | undefined {
    return this.x00082204;
  }

  get x00082204(): string | undefined {
    const value = this.dwResponse['00082204']?.Value;
    return convert(value?.[0], 0x00082204, 'string');
  }

  getTransducerOrientation(): string {
    const value = this.x00082204;
    if (value === undefined) {
      throw new Error('TransducerOrientation is undefined');
    }
    return value;
  }

  // Anatomic Structure
  get AnatomicStructure(): string | undefined {
    return this.x00082208;
  }

  get x00082208(): string | undefined {
    const value = this.dwResponse['00082208']?.Value;
    return convert(value?.[0], 0x00082208, 'string');
  }

  getAnatomicStructure(): string {
    const value = this.x00082208;
    if (value === undefined) {
      throw new Error('AnatomicStructure is undefined');
    }
    return value;
  }

  // Anatomic Region Sequence
  get AnatomicRegionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00082218;
  }

  get x00082218(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00082218']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAnatomicRegionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00082218;
    if (value === undefined) {
      throw new Error('AnatomicRegionSequence is undefined');
    }
    return value;
  }

  // Anatomic Region Modifier Sequence
  get AnatomicRegionModifierSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00082220;
  }

  get x00082220(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00082220']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAnatomicRegionModifierSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00082220;
    if (value === undefined) {
      throw new Error('AnatomicRegionModifierSequence is undefined');
    }
    return value;
  }

  // Primary Anatomic Structure Sequence
  get PrimaryAnatomicStructureSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00082228;
  }

  get x00082228(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00082228']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPrimaryAnatomicStructureSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00082228;
    if (value === undefined) {
      throw new Error('PrimaryAnatomicStructureSequence is undefined');
    }
    return value;
  }

  // Anatomic Structure
  get AnatomicStructureSpaceOrRegionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00082229;
  }

  get x00082229(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00082229']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAnatomicStructureSpaceOrRegionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00082229;
    if (value === undefined) {
      throw new Error('AnatomicStructureSpaceOrRegionSequence is undefined');
    }
    return value;
  }

  // Primary Anatomic Structure Modifier Sequence
  get PrimaryAnatomicStructureModifierSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00082230;
  }

  get x00082230(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00082230']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPrimaryAnatomicStructureModifierSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00082230;
    if (value === undefined) {
      throw new Error('PrimaryAnatomicStructureModifierSequence is undefined');
    }
    return value;
  }

  // Transducer Position Sequence
  get TransducerPositionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00082240;
  }

  get x00082240(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00082240']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTransducerPositionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00082240;
    if (value === undefined) {
      throw new Error('TransducerPositionSequence is undefined');
    }
    return value;
  }

  // Transducer Position Modifier Sequence
  get TransducerPositionModifierSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00082242;
  }

  get x00082242(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00082242']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTransducerPositionModifierSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00082242;
    if (value === undefined) {
      throw new Error('TransducerPositionModifierSequence is undefined');
    }
    return value;
  }

  // Transducer Orientation Sequence
  get TransducerOrientationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00082244;
  }

  get x00082244(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00082244']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTransducerOrientationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00082244;
    if (value === undefined) {
      throw new Error('TransducerOrientationSequence is undefined');
    }
    return value;
  }

  // Transducer Orientation Modifier Sequence
  get TransducerOrientationModifierSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00082246;
  }

  get x00082246(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00082246']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTransducerOrientationModifierSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00082246;
    if (value === undefined) {
      throw new Error('TransducerOrientationModifierSequence is undefined');
    }
    return value;
  }

  // Anatomic Structure Space Or Region Code Sequence (Trial)
  get AnatomicStructureSpaceOrRegionCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00082251;
  }

  get x00082251(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00082251']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAnatomicStructureSpaceOrRegionCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x00082251;
    if (value === undefined) {
      throw new Error('AnatomicStructureSpaceOrRegionCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Anatomic Portal Of Entrance Code Sequence (Trial)
  get AnatomicPortalOfEntranceCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00082253;
  }

  get x00082253(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00082253']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAnatomicPortalOfEntranceCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x00082253;
    if (value === undefined) {
      throw new Error('AnatomicPortalOfEntranceCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Anatomic Approach Direction Code Sequence (Trial)
  get AnatomicApproachDirectionCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00082255;
  }

  get x00082255(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00082255']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAnatomicApproachDirectionCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x00082255;
    if (value === undefined) {
      throw new Error('AnatomicApproachDirectionCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Anatomic Perspective Code Sequence (Trial)
  get AnatomicPerspectiveCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00082257;
  }

  get x00082257(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00082257']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAnatomicPerspectiveCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x00082257;
    if (value === undefined) {
      throw new Error('AnatomicPerspectiveCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Anatomic Location Of Examining Instrument Code Sequence (Trial)
  get AnatomicLocationOfExaminingInstrumentCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00082259;
  }

  get x00082259(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00082259']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAnatomicLocationOfExaminingInstrumentCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x00082259;
    if (value === undefined) {
      throw new Error('AnatomicLocationOfExaminingInstrumentCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Anatomic Structure Space Or Region Modifier Code Sequence (Trial)
  get AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0008225a;
  }

  get x0008225a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0008225A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAnatomicStructureSpaceOrRegionModifierCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0008225a;
    if (value === undefined) {
      throw new Error('AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial is undefined');
    }
    return value;
  }

  // OnAxis Background Anatomic Structure Code Sequence (Trial)
  get OnAxisBackgroundAnatomicStructureCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0008225c;
  }

  get x0008225c(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0008225C']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOnAxisBackgroundAnatomicStructureCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0008225c;
    if (value === undefined) {
      throw new Error('OnAxisBackgroundAnatomicStructureCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Alternate Representation Sequence
  get AlternateRepresentationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00083001;
  }

  get x00083001(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00083001']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAlternateRepresentationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00083001;
    if (value === undefined) {
      throw new Error('AlternateRepresentationSequence is undefined');
    }
    return value;
  }

  // Irradiation Event UID
  get IrradiationEventUID(): Array<string | undefined> | undefined {
    return this.x00083010;
  }

  get x00083010(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00083010']?.Value;
    return convert(value, 0x00083010, 'Array<string | undefined>');
  }

  getIrradiationEventUID(): Array<string | undefined> {
    const value = this.x00083010;
    if (value === undefined) {
      throw new Error('IrradiationEventUID is undefined');
    }
    return value;
  }

  // Source Irradiation Event Sequence
  get SourceIrradiationEventSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00083011;
  }

  get x00083011(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00083011']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSourceIrradiationEventSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00083011;
    if (value === undefined) {
      throw new Error('SourceIrradiationEventSequence is undefined');
    }
    return value;
  }

  // Radiopharmaceutical Administration Event UID
  get RadiopharmaceuticalAdministrationEventUID(): string | undefined {
    return this.x00083012;
  }

  get x00083012(): string | undefined {
    const value = this.dwResponse['00083012']?.Value;
    return convert(value?.[0], 0x00083012, 'string');
  }

  getRadiopharmaceuticalAdministrationEventUID(): string {
    const value = this.x00083012;
    if (value === undefined) {
      throw new Error('RadiopharmaceuticalAdministrationEventUID is undefined');
    }
    return value;
  }

  // Frame Type
  get FrameType(): Array<string | undefined> | undefined {
    return this.x00089007;
  }

  get x00089007(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00089007']?.Value;
    return convert(value, 0x00089007, 'Array<string | undefined>');
  }

  getFrameType(): Array<string | undefined> {
    const value = this.x00089007;
    if (value === undefined) {
      throw new Error('FrameType is undefined');
    }
    return value;
  }

  // Referenced Image Evidence Sequence
  get ReferencedImageEvidenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00089092;
  }

  get x00089092(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00089092']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedImageEvidenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00089092;
    if (value === undefined) {
      throw new Error('ReferencedImageEvidenceSequence is undefined');
    }
    return value;
  }

  // Referenced Raw Data Sequence
  get ReferencedRawDataSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00089121;
  }

  get x00089121(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00089121']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedRawDataSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00089121;
    if (value === undefined) {
      throw new Error('ReferencedRawDataSequence is undefined');
    }
    return value;
  }

  // Creator-Version UID
  get CreatorVersionUID(): string | undefined {
    return this.x00089123;
  }

  get x00089123(): string | undefined {
    const value = this.dwResponse['00089123']?.Value;
    return convert(value?.[0], 0x00089123, 'string');
  }

  getCreatorVersionUID(): string {
    const value = this.x00089123;
    if (value === undefined) {
      throw new Error('CreatorVersionUID is undefined');
    }
    return value;
  }

  // Derivation Image Sequence
  get DerivationImageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00089124;
  }

  get x00089124(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00089124']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDerivationImageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00089124;
    if (value === undefined) {
      throw new Error('DerivationImageSequence is undefined');
    }
    return value;
  }

  // Source Image Evidence Sequence
  get SourceImageEvidenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00089154;
  }

  get x00089154(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00089154']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSourceImageEvidenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00089154;
    if (value === undefined) {
      throw new Error('SourceImageEvidenceSequence is undefined');
    }
    return value;
  }

  // Pixel Presentation
  get PixelPresentation(): string | undefined {
    return this.x00089205;
  }

  get x00089205(): string | undefined {
    const value = this.dwResponse['00089205']?.Value;
    return convert(value?.[0], 0x00089205, 'string');
  }

  getPixelPresentation(): string {
    const value = this.x00089205;
    if (value === undefined) {
      throw new Error('PixelPresentation is undefined');
    }
    return value;
  }

  // Volumetric Properties
  get VolumetricProperties(): string | undefined {
    return this.x00089206;
  }

  get x00089206(): string | undefined {
    const value = this.dwResponse['00089206']?.Value;
    return convert(value?.[0], 0x00089206, 'string');
  }

  getVolumetricProperties(): string {
    const value = this.x00089206;
    if (value === undefined) {
      throw new Error('VolumetricProperties is undefined');
    }
    return value;
  }

  // Volume Based Calculation Technique
  get VolumeBasedCalculationTechnique(): string | undefined {
    return this.x00089207;
  }

  get x00089207(): string | undefined {
    const value = this.dwResponse['00089207']?.Value;
    return convert(value?.[0], 0x00089207, 'string');
  }

  getVolumeBasedCalculationTechnique(): string {
    const value = this.x00089207;
    if (value === undefined) {
      throw new Error('VolumeBasedCalculationTechnique is undefined');
    }
    return value;
  }

  // Complex Image Component
  get ComplexImageComponent(): string | undefined {
    return this.x00089208;
  }

  get x00089208(): string | undefined {
    const value = this.dwResponse['00089208']?.Value;
    return convert(value?.[0], 0x00089208, 'string');
  }

  getComplexImageComponent(): string {
    const value = this.x00089208;
    if (value === undefined) {
      throw new Error('ComplexImageComponent is undefined');
    }
    return value;
  }

  // Acquisition Contrast
  get AcquisitionContrast(): string | undefined {
    return this.x00089209;
  }

  get x00089209(): string | undefined {
    const value = this.dwResponse['00089209']?.Value;
    return convert(value?.[0], 0x00089209, 'string');
  }

  getAcquisitionContrast(): string {
    const value = this.x00089209;
    if (value === undefined) {
      throw new Error('AcquisitionContrast is undefined');
    }
    return value;
  }

  // Derivation Code Sequence
  get DerivationCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00089215;
  }

  get x00089215(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00089215']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDerivationCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00089215;
    if (value === undefined) {
      throw new Error('DerivationCodeSequence is undefined');
    }
    return value;
  }

  // Referenced Presentation State Sequence
  get ReferencedPresentationStateSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00089237;
  }

  get x00089237(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00089237']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedPresentationStateSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00089237;
    if (value === undefined) {
      throw new Error('ReferencedPresentationStateSequence is undefined');
    }
    return value;
  }

  // Referenced Other Plane Sequence
  get ReferencedOtherPlaneSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00089410;
  }

  get x00089410(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00089410']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedOtherPlaneSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00089410;
    if (value === undefined) {
      throw new Error('ReferencedOtherPlaneSequence is undefined');
    }
    return value;
  }

  // Frame Display Sequence
  get FrameDisplaySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00089458;
  }

  get x00089458(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00089458']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFrameDisplaySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00089458;
    if (value === undefined) {
      throw new Error('FrameDisplaySequence is undefined');
    }
    return value;
  }

  // Recommended Display Frame Rate in Float
  get RecommendedDisplayFrameRateInFloat(): number | undefined {
    return this.x00089459;
  }

  get x00089459(): number | undefined {
    const value = this.dwResponse['00089459']?.Value;
    return convert(value?.[0], 0x00089459, 'number');
  }

  getRecommendedDisplayFrameRateInFloat(): number {
    const value = this.x00089459;
    if (value === undefined) {
      throw new Error('RecommendedDisplayFrameRateInFloat is undefined');
    }
    return value;
  }

  // Skip Frame Range Flag
  get SkipFrameRangeFlag(): string | undefined {
    return this.x00089460;
  }

  get x00089460(): string | undefined {
    const value = this.dwResponse['00089460']?.Value;
    return convert(value?.[0], 0x00089460, 'string');
  }

  getSkipFrameRangeFlag(): string {
    const value = this.x00089460;
    if (value === undefined) {
      throw new Error('SkipFrameRangeFlag is undefined');
    }
    return value;
  }

  // Patient's Name
  get PatientName(): any | undefined {
    return this.x00100010;
  }

  get x00100010(): any | undefined {
    const value = this.dwResponse['00100010']?.Value;
    return convert(value?.[0], 0x00100010, 'any');
  }

  getPatientName(): any {
    const value = this.x00100010;
    if (value === undefined) {
      throw new Error('PatientName is undefined');
    }
    return value;
  }

  // Patient ID
  get PatientID(): string | undefined {
    return this.x00100020;
  }

  get x00100020(): string | undefined {
    const value = this.dwResponse['00100020']?.Value;
    return convert(value?.[0], 0x00100020, 'string');
  }

  getPatientID(): string {
    const value = this.x00100020;
    if (value === undefined) {
      throw new Error('PatientID is undefined');
    }
    return value;
  }

  // Issuer of Patient ID
  get IssuerOfPatientID(): string | undefined {
    return this.x00100021;
  }

  get x00100021(): string | undefined {
    const value = this.dwResponse['00100021']?.Value;
    return convert(value?.[0], 0x00100021, 'string');
  }

  getIssuerOfPatientID(): string {
    const value = this.x00100021;
    if (value === undefined) {
      throw new Error('IssuerOfPatientID is undefined');
    }
    return value;
  }

  // Type of Patient ID
  get TypeOfPatientID(): string | undefined {
    return this.x00100022;
  }

  get x00100022(): string | undefined {
    const value = this.dwResponse['00100022']?.Value;
    return convert(value?.[0], 0x00100022, 'string');
  }

  getTypeOfPatientID(): string {
    const value = this.x00100022;
    if (value === undefined) {
      throw new Error('TypeOfPatientID is undefined');
    }
    return value;
  }

  // Issuer of Patient ID Qualifiers Sequence
  get IssuerOfPatientIDQualifiersSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00100024;
  }

  get x00100024(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00100024']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIssuerOfPatientIDQualifiersSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00100024;
    if (value === undefined) {
      throw new Error('IssuerOfPatientIDQualifiersSequence is undefined');
    }
    return value;
  }

  // Patient's Birth Date
  get PatientBirthDate(): Date | undefined {
    return this.x00100030;
  }

  get x00100030(): Date | undefined {
    const value = this.dwResponse['00100030']?.Value;
    return convert(value?.[0], 0x00100030, 'Date');
  }

  getPatientBirthDate(): Date {
    const value = this.x00100030;
    if (value === undefined) {
      throw new Error('PatientBirthDate is undefined');
    }
    return value;
  }

  // Patient's Birth Time
  get PatientBirthTime(): string | undefined {
    return this.x00100032;
  }

  get x00100032(): string | undefined {
    const value = this.dwResponse['00100032']?.Value;
    return convert(value?.[0], 0x00100032, 'string');
  }

  getPatientBirthTime(): string {
    const value = this.x00100032;
    if (value === undefined) {
      throw new Error('PatientBirthTime is undefined');
    }
    return value;
  }

  // Patient's Sex
  get PatientSex(): string | undefined {
    return this.x00100040;
  }

  get x00100040(): string | undefined {
    const value = this.dwResponse['00100040']?.Value;
    return convert(value?.[0], 0x00100040, 'string');
  }

  getPatientSex(): string {
    const value = this.x00100040;
    if (value === undefined) {
      throw new Error('PatientSex is undefined');
    }
    return value;
  }

  // Patient's Insurance Plan Code Sequence
  get PatientInsurancePlanCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00100050;
  }

  get x00100050(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00100050']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPatientInsurancePlanCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00100050;
    if (value === undefined) {
      throw new Error('PatientInsurancePlanCodeSequence is undefined');
    }
    return value;
  }

  // Patient's Primary Language Code Sequence
  get PatientPrimaryLanguageCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00100101;
  }

  get x00100101(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00100101']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPatientPrimaryLanguageCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00100101;
    if (value === undefined) {
      throw new Error('PatientPrimaryLanguageCodeSequence is undefined');
    }
    return value;
  }

  // Patient's Primary Language Modifier Code Sequence
  get PatientPrimaryLanguageModifierCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00100102;
  }

  get x00100102(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00100102']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPatientPrimaryLanguageModifierCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00100102;
    if (value === undefined) {
      throw new Error('PatientPrimaryLanguageModifierCodeSequence is undefined');
    }
    return value;
  }

  // Quality Control Subject
  get QualityControlSubject(): string | undefined {
    return this.x00100200;
  }

  get x00100200(): string | undefined {
    const value = this.dwResponse['00100200']?.Value;
    return convert(value?.[0], 0x00100200, 'string');
  }

  getQualityControlSubject(): string {
    const value = this.x00100200;
    if (value === undefined) {
      throw new Error('QualityControlSubject is undefined');
    }
    return value;
  }

  // Quality Control Subject Type Code Sequence
  get QualityControlSubjectTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00100201;
  }

  get x00100201(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00100201']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getQualityControlSubjectTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00100201;
    if (value === undefined) {
      throw new Error('QualityControlSubjectTypeCodeSequence is undefined');
    }
    return value;
  }

  // Other Patient IDs
  get OtherPatientIDs(): Array<string | undefined> | undefined {
    return this.x00101000;
  }

  get x00101000(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00101000']?.Value;
    return convert(value, 0x00101000, 'Array<string | undefined>');
  }

  getOtherPatientIDs(): Array<string | undefined> {
    const value = this.x00101000;
    if (value === undefined) {
      throw new Error('OtherPatientIDs is undefined');
    }
    return value;
  }

  // Other Patient Names
  get OtherPatientNames(): Array<any | undefined> | undefined {
    return this.x00101001;
  }

  get x00101001(): Array<any | undefined> | undefined {
    const value = this.dwResponse['00101001']?.Value;
    return convert(value, 0x00101001, 'Array<any | undefined>');
  }

  getOtherPatientNames(): Array<any | undefined> {
    const value = this.x00101001;
    if (value === undefined) {
      throw new Error('OtherPatientNames is undefined');
    }
    return value;
  }

  // Other Patient IDs Sequence
  get OtherPatientIDsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00101002;
  }

  get x00101002(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00101002']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOtherPatientIDsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00101002;
    if (value === undefined) {
      throw new Error('OtherPatientIDsSequence is undefined');
    }
    return value;
  }

  // Patient's Birth Name
  get PatientBirthName(): any | undefined {
    return this.x00101005;
  }

  get x00101005(): any | undefined {
    const value = this.dwResponse['00101005']?.Value;
    return convert(value?.[0], 0x00101005, 'any');
  }

  getPatientBirthName(): any {
    const value = this.x00101005;
    if (value === undefined) {
      throw new Error('PatientBirthName is undefined');
    }
    return value;
  }

  // Patient's Age
  get PatientAge(): string | undefined {
    return this.x00101010;
  }

  get x00101010(): string | undefined {
    const value = this.dwResponse['00101010']?.Value;
    return convert(value?.[0], 0x00101010, 'string');
  }

  getPatientAge(): string {
    const value = this.x00101010;
    if (value === undefined) {
      throw new Error('PatientAge is undefined');
    }
    return value;
  }

  // Patient's Size
  get PatientSize(): number | undefined {
    return this.x00101020;
  }

  get x00101020(): number | undefined {
    const value = this.dwResponse['00101020']?.Value;
    return convert(value?.[0], 0x00101020, 'number');
  }

  getPatientSize(): number {
    const value = this.x00101020;
    if (value === undefined) {
      throw new Error('PatientSize is undefined');
    }
    return value;
  }

  // Patient's Size Code Sequence
  get PatientSizeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00101021;
  }

  get x00101021(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00101021']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPatientSizeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00101021;
    if (value === undefined) {
      throw new Error('PatientSizeCodeSequence is undefined');
    }
    return value;
  }

  // Patient's Weight
  get PatientWeight(): number | undefined {
    return this.x00101030;
  }

  get x00101030(): number | undefined {
    const value = this.dwResponse['00101030']?.Value;
    return convert(value?.[0], 0x00101030, 'number');
  }

  getPatientWeight(): number {
    const value = this.x00101030;
    if (value === undefined) {
      throw new Error('PatientWeight is undefined');
    }
    return value;
  }

  // Patient's Address
  get PatientAddress(): string | undefined {
    return this.x00101040;
  }

  get x00101040(): string | undefined {
    const value = this.dwResponse['00101040']?.Value;
    return convert(value?.[0], 0x00101040, 'string');
  }

  getPatientAddress(): string {
    const value = this.x00101040;
    if (value === undefined) {
      throw new Error('PatientAddress is undefined');
    }
    return value;
  }

  // Insurance Plan Identification
  get InsurancePlanIdentification(): Array<string | undefined> | undefined {
    return this.x00101050;
  }

  get x00101050(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00101050']?.Value;
    return convert(value, 0x00101050, 'Array<string | undefined>');
  }

  getInsurancePlanIdentification(): Array<string | undefined> {
    const value = this.x00101050;
    if (value === undefined) {
      throw new Error('InsurancePlanIdentification is undefined');
    }
    return value;
  }

  // Patient's Mother's Birth Name
  get PatientMotherBirthName(): any | undefined {
    return this.x00101060;
  }

  get x00101060(): any | undefined {
    const value = this.dwResponse['00101060']?.Value;
    return convert(value?.[0], 0x00101060, 'any');
  }

  getPatientMotherBirthName(): any {
    const value = this.x00101060;
    if (value === undefined) {
      throw new Error('PatientMotherBirthName is undefined');
    }
    return value;
  }

  // Military Rank
  get MilitaryRank(): string | undefined {
    return this.x00101080;
  }

  get x00101080(): string | undefined {
    const value = this.dwResponse['00101080']?.Value;
    return convert(value?.[0], 0x00101080, 'string');
  }

  getMilitaryRank(): string {
    const value = this.x00101080;
    if (value === undefined) {
      throw new Error('MilitaryRank is undefined');
    }
    return value;
  }

  // Branch of Service
  get BranchOfService(): string | undefined {
    return this.x00101081;
  }

  get x00101081(): string | undefined {
    const value = this.dwResponse['00101081']?.Value;
    return convert(value?.[0], 0x00101081, 'string');
  }

  getBranchOfService(): string {
    const value = this.x00101081;
    if (value === undefined) {
      throw new Error('BranchOfService is undefined');
    }
    return value;
  }

  // Medical Record Locator
  get MedicalRecordLocator(): string | undefined {
    return this.x00101090;
  }

  get x00101090(): string | undefined {
    const value = this.dwResponse['00101090']?.Value;
    return convert(value?.[0], 0x00101090, 'string');
  }

  getMedicalRecordLocator(): string {
    const value = this.x00101090;
    if (value === undefined) {
      throw new Error('MedicalRecordLocator is undefined');
    }
    return value;
  }

  // Referenced Patient Photo Sequence
  get ReferencedPatientPhotoSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00101100;
  }

  get x00101100(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00101100']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedPatientPhotoSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00101100;
    if (value === undefined) {
      throw new Error('ReferencedPatientPhotoSequence is undefined');
    }
    return value;
  }

  // Medical Alerts
  get MedicalAlerts(): Array<string | undefined> | undefined {
    return this.x00102000;
  }

  get x00102000(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00102000']?.Value;
    return convert(value, 0x00102000, 'Array<string | undefined>');
  }

  getMedicalAlerts(): Array<string | undefined> {
    const value = this.x00102000;
    if (value === undefined) {
      throw new Error('MedicalAlerts is undefined');
    }
    return value;
  }

  // Allergies
  get Allergies(): Array<string | undefined> | undefined {
    return this.x00102110;
  }

  get x00102110(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00102110']?.Value;
    return convert(value, 0x00102110, 'Array<string | undefined>');
  }

  getAllergies(): Array<string | undefined> {
    const value = this.x00102110;
    if (value === undefined) {
      throw new Error('Allergies is undefined');
    }
    return value;
  }

  // Country of Residence
  get CountryOfResidence(): string | undefined {
    return this.x00102150;
  }

  get x00102150(): string | undefined {
    const value = this.dwResponse['00102150']?.Value;
    return convert(value?.[0], 0x00102150, 'string');
  }

  getCountryOfResidence(): string {
    const value = this.x00102150;
    if (value === undefined) {
      throw new Error('CountryOfResidence is undefined');
    }
    return value;
  }

  // Region of Residence
  get RegionOfResidence(): string | undefined {
    return this.x00102152;
  }

  get x00102152(): string | undefined {
    const value = this.dwResponse['00102152']?.Value;
    return convert(value?.[0], 0x00102152, 'string');
  }

  getRegionOfResidence(): string {
    const value = this.x00102152;
    if (value === undefined) {
      throw new Error('RegionOfResidence is undefined');
    }
    return value;
  }

  // Patient's Telephone Numbers
  get PatientTelephoneNumbers(): Array<string | undefined> | undefined {
    return this.x00102154;
  }

  get x00102154(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00102154']?.Value;
    return convert(value, 0x00102154, 'Array<string | undefined>');
  }

  getPatientTelephoneNumbers(): Array<string | undefined> {
    const value = this.x00102154;
    if (value === undefined) {
      throw new Error('PatientTelephoneNumbers is undefined');
    }
    return value;
  }

  // Ethnic Group
  get EthnicGroup(): string | undefined {
    return this.x00102160;
  }

  get x00102160(): string | undefined {
    const value = this.dwResponse['00102160']?.Value;
    return convert(value?.[0], 0x00102160, 'string');
  }

  getEthnicGroup(): string {
    const value = this.x00102160;
    if (value === undefined) {
      throw new Error('EthnicGroup is undefined');
    }
    return value;
  }

  // Occupation
  get Occupation(): string | undefined {
    return this.x00102180;
  }

  get x00102180(): string | undefined {
    const value = this.dwResponse['00102180']?.Value;
    return convert(value?.[0], 0x00102180, 'string');
  }

  getOccupation(): string {
    const value = this.x00102180;
    if (value === undefined) {
      throw new Error('Occupation is undefined');
    }
    return value;
  }

  // Smoking Status
  get SmokingStatus(): string | undefined {
    return this.x001021a0;
  }

  get x001021a0(): string | undefined {
    const value = this.dwResponse['001021A0']?.Value;
    return convert(value?.[0], 0x001021a0, 'string');
  }

  getSmokingStatus(): string {
    const value = this.x001021a0;
    if (value === undefined) {
      throw new Error('SmokingStatus is undefined');
    }
    return value;
  }

  // Pregnancy Status
  get PregnancyStatus(): number | undefined {
    return this.x001021c0;
  }

  get x001021c0(): number | undefined {
    const value = this.dwResponse['001021C0']?.Value;
    return convert(value?.[0], 0x001021c0, 'number');
  }

  getPregnancyStatus(): number {
    const value = this.x001021c0;
    if (value === undefined) {
      throw new Error('PregnancyStatus is undefined');
    }
    return value;
  }

  // Last Menstrual Date
  get LastMenstrualDate(): Date | undefined {
    return this.x001021d0;
  }

  get x001021d0(): Date | undefined {
    const value = this.dwResponse['001021D0']?.Value;
    return convert(value?.[0], 0x001021d0, 'Date');
  }

  getLastMenstrualDate(): Date {
    const value = this.x001021d0;
    if (value === undefined) {
      throw new Error('LastMenstrualDate is undefined');
    }
    return value;
  }

  // Patient's Religious Preference
  get PatientReligiousPreference(): string | undefined {
    return this.x001021f0;
  }

  get x001021f0(): string | undefined {
    const value = this.dwResponse['001021F0']?.Value;
    return convert(value?.[0], 0x001021f0, 'string');
  }

  getPatientReligiousPreference(): string {
    const value = this.x001021f0;
    if (value === undefined) {
      throw new Error('PatientReligiousPreference is undefined');
    }
    return value;
  }

  // Patient Species Description
  get PatientSpeciesDescription(): string | undefined {
    return this.x00102201;
  }

  get x00102201(): string | undefined {
    const value = this.dwResponse['00102201']?.Value;
    return convert(value?.[0], 0x00102201, 'string');
  }

  getPatientSpeciesDescription(): string {
    const value = this.x00102201;
    if (value === undefined) {
      throw new Error('PatientSpeciesDescription is undefined');
    }
    return value;
  }

  // Patient Species Code Sequence
  get PatientSpeciesCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00102202;
  }

  get x00102202(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00102202']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPatientSpeciesCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00102202;
    if (value === undefined) {
      throw new Error('PatientSpeciesCodeSequence is undefined');
    }
    return value;
  }

  // Patient's Sex Neutered
  get PatientSexNeutered(): string | undefined {
    return this.x00102203;
  }

  get x00102203(): string | undefined {
    const value = this.dwResponse['00102203']?.Value;
    return convert(value?.[0], 0x00102203, 'string');
  }

  getPatientSexNeutered(): string {
    const value = this.x00102203;
    if (value === undefined) {
      throw new Error('PatientSexNeutered is undefined');
    }
    return value;
  }

  // Anatomical Orientation Type
  get AnatomicalOrientationType(): string | undefined {
    return this.x00102210;
  }

  get x00102210(): string | undefined {
    const value = this.dwResponse['00102210']?.Value;
    return convert(value?.[0], 0x00102210, 'string');
  }

  getAnatomicalOrientationType(): string {
    const value = this.x00102210;
    if (value === undefined) {
      throw new Error('AnatomicalOrientationType is undefined');
    }
    return value;
  }

  // Patient Breed Description
  get PatientBreedDescription(): string | undefined {
    return this.x00102292;
  }

  get x00102292(): string | undefined {
    const value = this.dwResponse['00102292']?.Value;
    return convert(value?.[0], 0x00102292, 'string');
  }

  getPatientBreedDescription(): string {
    const value = this.x00102292;
    if (value === undefined) {
      throw new Error('PatientBreedDescription is undefined');
    }
    return value;
  }

  // Patient Breed Code Sequence
  get PatientBreedCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00102293;
  }

  get x00102293(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00102293']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPatientBreedCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00102293;
    if (value === undefined) {
      throw new Error('PatientBreedCodeSequence is undefined');
    }
    return value;
  }

  // Breed Registration Sequence
  get BreedRegistrationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00102294;
  }

  get x00102294(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00102294']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBreedRegistrationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00102294;
    if (value === undefined) {
      throw new Error('BreedRegistrationSequence is undefined');
    }
    return value;
  }

  // Breed Registration Number
  get BreedRegistrationNumber(): string | undefined {
    return this.x00102295;
  }

  get x00102295(): string | undefined {
    const value = this.dwResponse['00102295']?.Value;
    return convert(value?.[0], 0x00102295, 'string');
  }

  getBreedRegistrationNumber(): string {
    const value = this.x00102295;
    if (value === undefined) {
      throw new Error('BreedRegistrationNumber is undefined');
    }
    return value;
  }

  // Breed Registry Code Sequence
  get BreedRegistryCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00102296;
  }

  get x00102296(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00102296']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBreedRegistryCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00102296;
    if (value === undefined) {
      throw new Error('BreedRegistryCodeSequence is undefined');
    }
    return value;
  }

  // Responsible Person
  get ResponsiblePerson(): any | undefined {
    return this.x00102297;
  }

  get x00102297(): any | undefined {
    const value = this.dwResponse['00102297']?.Value;
    return convert(value?.[0], 0x00102297, 'any');
  }

  getResponsiblePerson(): any {
    const value = this.x00102297;
    if (value === undefined) {
      throw new Error('ResponsiblePerson is undefined');
    }
    return value;
  }

  // Responsible Person Role
  get ResponsiblePersonRole(): string | undefined {
    return this.x00102298;
  }

  get x00102298(): string | undefined {
    const value = this.dwResponse['00102298']?.Value;
    return convert(value?.[0], 0x00102298, 'string');
  }

  getResponsiblePersonRole(): string {
    const value = this.x00102298;
    if (value === undefined) {
      throw new Error('ResponsiblePersonRole is undefined');
    }
    return value;
  }

  // Responsible Organization
  get ResponsibleOrganization(): string | undefined {
    return this.x00102299;
  }

  get x00102299(): string | undefined {
    const value = this.dwResponse['00102299']?.Value;
    return convert(value?.[0], 0x00102299, 'string');
  }

  getResponsibleOrganization(): string {
    const value = this.x00102299;
    if (value === undefined) {
      throw new Error('ResponsibleOrganization is undefined');
    }
    return value;
  }

  // Examined Body Thickness
  get ExaminedBodyThickness(): number | undefined {
    return this.x00109431;
  }

  get x00109431(): number | undefined {
    const value = this.dwResponse['00109431']?.Value;
    return convert(value?.[0], 0x00109431, 'number');
  }

  getExaminedBodyThickness(): number {
    const value = this.x00109431;
    if (value === undefined) {
      throw new Error('ExaminedBodyThickness is undefined');
    }
    return value;
  }

  // Clinical Trial Sponsor Name
  get ClinicalTrialSponsorName(): string | undefined {
    return this.x00120010;
  }

  get x00120010(): string | undefined {
    const value = this.dwResponse['00120010']?.Value;
    return convert(value?.[0], 0x00120010, 'string');
  }

  getClinicalTrialSponsorName(): string {
    const value = this.x00120010;
    if (value === undefined) {
      throw new Error('ClinicalTrialSponsorName is undefined');
    }
    return value;
  }

  // Clinical Trial Protocol ID
  get ClinicalTrialProtocolID(): string | undefined {
    return this.x00120020;
  }

  get x00120020(): string | undefined {
    const value = this.dwResponse['00120020']?.Value;
    return convert(value?.[0], 0x00120020, 'string');
  }

  getClinicalTrialProtocolID(): string {
    const value = this.x00120020;
    if (value === undefined) {
      throw new Error('ClinicalTrialProtocolID is undefined');
    }
    return value;
  }

  // Clinical Trial Protocol Name
  get ClinicalTrialProtocolName(): string | undefined {
    return this.x00120021;
  }

  get x00120021(): string | undefined {
    const value = this.dwResponse['00120021']?.Value;
    return convert(value?.[0], 0x00120021, 'string');
  }

  getClinicalTrialProtocolName(): string {
    const value = this.x00120021;
    if (value === undefined) {
      throw new Error('ClinicalTrialProtocolName is undefined');
    }
    return value;
  }

  // Clinical Trial Site ID
  get ClinicalTrialSiteID(): string | undefined {
    return this.x00120030;
  }

  get x00120030(): string | undefined {
    const value = this.dwResponse['00120030']?.Value;
    return convert(value?.[0], 0x00120030, 'string');
  }

  getClinicalTrialSiteID(): string {
    const value = this.x00120030;
    if (value === undefined) {
      throw new Error('ClinicalTrialSiteID is undefined');
    }
    return value;
  }

  // Clinical Trial Site Name
  get ClinicalTrialSiteName(): string | undefined {
    return this.x00120031;
  }

  get x00120031(): string | undefined {
    const value = this.dwResponse['00120031']?.Value;
    return convert(value?.[0], 0x00120031, 'string');
  }

  getClinicalTrialSiteName(): string {
    const value = this.x00120031;
    if (value === undefined) {
      throw new Error('ClinicalTrialSiteName is undefined');
    }
    return value;
  }

  // Clinical Trial Subject ID
  get ClinicalTrialSubjectID(): string | undefined {
    return this.x00120040;
  }

  get x00120040(): string | undefined {
    const value = this.dwResponse['00120040']?.Value;
    return convert(value?.[0], 0x00120040, 'string');
  }

  getClinicalTrialSubjectID(): string {
    const value = this.x00120040;
    if (value === undefined) {
      throw new Error('ClinicalTrialSubjectID is undefined');
    }
    return value;
  }

  // Clinical Trial Subject Reading ID
  get ClinicalTrialSubjectReadingID(): string | undefined {
    return this.x00120042;
  }

  get x00120042(): string | undefined {
    const value = this.dwResponse['00120042']?.Value;
    return convert(value?.[0], 0x00120042, 'string');
  }

  getClinicalTrialSubjectReadingID(): string {
    const value = this.x00120042;
    if (value === undefined) {
      throw new Error('ClinicalTrialSubjectReadingID is undefined');
    }
    return value;
  }

  // Clinical Trial Time Point ID
  get ClinicalTrialTimePointID(): string | undefined {
    return this.x00120050;
  }

  get x00120050(): string | undefined {
    const value = this.dwResponse['00120050']?.Value;
    return convert(value?.[0], 0x00120050, 'string');
  }

  getClinicalTrialTimePointID(): string {
    const value = this.x00120050;
    if (value === undefined) {
      throw new Error('ClinicalTrialTimePointID is undefined');
    }
    return value;
  }

  // Clinical Trial Coordinating Center Name
  get ClinicalTrialCoordinatingCenterName(): string | undefined {
    return this.x00120060;
  }

  get x00120060(): string | undefined {
    const value = this.dwResponse['00120060']?.Value;
    return convert(value?.[0], 0x00120060, 'string');
  }

  getClinicalTrialCoordinatingCenterName(): string {
    const value = this.x00120060;
    if (value === undefined) {
      throw new Error('ClinicalTrialCoordinatingCenterName is undefined');
    }
    return value;
  }

  // Patient Identity Removed
  get PatientIdentityRemoved(): string | undefined {
    return this.x00120062;
  }

  get x00120062(): string | undefined {
    const value = this.dwResponse['00120062']?.Value;
    return convert(value?.[0], 0x00120062, 'string');
  }

  getPatientIdentityRemoved(): string {
    const value = this.x00120062;
    if (value === undefined) {
      throw new Error('PatientIdentityRemoved is undefined');
    }
    return value;
  }

  // De-identification Method
  get DeidentificationMethod(): Array<string | undefined> | undefined {
    return this.x00120063;
  }

  get x00120063(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00120063']?.Value;
    return convert(value, 0x00120063, 'Array<string | undefined>');
  }

  getDeidentificationMethod(): Array<string | undefined> {
    const value = this.x00120063;
    if (value === undefined) {
      throw new Error('DeidentificationMethod is undefined');
    }
    return value;
  }

  // De-identification Method Code Sequence
  get DeidentificationMethodCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00120064;
  }

  get x00120064(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00120064']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDeidentificationMethodCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00120064;
    if (value === undefined) {
      throw new Error('DeidentificationMethodCodeSequence is undefined');
    }
    return value;
  }

  // Clinical Trial Series ID
  get ClinicalTrialSeriesID(): string | undefined {
    return this.x00120071;
  }

  get x00120071(): string | undefined {
    const value = this.dwResponse['00120071']?.Value;
    return convert(value?.[0], 0x00120071, 'string');
  }

  getClinicalTrialSeriesID(): string {
    const value = this.x00120071;
    if (value === undefined) {
      throw new Error('ClinicalTrialSeriesID is undefined');
    }
    return value;
  }

  // Clinical Trial Series Description
  get ClinicalTrialSeriesDescription(): string | undefined {
    return this.x00120072;
  }

  get x00120072(): string | undefined {
    const value = this.dwResponse['00120072']?.Value;
    return convert(value?.[0], 0x00120072, 'string');
  }

  getClinicalTrialSeriesDescription(): string {
    const value = this.x00120072;
    if (value === undefined) {
      throw new Error('ClinicalTrialSeriesDescription is undefined');
    }
    return value;
  }

  // Clinical Trial Protocol Ethics Committee Name
  get ClinicalTrialProtocolEthicsCommitteeName(): string | undefined {
    return this.x00120081;
  }

  get x00120081(): string | undefined {
    const value = this.dwResponse['00120081']?.Value;
    return convert(value?.[0], 0x00120081, 'string');
  }

  getClinicalTrialProtocolEthicsCommitteeName(): string {
    const value = this.x00120081;
    if (value === undefined) {
      throw new Error('ClinicalTrialProtocolEthicsCommitteeName is undefined');
    }
    return value;
  }

  // Clinical Trial Protocol Ethics Committee Approval Number
  get ClinicalTrialProtocolEthicsCommitteeApprovalNumber(): string | undefined {
    return this.x00120082;
  }

  get x00120082(): string | undefined {
    const value = this.dwResponse['00120082']?.Value;
    return convert(value?.[0], 0x00120082, 'string');
  }

  getClinicalTrialProtocolEthicsCommitteeApprovalNumber(): string {
    const value = this.x00120082;
    if (value === undefined) {
      throw new Error('ClinicalTrialProtocolEthicsCommitteeApprovalNumber is undefined');
    }
    return value;
  }

  // Consent for Clinical Trial Use Sequence
  get ConsentForClinicalTrialUseSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00120083;
  }

  get x00120083(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00120083']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getConsentForClinicalTrialUseSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00120083;
    if (value === undefined) {
      throw new Error('ConsentForClinicalTrialUseSequence is undefined');
    }
    return value;
  }

  // Distribution Type
  get DistributionType(): string | undefined {
    return this.x00120084;
  }

  get x00120084(): string | undefined {
    const value = this.dwResponse['00120084']?.Value;
    return convert(value?.[0], 0x00120084, 'string');
  }

  getDistributionType(): string {
    const value = this.x00120084;
    if (value === undefined) {
      throw new Error('DistributionType is undefined');
    }
    return value;
  }

  // Consent for Distribution Flag
  get ConsentForDistributionFlag(): string | undefined {
    return this.x00120085;
  }

  get x00120085(): string | undefined {
    const value = this.dwResponse['00120085']?.Value;
    return convert(value?.[0], 0x00120085, 'string');
  }

  getConsentForDistributionFlag(): string {
    const value = this.x00120085;
    if (value === undefined) {
      throw new Error('ConsentForDistributionFlag is undefined');
    }
    return value;
  }

  // Material Thickness
  get MaterialThickness(): Array<number | undefined> | undefined {
    return this.x00140030;
  }

  get x00140030(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00140030']?.Value;
    return convert(value, 0x00140030, 'Array<number | undefined>');
  }

  getMaterialThickness(): Array<number | undefined> {
    const value = this.x00140030;
    if (value === undefined) {
      throw new Error('MaterialThickness is undefined');
    }
    return value;
  }

  // Material Pipe Diameter
  get MaterialPipeDiameter(): Array<number | undefined> | undefined {
    return this.x00140032;
  }

  get x00140032(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00140032']?.Value;
    return convert(value, 0x00140032, 'Array<number | undefined>');
  }

  getMaterialPipeDiameter(): Array<number | undefined> {
    const value = this.x00140032;
    if (value === undefined) {
      throw new Error('MaterialPipeDiameter is undefined');
    }
    return value;
  }

  // Material Isolation Diameter
  get MaterialIsolationDiameter(): Array<number | undefined> | undefined {
    return this.x00140034;
  }

  get x00140034(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00140034']?.Value;
    return convert(value, 0x00140034, 'Array<number | undefined>');
  }

  getMaterialIsolationDiameter(): Array<number | undefined> {
    const value = this.x00140034;
    if (value === undefined) {
      throw new Error('MaterialIsolationDiameter is undefined');
    }
    return value;
  }

  // Component Shape
  get ComponentShape(): string | undefined {
    return this.x00140050;
  }

  get x00140050(): string | undefined {
    const value = this.dwResponse['00140050']?.Value;
    return convert(value?.[0], 0x00140050, 'string');
  }

  getComponentShape(): string {
    const value = this.x00140050;
    if (value === undefined) {
      throw new Error('ComponentShape is undefined');
    }
    return value;
  }

  // Curvature Type
  get CurvatureType(): string | undefined {
    return this.x00140052;
  }

  get x00140052(): string | undefined {
    const value = this.dwResponse['00140052']?.Value;
    return convert(value?.[0], 0x00140052, 'string');
  }

  getCurvatureType(): string {
    const value = this.x00140052;
    if (value === undefined) {
      throw new Error('CurvatureType is undefined');
    }
    return value;
  }

  // Outer Diameter
  get OuterDiameter(): number | undefined {
    return this.x00140054;
  }

  get x00140054(): number | undefined {
    const value = this.dwResponse['00140054']?.Value;
    return convert(value?.[0], 0x00140054, 'number');
  }

  getOuterDiameter(): number {
    const value = this.x00140054;
    if (value === undefined) {
      throw new Error('OuterDiameter is undefined');
    }
    return value;
  }

  // Inner Diameter
  get InnerDiameter(): number | undefined {
    return this.x00140056;
  }

  get x00140056(): number | undefined {
    const value = this.dwResponse['00140056']?.Value;
    return convert(value?.[0], 0x00140056, 'number');
  }

  getInnerDiameter(): number {
    const value = this.x00140056;
    if (value === undefined) {
      throw new Error('InnerDiameter is undefined');
    }
    return value;
  }

  // Expiry Date
  get ExpiryDate(): Date | undefined {
    return this.x00141020;
  }

  get x00141020(): Date | undefined {
    const value = this.dwResponse['00141020']?.Value;
    return convert(value?.[0], 0x00141020, 'Date');
  }

  getExpiryDate(): Date {
    const value = this.x00141020;
    if (value === undefined) {
      throw new Error('ExpiryDate is undefined');
    }
    return value;
  }

  // Evaluator Sequence
  get EvaluatorSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00142002;
  }

  get x00142002(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00142002']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getEvaluatorSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00142002;
    if (value === undefined) {
      throw new Error('EvaluatorSequence is undefined');
    }
    return value;
  }

  // Evaluator Number
  get EvaluatorNumber(): number | undefined {
    return this.x00142004;
  }

  get x00142004(): number | undefined {
    const value = this.dwResponse['00142004']?.Value;
    return convert(value?.[0], 0x00142004, 'number');
  }

  getEvaluatorNumber(): number {
    const value = this.x00142004;
    if (value === undefined) {
      throw new Error('EvaluatorNumber is undefined');
    }
    return value;
  }

  // Evaluator Name
  get EvaluatorName(): any | undefined {
    return this.x00142006;
  }

  get x00142006(): any | undefined {
    const value = this.dwResponse['00142006']?.Value;
    return convert(value?.[0], 0x00142006, 'any');
  }

  getEvaluatorName(): any {
    const value = this.x00142006;
    if (value === undefined) {
      throw new Error('EvaluatorName is undefined');
    }
    return value;
  }

  // Evaluation Attempt
  get EvaluationAttempt(): number | undefined {
    return this.x00142008;
  }

  get x00142008(): number | undefined {
    const value = this.dwResponse['00142008']?.Value;
    return convert(value?.[0], 0x00142008, 'number');
  }

  getEvaluationAttempt(): number {
    const value = this.x00142008;
    if (value === undefined) {
      throw new Error('EvaluationAttempt is undefined');
    }
    return value;
  }

  // Indication Sequence
  get IndicationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00142012;
  }

  get x00142012(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00142012']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIndicationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00142012;
    if (value === undefined) {
      throw new Error('IndicationSequence is undefined');
    }
    return value;
  }

  // Indication Number
  get IndicationNumber(): number | undefined {
    return this.x00142014;
  }

  get x00142014(): number | undefined {
    const value = this.dwResponse['00142014']?.Value;
    return convert(value?.[0], 0x00142014, 'number');
  }

  getIndicationNumber(): number {
    const value = this.x00142014;
    if (value === undefined) {
      throw new Error('IndicationNumber is undefined');
    }
    return value;
  }

  // Indication Label
  get IndicationLabel(): string | undefined {
    return this.x00142016;
  }

  get x00142016(): string | undefined {
    const value = this.dwResponse['00142016']?.Value;
    return convert(value?.[0], 0x00142016, 'string');
  }

  getIndicationLabel(): string {
    const value = this.x00142016;
    if (value === undefined) {
      throw new Error('IndicationLabel is undefined');
    }
    return value;
  }

  // Indication Type
  get IndicationType(): Array<string | undefined> | undefined {
    return this.x0014201a;
  }

  get x0014201a(): Array<string | undefined> | undefined {
    const value = this.dwResponse['0014201A']?.Value;
    return convert(value, 0x0014201a, 'Array<string | undefined>');
  }

  getIndicationType(): Array<string | undefined> {
    const value = this.x0014201a;
    if (value === undefined) {
      throw new Error('IndicationType is undefined');
    }
    return value;
  }

  // Indication Disposition
  get IndicationDisposition(): string | undefined {
    return this.x0014201c;
  }

  get x0014201c(): string | undefined {
    const value = this.dwResponse['0014201C']?.Value;
    return convert(value?.[0], 0x0014201c, 'string');
  }

  getIndicationDisposition(): string {
    const value = this.x0014201c;
    if (value === undefined) {
      throw new Error('IndicationDisposition is undefined');
    }
    return value;
  }

  // Indication ROI Sequence
  get IndicationROISequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0014201e;
  }

  get x0014201e(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0014201E']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIndicationROISequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0014201e;
    if (value === undefined) {
      throw new Error('IndicationROISequence is undefined');
    }
    return value;
  }

  // Indication Physical Property Sequence
  get IndicationPhysicalPropertySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00142030;
  }

  get x00142030(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00142030']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIndicationPhysicalPropertySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00142030;
    if (value === undefined) {
      throw new Error('IndicationPhysicalPropertySequence is undefined');
    }
    return value;
  }

  // Property Label
  get PropertyLabel(): string | undefined {
    return this.x00142032;
  }

  get x00142032(): string | undefined {
    const value = this.dwResponse['00142032']?.Value;
    return convert(value?.[0], 0x00142032, 'string');
  }

  getPropertyLabel(): string {
    const value = this.x00142032;
    if (value === undefined) {
      throw new Error('PropertyLabel is undefined');
    }
    return value;
  }

  // Coordinate System Number of Axes
  get CoordinateSystemNumberOfAxes(): number | undefined {
    return this.x00142202;
  }

  get x00142202(): number | undefined {
    const value = this.dwResponse['00142202']?.Value;
    return convert(value?.[0], 0x00142202, 'number');
  }

  getCoordinateSystemNumberOfAxes(): number {
    const value = this.x00142202;
    if (value === undefined) {
      throw new Error('CoordinateSystemNumberOfAxes is undefined');
    }
    return value;
  }

  // Coordinate System Axes Sequence
  get CoordinateSystemAxesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00142204;
  }

  get x00142204(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00142204']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCoordinateSystemAxesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00142204;
    if (value === undefined) {
      throw new Error('CoordinateSystemAxesSequence is undefined');
    }
    return value;
  }

  // Coordinate System Data Set Mapping
  get CoordinateSystemDataSetMapping(): string | undefined {
    return this.x00142208;
  }

  get x00142208(): string | undefined {
    const value = this.dwResponse['00142208']?.Value;
    return convert(value?.[0], 0x00142208, 'string');
  }

  getCoordinateSystemDataSetMapping(): string {
    const value = this.x00142208;
    if (value === undefined) {
      throw new Error('CoordinateSystemDataSetMapping is undefined');
    }
    return value;
  }

  // Coordinate System Axis Number
  get CoordinateSystemAxisNumber(): number | undefined {
    return this.x0014220a;
  }

  get x0014220a(): number | undefined {
    const value = this.dwResponse['0014220A']?.Value;
    return convert(value?.[0], 0x0014220a, 'number');
  }

  getCoordinateSystemAxisNumber(): number {
    const value = this.x0014220a;
    if (value === undefined) {
      throw new Error('CoordinateSystemAxisNumber is undefined');
    }
    return value;
  }

  // Coordinate System Axis Type
  get CoordinateSystemAxisType(): string | undefined {
    return this.x0014220c;
  }

  get x0014220c(): string | undefined {
    const value = this.dwResponse['0014220C']?.Value;
    return convert(value?.[0], 0x0014220c, 'string');
  }

  getCoordinateSystemAxisType(): string {
    const value = this.x0014220c;
    if (value === undefined) {
      throw new Error('CoordinateSystemAxisType is undefined');
    }
    return value;
  }

  // Coordinate System Axis Units
  get CoordinateSystemAxisUnits(): string | undefined {
    return this.x0014220e;
  }

  get x0014220e(): string | undefined {
    const value = this.dwResponse['0014220E']?.Value;
    return convert(value?.[0], 0x0014220e, 'string');
  }

  getCoordinateSystemAxisUnits(): string {
    const value = this.x0014220e;
    if (value === undefined) {
      throw new Error('CoordinateSystemAxisUnits is undefined');
    }
    return value;
  }

  // Coordinate System Transform Sequence
  get CoordinateSystemTransformSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00142220;
  }

  get x00142220(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00142220']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCoordinateSystemTransformSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00142220;
    if (value === undefined) {
      throw new Error('CoordinateSystemTransformSequence is undefined');
    }
    return value;
  }

  // Transform Number of Axes
  get TransformNumberOfAxes(): number | undefined {
    return this.x00142224;
  }

  get x00142224(): number | undefined {
    const value = this.dwResponse['00142224']?.Value;
    return convert(value?.[0], 0x00142224, 'number');
  }

  getTransformNumberOfAxes(): number {
    const value = this.x00142224;
    if (value === undefined) {
      throw new Error('TransformNumberOfAxes is undefined');
    }
    return value;
  }

  // Transform Order of Axes
  get TransformOrderOfAxes(): Array<number | undefined> | undefined {
    return this.x00142226;
  }

  get x00142226(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00142226']?.Value;
    return convert(value, 0x00142226, 'Array<number | undefined>');
  }

  getTransformOrderOfAxes(): Array<number | undefined> {
    const value = this.x00142226;
    if (value === undefined) {
      throw new Error('TransformOrderOfAxes is undefined');
    }
    return value;
  }

  // Transformed Axis Units
  get TransformedAxisUnits(): string | undefined {
    return this.x00142228;
  }

  get x00142228(): string | undefined {
    const value = this.dwResponse['00142228']?.Value;
    return convert(value?.[0], 0x00142228, 'string');
  }

  getTransformedAxisUnits(): string {
    const value = this.x00142228;
    if (value === undefined) {
      throw new Error('TransformedAxisUnits is undefined');
    }
    return value;
  }

  // Coordinate System Transform Rotation and Scale Matrix
  get CoordinateSystemTransformRotationAndScaleMatrix(): Array<number | undefined> | undefined {
    return this.x0014222a;
  }

  get x0014222a(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0014222A']?.Value;
    return convert(value, 0x0014222a, 'Array<number | undefined>');
  }

  getCoordinateSystemTransformRotationAndScaleMatrix(): Array<number | undefined> {
    const value = this.x0014222a;
    if (value === undefined) {
      throw new Error('CoordinateSystemTransformRotationAndScaleMatrix is undefined');
    }
    return value;
  }

  // Coordinate System Transform Translation Matrix
  get CoordinateSystemTransformTranslationMatrix(): Array<number | undefined> | undefined {
    return this.x0014222c;
  }

  get x0014222c(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0014222C']?.Value;
    return convert(value, 0x0014222c, 'Array<number | undefined>');
  }

  getCoordinateSystemTransformTranslationMatrix(): Array<number | undefined> {
    const value = this.x0014222c;
    if (value === undefined) {
      throw new Error('CoordinateSystemTransformTranslationMatrix is undefined');
    }
    return value;
  }

  // Internal Detector Frame Time
  get InternalDetectorFrameTime(): number | undefined {
    return this.x00143011;
  }

  get x00143011(): number | undefined {
    const value = this.dwResponse['00143011']?.Value;
    return convert(value?.[0], 0x00143011, 'number');
  }

  getInternalDetectorFrameTime(): number {
    const value = this.x00143011;
    if (value === undefined) {
      throw new Error('InternalDetectorFrameTime is undefined');
    }
    return value;
  }

  // Number of Frames Integrated
  get NumberOfFramesIntegrated(): number | undefined {
    return this.x00143012;
  }

  get x00143012(): number | undefined {
    const value = this.dwResponse['00143012']?.Value;
    return convert(value?.[0], 0x00143012, 'number');
  }

  getNumberOfFramesIntegrated(): number {
    const value = this.x00143012;
    if (value === undefined) {
      throw new Error('NumberOfFramesIntegrated is undefined');
    }
    return value;
  }

  // Detector Temperature Sequence
  get DetectorTemperatureSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00143020;
  }

  get x00143020(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00143020']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDetectorTemperatureSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00143020;
    if (value === undefined) {
      throw new Error('DetectorTemperatureSequence is undefined');
    }
    return value;
  }

  // Horizontal Offset of Sensor
  get HorizontalOffsetOfSensor(): number | undefined {
    return this.x00143024;
  }

  get x00143024(): number | undefined {
    const value = this.dwResponse['00143024']?.Value;
    return convert(value?.[0], 0x00143024, 'number');
  }

  getHorizontalOffsetOfSensor(): number {
    const value = this.x00143024;
    if (value === undefined) {
      throw new Error('HorizontalOffsetOfSensor is undefined');
    }
    return value;
  }

  // Vertical Offset of Sensor
  get VerticalOffsetOfSensor(): number | undefined {
    return this.x00143026;
  }

  get x00143026(): number | undefined {
    const value = this.dwResponse['00143026']?.Value;
    return convert(value?.[0], 0x00143026, 'number');
  }

  getVerticalOffsetOfSensor(): number {
    const value = this.x00143026;
    if (value === undefined) {
      throw new Error('VerticalOffsetOfSensor is undefined');
    }
    return value;
  }

  // Sensor Temperature
  get SensorTemperature(): number | undefined {
    return this.x00143028;
  }

  get x00143028(): number | undefined {
    const value = this.dwResponse['00143028']?.Value;
    return convert(value?.[0], 0x00143028, 'number');
  }

  getSensorTemperature(): number {
    const value = this.x00143028;
    if (value === undefined) {
      throw new Error('SensorTemperature is undefined');
    }
    return value;
  }

  // Dark Current Sequence
  get DarkCurrentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00143040;
  }

  get x00143040(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00143040']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDarkCurrentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00143040;
    if (value === undefined) {
      throw new Error('DarkCurrentSequence is undefined');
    }
    return value;
  }

  // Gain Correction Reference Sequence
  get GainCorrectionReferenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00143060;
  }

  get x00143060(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00143060']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getGainCorrectionReferenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00143060;
    if (value === undefined) {
      throw new Error('GainCorrectionReferenceSequence is undefined');
    }
    return value;
  }

  // KV Used in Gain Calibration
  get KVUsedInGainCalibration(): number | undefined {
    return this.x00143071;
  }

  get x00143071(): number | undefined {
    const value = this.dwResponse['00143071']?.Value;
    return convert(value?.[0], 0x00143071, 'number');
  }

  getKVUsedInGainCalibration(): number {
    const value = this.x00143071;
    if (value === undefined) {
      throw new Error('KVUsedInGainCalibration is undefined');
    }
    return value;
  }

  // MA Used in Gain Calibration
  get MAUsedInGainCalibration(): number | undefined {
    return this.x00143072;
  }

  get x00143072(): number | undefined {
    const value = this.dwResponse['00143072']?.Value;
    return convert(value?.[0], 0x00143072, 'number');
  }

  getMAUsedInGainCalibration(): number {
    const value = this.x00143072;
    if (value === undefined) {
      throw new Error('MAUsedInGainCalibration is undefined');
    }
    return value;
  }

  // Number of Frames Used for Integration
  get NumberOfFramesUsedForIntegration(): number | undefined {
    return this.x00143073;
  }

  get x00143073(): number | undefined {
    const value = this.dwResponse['00143073']?.Value;
    return convert(value?.[0], 0x00143073, 'number');
  }

  getNumberOfFramesUsedForIntegration(): number {
    const value = this.x00143073;
    if (value === undefined) {
      throw new Error('NumberOfFramesUsedForIntegration is undefined');
    }
    return value;
  }

  // Filter Material Used in Gain Calibration
  get FilterMaterialUsedInGainCalibration(): string | undefined {
    return this.x00143074;
  }

  get x00143074(): string | undefined {
    const value = this.dwResponse['00143074']?.Value;
    return convert(value?.[0], 0x00143074, 'string');
  }

  getFilterMaterialUsedInGainCalibration(): string {
    const value = this.x00143074;
    if (value === undefined) {
      throw new Error('FilterMaterialUsedInGainCalibration is undefined');
    }
    return value;
  }

  // Filter Thickness Used in Gain Calibration
  get FilterThicknessUsedInGainCalibration(): number | undefined {
    return this.x00143075;
  }

  get x00143075(): number | undefined {
    const value = this.dwResponse['00143075']?.Value;
    return convert(value?.[0], 0x00143075, 'number');
  }

  getFilterThicknessUsedInGainCalibration(): number {
    const value = this.x00143075;
    if (value === undefined) {
      throw new Error('FilterThicknessUsedInGainCalibration is undefined');
    }
    return value;
  }

  // Date of Gain Calibration
  get DateOfGainCalibration(): Date | undefined {
    return this.x00143076;
  }

  get x00143076(): Date | undefined {
    const value = this.dwResponse['00143076']?.Value;
    return convert(value?.[0], 0x00143076, 'Date');
  }

  getDateOfGainCalibration(): Date {
    const value = this.x00143076;
    if (value === undefined) {
      throw new Error('DateOfGainCalibration is undefined');
    }
    return value;
  }

  // Time of Gain Calibration
  get TimeOfGainCalibration(): string | undefined {
    return this.x00143077;
  }

  get x00143077(): string | undefined {
    const value = this.dwResponse['00143077']?.Value;
    return convert(value?.[0], 0x00143077, 'string');
  }

  getTimeOfGainCalibration(): string {
    const value = this.x00143077;
    if (value === undefined) {
      throw new Error('TimeOfGainCalibration is undefined');
    }
    return value;
  }

  // Pulser Equipment Sequence
  get PulserEquipmentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00144002;
  }

  get x00144002(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00144002']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPulserEquipmentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00144002;
    if (value === undefined) {
      throw new Error('PulserEquipmentSequence is undefined');
    }
    return value;
  }

  // Pulser Type
  get PulserType(): string | undefined {
    return this.x00144004;
  }

  get x00144004(): string | undefined {
    const value = this.dwResponse['00144004']?.Value;
    return convert(value?.[0], 0x00144004, 'string');
  }

  getPulserType(): string {
    const value = this.x00144004;
    if (value === undefined) {
      throw new Error('PulserType is undefined');
    }
    return value;
  }

  // Receiver Equipment Sequence
  get ReceiverEquipmentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00144008;
  }

  get x00144008(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00144008']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReceiverEquipmentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00144008;
    if (value === undefined) {
      throw new Error('ReceiverEquipmentSequence is undefined');
    }
    return value;
  }

  // Amplifier Type
  get AmplifierType(): string | undefined {
    return this.x0014400a;
  }

  get x0014400a(): string | undefined {
    const value = this.dwResponse['0014400A']?.Value;
    return convert(value?.[0], 0x0014400a, 'string');
  }

  getAmplifierType(): string {
    const value = this.x0014400a;
    if (value === undefined) {
      throw new Error('AmplifierType is undefined');
    }
    return value;
  }

  // Pre-Amplifier Equipment Sequence
  get PreAmplifierEquipmentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0014400e;
  }

  get x0014400e(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0014400E']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPreAmplifierEquipmentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0014400e;
    if (value === undefined) {
      throw new Error('PreAmplifierEquipmentSequence is undefined');
    }
    return value;
  }

  // Transmit Transducer Sequence
  get TransmitTransducerSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00144010;
  }

  get x00144010(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00144010']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTransmitTransducerSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00144010;
    if (value === undefined) {
      throw new Error('TransmitTransducerSequence is undefined');
    }
    return value;
  }

  // Receive Transducer Sequence
  get ReceiveTransducerSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00144011;
  }

  get x00144011(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00144011']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReceiveTransducerSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00144011;
    if (value === undefined) {
      throw new Error('ReceiveTransducerSequence is undefined');
    }
    return value;
  }

  // Number of Elements
  get NumberOfElements(): number | undefined {
    return this.x00144012;
  }

  get x00144012(): number | undefined {
    const value = this.dwResponse['00144012']?.Value;
    return convert(value?.[0], 0x00144012, 'number');
  }

  getNumberOfElements(): number {
    const value = this.x00144012;
    if (value === undefined) {
      throw new Error('NumberOfElements is undefined');
    }
    return value;
  }

  // Element Shape
  get ElementShape(): string | undefined {
    return this.x00144013;
  }

  get x00144013(): string | undefined {
    const value = this.dwResponse['00144013']?.Value;
    return convert(value?.[0], 0x00144013, 'string');
  }

  getElementShape(): string {
    const value = this.x00144013;
    if (value === undefined) {
      throw new Error('ElementShape is undefined');
    }
    return value;
  }

  // Element Dimension A
  get ElementDimensionA(): number | undefined {
    return this.x00144014;
  }

  get x00144014(): number | undefined {
    const value = this.dwResponse['00144014']?.Value;
    return convert(value?.[0], 0x00144014, 'number');
  }

  getElementDimensionA(): number {
    const value = this.x00144014;
    if (value === undefined) {
      throw new Error('ElementDimensionA is undefined');
    }
    return value;
  }

  // Element Dimension B
  get ElementDimensionB(): number | undefined {
    return this.x00144015;
  }

  get x00144015(): number | undefined {
    const value = this.dwResponse['00144015']?.Value;
    return convert(value?.[0], 0x00144015, 'number');
  }

  getElementDimensionB(): number {
    const value = this.x00144015;
    if (value === undefined) {
      throw new Error('ElementDimensionB is undefined');
    }
    return value;
  }

  // Element Pitch A
  get ElementPitchA(): number | undefined {
    return this.x00144016;
  }

  get x00144016(): number | undefined {
    const value = this.dwResponse['00144016']?.Value;
    return convert(value?.[0], 0x00144016, 'number');
  }

  getElementPitchA(): number {
    const value = this.x00144016;
    if (value === undefined) {
      throw new Error('ElementPitchA is undefined');
    }
    return value;
  }

  // Measured Beam Dimension A
  get MeasuredBeamDimensionA(): number | undefined {
    return this.x00144017;
  }

  get x00144017(): number | undefined {
    const value = this.dwResponse['00144017']?.Value;
    return convert(value?.[0], 0x00144017, 'number');
  }

  getMeasuredBeamDimensionA(): number {
    const value = this.x00144017;
    if (value === undefined) {
      throw new Error('MeasuredBeamDimensionA is undefined');
    }
    return value;
  }

  // Measured Beam Dimension B
  get MeasuredBeamDimensionB(): number | undefined {
    return this.x00144018;
  }

  get x00144018(): number | undefined {
    const value = this.dwResponse['00144018']?.Value;
    return convert(value?.[0], 0x00144018, 'number');
  }

  getMeasuredBeamDimensionB(): number {
    const value = this.x00144018;
    if (value === undefined) {
      throw new Error('MeasuredBeamDimensionB is undefined');
    }
    return value;
  }

  // Location of Measured Beam Diameter
  get LocationOfMeasuredBeamDiameter(): number | undefined {
    return this.x00144019;
  }

  get x00144019(): number | undefined {
    const value = this.dwResponse['00144019']?.Value;
    return convert(value?.[0], 0x00144019, 'number');
  }

  getLocationOfMeasuredBeamDiameter(): number {
    const value = this.x00144019;
    if (value === undefined) {
      throw new Error('LocationOfMeasuredBeamDiameter is undefined');
    }
    return value;
  }

  // Nominal Frequency
  get NominalFrequency(): number | undefined {
    return this.x0014401a;
  }

  get x0014401a(): number | undefined {
    const value = this.dwResponse['0014401A']?.Value;
    return convert(value?.[0], 0x0014401a, 'number');
  }

  getNominalFrequency(): number {
    const value = this.x0014401a;
    if (value === undefined) {
      throw new Error('NominalFrequency is undefined');
    }
    return value;
  }

  // Measured Center Frequency
  get MeasuredCenterFrequency(): number | undefined {
    return this.x0014401b;
  }

  get x0014401b(): number | undefined {
    const value = this.dwResponse['0014401B']?.Value;
    return convert(value?.[0], 0x0014401b, 'number');
  }

  getMeasuredCenterFrequency(): number {
    const value = this.x0014401b;
    if (value === undefined) {
      throw new Error('MeasuredCenterFrequency is undefined');
    }
    return value;
  }

  // Measured Bandwidth
  get MeasuredBandwidth(): number | undefined {
    return this.x0014401c;
  }

  get x0014401c(): number | undefined {
    const value = this.dwResponse['0014401C']?.Value;
    return convert(value?.[0], 0x0014401c, 'number');
  }

  getMeasuredBandwidth(): number {
    const value = this.x0014401c;
    if (value === undefined) {
      throw new Error('MeasuredBandwidth is undefined');
    }
    return value;
  }

  // Element Pitch B
  get ElementPitchB(): number | undefined {
    return this.x0014401d;
  }

  get x0014401d(): number | undefined {
    const value = this.dwResponse['0014401D']?.Value;
    return convert(value?.[0], 0x0014401d, 'number');
  }

  getElementPitchB(): number {
    const value = this.x0014401d;
    if (value === undefined) {
      throw new Error('ElementPitchB is undefined');
    }
    return value;
  }

  // Pulser Settings Sequence
  get PulserSettingsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00144020;
  }

  get x00144020(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00144020']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPulserSettingsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00144020;
    if (value === undefined) {
      throw new Error('PulserSettingsSequence is undefined');
    }
    return value;
  }

  // Pulse Width
  get PulseWidth(): number | undefined {
    return this.x00144022;
  }

  get x00144022(): number | undefined {
    const value = this.dwResponse['00144022']?.Value;
    return convert(value?.[0], 0x00144022, 'number');
  }

  getPulseWidth(): number {
    const value = this.x00144022;
    if (value === undefined) {
      throw new Error('PulseWidth is undefined');
    }
    return value;
  }

  // Excitation Frequency
  get ExcitationFrequency(): number | undefined {
    return this.x00144024;
  }

  get x00144024(): number | undefined {
    const value = this.dwResponse['00144024']?.Value;
    return convert(value?.[0], 0x00144024, 'number');
  }

  getExcitationFrequency(): number {
    const value = this.x00144024;
    if (value === undefined) {
      throw new Error('ExcitationFrequency is undefined');
    }
    return value;
  }

  // Modulation Type
  get ModulationType(): string | undefined {
    return this.x00144026;
  }

  get x00144026(): string | undefined {
    const value = this.dwResponse['00144026']?.Value;
    return convert(value?.[0], 0x00144026, 'string');
  }

  getModulationType(): string {
    const value = this.x00144026;
    if (value === undefined) {
      throw new Error('ModulationType is undefined');
    }
    return value;
  }

  // Damping
  get Damping(): number | undefined {
    return this.x00144028;
  }

  get x00144028(): number | undefined {
    const value = this.dwResponse['00144028']?.Value;
    return convert(value?.[0], 0x00144028, 'number');
  }

  getDamping(): number {
    const value = this.x00144028;
    if (value === undefined) {
      throw new Error('Damping is undefined');
    }
    return value;
  }

  // Receiver Settings Sequence
  get ReceiverSettingsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00144030;
  }

  get x00144030(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00144030']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReceiverSettingsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00144030;
    if (value === undefined) {
      throw new Error('ReceiverSettingsSequence is undefined');
    }
    return value;
  }

  // Acquired Soundpath Length
  get AcquiredSoundpathLength(): number | undefined {
    return this.x00144031;
  }

  get x00144031(): number | undefined {
    const value = this.dwResponse['00144031']?.Value;
    return convert(value?.[0], 0x00144031, 'number');
  }

  getAcquiredSoundpathLength(): number {
    const value = this.x00144031;
    if (value === undefined) {
      throw new Error('AcquiredSoundpathLength is undefined');
    }
    return value;
  }

  // Acquisition Compression Type
  get AcquisitionCompressionType(): string | undefined {
    return this.x00144032;
  }

  get x00144032(): string | undefined {
    const value = this.dwResponse['00144032']?.Value;
    return convert(value?.[0], 0x00144032, 'string');
  }

  getAcquisitionCompressionType(): string {
    const value = this.x00144032;
    if (value === undefined) {
      throw new Error('AcquisitionCompressionType is undefined');
    }
    return value;
  }

  // Acquisition Sample Size
  get AcquisitionSampleSize(): number | undefined {
    return this.x00144033;
  }

  get x00144033(): number | undefined {
    const value = this.dwResponse['00144033']?.Value;
    return convert(value?.[0], 0x00144033, 'number');
  }

  getAcquisitionSampleSize(): number {
    const value = this.x00144033;
    if (value === undefined) {
      throw new Error('AcquisitionSampleSize is undefined');
    }
    return value;
  }

  // Rectifier Smoothing
  get RectifierSmoothing(): number | undefined {
    return this.x00144034;
  }

  get x00144034(): number | undefined {
    const value = this.dwResponse['00144034']?.Value;
    return convert(value?.[0], 0x00144034, 'number');
  }

  getRectifierSmoothing(): number {
    const value = this.x00144034;
    if (value === undefined) {
      throw new Error('RectifierSmoothing is undefined');
    }
    return value;
  }

  // DAC Sequence
  get DACSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00144035;
  }

  get x00144035(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00144035']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDACSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00144035;
    if (value === undefined) {
      throw new Error('DACSequence is undefined');
    }
    return value;
  }

  // DAC Type
  get DACType(): string | undefined {
    return this.x00144036;
  }

  get x00144036(): string | undefined {
    const value = this.dwResponse['00144036']?.Value;
    return convert(value?.[0], 0x00144036, 'string');
  }

  getDACType(): string {
    const value = this.x00144036;
    if (value === undefined) {
      throw new Error('DACType is undefined');
    }
    return value;
  }

  // DAC Gain Points
  get DACGainPoints(): Array<number | undefined> | undefined {
    return this.x00144038;
  }

  get x00144038(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00144038']?.Value;
    return convert(value, 0x00144038, 'Array<number | undefined>');
  }

  getDACGainPoints(): Array<number | undefined> {
    const value = this.x00144038;
    if (value === undefined) {
      throw new Error('DACGainPoints is undefined');
    }
    return value;
  }

  // DAC Time Points
  get DACTimePoints(): Array<number | undefined> | undefined {
    return this.x0014403a;
  }

  get x0014403a(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0014403A']?.Value;
    return convert(value, 0x0014403a, 'Array<number | undefined>');
  }

  getDACTimePoints(): Array<number | undefined> {
    const value = this.x0014403a;
    if (value === undefined) {
      throw new Error('DACTimePoints is undefined');
    }
    return value;
  }

  // DAC Amplitude
  get DACAmplitude(): Array<number | undefined> | undefined {
    return this.x0014403c;
  }

  get x0014403c(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0014403C']?.Value;
    return convert(value, 0x0014403c, 'Array<number | undefined>');
  }

  getDACAmplitude(): Array<number | undefined> {
    const value = this.x0014403c;
    if (value === undefined) {
      throw new Error('DACAmplitude is undefined');
    }
    return value;
  }

  // Pre-Amplifier Settings Sequence
  get PreAmplifierSettingsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00144040;
  }

  get x00144040(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00144040']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPreAmplifierSettingsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00144040;
    if (value === undefined) {
      throw new Error('PreAmplifierSettingsSequence is undefined');
    }
    return value;
  }

  // Transmit Transducer Settings Sequence
  get TransmitTransducerSettingsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00144050;
  }

  get x00144050(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00144050']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTransmitTransducerSettingsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00144050;
    if (value === undefined) {
      throw new Error('TransmitTransducerSettingsSequence is undefined');
    }
    return value;
  }

  // Receive Transducer Settings Sequence
  get ReceiveTransducerSettingsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00144051;
  }

  get x00144051(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00144051']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReceiveTransducerSettingsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00144051;
    if (value === undefined) {
      throw new Error('ReceiveTransducerSettingsSequence is undefined');
    }
    return value;
  }

  // Incident Angle
  get IncidentAngle(): number | undefined {
    return this.x00144052;
  }

  get x00144052(): number | undefined {
    const value = this.dwResponse['00144052']?.Value;
    return convert(value?.[0], 0x00144052, 'number');
  }

  getIncidentAngle(): number {
    const value = this.x00144052;
    if (value === undefined) {
      throw new Error('IncidentAngle is undefined');
    }
    return value;
  }

  // Coupling Velocity
  get CouplingVelocity(): number | undefined {
    return this.x00144057;
  }

  get x00144057(): number | undefined {
    const value = this.dwResponse['00144057']?.Value;
    return convert(value?.[0], 0x00144057, 'number');
  }

  getCouplingVelocity(): number {
    const value = this.x00144057;
    if (value === undefined) {
      throw new Error('CouplingVelocity is undefined');
    }
    return value;
  }

  // Probe Center Location X
  get ProbeCenterLocationX(): number | undefined {
    return this.x00144058;
  }

  get x00144058(): number | undefined {
    const value = this.dwResponse['00144058']?.Value;
    return convert(value?.[0], 0x00144058, 'number');
  }

  getProbeCenterLocationX(): number {
    const value = this.x00144058;
    if (value === undefined) {
      throw new Error('ProbeCenterLocationX is undefined');
    }
    return value;
  }

  // Probe Center Location Z
  get ProbeCenterLocationZ(): number | undefined {
    return this.x00144059;
  }

  get x00144059(): number | undefined {
    const value = this.dwResponse['00144059']?.Value;
    return convert(value?.[0], 0x00144059, 'number');
  }

  getProbeCenterLocationZ(): number {
    const value = this.x00144059;
    if (value === undefined) {
      throw new Error('ProbeCenterLocationZ is undefined');
    }
    return value;
  }

  // Sound Path Length
  get SoundPathLength(): number | undefined {
    return this.x0014405a;
  }

  get x0014405a(): number | undefined {
    const value = this.dwResponse['0014405A']?.Value;
    return convert(value?.[0], 0x0014405a, 'number');
  }

  getSoundPathLength(): number {
    const value = this.x0014405a;
    if (value === undefined) {
      throw new Error('SoundPathLength is undefined');
    }
    return value;
  }

  // Gate Settings Sequence
  get GateSettingsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00144060;
  }

  get x00144060(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00144060']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getGateSettingsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00144060;
    if (value === undefined) {
      throw new Error('GateSettingsSequence is undefined');
    }
    return value;
  }

  // Gate Threshold
  get GateThreshold(): number | undefined {
    return this.x00144062;
  }

  get x00144062(): number | undefined {
    const value = this.dwResponse['00144062']?.Value;
    return convert(value?.[0], 0x00144062, 'number');
  }

  getGateThreshold(): number {
    const value = this.x00144062;
    if (value === undefined) {
      throw new Error('GateThreshold is undefined');
    }
    return value;
  }

  // Velocity of Sound
  get VelocityOfSound(): number | undefined {
    return this.x00144064;
  }

  get x00144064(): number | undefined {
    const value = this.dwResponse['00144064']?.Value;
    return convert(value?.[0], 0x00144064, 'number');
  }

  getVelocityOfSound(): number {
    const value = this.x00144064;
    if (value === undefined) {
      throw new Error('VelocityOfSound is undefined');
    }
    return value;
  }

  // Calibration Settings Sequence
  get CalibrationSettingsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00144070;
  }

  get x00144070(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00144070']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCalibrationSettingsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00144070;
    if (value === undefined) {
      throw new Error('CalibrationSettingsSequence is undefined');
    }
    return value;
  }

  // Procedure Version
  get ProcedureVersion(): string | undefined {
    return this.x00144074;
  }

  get x00144074(): string | undefined {
    const value = this.dwResponse['00144074']?.Value;
    return convert(value?.[0], 0x00144074, 'string');
  }

  getProcedureVersion(): string {
    const value = this.x00144074;
    if (value === undefined) {
      throw new Error('ProcedureVersion is undefined');
    }
    return value;
  }

  // Procedure Creation Date
  get ProcedureCreationDate(): Date | undefined {
    return this.x00144076;
  }

  get x00144076(): Date | undefined {
    const value = this.dwResponse['00144076']?.Value;
    return convert(value?.[0], 0x00144076, 'Date');
  }

  getProcedureCreationDate(): Date {
    const value = this.x00144076;
    if (value === undefined) {
      throw new Error('ProcedureCreationDate is undefined');
    }
    return value;
  }

  // Procedure Expiration Date
  get ProcedureExpirationDate(): Date | undefined {
    return this.x00144078;
  }

  get x00144078(): Date | undefined {
    const value = this.dwResponse['00144078']?.Value;
    return convert(value?.[0], 0x00144078, 'Date');
  }

  getProcedureExpirationDate(): Date {
    const value = this.x00144078;
    if (value === undefined) {
      throw new Error('ProcedureExpirationDate is undefined');
    }
    return value;
  }

  // Procedure Last Modified Date
  get ProcedureLastModifiedDate(): Date | undefined {
    return this.x0014407a;
  }

  get x0014407a(): Date | undefined {
    const value = this.dwResponse['0014407A']?.Value;
    return convert(value?.[0], 0x0014407a, 'Date');
  }

  getProcedureLastModifiedDate(): Date {
    const value = this.x0014407a;
    if (value === undefined) {
      throw new Error('ProcedureLastModifiedDate is undefined');
    }
    return value;
  }

  // Calibration Time
  get CalibrationTime(): Array<string | undefined> | undefined {
    return this.x0014407c;
  }

  get x0014407c(): Array<string | undefined> | undefined {
    const value = this.dwResponse['0014407C']?.Value;
    return convert(value, 0x0014407c, 'Array<string | undefined>');
  }

  getCalibrationTime(): Array<string | undefined> {
    const value = this.x0014407c;
    if (value === undefined) {
      throw new Error('CalibrationTime is undefined');
    }
    return value;
  }

  // Calibration Date
  get CalibrationDate(): Array<Date | undefined> | undefined {
    return this.x0014407e;
  }

  get x0014407e(): Array<Date | undefined> | undefined {
    const value = this.dwResponse['0014407E']?.Value;
    return convert(value, 0x0014407e, 'Array<Date | undefined>');
  }

  getCalibrationDate(): Array<Date | undefined> {
    const value = this.x0014407e;
    if (value === undefined) {
      throw new Error('CalibrationDate is undefined');
    }
    return value;
  }

  // Probe Drive Equipment Sequence
  get ProbeDriveEquipmentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00144080;
  }

  get x00144080(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00144080']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getProbeDriveEquipmentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00144080;
    if (value === undefined) {
      throw new Error('ProbeDriveEquipmentSequence is undefined');
    }
    return value;
  }

  // Drive Type
  get DriveType(): string | undefined {
    return this.x00144081;
  }

  get x00144081(): string | undefined {
    const value = this.dwResponse['00144081']?.Value;
    return convert(value?.[0], 0x00144081, 'string');
  }

  getDriveType(): string {
    const value = this.x00144081;
    if (value === undefined) {
      throw new Error('DriveType is undefined');
    }
    return value;
  }

  // Drive Probe Sequence
  get DriveProbeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00144083;
  }

  get x00144083(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00144083']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDriveProbeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00144083;
    if (value === undefined) {
      throw new Error('DriveProbeSequence is undefined');
    }
    return value;
  }

  // Probe Inductance
  get ProbeInductance(): number | undefined {
    return this.x00144084;
  }

  get x00144084(): number | undefined {
    const value = this.dwResponse['00144084']?.Value;
    return convert(value?.[0], 0x00144084, 'number');
  }

  getProbeInductance(): number {
    const value = this.x00144084;
    if (value === undefined) {
      throw new Error('ProbeInductance is undefined');
    }
    return value;
  }

  // Probe Resistance
  get ProbeResistance(): number | undefined {
    return this.x00144085;
  }

  get x00144085(): number | undefined {
    const value = this.dwResponse['00144085']?.Value;
    return convert(value?.[0], 0x00144085, 'number');
  }

  getProbeResistance(): number {
    const value = this.x00144085;
    if (value === undefined) {
      throw new Error('ProbeResistance is undefined');
    }
    return value;
  }

  // Receive Probe Sequence
  get ReceiveProbeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00144086;
  }

  get x00144086(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00144086']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReceiveProbeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00144086;
    if (value === undefined) {
      throw new Error('ReceiveProbeSequence is undefined');
    }
    return value;
  }

  // Probe Drive Settings Sequence
  get ProbeDriveSettingsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00144087;
  }

  get x00144087(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00144087']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getProbeDriveSettingsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00144087;
    if (value === undefined) {
      throw new Error('ProbeDriveSettingsSequence is undefined');
    }
    return value;
  }

  // Bridge Resistors
  get BridgeResistors(): number | undefined {
    return this.x00144088;
  }

  get x00144088(): number | undefined {
    const value = this.dwResponse['00144088']?.Value;
    return convert(value?.[0], 0x00144088, 'number');
  }

  getBridgeResistors(): number {
    const value = this.x00144088;
    if (value === undefined) {
      throw new Error('BridgeResistors is undefined');
    }
    return value;
  }

  // Probe Orientation Angle
  get ProbeOrientationAngle(): number | undefined {
    return this.x00144089;
  }

  get x00144089(): number | undefined {
    const value = this.dwResponse['00144089']?.Value;
    return convert(value?.[0], 0x00144089, 'number');
  }

  getProbeOrientationAngle(): number {
    const value = this.x00144089;
    if (value === undefined) {
      throw new Error('ProbeOrientationAngle is undefined');
    }
    return value;
  }

  // User Selected Gain Y
  get UserSelectedGainY(): number | undefined {
    return this.x0014408b;
  }

  get x0014408b(): number | undefined {
    const value = this.dwResponse['0014408B']?.Value;
    return convert(value?.[0], 0x0014408b, 'number');
  }

  getUserSelectedGainY(): number {
    const value = this.x0014408b;
    if (value === undefined) {
      throw new Error('UserSelectedGainY is undefined');
    }
    return value;
  }

  // User Selected Phase
  get UserSelectedPhase(): number | undefined {
    return this.x0014408c;
  }

  get x0014408c(): number | undefined {
    const value = this.dwResponse['0014408C']?.Value;
    return convert(value?.[0], 0x0014408c, 'number');
  }

  getUserSelectedPhase(): number {
    const value = this.x0014408c;
    if (value === undefined) {
      throw new Error('UserSelectedPhase is undefined');
    }
    return value;
  }

  // User Selected Offset X
  get UserSelectedOffsetX(): number | undefined {
    return this.x0014408d;
  }

  get x0014408d(): number | undefined {
    const value = this.dwResponse['0014408D']?.Value;
    return convert(value?.[0], 0x0014408d, 'number');
  }

  getUserSelectedOffsetX(): number {
    const value = this.x0014408d;
    if (value === undefined) {
      throw new Error('UserSelectedOffsetX is undefined');
    }
    return value;
  }

  // User Selected Offset Y
  get UserSelectedOffsetY(): number | undefined {
    return this.x0014408e;
  }

  get x0014408e(): number | undefined {
    const value = this.dwResponse['0014408E']?.Value;
    return convert(value?.[0], 0x0014408e, 'number');
  }

  getUserSelectedOffsetY(): number {
    const value = this.x0014408e;
    if (value === undefined) {
      throw new Error('UserSelectedOffsetY is undefined');
    }
    return value;
  }

  // Channel Settings Sequence
  get ChannelSettingsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00144091;
  }

  get x00144091(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00144091']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getChannelSettingsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00144091;
    if (value === undefined) {
      throw new Error('ChannelSettingsSequence is undefined');
    }
    return value;
  }

  // Channel Threshold
  get ChannelThreshold(): number | undefined {
    return this.x00144092;
  }

  get x00144092(): number | undefined {
    const value = this.dwResponse['00144092']?.Value;
    return convert(value?.[0], 0x00144092, 'number');
  }

  getChannelThreshold(): number {
    const value = this.x00144092;
    if (value === undefined) {
      throw new Error('ChannelThreshold is undefined');
    }
    return value;
  }

  // Scanner Settings Sequence
  get ScannerSettingsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0014409a;
  }

  get x0014409a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0014409A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getScannerSettingsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0014409a;
    if (value === undefined) {
      throw new Error('ScannerSettingsSequence is undefined');
    }
    return value;
  }

  // Translation Rate X
  get TranslationRateX(): number | undefined {
    return this.x0014409c;
  }

  get x0014409c(): number | undefined {
    const value = this.dwResponse['0014409C']?.Value;
    return convert(value?.[0], 0x0014409c, 'number');
  }

  getTranslationRateX(): number {
    const value = this.x0014409c;
    if (value === undefined) {
      throw new Error('TranslationRateX is undefined');
    }
    return value;
  }

  // Translation Rate Y
  get TranslationRateY(): number | undefined {
    return this.x0014409d;
  }

  get x0014409d(): number | undefined {
    const value = this.dwResponse['0014409D']?.Value;
    return convert(value?.[0], 0x0014409d, 'number');
  }

  getTranslationRateY(): number {
    const value = this.x0014409d;
    if (value === undefined) {
      throw new Error('TranslationRateY is undefined');
    }
    return value;
  }

  // Channel Overlap
  get ChannelOverlap(): number | undefined {
    return this.x0014409f;
  }

  get x0014409f(): number | undefined {
    const value = this.dwResponse['0014409F']?.Value;
    return convert(value?.[0], 0x0014409f, 'number');
  }

  getChannelOverlap(): number {
    const value = this.x0014409f;
    if (value === undefined) {
      throw new Error('ChannelOverlap is undefined');
    }
    return value;
  }

  // Image Quality Indicator Type
  get ImageQualityIndicatorType(): string | undefined {
    return this.x001440a0;
  }

  get x001440a0(): string | undefined {
    const value = this.dwResponse['001440A0']?.Value;
    return convert(value?.[0], 0x001440a0, 'string');
  }

  getImageQualityIndicatorType(): string {
    const value = this.x001440a0;
    if (value === undefined) {
      throw new Error('ImageQualityIndicatorType is undefined');
    }
    return value;
  }

  // Image Quality Indicator Material
  get ImageQualityIndicatorMaterial(): string | undefined {
    return this.x001440a1;
  }

  get x001440a1(): string | undefined {
    const value = this.dwResponse['001440A1']?.Value;
    return convert(value?.[0], 0x001440a1, 'string');
  }

  getImageQualityIndicatorMaterial(): string {
    const value = this.x001440a1;
    if (value === undefined) {
      throw new Error('ImageQualityIndicatorMaterial is undefined');
    }
    return value;
  }

  // Image Quality Indicator Size
  get ImageQualityIndicatorSize(): string | undefined {
    return this.x001440a2;
  }

  get x001440a2(): string | undefined {
    const value = this.dwResponse['001440A2']?.Value;
    return convert(value?.[0], 0x001440a2, 'string');
  }

  getImageQualityIndicatorSize(): string {
    const value = this.x001440a2;
    if (value === undefined) {
      throw new Error('ImageQualityIndicatorSize is undefined');
    }
    return value;
  }

  // LINAC Energy
  get LINACEnergy(): number | undefined {
    return this.x00145002;
  }

  get x00145002(): number | undefined {
    const value = this.dwResponse['00145002']?.Value;
    return convert(value?.[0], 0x00145002, 'number');
  }

  getLINACEnergy(): number {
    const value = this.x00145002;
    if (value === undefined) {
      throw new Error('LINACEnergy is undefined');
    }
    return value;
  }

  // LINAC Output
  get LINACOutput(): number | undefined {
    return this.x00145004;
  }

  get x00145004(): number | undefined {
    const value = this.dwResponse['00145004']?.Value;
    return convert(value?.[0], 0x00145004, 'number');
  }

  getLINACOutput(): number {
    const value = this.x00145004;
    if (value === undefined) {
      throw new Error('LINACOutput is undefined');
    }
    return value;
  }

  // Contrast/Bolus Agent
  get ContrastBolusAgent(): string | undefined {
    return this.x00180010;
  }

  get x00180010(): string | undefined {
    const value = this.dwResponse['00180010']?.Value;
    return convert(value?.[0], 0x00180010, 'string');
  }

  getContrastBolusAgent(): string {
    const value = this.x00180010;
    if (value === undefined) {
      throw new Error('ContrastBolusAgent is undefined');
    }
    return value;
  }

  // Contrast/Bolus Agent Sequence
  get ContrastBolusAgentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00180012;
  }

  get x00180012(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00180012']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getContrastBolusAgentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00180012;
    if (value === undefined) {
      throw new Error('ContrastBolusAgentSequence is undefined');
    }
    return value;
  }

  // Contrast/Bolus T1 Relaxivity
  get ContrastBolusT1Relaxivity(): number | undefined {
    return this.x00180013;
  }

  get x00180013(): number | undefined {
    const value = this.dwResponse['00180013']?.Value;
    return convert(value?.[0], 0x00180013, 'number');
  }

  getContrastBolusT1Relaxivity(): number {
    const value = this.x00180013;
    if (value === undefined) {
      throw new Error('ContrastBolusT1Relaxivity is undefined');
    }
    return value;
  }

  // Contrast/Bolus Administration Route Sequence
  get ContrastBolusAdministrationRouteSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00180014;
  }

  get x00180014(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00180014']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getContrastBolusAdministrationRouteSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00180014;
    if (value === undefined) {
      throw new Error('ContrastBolusAdministrationRouteSequence is undefined');
    }
    return value;
  }

  // Body Part Examined
  get BodyPartExamined(): string | undefined {
    return this.x00180015;
  }

  get x00180015(): string | undefined {
    const value = this.dwResponse['00180015']?.Value;
    return convert(value?.[0], 0x00180015, 'string');
  }

  getBodyPartExamined(): string {
    const value = this.x00180015;
    if (value === undefined) {
      throw new Error('BodyPartExamined is undefined');
    }
    return value;
  }

  // Scanning Sequence
  get ScanningSequence(): Array<string | undefined> | undefined {
    return this.x00180020;
  }

  get x00180020(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00180020']?.Value;
    return convert(value, 0x00180020, 'Array<string | undefined>');
  }

  getScanningSequence(): Array<string | undefined> {
    const value = this.x00180020;
    if (value === undefined) {
      throw new Error('ScanningSequence is undefined');
    }
    return value;
  }

  // Sequence Variant
  get SequenceVariant(): Array<string | undefined> | undefined {
    return this.x00180021;
  }

  get x00180021(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00180021']?.Value;
    return convert(value, 0x00180021, 'Array<string | undefined>');
  }

  getSequenceVariant(): Array<string | undefined> {
    const value = this.x00180021;
    if (value === undefined) {
      throw new Error('SequenceVariant is undefined');
    }
    return value;
  }

  // Scan Options
  get ScanOptions(): Array<string | undefined> | undefined {
    return this.x00180022;
  }

  get x00180022(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00180022']?.Value;
    return convert(value, 0x00180022, 'Array<string | undefined>');
  }

  getScanOptions(): Array<string | undefined> {
    const value = this.x00180022;
    if (value === undefined) {
      throw new Error('ScanOptions is undefined');
    }
    return value;
  }

  // MR Acquisition Type
  get MRAcquisitionType(): string | undefined {
    return this.x00180023;
  }

  get x00180023(): string | undefined {
    const value = this.dwResponse['00180023']?.Value;
    return convert(value?.[0], 0x00180023, 'string');
  }

  getMRAcquisitionType(): string {
    const value = this.x00180023;
    if (value === undefined) {
      throw new Error('MRAcquisitionType is undefined');
    }
    return value;
  }

  // Sequence Name
  get SequenceName(): string | undefined {
    return this.x00180024;
  }

  get x00180024(): string | undefined {
    const value = this.dwResponse['00180024']?.Value;
    return convert(value?.[0], 0x00180024, 'string');
  }

  getSequenceName(): string {
    const value = this.x00180024;
    if (value === undefined) {
      throw new Error('SequenceName is undefined');
    }
    return value;
  }

  // Angio Flag
  get AngioFlag(): string | undefined {
    return this.x00180025;
  }

  get x00180025(): string | undefined {
    const value = this.dwResponse['00180025']?.Value;
    return convert(value?.[0], 0x00180025, 'string');
  }

  getAngioFlag(): string {
    const value = this.x00180025;
    if (value === undefined) {
      throw new Error('AngioFlag is undefined');
    }
    return value;
  }

  // Intervention Drug Information Sequence
  get InterventionDrugInformationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00180026;
  }

  get x00180026(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00180026']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getInterventionDrugInformationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00180026;
    if (value === undefined) {
      throw new Error('InterventionDrugInformationSequence is undefined');
    }
    return value;
  }

  // Intervention Drug Stop Time
  get InterventionDrugStopTime(): string | undefined {
    return this.x00180027;
  }

  get x00180027(): string | undefined {
    const value = this.dwResponse['00180027']?.Value;
    return convert(value?.[0], 0x00180027, 'string');
  }

  getInterventionDrugStopTime(): string {
    const value = this.x00180027;
    if (value === undefined) {
      throw new Error('InterventionDrugStopTime is undefined');
    }
    return value;
  }

  // Intervention Drug Dose
  get InterventionDrugDose(): number | undefined {
    return this.x00180028;
  }

  get x00180028(): number | undefined {
    const value = this.dwResponse['00180028']?.Value;
    return convert(value?.[0], 0x00180028, 'number');
  }

  getInterventionDrugDose(): number {
    const value = this.x00180028;
    if (value === undefined) {
      throw new Error('InterventionDrugDose is undefined');
    }
    return value;
  }

  // Intervention Drug Code Sequence
  get InterventionDrugCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00180029;
  }

  get x00180029(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00180029']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getInterventionDrugCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00180029;
    if (value === undefined) {
      throw new Error('InterventionDrugCodeSequence is undefined');
    }
    return value;
  }

  // Additional Drug Sequence
  get AdditionalDrugSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0018002a;
  }

  get x0018002a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0018002A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAdditionalDrugSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0018002a;
    if (value === undefined) {
      throw new Error('AdditionalDrugSequence is undefined');
    }
    return value;
  }

  // Radionuclide
  get Radionuclide(): Array<string | undefined> | undefined {
    return this.x00180030;
  }

  get x00180030(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00180030']?.Value;
    return convert(value, 0x00180030, 'Array<string | undefined>');
  }

  getRadionuclide(): Array<string | undefined> {
    const value = this.x00180030;
    if (value === undefined) {
      throw new Error('Radionuclide is undefined');
    }
    return value;
  }

  // Radiopharmaceutical
  get Radiopharmaceutical(): string | undefined {
    return this.x00180031;
  }

  get x00180031(): string | undefined {
    const value = this.dwResponse['00180031']?.Value;
    return convert(value?.[0], 0x00180031, 'string');
  }

  getRadiopharmaceutical(): string {
    const value = this.x00180031;
    if (value === undefined) {
      throw new Error('Radiopharmaceutical is undefined');
    }
    return value;
  }

  // Energy Window Centerline
  get EnergyWindowCenterline(): number | undefined {
    return this.x00180032;
  }

  get x00180032(): number | undefined {
    const value = this.dwResponse['00180032']?.Value;
    return convert(value?.[0], 0x00180032, 'number');
  }

  getEnergyWindowCenterline(): number {
    const value = this.x00180032;
    if (value === undefined) {
      throw new Error('EnergyWindowCenterline is undefined');
    }
    return value;
  }

  // Energy Window Total Width
  get EnergyWindowTotalWidth(): Array<number | undefined> | undefined {
    return this.x00180033;
  }

  get x00180033(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00180033']?.Value;
    return convert(value, 0x00180033, 'Array<number | undefined>');
  }

  getEnergyWindowTotalWidth(): Array<number | undefined> {
    const value = this.x00180033;
    if (value === undefined) {
      throw new Error('EnergyWindowTotalWidth is undefined');
    }
    return value;
  }

  // Intervention Drug Name
  get InterventionDrugName(): string | undefined {
    return this.x00180034;
  }

  get x00180034(): string | undefined {
    const value = this.dwResponse['00180034']?.Value;
    return convert(value?.[0], 0x00180034, 'string');
  }

  getInterventionDrugName(): string {
    const value = this.x00180034;
    if (value === undefined) {
      throw new Error('InterventionDrugName is undefined');
    }
    return value;
  }

  // Intervention Drug Start Time
  get InterventionDrugStartTime(): string | undefined {
    return this.x00180035;
  }

  get x00180035(): string | undefined {
    const value = this.dwResponse['00180035']?.Value;
    return convert(value?.[0], 0x00180035, 'string');
  }

  getInterventionDrugStartTime(): string {
    const value = this.x00180035;
    if (value === undefined) {
      throw new Error('InterventionDrugStartTime is undefined');
    }
    return value;
  }

  // Intervention Sequence
  get InterventionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00180036;
  }

  get x00180036(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00180036']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getInterventionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00180036;
    if (value === undefined) {
      throw new Error('InterventionSequence is undefined');
    }
    return value;
  }

  // Therapy Type
  get TherapyType(): string | undefined {
    return this.x00180037;
  }

  get x00180037(): string | undefined {
    const value = this.dwResponse['00180037']?.Value;
    return convert(value?.[0], 0x00180037, 'string');
  }

  getTherapyType(): string {
    const value = this.x00180037;
    if (value === undefined) {
      throw new Error('TherapyType is undefined');
    }
    return value;
  }

  // Intervention Status
  get InterventionStatus(): string | undefined {
    return this.x00180038;
  }

  get x00180038(): string | undefined {
    const value = this.dwResponse['00180038']?.Value;
    return convert(value?.[0], 0x00180038, 'string');
  }

  getInterventionStatus(): string {
    const value = this.x00180038;
    if (value === undefined) {
      throw new Error('InterventionStatus is undefined');
    }
    return value;
  }

  // Therapy Description
  get TherapyDescription(): string | undefined {
    return this.x00180039;
  }

  get x00180039(): string | undefined {
    const value = this.dwResponse['00180039']?.Value;
    return convert(value?.[0], 0x00180039, 'string');
  }

  getTherapyDescription(): string {
    const value = this.x00180039;
    if (value === undefined) {
      throw new Error('TherapyDescription is undefined');
    }
    return value;
  }

  // Cine Rate
  get CineRate(): number | undefined {
    return this.x00180040;
  }

  get x00180040(): number | undefined {
    const value = this.dwResponse['00180040']?.Value;
    return convert(value?.[0], 0x00180040, 'number');
  }

  getCineRate(): number {
    const value = this.x00180040;
    if (value === undefined) {
      throw new Error('CineRate is undefined');
    }
    return value;
  }

  // Initial Cine Run State
  get InitialCineRunState(): string | undefined {
    return this.x00180042;
  }

  get x00180042(): string | undefined {
    const value = this.dwResponse['00180042']?.Value;
    return convert(value?.[0], 0x00180042, 'string');
  }

  getInitialCineRunState(): string {
    const value = this.x00180042;
    if (value === undefined) {
      throw new Error('InitialCineRunState is undefined');
    }
    return value;
  }

  // Slice Thickness
  get SliceThickness(): number | undefined {
    return this.x00180050;
  }

  get x00180050(): number | undefined {
    const value = this.dwResponse['00180050']?.Value;
    return convert(value?.[0], 0x00180050, 'number');
  }

  getSliceThickness(): number {
    const value = this.x00180050;
    if (value === undefined) {
      throw new Error('SliceThickness is undefined');
    }
    return value;
  }

  // KVP
  get KVP(): number | undefined {
    return this.x00180060;
  }

  get x00180060(): number | undefined {
    const value = this.dwResponse['00180060']?.Value;
    return convert(value?.[0], 0x00180060, 'number');
  }

  getKVP(): number {
    const value = this.x00180060;
    if (value === undefined) {
      throw new Error('KVP is undefined');
    }
    return value;
  }

  // Counts Accumulated
  get CountsAccumulated(): number | undefined {
    return this.x00180070;
  }

  get x00180070(): number | undefined {
    const value = this.dwResponse['00180070']?.Value;
    return convert(value?.[0], 0x00180070, 'number');
  }

  getCountsAccumulated(): number {
    const value = this.x00180070;
    if (value === undefined) {
      throw new Error('CountsAccumulated is undefined');
    }
    return value;
  }

  // Acquisition Termination Condition
  get AcquisitionTerminationCondition(): string | undefined {
    return this.x00180071;
  }

  get x00180071(): string | undefined {
    const value = this.dwResponse['00180071']?.Value;
    return convert(value?.[0], 0x00180071, 'string');
  }

  getAcquisitionTerminationCondition(): string {
    const value = this.x00180071;
    if (value === undefined) {
      throw new Error('AcquisitionTerminationCondition is undefined');
    }
    return value;
  }

  // Effective Duration
  get EffectiveDuration(): number | undefined {
    return this.x00180072;
  }

  get x00180072(): number | undefined {
    const value = this.dwResponse['00180072']?.Value;
    return convert(value?.[0], 0x00180072, 'number');
  }

  getEffectiveDuration(): number {
    const value = this.x00180072;
    if (value === undefined) {
      throw new Error('EffectiveDuration is undefined');
    }
    return value;
  }

  // Acquisition Start Condition
  get AcquisitionStartCondition(): string | undefined {
    return this.x00180073;
  }

  get x00180073(): string | undefined {
    const value = this.dwResponse['00180073']?.Value;
    return convert(value?.[0], 0x00180073, 'string');
  }

  getAcquisitionStartCondition(): string {
    const value = this.x00180073;
    if (value === undefined) {
      throw new Error('AcquisitionStartCondition is undefined');
    }
    return value;
  }

  // Acquisition Start Condition Data
  get AcquisitionStartConditionData(): number | undefined {
    return this.x00180074;
  }

  get x00180074(): number | undefined {
    const value = this.dwResponse['00180074']?.Value;
    return convert(value?.[0], 0x00180074, 'number');
  }

  getAcquisitionStartConditionData(): number {
    const value = this.x00180074;
    if (value === undefined) {
      throw new Error('AcquisitionStartConditionData is undefined');
    }
    return value;
  }

  // Acquisition Termination Condition Data
  get AcquisitionTerminationConditionData(): number | undefined {
    return this.x00180075;
  }

  get x00180075(): number | undefined {
    const value = this.dwResponse['00180075']?.Value;
    return convert(value?.[0], 0x00180075, 'number');
  }

  getAcquisitionTerminationConditionData(): number {
    const value = this.x00180075;
    if (value === undefined) {
      throw new Error('AcquisitionTerminationConditionData is undefined');
    }
    return value;
  }

  // Repetition Time
  get RepetitionTime(): number | undefined {
    return this.x00180080;
  }

  get x00180080(): number | undefined {
    const value = this.dwResponse['00180080']?.Value;
    return convert(value?.[0], 0x00180080, 'number');
  }

  getRepetitionTime(): number {
    const value = this.x00180080;
    if (value === undefined) {
      throw new Error('RepetitionTime is undefined');
    }
    return value;
  }

  // Echo Time
  get EchoTime(): number | undefined {
    return this.x00180081;
  }

  get x00180081(): number | undefined {
    const value = this.dwResponse['00180081']?.Value;
    return convert(value?.[0], 0x00180081, 'number');
  }

  getEchoTime(): number {
    const value = this.x00180081;
    if (value === undefined) {
      throw new Error('EchoTime is undefined');
    }
    return value;
  }

  // Inversion Time
  get InversionTime(): number | undefined {
    return this.x00180082;
  }

  get x00180082(): number | undefined {
    const value = this.dwResponse['00180082']?.Value;
    return convert(value?.[0], 0x00180082, 'number');
  }

  getInversionTime(): number {
    const value = this.x00180082;
    if (value === undefined) {
      throw new Error('InversionTime is undefined');
    }
    return value;
  }

  // Number of Averages
  get NumberOfAverages(): number | undefined {
    return this.x00180083;
  }

  get x00180083(): number | undefined {
    const value = this.dwResponse['00180083']?.Value;
    return convert(value?.[0], 0x00180083, 'number');
  }

  getNumberOfAverages(): number {
    const value = this.x00180083;
    if (value === undefined) {
      throw new Error('NumberOfAverages is undefined');
    }
    return value;
  }

  // Imaging Frequency
  get ImagingFrequency(): number | undefined {
    return this.x00180084;
  }

  get x00180084(): number | undefined {
    const value = this.dwResponse['00180084']?.Value;
    return convert(value?.[0], 0x00180084, 'number');
  }

  getImagingFrequency(): number {
    const value = this.x00180084;
    if (value === undefined) {
      throw new Error('ImagingFrequency is undefined');
    }
    return value;
  }

  // Imaged Nucleus
  get ImagedNucleus(): string | undefined {
    return this.x00180085;
  }

  get x00180085(): string | undefined {
    const value = this.dwResponse['00180085']?.Value;
    return convert(value?.[0], 0x00180085, 'string');
  }

  getImagedNucleus(): string {
    const value = this.x00180085;
    if (value === undefined) {
      throw new Error('ImagedNucleus is undefined');
    }
    return value;
  }

  // Echo Number(s)
  get EchoNumbers(): Array<number | undefined> | undefined {
    return this.x00180086;
  }

  get x00180086(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00180086']?.Value;
    return convert(value, 0x00180086, 'Array<number | undefined>');
  }

  getEchoNumbers(): Array<number | undefined> {
    const value = this.x00180086;
    if (value === undefined) {
      throw new Error('EchoNumbers is undefined');
    }
    return value;
  }

  // Magnetic Field Strength
  get MagneticFieldStrength(): number | undefined {
    return this.x00180087;
  }

  get x00180087(): number | undefined {
    const value = this.dwResponse['00180087']?.Value;
    return convert(value?.[0], 0x00180087, 'number');
  }

  getMagneticFieldStrength(): number {
    const value = this.x00180087;
    if (value === undefined) {
      throw new Error('MagneticFieldStrength is undefined');
    }
    return value;
  }

  // Spacing Between Slices
  get SpacingBetweenSlices(): number | undefined {
    return this.x00180088;
  }

  get x00180088(): number | undefined {
    const value = this.dwResponse['00180088']?.Value;
    return convert(value?.[0], 0x00180088, 'number');
  }

  getSpacingBetweenSlices(): number {
    const value = this.x00180088;
    if (value === undefined) {
      throw new Error('SpacingBetweenSlices is undefined');
    }
    return value;
  }

  // Number of Phase Encoding Steps
  get NumberOfPhaseEncodingSteps(): number | undefined {
    return this.x00180089;
  }

  get x00180089(): number | undefined {
    const value = this.dwResponse['00180089']?.Value;
    return convert(value?.[0], 0x00180089, 'number');
  }

  getNumberOfPhaseEncodingSteps(): number {
    const value = this.x00180089;
    if (value === undefined) {
      throw new Error('NumberOfPhaseEncodingSteps is undefined');
    }
    return value;
  }

  // Data Collection Diameter
  get DataCollectionDiameter(): number | undefined {
    return this.x00180090;
  }

  get x00180090(): number | undefined {
    const value = this.dwResponse['00180090']?.Value;
    return convert(value?.[0], 0x00180090, 'number');
  }

  getDataCollectionDiameter(): number {
    const value = this.x00180090;
    if (value === undefined) {
      throw new Error('DataCollectionDiameter is undefined');
    }
    return value;
  }

  // Echo Train Length
  get EchoTrainLength(): number | undefined {
    return this.x00180091;
  }

  get x00180091(): number | undefined {
    const value = this.dwResponse['00180091']?.Value;
    return convert(value?.[0], 0x00180091, 'number');
  }

  getEchoTrainLength(): number {
    const value = this.x00180091;
    if (value === undefined) {
      throw new Error('EchoTrainLength is undefined');
    }
    return value;
  }

  // Percent Sampling
  get PercentSampling(): number | undefined {
    return this.x00180093;
  }

  get x00180093(): number | undefined {
    const value = this.dwResponse['00180093']?.Value;
    return convert(value?.[0], 0x00180093, 'number');
  }

  getPercentSampling(): number {
    const value = this.x00180093;
    if (value === undefined) {
      throw new Error('PercentSampling is undefined');
    }
    return value;
  }

  // Percent Phase Field of View
  get PercentPhaseFieldOfView(): number | undefined {
    return this.x00180094;
  }

  get x00180094(): number | undefined {
    const value = this.dwResponse['00180094']?.Value;
    return convert(value?.[0], 0x00180094, 'number');
  }

  getPercentPhaseFieldOfView(): number {
    const value = this.x00180094;
    if (value === undefined) {
      throw new Error('PercentPhaseFieldOfView is undefined');
    }
    return value;
  }

  // Pixel Bandwidth
  get PixelBandwidth(): number | undefined {
    return this.x00180095;
  }

  get x00180095(): number | undefined {
    const value = this.dwResponse['00180095']?.Value;
    return convert(value?.[0], 0x00180095, 'number');
  }

  getPixelBandwidth(): number {
    const value = this.x00180095;
    if (value === undefined) {
      throw new Error('PixelBandwidth is undefined');
    }
    return value;
  }

  // Device Serial Number
  get DeviceSerialNumber(): string | undefined {
    return this.x00181000;
  }

  get x00181000(): string | undefined {
    const value = this.dwResponse['00181000']?.Value;
    return convert(value?.[0], 0x00181000, 'string');
  }

  getDeviceSerialNumber(): string {
    const value = this.x00181000;
    if (value === undefined) {
      throw new Error('DeviceSerialNumber is undefined');
    }
    return value;
  }

  // Device UID
  get DeviceUID(): string | undefined {
    return this.x00181002;
  }

  get x00181002(): string | undefined {
    const value = this.dwResponse['00181002']?.Value;
    return convert(value?.[0], 0x00181002, 'string');
  }

  getDeviceUID(): string {
    const value = this.x00181002;
    if (value === undefined) {
      throw new Error('DeviceUID is undefined');
    }
    return value;
  }

  // Device ID
  get DeviceID(): string | undefined {
    return this.x00181003;
  }

  get x00181003(): string | undefined {
    const value = this.dwResponse['00181003']?.Value;
    return convert(value?.[0], 0x00181003, 'string');
  }

  getDeviceID(): string {
    const value = this.x00181003;
    if (value === undefined) {
      throw new Error('DeviceID is undefined');
    }
    return value;
  }

  // Plate ID
  get PlateID(): string | undefined {
    return this.x00181004;
  }

  get x00181004(): string | undefined {
    const value = this.dwResponse['00181004']?.Value;
    return convert(value?.[0], 0x00181004, 'string');
  }

  getPlateID(): string {
    const value = this.x00181004;
    if (value === undefined) {
      throw new Error('PlateID is undefined');
    }
    return value;
  }

  // Generator ID
  get GeneratorID(): string | undefined {
    return this.x00181005;
  }

  get x00181005(): string | undefined {
    const value = this.dwResponse['00181005']?.Value;
    return convert(value?.[0], 0x00181005, 'string');
  }

  getGeneratorID(): string {
    const value = this.x00181005;
    if (value === undefined) {
      throw new Error('GeneratorID is undefined');
    }
    return value;
  }

  // Grid ID
  get GridID(): string | undefined {
    return this.x00181006;
  }

  get x00181006(): string | undefined {
    const value = this.dwResponse['00181006']?.Value;
    return convert(value?.[0], 0x00181006, 'string');
  }

  getGridID(): string {
    const value = this.x00181006;
    if (value === undefined) {
      throw new Error('GridID is undefined');
    }
    return value;
  }

  // Cassette ID
  get CassetteID(): string | undefined {
    return this.x00181007;
  }

  get x00181007(): string | undefined {
    const value = this.dwResponse['00181007']?.Value;
    return convert(value?.[0], 0x00181007, 'string');
  }

  getCassetteID(): string {
    const value = this.x00181007;
    if (value === undefined) {
      throw new Error('CassetteID is undefined');
    }
    return value;
  }

  // Gantry ID
  get GantryID(): string | undefined {
    return this.x00181008;
  }

  get x00181008(): string | undefined {
    const value = this.dwResponse['00181008']?.Value;
    return convert(value?.[0], 0x00181008, 'string');
  }

  getGantryID(): string {
    const value = this.x00181008;
    if (value === undefined) {
      throw new Error('GantryID is undefined');
    }
    return value;
  }

  // Secondary Capture Device ID
  get SecondaryCaptureDeviceID(): string | undefined {
    return this.x00181010;
  }

  get x00181010(): string | undefined {
    const value = this.dwResponse['00181010']?.Value;
    return convert(value?.[0], 0x00181010, 'string');
  }

  getSecondaryCaptureDeviceID(): string {
    const value = this.x00181010;
    if (value === undefined) {
      throw new Error('SecondaryCaptureDeviceID is undefined');
    }
    return value;
  }

  // Hardcopy Creation Device ID
  get HardcopyCreationDeviceID(): string | undefined {
    return this.x00181011;
  }

  get x00181011(): string | undefined {
    const value = this.dwResponse['00181011']?.Value;
    return convert(value?.[0], 0x00181011, 'string');
  }

  getHardcopyCreationDeviceID(): string {
    const value = this.x00181011;
    if (value === undefined) {
      throw new Error('HardcopyCreationDeviceID is undefined');
    }
    return value;
  }

  // Date of Secondary Capture
  get DateOfSecondaryCapture(): Date | undefined {
    return this.x00181012;
  }

  get x00181012(): Date | undefined {
    const value = this.dwResponse['00181012']?.Value;
    return convert(value?.[0], 0x00181012, 'Date');
  }

  getDateOfSecondaryCapture(): Date {
    const value = this.x00181012;
    if (value === undefined) {
      throw new Error('DateOfSecondaryCapture is undefined');
    }
    return value;
  }

  // Time of Secondary Capture
  get TimeOfSecondaryCapture(): string | undefined {
    return this.x00181014;
  }

  get x00181014(): string | undefined {
    const value = this.dwResponse['00181014']?.Value;
    return convert(value?.[0], 0x00181014, 'string');
  }

  getTimeOfSecondaryCapture(): string {
    const value = this.x00181014;
    if (value === undefined) {
      throw new Error('TimeOfSecondaryCapture is undefined');
    }
    return value;
  }

  // Secondary Capture Device Manufacturer
  get SecondaryCaptureDeviceManufacturer(): string | undefined {
    return this.x00181016;
  }

  get x00181016(): string | undefined {
    const value = this.dwResponse['00181016']?.Value;
    return convert(value?.[0], 0x00181016, 'string');
  }

  getSecondaryCaptureDeviceManufacturer(): string {
    const value = this.x00181016;
    if (value === undefined) {
      throw new Error('SecondaryCaptureDeviceManufacturer is undefined');
    }
    return value;
  }

  // Hardcopy Device Manufacturer
  get HardcopyDeviceManufacturer(): string | undefined {
    return this.x00181017;
  }

  get x00181017(): string | undefined {
    const value = this.dwResponse['00181017']?.Value;
    return convert(value?.[0], 0x00181017, 'string');
  }

  getHardcopyDeviceManufacturer(): string {
    const value = this.x00181017;
    if (value === undefined) {
      throw new Error('HardcopyDeviceManufacturer is undefined');
    }
    return value;
  }

  // Secondary Capture Device Manufacturer's Model Name
  get SecondaryCaptureDeviceManufacturerModelName(): string | undefined {
    return this.x00181018;
  }

  get x00181018(): string | undefined {
    const value = this.dwResponse['00181018']?.Value;
    return convert(value?.[0], 0x00181018, 'string');
  }

  getSecondaryCaptureDeviceManufacturerModelName(): string {
    const value = this.x00181018;
    if (value === undefined) {
      throw new Error('SecondaryCaptureDeviceManufacturerModelName is undefined');
    }
    return value;
  }

  // Secondary Capture Device Software Versions
  get SecondaryCaptureDeviceSoftwareVersions(): Array<string | undefined> | undefined {
    return this.x00181019;
  }

  get x00181019(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00181019']?.Value;
    return convert(value, 0x00181019, 'Array<string | undefined>');
  }

  getSecondaryCaptureDeviceSoftwareVersions(): Array<string | undefined> {
    const value = this.x00181019;
    if (value === undefined) {
      throw new Error('SecondaryCaptureDeviceSoftwareVersions is undefined');
    }
    return value;
  }

  // Hardcopy Device Software Version
  get HardcopyDeviceSoftwareVersion(): Array<string | undefined> | undefined {
    return this.x0018101a;
  }

  get x0018101a(): Array<string | undefined> | undefined {
    const value = this.dwResponse['0018101A']?.Value;
    return convert(value, 0x0018101a, 'Array<string | undefined>');
  }

  getHardcopyDeviceSoftwareVersion(): Array<string | undefined> {
    const value = this.x0018101a;
    if (value === undefined) {
      throw new Error('HardcopyDeviceSoftwareVersion is undefined');
    }
    return value;
  }

  // Hardcopy Device Manufacturer's Model Name
  get HardcopyDeviceManufacturerModelName(): string | undefined {
    return this.x0018101b;
  }

  get x0018101b(): string | undefined {
    const value = this.dwResponse['0018101B']?.Value;
    return convert(value?.[0], 0x0018101b, 'string');
  }

  getHardcopyDeviceManufacturerModelName(): string {
    const value = this.x0018101b;
    if (value === undefined) {
      throw new Error('HardcopyDeviceManufacturerModelName is undefined');
    }
    return value;
  }

  // Software Version(s)
  get SoftwareVersions(): Array<string | undefined> | undefined {
    return this.x00181020;
  }

  get x00181020(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00181020']?.Value;
    return convert(value, 0x00181020, 'Array<string | undefined>');
  }

  getSoftwareVersions(): Array<string | undefined> {
    const value = this.x00181020;
    if (value === undefined) {
      throw new Error('SoftwareVersions is undefined');
    }
    return value;
  }

  // Video Image Format Acquired
  get VideoImageFormatAcquired(): string | undefined {
    return this.x00181022;
  }

  get x00181022(): string | undefined {
    const value = this.dwResponse['00181022']?.Value;
    return convert(value?.[0], 0x00181022, 'string');
  }

  getVideoImageFormatAcquired(): string {
    const value = this.x00181022;
    if (value === undefined) {
      throw new Error('VideoImageFormatAcquired is undefined');
    }
    return value;
  }

  // Digital Image Format Acquired
  get DigitalImageFormatAcquired(): string | undefined {
    return this.x00181023;
  }

  get x00181023(): string | undefined {
    const value = this.dwResponse['00181023']?.Value;
    return convert(value?.[0], 0x00181023, 'string');
  }

  getDigitalImageFormatAcquired(): string {
    const value = this.x00181023;
    if (value === undefined) {
      throw new Error('DigitalImageFormatAcquired is undefined');
    }
    return value;
  }

  // Protocol Name
  get ProtocolName(): string | undefined {
    return this.x00181030;
  }

  get x00181030(): string | undefined {
    const value = this.dwResponse['00181030']?.Value;
    return convert(value?.[0], 0x00181030, 'string');
  }

  getProtocolName(): string {
    const value = this.x00181030;
    if (value === undefined) {
      throw new Error('ProtocolName is undefined');
    }
    return value;
  }

  // Contrast/Bolus Route
  get ContrastBolusRoute(): string | undefined {
    return this.x00181040;
  }

  get x00181040(): string | undefined {
    const value = this.dwResponse['00181040']?.Value;
    return convert(value?.[0], 0x00181040, 'string');
  }

  getContrastBolusRoute(): string {
    const value = this.x00181040;
    if (value === undefined) {
      throw new Error('ContrastBolusRoute is undefined');
    }
    return value;
  }

  // Contrast/Bolus Volume
  get ContrastBolusVolume(): number | undefined {
    return this.x00181041;
  }

  get x00181041(): number | undefined {
    const value = this.dwResponse['00181041']?.Value;
    return convert(value?.[0], 0x00181041, 'number');
  }

  getContrastBolusVolume(): number {
    const value = this.x00181041;
    if (value === undefined) {
      throw new Error('ContrastBolusVolume is undefined');
    }
    return value;
  }

  // Contrast/Bolus Start Time
  get ContrastBolusStartTime(): string | undefined {
    return this.x00181042;
  }

  get x00181042(): string | undefined {
    const value = this.dwResponse['00181042']?.Value;
    return convert(value?.[0], 0x00181042, 'string');
  }

  getContrastBolusStartTime(): string {
    const value = this.x00181042;
    if (value === undefined) {
      throw new Error('ContrastBolusStartTime is undefined');
    }
    return value;
  }

  // Contrast/Bolus Stop Time
  get ContrastBolusStopTime(): string | undefined {
    return this.x00181043;
  }

  get x00181043(): string | undefined {
    const value = this.dwResponse['00181043']?.Value;
    return convert(value?.[0], 0x00181043, 'string');
  }

  getContrastBolusStopTime(): string {
    const value = this.x00181043;
    if (value === undefined) {
      throw new Error('ContrastBolusStopTime is undefined');
    }
    return value;
  }

  // Contrast/Bolus Total Dose
  get ContrastBolusTotalDose(): number | undefined {
    return this.x00181044;
  }

  get x00181044(): number | undefined {
    const value = this.dwResponse['00181044']?.Value;
    return convert(value?.[0], 0x00181044, 'number');
  }

  getContrastBolusTotalDose(): number {
    const value = this.x00181044;
    if (value === undefined) {
      throw new Error('ContrastBolusTotalDose is undefined');
    }
    return value;
  }

  // Syringe Counts
  get SyringeCounts(): number | undefined {
    return this.x00181045;
  }

  get x00181045(): number | undefined {
    const value = this.dwResponse['00181045']?.Value;
    return convert(value?.[0], 0x00181045, 'number');
  }

  getSyringeCounts(): number {
    const value = this.x00181045;
    if (value === undefined) {
      throw new Error('SyringeCounts is undefined');
    }
    return value;
  }

  // Contrast Flow Rate
  get ContrastFlowRate(): Array<number | undefined> | undefined {
    return this.x00181046;
  }

  get x00181046(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181046']?.Value;
    return convert(value, 0x00181046, 'Array<number | undefined>');
  }

  getContrastFlowRate(): Array<number | undefined> {
    const value = this.x00181046;
    if (value === undefined) {
      throw new Error('ContrastFlowRate is undefined');
    }
    return value;
  }

  // Contrast Flow Duration
  get ContrastFlowDuration(): Array<number | undefined> | undefined {
    return this.x00181047;
  }

  get x00181047(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181047']?.Value;
    return convert(value, 0x00181047, 'Array<number | undefined>');
  }

  getContrastFlowDuration(): Array<number | undefined> {
    const value = this.x00181047;
    if (value === undefined) {
      throw new Error('ContrastFlowDuration is undefined');
    }
    return value;
  }

  // Contrast/Bolus Ingredient
  get ContrastBolusIngredient(): string | undefined {
    return this.x00181048;
  }

  get x00181048(): string | undefined {
    const value = this.dwResponse['00181048']?.Value;
    return convert(value?.[0], 0x00181048, 'string');
  }

  getContrastBolusIngredient(): string {
    const value = this.x00181048;
    if (value === undefined) {
      throw new Error('ContrastBolusIngredient is undefined');
    }
    return value;
  }

  // Contrast/Bolus Ingredient Concentration
  get ContrastBolusIngredientConcentration(): number | undefined {
    return this.x00181049;
  }

  get x00181049(): number | undefined {
    const value = this.dwResponse['00181049']?.Value;
    return convert(value?.[0], 0x00181049, 'number');
  }

  getContrastBolusIngredientConcentration(): number {
    const value = this.x00181049;
    if (value === undefined) {
      throw new Error('ContrastBolusIngredientConcentration is undefined');
    }
    return value;
  }

  // Spatial Resolution
  get SpatialResolution(): number | undefined {
    return this.x00181050;
  }

  get x00181050(): number | undefined {
    const value = this.dwResponse['00181050']?.Value;
    return convert(value?.[0], 0x00181050, 'number');
  }

  getSpatialResolution(): number {
    const value = this.x00181050;
    if (value === undefined) {
      throw new Error('SpatialResolution is undefined');
    }
    return value;
  }

  // Trigger Time
  get TriggerTime(): number | undefined {
    return this.x00181060;
  }

  get x00181060(): number | undefined {
    const value = this.dwResponse['00181060']?.Value;
    return convert(value?.[0], 0x00181060, 'number');
  }

  getTriggerTime(): number {
    const value = this.x00181060;
    if (value === undefined) {
      throw new Error('TriggerTime is undefined');
    }
    return value;
  }

  // Trigger Source or Type
  get TriggerSourceOrType(): string | undefined {
    return this.x00181061;
  }

  get x00181061(): string | undefined {
    const value = this.dwResponse['00181061']?.Value;
    return convert(value?.[0], 0x00181061, 'string');
  }

  getTriggerSourceOrType(): string {
    const value = this.x00181061;
    if (value === undefined) {
      throw new Error('TriggerSourceOrType is undefined');
    }
    return value;
  }

  // Nominal Interval
  get NominalInterval(): number | undefined {
    return this.x00181062;
  }

  get x00181062(): number | undefined {
    const value = this.dwResponse['00181062']?.Value;
    return convert(value?.[0], 0x00181062, 'number');
  }

  getNominalInterval(): number {
    const value = this.x00181062;
    if (value === undefined) {
      throw new Error('NominalInterval is undefined');
    }
    return value;
  }

  // Frame Time
  get FrameTime(): number | undefined {
    return this.x00181063;
  }

  get x00181063(): number | undefined {
    const value = this.dwResponse['00181063']?.Value;
    return convert(value?.[0], 0x00181063, 'number');
  }

  getFrameTime(): number {
    const value = this.x00181063;
    if (value === undefined) {
      throw new Error('FrameTime is undefined');
    }
    return value;
  }

  // Cardiac Framing Type
  get CardiacFramingType(): string | undefined {
    return this.x00181064;
  }

  get x00181064(): string | undefined {
    const value = this.dwResponse['00181064']?.Value;
    return convert(value?.[0], 0x00181064, 'string');
  }

  getCardiacFramingType(): string {
    const value = this.x00181064;
    if (value === undefined) {
      throw new Error('CardiacFramingType is undefined');
    }
    return value;
  }

  // Frame Time Vector
  get FrameTimeVector(): Array<number | undefined> | undefined {
    return this.x00181065;
  }

  get x00181065(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181065']?.Value;
    return convert(value, 0x00181065, 'Array<number | undefined>');
  }

  getFrameTimeVector(): Array<number | undefined> {
    const value = this.x00181065;
    if (value === undefined) {
      throw new Error('FrameTimeVector is undefined');
    }
    return value;
  }

  // Frame Delay
  get FrameDelay(): number | undefined {
    return this.x00181066;
  }

  get x00181066(): number | undefined {
    const value = this.dwResponse['00181066']?.Value;
    return convert(value?.[0], 0x00181066, 'number');
  }

  getFrameDelay(): number {
    const value = this.x00181066;
    if (value === undefined) {
      throw new Error('FrameDelay is undefined');
    }
    return value;
  }

  // Image Trigger Delay
  get ImageTriggerDelay(): number | undefined {
    return this.x00181067;
  }

  get x00181067(): number | undefined {
    const value = this.dwResponse['00181067']?.Value;
    return convert(value?.[0], 0x00181067, 'number');
  }

  getImageTriggerDelay(): number {
    const value = this.x00181067;
    if (value === undefined) {
      throw new Error('ImageTriggerDelay is undefined');
    }
    return value;
  }

  // Multiplex Group Time Offset
  get MultiplexGroupTimeOffset(): number | undefined {
    return this.x00181068;
  }

  get x00181068(): number | undefined {
    const value = this.dwResponse['00181068']?.Value;
    return convert(value?.[0], 0x00181068, 'number');
  }

  getMultiplexGroupTimeOffset(): number {
    const value = this.x00181068;
    if (value === undefined) {
      throw new Error('MultiplexGroupTimeOffset is undefined');
    }
    return value;
  }

  // Trigger Time Offset
  get TriggerTimeOffset(): number | undefined {
    return this.x00181069;
  }

  get x00181069(): number | undefined {
    const value = this.dwResponse['00181069']?.Value;
    return convert(value?.[0], 0x00181069, 'number');
  }

  getTriggerTimeOffset(): number {
    const value = this.x00181069;
    if (value === undefined) {
      throw new Error('TriggerTimeOffset is undefined');
    }
    return value;
  }

  // Synchronization Trigger
  get SynchronizationTrigger(): string | undefined {
    return this.x0018106a;
  }

  get x0018106a(): string | undefined {
    const value = this.dwResponse['0018106A']?.Value;
    return convert(value?.[0], 0x0018106a, 'string');
  }

  getSynchronizationTrigger(): string {
    const value = this.x0018106a;
    if (value === undefined) {
      throw new Error('SynchronizationTrigger is undefined');
    }
    return value;
  }

  // Synchronization Channel
  get SynchronizationChannel(): Array<number | undefined> | undefined {
    return this.x0018106c;
  }

  get x0018106c(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0018106C']?.Value;
    return convert(value, 0x0018106c, 'Array<number | undefined>');
  }

  getSynchronizationChannel(): Array<number | undefined> {
    const value = this.x0018106c;
    if (value === undefined) {
      throw new Error('SynchronizationChannel is undefined');
    }
    return value;
  }

  // Trigger Sample Position
  get TriggerSamplePosition(): number | undefined {
    return this.x0018106e;
  }

  get x0018106e(): number | undefined {
    const value = this.dwResponse['0018106E']?.Value;
    return convert(value?.[0], 0x0018106e, 'number');
  }

  getTriggerSamplePosition(): number {
    const value = this.x0018106e;
    if (value === undefined) {
      throw new Error('TriggerSamplePosition is undefined');
    }
    return value;
  }

  // Radiopharmaceutical Route
  get RadiopharmaceuticalRoute(): string | undefined {
    return this.x00181070;
  }

  get x00181070(): string | undefined {
    const value = this.dwResponse['00181070']?.Value;
    return convert(value?.[0], 0x00181070, 'string');
  }

  getRadiopharmaceuticalRoute(): string {
    const value = this.x00181070;
    if (value === undefined) {
      throw new Error('RadiopharmaceuticalRoute is undefined');
    }
    return value;
  }

  // Radiopharmaceutical Volume
  get RadiopharmaceuticalVolume(): number | undefined {
    return this.x00181071;
  }

  get x00181071(): number | undefined {
    const value = this.dwResponse['00181071']?.Value;
    return convert(value?.[0], 0x00181071, 'number');
  }

  getRadiopharmaceuticalVolume(): number {
    const value = this.x00181071;
    if (value === undefined) {
      throw new Error('RadiopharmaceuticalVolume is undefined');
    }
    return value;
  }

  // Radiopharmaceutical Start Time
  get RadiopharmaceuticalStartTime(): string | undefined {
    return this.x00181072;
  }

  get x00181072(): string | undefined {
    const value = this.dwResponse['00181072']?.Value;
    return convert(value?.[0], 0x00181072, 'string');
  }

  getRadiopharmaceuticalStartTime(): string {
    const value = this.x00181072;
    if (value === undefined) {
      throw new Error('RadiopharmaceuticalStartTime is undefined');
    }
    return value;
  }

  // Radiopharmaceutical Stop Time
  get RadiopharmaceuticalStopTime(): string | undefined {
    return this.x00181073;
  }

  get x00181073(): string | undefined {
    const value = this.dwResponse['00181073']?.Value;
    return convert(value?.[0], 0x00181073, 'string');
  }

  getRadiopharmaceuticalStopTime(): string {
    const value = this.x00181073;
    if (value === undefined) {
      throw new Error('RadiopharmaceuticalStopTime is undefined');
    }
    return value;
  }

  // Radionuclide Total Dose
  get RadionuclideTotalDose(): number | undefined {
    return this.x00181074;
  }

  get x00181074(): number | undefined {
    const value = this.dwResponse['00181074']?.Value;
    return convert(value?.[0], 0x00181074, 'number');
  }

  getRadionuclideTotalDose(): number {
    const value = this.x00181074;
    if (value === undefined) {
      throw new Error('RadionuclideTotalDose is undefined');
    }
    return value;
  }

  // Radionuclide Half Life
  get RadionuclideHalfLife(): number | undefined {
    return this.x00181075;
  }

  get x00181075(): number | undefined {
    const value = this.dwResponse['00181075']?.Value;
    return convert(value?.[0], 0x00181075, 'number');
  }

  getRadionuclideHalfLife(): number {
    const value = this.x00181075;
    if (value === undefined) {
      throw new Error('RadionuclideHalfLife is undefined');
    }
    return value;
  }

  // Radionuclide Positron Fraction
  get RadionuclidePositronFraction(): number | undefined {
    return this.x00181076;
  }

  get x00181076(): number | undefined {
    const value = this.dwResponse['00181076']?.Value;
    return convert(value?.[0], 0x00181076, 'number');
  }

  getRadionuclidePositronFraction(): number {
    const value = this.x00181076;
    if (value === undefined) {
      throw new Error('RadionuclidePositronFraction is undefined');
    }
    return value;
  }

  // Radiopharmaceutical Specific Activity
  get RadiopharmaceuticalSpecificActivity(): number | undefined {
    return this.x00181077;
  }

  get x00181077(): number | undefined {
    const value = this.dwResponse['00181077']?.Value;
    return convert(value?.[0], 0x00181077, 'number');
  }

  getRadiopharmaceuticalSpecificActivity(): number {
    const value = this.x00181077;
    if (value === undefined) {
      throw new Error('RadiopharmaceuticalSpecificActivity is undefined');
    }
    return value;
  }

  // Radiopharmaceutical Start DateTime
  get RadiopharmaceuticalStartDateTime(): string | undefined {
    return this.x00181078;
  }

  get x00181078(): string | undefined {
    const value = this.dwResponse['00181078']?.Value;
    return convert(value?.[0], 0x00181078, 'string');
  }

  getRadiopharmaceuticalStartDateTime(): string {
    const value = this.x00181078;
    if (value === undefined) {
      throw new Error('RadiopharmaceuticalStartDateTime is undefined');
    }
    return value;
  }

  // Radiopharmaceutical Stop DateTime
  get RadiopharmaceuticalStopDateTime(): string | undefined {
    return this.x00181079;
  }

  get x00181079(): string | undefined {
    const value = this.dwResponse['00181079']?.Value;
    return convert(value?.[0], 0x00181079, 'string');
  }

  getRadiopharmaceuticalStopDateTime(): string {
    const value = this.x00181079;
    if (value === undefined) {
      throw new Error('RadiopharmaceuticalStopDateTime is undefined');
    }
    return value;
  }

  // Beat Rejection Flag
  get BeatRejectionFlag(): string | undefined {
    return this.x00181080;
  }

  get x00181080(): string | undefined {
    const value = this.dwResponse['00181080']?.Value;
    return convert(value?.[0], 0x00181080, 'string');
  }

  getBeatRejectionFlag(): string {
    const value = this.x00181080;
    if (value === undefined) {
      throw new Error('BeatRejectionFlag is undefined');
    }
    return value;
  }

  // Low R-R Value
  get LowRRValue(): number | undefined {
    return this.x00181081;
  }

  get x00181081(): number | undefined {
    const value = this.dwResponse['00181081']?.Value;
    return convert(value?.[0], 0x00181081, 'number');
  }

  getLowRRValue(): number {
    const value = this.x00181081;
    if (value === undefined) {
      throw new Error('LowRRValue is undefined');
    }
    return value;
  }

  // High R-R Value
  get HighRRValue(): number | undefined {
    return this.x00181082;
  }

  get x00181082(): number | undefined {
    const value = this.dwResponse['00181082']?.Value;
    return convert(value?.[0], 0x00181082, 'number');
  }

  getHighRRValue(): number {
    const value = this.x00181082;
    if (value === undefined) {
      throw new Error('HighRRValue is undefined');
    }
    return value;
  }

  // Intervals Acquired
  get IntervalsAcquired(): number | undefined {
    return this.x00181083;
  }

  get x00181083(): number | undefined {
    const value = this.dwResponse['00181083']?.Value;
    return convert(value?.[0], 0x00181083, 'number');
  }

  getIntervalsAcquired(): number {
    const value = this.x00181083;
    if (value === undefined) {
      throw new Error('IntervalsAcquired is undefined');
    }
    return value;
  }

  // Intervals Rejected
  get IntervalsRejected(): number | undefined {
    return this.x00181084;
  }

  get x00181084(): number | undefined {
    const value = this.dwResponse['00181084']?.Value;
    return convert(value?.[0], 0x00181084, 'number');
  }

  getIntervalsRejected(): number {
    const value = this.x00181084;
    if (value === undefined) {
      throw new Error('IntervalsRejected is undefined');
    }
    return value;
  }

  // PVC Rejection
  get PVCRejection(): string | undefined {
    return this.x00181085;
  }

  get x00181085(): string | undefined {
    const value = this.dwResponse['00181085']?.Value;
    return convert(value?.[0], 0x00181085, 'string');
  }

  getPVCRejection(): string {
    const value = this.x00181085;
    if (value === undefined) {
      throw new Error('PVCRejection is undefined');
    }
    return value;
  }

  // Skip Beats
  get SkipBeats(): number | undefined {
    return this.x00181086;
  }

  get x00181086(): number | undefined {
    const value = this.dwResponse['00181086']?.Value;
    return convert(value?.[0], 0x00181086, 'number');
  }

  getSkipBeats(): number {
    const value = this.x00181086;
    if (value === undefined) {
      throw new Error('SkipBeats is undefined');
    }
    return value;
  }

  // Heart Rate
  get HeartRate(): number | undefined {
    return this.x00181088;
  }

  get x00181088(): number | undefined {
    const value = this.dwResponse['00181088']?.Value;
    return convert(value?.[0], 0x00181088, 'number');
  }

  getHeartRate(): number {
    const value = this.x00181088;
    if (value === undefined) {
      throw new Error('HeartRate is undefined');
    }
    return value;
  }

  // Cardiac Number of Images
  get CardiacNumberOfImages(): number | undefined {
    return this.x00181090;
  }

  get x00181090(): number | undefined {
    const value = this.dwResponse['00181090']?.Value;
    return convert(value?.[0], 0x00181090, 'number');
  }

  getCardiacNumberOfImages(): number {
    const value = this.x00181090;
    if (value === undefined) {
      throw new Error('CardiacNumberOfImages is undefined');
    }
    return value;
  }

  // Trigger Window
  get TriggerWindow(): number | undefined {
    return this.x00181094;
  }

  get x00181094(): number | undefined {
    const value = this.dwResponse['00181094']?.Value;
    return convert(value?.[0], 0x00181094, 'number');
  }

  getTriggerWindow(): number {
    const value = this.x00181094;
    if (value === undefined) {
      throw new Error('TriggerWindow is undefined');
    }
    return value;
  }

  // Reconstruction Diameter
  get ReconstructionDiameter(): number | undefined {
    return this.x00181100;
  }

  get x00181100(): number | undefined {
    const value = this.dwResponse['00181100']?.Value;
    return convert(value?.[0], 0x00181100, 'number');
  }

  getReconstructionDiameter(): number {
    const value = this.x00181100;
    if (value === undefined) {
      throw new Error('ReconstructionDiameter is undefined');
    }
    return value;
  }

  // Distance Source to Detector
  get DistanceSourceToDetector(): number | undefined {
    return this.x00181110;
  }

  get x00181110(): number | undefined {
    const value = this.dwResponse['00181110']?.Value;
    return convert(value?.[0], 0x00181110, 'number');
  }

  getDistanceSourceToDetector(): number {
    const value = this.x00181110;
    if (value === undefined) {
      throw new Error('DistanceSourceToDetector is undefined');
    }
    return value;
  }

  // Distance Source to Patient
  get DistanceSourceToPatient(): number | undefined {
    return this.x00181111;
  }

  get x00181111(): number | undefined {
    const value = this.dwResponse['00181111']?.Value;
    return convert(value?.[0], 0x00181111, 'number');
  }

  getDistanceSourceToPatient(): number {
    const value = this.x00181111;
    if (value === undefined) {
      throw new Error('DistanceSourceToPatient is undefined');
    }
    return value;
  }

  // Estimated Radiographic Magnification Factor
  get EstimatedRadiographicMagnificationFactor(): number | undefined {
    return this.x00181114;
  }

  get x00181114(): number | undefined {
    const value = this.dwResponse['00181114']?.Value;
    return convert(value?.[0], 0x00181114, 'number');
  }

  getEstimatedRadiographicMagnificationFactor(): number {
    const value = this.x00181114;
    if (value === undefined) {
      throw new Error('EstimatedRadiographicMagnificationFactor is undefined');
    }
    return value;
  }

  // Gantry/Detector Tilt
  get GantryDetectorTilt(): number | undefined {
    return this.x00181120;
  }

  get x00181120(): number | undefined {
    const value = this.dwResponse['00181120']?.Value;
    return convert(value?.[0], 0x00181120, 'number');
  }

  getGantryDetectorTilt(): number {
    const value = this.x00181120;
    if (value === undefined) {
      throw new Error('GantryDetectorTilt is undefined');
    }
    return value;
  }

  // Gantry/Detector Slew
  get GantryDetectorSlew(): number | undefined {
    return this.x00181121;
  }

  get x00181121(): number | undefined {
    const value = this.dwResponse['00181121']?.Value;
    return convert(value?.[0], 0x00181121, 'number');
  }

  getGantryDetectorSlew(): number {
    const value = this.x00181121;
    if (value === undefined) {
      throw new Error('GantryDetectorSlew is undefined');
    }
    return value;
  }

  // Table Height
  get TableHeight(): number | undefined {
    return this.x00181130;
  }

  get x00181130(): number | undefined {
    const value = this.dwResponse['00181130']?.Value;
    return convert(value?.[0], 0x00181130, 'number');
  }

  getTableHeight(): number {
    const value = this.x00181130;
    if (value === undefined) {
      throw new Error('TableHeight is undefined');
    }
    return value;
  }

  // Table Traverse
  get TableTraverse(): number | undefined {
    return this.x00181131;
  }

  get x00181131(): number | undefined {
    const value = this.dwResponse['00181131']?.Value;
    return convert(value?.[0], 0x00181131, 'number');
  }

  getTableTraverse(): number {
    const value = this.x00181131;
    if (value === undefined) {
      throw new Error('TableTraverse is undefined');
    }
    return value;
  }

  // Table Motion
  get TableMotion(): string | undefined {
    return this.x00181134;
  }

  get x00181134(): string | undefined {
    const value = this.dwResponse['00181134']?.Value;
    return convert(value?.[0], 0x00181134, 'string');
  }

  getTableMotion(): string {
    const value = this.x00181134;
    if (value === undefined) {
      throw new Error('TableMotion is undefined');
    }
    return value;
  }

  // Table Vertical Increment
  get TableVerticalIncrement(): Array<number | undefined> | undefined {
    return this.x00181135;
  }

  get x00181135(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181135']?.Value;
    return convert(value, 0x00181135, 'Array<number | undefined>');
  }

  getTableVerticalIncrement(): Array<number | undefined> {
    const value = this.x00181135;
    if (value === undefined) {
      throw new Error('TableVerticalIncrement is undefined');
    }
    return value;
  }

  // Table Lateral Increment
  get TableLateralIncrement(): Array<number | undefined> | undefined {
    return this.x00181136;
  }

  get x00181136(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181136']?.Value;
    return convert(value, 0x00181136, 'Array<number | undefined>');
  }

  getTableLateralIncrement(): Array<number | undefined> {
    const value = this.x00181136;
    if (value === undefined) {
      throw new Error('TableLateralIncrement is undefined');
    }
    return value;
  }

  // Table Longitudinal Increment
  get TableLongitudinalIncrement(): Array<number | undefined> | undefined {
    return this.x00181137;
  }

  get x00181137(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181137']?.Value;
    return convert(value, 0x00181137, 'Array<number | undefined>');
  }

  getTableLongitudinalIncrement(): Array<number | undefined> {
    const value = this.x00181137;
    if (value === undefined) {
      throw new Error('TableLongitudinalIncrement is undefined');
    }
    return value;
  }

  // Table Angle
  get TableAngle(): number | undefined {
    return this.x00181138;
  }

  get x00181138(): number | undefined {
    const value = this.dwResponse['00181138']?.Value;
    return convert(value?.[0], 0x00181138, 'number');
  }

  getTableAngle(): number {
    const value = this.x00181138;
    if (value === undefined) {
      throw new Error('TableAngle is undefined');
    }
    return value;
  }

  // Table Type
  get TableType(): string | undefined {
    return this.x0018113a;
  }

  get x0018113a(): string | undefined {
    const value = this.dwResponse['0018113A']?.Value;
    return convert(value?.[0], 0x0018113a, 'string');
  }

  getTableType(): string {
    const value = this.x0018113a;
    if (value === undefined) {
      throw new Error('TableType is undefined');
    }
    return value;
  }

  // Rotation Direction
  get RotationDirection(): string | undefined {
    return this.x00181140;
  }

  get x00181140(): string | undefined {
    const value = this.dwResponse['00181140']?.Value;
    return convert(value?.[0], 0x00181140, 'string');
  }

  getRotationDirection(): string {
    const value = this.x00181140;
    if (value === undefined) {
      throw new Error('RotationDirection is undefined');
    }
    return value;
  }

  // Angular Position
  get AngularPosition(): number | undefined {
    return this.x00181141;
  }

  get x00181141(): number | undefined {
    const value = this.dwResponse['00181141']?.Value;
    return convert(value?.[0], 0x00181141, 'number');
  }

  getAngularPosition(): number {
    const value = this.x00181141;
    if (value === undefined) {
      throw new Error('AngularPosition is undefined');
    }
    return value;
  }

  // Radial Position
  get RadialPosition(): Array<number | undefined> | undefined {
    return this.x00181142;
  }

  get x00181142(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181142']?.Value;
    return convert(value, 0x00181142, 'Array<number | undefined>');
  }

  getRadialPosition(): Array<number | undefined> {
    const value = this.x00181142;
    if (value === undefined) {
      throw new Error('RadialPosition is undefined');
    }
    return value;
  }

  // Scan Arc
  get ScanArc(): number | undefined {
    return this.x00181143;
  }

  get x00181143(): number | undefined {
    const value = this.dwResponse['00181143']?.Value;
    return convert(value?.[0], 0x00181143, 'number');
  }

  getScanArc(): number {
    const value = this.x00181143;
    if (value === undefined) {
      throw new Error('ScanArc is undefined');
    }
    return value;
  }

  // Angular Step
  get AngularStep(): number | undefined {
    return this.x00181144;
  }

  get x00181144(): number | undefined {
    const value = this.dwResponse['00181144']?.Value;
    return convert(value?.[0], 0x00181144, 'number');
  }

  getAngularStep(): number {
    const value = this.x00181144;
    if (value === undefined) {
      throw new Error('AngularStep is undefined');
    }
    return value;
  }

  // Center of Rotation Offset
  get CenterOfRotationOffset(): number | undefined {
    return this.x00181145;
  }

  get x00181145(): number | undefined {
    const value = this.dwResponse['00181145']?.Value;
    return convert(value?.[0], 0x00181145, 'number');
  }

  getCenterOfRotationOffset(): number {
    const value = this.x00181145;
    if (value === undefined) {
      throw new Error('CenterOfRotationOffset is undefined');
    }
    return value;
  }

  // Rotation Offset
  get RotationOffset(): Array<number | undefined> | undefined {
    return this.x00181146;
  }

  get x00181146(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181146']?.Value;
    return convert(value, 0x00181146, 'Array<number | undefined>');
  }

  getRotationOffset(): Array<number | undefined> {
    const value = this.x00181146;
    if (value === undefined) {
      throw new Error('RotationOffset is undefined');
    }
    return value;
  }

  // Field of View Shape
  get FieldOfViewShape(): string | undefined {
    return this.x00181147;
  }

  get x00181147(): string | undefined {
    const value = this.dwResponse['00181147']?.Value;
    return convert(value?.[0], 0x00181147, 'string');
  }

  getFieldOfViewShape(): string {
    const value = this.x00181147;
    if (value === undefined) {
      throw new Error('FieldOfViewShape is undefined');
    }
    return value;
  }

  // Field of View Dimension(s)
  get FieldOfViewDimensions(): Array<number | undefined> | undefined {
    return this.x00181149;
  }

  get x00181149(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181149']?.Value;
    return convert(value, 0x00181149, 'Array<number | undefined>');
  }

  getFieldOfViewDimensions(): Array<number | undefined> {
    const value = this.x00181149;
    if (value === undefined) {
      throw new Error('FieldOfViewDimensions is undefined');
    }
    return value;
  }

  // Exposure Time
  get ExposureTime(): number | undefined {
    return this.x00181150;
  }

  get x00181150(): number | undefined {
    const value = this.dwResponse['00181150']?.Value;
    return convert(value?.[0], 0x00181150, 'number');
  }

  getExposureTime(): number {
    const value = this.x00181150;
    if (value === undefined) {
      throw new Error('ExposureTime is undefined');
    }
    return value;
  }

  // X-Ray Tube Current
  get XRayTubeCurrent(): number | undefined {
    return this.x00181151;
  }

  get x00181151(): number | undefined {
    const value = this.dwResponse['00181151']?.Value;
    return convert(value?.[0], 0x00181151, 'number');
  }

  getXRayTubeCurrent(): number {
    const value = this.x00181151;
    if (value === undefined) {
      throw new Error('XRayTubeCurrent is undefined');
    }
    return value;
  }

  // Exposure
  get Exposure(): number | undefined {
    return this.x00181152;
  }

  get x00181152(): number | undefined {
    const value = this.dwResponse['00181152']?.Value;
    return convert(value?.[0], 0x00181152, 'number');
  }

  getExposure(): number {
    const value = this.x00181152;
    if (value === undefined) {
      throw new Error('Exposure is undefined');
    }
    return value;
  }

  // Exposure in µAs
  get ExposureInuAs(): number | undefined {
    return this.x00181153;
  }

  get x00181153(): number | undefined {
    const value = this.dwResponse['00181153']?.Value;
    return convert(value?.[0], 0x00181153, 'number');
  }

  getExposureInuAs(): number {
    const value = this.x00181153;
    if (value === undefined) {
      throw new Error('ExposureInuAs is undefined');
    }
    return value;
  }

  // Average Pulse Width
  get AveragePulseWidth(): number | undefined {
    return this.x00181154;
  }

  get x00181154(): number | undefined {
    const value = this.dwResponse['00181154']?.Value;
    return convert(value?.[0], 0x00181154, 'number');
  }

  getAveragePulseWidth(): number {
    const value = this.x00181154;
    if (value === undefined) {
      throw new Error('AveragePulseWidth is undefined');
    }
    return value;
  }

  // Radiation Setting
  get RadiationSetting(): string | undefined {
    return this.x00181155;
  }

  get x00181155(): string | undefined {
    const value = this.dwResponse['00181155']?.Value;
    return convert(value?.[0], 0x00181155, 'string');
  }

  getRadiationSetting(): string {
    const value = this.x00181155;
    if (value === undefined) {
      throw new Error('RadiationSetting is undefined');
    }
    return value;
  }

  // Rectification Type
  get RectificationType(): string | undefined {
    return this.x00181156;
  }

  get x00181156(): string | undefined {
    const value = this.dwResponse['00181156']?.Value;
    return convert(value?.[0], 0x00181156, 'string');
  }

  getRectificationType(): string {
    const value = this.x00181156;
    if (value === undefined) {
      throw new Error('RectificationType is undefined');
    }
    return value;
  }

  // Radiation Mode
  get RadiationMode(): string | undefined {
    return this.x0018115a;
  }

  get x0018115a(): string | undefined {
    const value = this.dwResponse['0018115A']?.Value;
    return convert(value?.[0], 0x0018115a, 'string');
  }

  getRadiationMode(): string {
    const value = this.x0018115a;
    if (value === undefined) {
      throw new Error('RadiationMode is undefined');
    }
    return value;
  }

  // Image and Fluoroscopy Area Dose Product
  get ImageAndFluoroscopyAreaDoseProduct(): number | undefined {
    return this.x0018115e;
  }

  get x0018115e(): number | undefined {
    const value = this.dwResponse['0018115E']?.Value;
    return convert(value?.[0], 0x0018115e, 'number');
  }

  getImageAndFluoroscopyAreaDoseProduct(): number {
    const value = this.x0018115e;
    if (value === undefined) {
      throw new Error('ImageAndFluoroscopyAreaDoseProduct is undefined');
    }
    return value;
  }

  // Filter Type
  get FilterType(): string | undefined {
    return this.x00181160;
  }

  get x00181160(): string | undefined {
    const value = this.dwResponse['00181160']?.Value;
    return convert(value?.[0], 0x00181160, 'string');
  }

  getFilterType(): string {
    const value = this.x00181160;
    if (value === undefined) {
      throw new Error('FilterType is undefined');
    }
    return value;
  }

  // Type of Filters
  get TypeOfFilters(): Array<string | undefined> | undefined {
    return this.x00181161;
  }

  get x00181161(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00181161']?.Value;
    return convert(value, 0x00181161, 'Array<string | undefined>');
  }

  getTypeOfFilters(): Array<string | undefined> {
    const value = this.x00181161;
    if (value === undefined) {
      throw new Error('TypeOfFilters is undefined');
    }
    return value;
  }

  // Intensifier Size
  get IntensifierSize(): number | undefined {
    return this.x00181162;
  }

  get x00181162(): number | undefined {
    const value = this.dwResponse['00181162']?.Value;
    return convert(value?.[0], 0x00181162, 'number');
  }

  getIntensifierSize(): number {
    const value = this.x00181162;
    if (value === undefined) {
      throw new Error('IntensifierSize is undefined');
    }
    return value;
  }

  // Imager Pixel Spacing
  get ImagerPixelSpacing(): Array<number | undefined> | undefined {
    return this.x00181164;
  }

  get x00181164(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181164']?.Value;
    return convert(value, 0x00181164, 'Array<number | undefined>');
  }

  getImagerPixelSpacing(): Array<number | undefined> {
    const value = this.x00181164;
    if (value === undefined) {
      throw new Error('ImagerPixelSpacing is undefined');
    }
    return value;
  }

  // Grid
  get Grid(): Array<string | undefined> | undefined {
    return this.x00181166;
  }

  get x00181166(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00181166']?.Value;
    return convert(value, 0x00181166, 'Array<string | undefined>');
  }

  getGrid(): Array<string | undefined> {
    const value = this.x00181166;
    if (value === undefined) {
      throw new Error('Grid is undefined');
    }
    return value;
  }

  // Generator Power
  get GeneratorPower(): number | undefined {
    return this.x00181170;
  }

  get x00181170(): number | undefined {
    const value = this.dwResponse['00181170']?.Value;
    return convert(value?.[0], 0x00181170, 'number');
  }

  getGeneratorPower(): number {
    const value = this.x00181170;
    if (value === undefined) {
      throw new Error('GeneratorPower is undefined');
    }
    return value;
  }

  // Collimator/grid Name
  get CollimatorGridName(): string | undefined {
    return this.x00181180;
  }

  get x00181180(): string | undefined {
    const value = this.dwResponse['00181180']?.Value;
    return convert(value?.[0], 0x00181180, 'string');
  }

  getCollimatorGridName(): string {
    const value = this.x00181180;
    if (value === undefined) {
      throw new Error('CollimatorGridName is undefined');
    }
    return value;
  }

  // Collimator Type
  get CollimatorType(): string | undefined {
    return this.x00181181;
  }

  get x00181181(): string | undefined {
    const value = this.dwResponse['00181181']?.Value;
    return convert(value?.[0], 0x00181181, 'string');
  }

  getCollimatorType(): string {
    const value = this.x00181181;
    if (value === undefined) {
      throw new Error('CollimatorType is undefined');
    }
    return value;
  }

  // Focal Distance
  get FocalDistance(): Array<number | undefined> | undefined {
    return this.x00181182;
  }

  get x00181182(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181182']?.Value;
    return convert(value, 0x00181182, 'Array<number | undefined>');
  }

  getFocalDistance(): Array<number | undefined> {
    const value = this.x00181182;
    if (value === undefined) {
      throw new Error('FocalDistance is undefined');
    }
    return value;
  }

  // X Focus Center
  get XFocusCenter(): Array<number | undefined> | undefined {
    return this.x00181183;
  }

  get x00181183(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181183']?.Value;
    return convert(value, 0x00181183, 'Array<number | undefined>');
  }

  getXFocusCenter(): Array<number | undefined> {
    const value = this.x00181183;
    if (value === undefined) {
      throw new Error('XFocusCenter is undefined');
    }
    return value;
  }

  // Y Focus Center
  get YFocusCenter(): Array<number | undefined> | undefined {
    return this.x00181184;
  }

  get x00181184(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181184']?.Value;
    return convert(value, 0x00181184, 'Array<number | undefined>');
  }

  getYFocusCenter(): Array<number | undefined> {
    const value = this.x00181184;
    if (value === undefined) {
      throw new Error('YFocusCenter is undefined');
    }
    return value;
  }

  // Focal Spot(s)
  get FocalSpots(): Array<number | undefined> | undefined {
    return this.x00181190;
  }

  get x00181190(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181190']?.Value;
    return convert(value, 0x00181190, 'Array<number | undefined>');
  }

  getFocalSpots(): Array<number | undefined> {
    const value = this.x00181190;
    if (value === undefined) {
      throw new Error('FocalSpots is undefined');
    }
    return value;
  }

  // Anode Target Material
  get AnodeTargetMaterial(): string | undefined {
    return this.x00181191;
  }

  get x00181191(): string | undefined {
    const value = this.dwResponse['00181191']?.Value;
    return convert(value?.[0], 0x00181191, 'string');
  }

  getAnodeTargetMaterial(): string {
    const value = this.x00181191;
    if (value === undefined) {
      throw new Error('AnodeTargetMaterial is undefined');
    }
    return value;
  }

  // Body Part Thickness
  get BodyPartThickness(): number | undefined {
    return this.x001811a0;
  }

  get x001811a0(): number | undefined {
    const value = this.dwResponse['001811A0']?.Value;
    return convert(value?.[0], 0x001811a0, 'number');
  }

  getBodyPartThickness(): number {
    const value = this.x001811a0;
    if (value === undefined) {
      throw new Error('BodyPartThickness is undefined');
    }
    return value;
  }

  // Compression Force
  get CompressionForce(): number | undefined {
    return this.x001811a2;
  }

  get x001811a2(): number | undefined {
    const value = this.dwResponse['001811A2']?.Value;
    return convert(value?.[0], 0x001811a2, 'number');
  }

  getCompressionForce(): number {
    const value = this.x001811a2;
    if (value === undefined) {
      throw new Error('CompressionForce is undefined');
    }
    return value;
  }

  // Paddle Description
  get PaddleDescription(): string | undefined {
    return this.x001811a4;
  }

  get x001811a4(): string | undefined {
    const value = this.dwResponse['001811A4']?.Value;
    return convert(value?.[0], 0x001811a4, 'string');
  }

  getPaddleDescription(): string {
    const value = this.x001811a4;
    if (value === undefined) {
      throw new Error('PaddleDescription is undefined');
    }
    return value;
  }

  // Date of Last Calibration
  get DateOfLastCalibration(): Array<Date | undefined> | undefined {
    return this.x00181200;
  }

  get x00181200(): Array<Date | undefined> | undefined {
    const value = this.dwResponse['00181200']?.Value;
    return convert(value, 0x00181200, 'Array<Date | undefined>');
  }

  getDateOfLastCalibration(): Array<Date | undefined> {
    const value = this.x00181200;
    if (value === undefined) {
      throw new Error('DateOfLastCalibration is undefined');
    }
    return value;
  }

  // Time of Last Calibration
  get TimeOfLastCalibration(): Array<string | undefined> | undefined {
    return this.x00181201;
  }

  get x00181201(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00181201']?.Value;
    return convert(value, 0x00181201, 'Array<string | undefined>');
  }

  getTimeOfLastCalibration(): Array<string | undefined> {
    const value = this.x00181201;
    if (value === undefined) {
      throw new Error('TimeOfLastCalibration is undefined');
    }
    return value;
  }

  // DateTime of Last Calibration
  get DateTimeOfLastCalibration(): string | undefined {
    return this.x00181202;
  }

  get x00181202(): string | undefined {
    const value = this.dwResponse['00181202']?.Value;
    return convert(value?.[0], 0x00181202, 'string');
  }

  getDateTimeOfLastCalibration(): string {
    const value = this.x00181202;
    if (value === undefined) {
      throw new Error('DateTimeOfLastCalibration is undefined');
    }
    return value;
  }

  // Convolution Kernel
  get ConvolutionKernel(): Array<string | undefined> | undefined {
    return this.x00181210;
  }

  get x00181210(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00181210']?.Value;
    return convert(value, 0x00181210, 'Array<string | undefined>');
  }

  getConvolutionKernel(): Array<string | undefined> {
    const value = this.x00181210;
    if (value === undefined) {
      throw new Error('ConvolutionKernel is undefined');
    }
    return value;
  }

  // Upper/Lower Pixel Values
  get UpperLowerPixelValues(): Array<number | undefined> | undefined {
    return this.x00181240;
  }

  get x00181240(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181240']?.Value;
    return convert(value, 0x00181240, 'Array<number | undefined>');
  }

  getUpperLowerPixelValues(): Array<number | undefined> {
    const value = this.x00181240;
    if (value === undefined) {
      throw new Error('UpperLowerPixelValues is undefined');
    }
    return value;
  }

  // Actual Frame Duration
  get ActualFrameDuration(): number | undefined {
    return this.x00181242;
  }

  get x00181242(): number | undefined {
    const value = this.dwResponse['00181242']?.Value;
    return convert(value?.[0], 0x00181242, 'number');
  }

  getActualFrameDuration(): number {
    const value = this.x00181242;
    if (value === undefined) {
      throw new Error('ActualFrameDuration is undefined');
    }
    return value;
  }

  // Count Rate
  get CountRate(): number | undefined {
    return this.x00181243;
  }

  get x00181243(): number | undefined {
    const value = this.dwResponse['00181243']?.Value;
    return convert(value?.[0], 0x00181243, 'number');
  }

  getCountRate(): number {
    const value = this.x00181243;
    if (value === undefined) {
      throw new Error('CountRate is undefined');
    }
    return value;
  }

  // Preferred Playback Sequencing
  get PreferredPlaybackSequencing(): number | undefined {
    return this.x00181244;
  }

  get x00181244(): number | undefined {
    const value = this.dwResponse['00181244']?.Value;
    return convert(value?.[0], 0x00181244, 'number');
  }

  getPreferredPlaybackSequencing(): number {
    const value = this.x00181244;
    if (value === undefined) {
      throw new Error('PreferredPlaybackSequencing is undefined');
    }
    return value;
  }

  // Receive Coil Name
  get ReceiveCoilName(): string | undefined {
    return this.x00181250;
  }

  get x00181250(): string | undefined {
    const value = this.dwResponse['00181250']?.Value;
    return convert(value?.[0], 0x00181250, 'string');
  }

  getReceiveCoilName(): string {
    const value = this.x00181250;
    if (value === undefined) {
      throw new Error('ReceiveCoilName is undefined');
    }
    return value;
  }

  // Transmit Coil Name
  get TransmitCoilName(): string | undefined {
    return this.x00181251;
  }

  get x00181251(): string | undefined {
    const value = this.dwResponse['00181251']?.Value;
    return convert(value?.[0], 0x00181251, 'string');
  }

  getTransmitCoilName(): string {
    const value = this.x00181251;
    if (value === undefined) {
      throw new Error('TransmitCoilName is undefined');
    }
    return value;
  }

  // Plate Type
  get PlateType(): string | undefined {
    return this.x00181260;
  }

  get x00181260(): string | undefined {
    const value = this.dwResponse['00181260']?.Value;
    return convert(value?.[0], 0x00181260, 'string');
  }

  getPlateType(): string {
    const value = this.x00181260;
    if (value === undefined) {
      throw new Error('PlateType is undefined');
    }
    return value;
  }

  // Phosphor Type
  get PhosphorType(): string | undefined {
    return this.x00181261;
  }

  get x00181261(): string | undefined {
    const value = this.dwResponse['00181261']?.Value;
    return convert(value?.[0], 0x00181261, 'string');
  }

  getPhosphorType(): string {
    const value = this.x00181261;
    if (value === undefined) {
      throw new Error('PhosphorType is undefined');
    }
    return value;
  }

  // Scan Velocity
  get ScanVelocity(): number | undefined {
    return this.x00181300;
  }

  get x00181300(): number | undefined {
    const value = this.dwResponse['00181300']?.Value;
    return convert(value?.[0], 0x00181300, 'number');
  }

  getScanVelocity(): number {
    const value = this.x00181300;
    if (value === undefined) {
      throw new Error('ScanVelocity is undefined');
    }
    return value;
  }

  // Whole Body Technique
  get WholeBodyTechnique(): Array<string | undefined> | undefined {
    return this.x00181301;
  }

  get x00181301(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00181301']?.Value;
    return convert(value, 0x00181301, 'Array<string | undefined>');
  }

  getWholeBodyTechnique(): Array<string | undefined> {
    const value = this.x00181301;
    if (value === undefined) {
      throw new Error('WholeBodyTechnique is undefined');
    }
    return value;
  }

  // Scan Length
  get ScanLength(): number | undefined {
    return this.x00181302;
  }

  get x00181302(): number | undefined {
    const value = this.dwResponse['00181302']?.Value;
    return convert(value?.[0], 0x00181302, 'number');
  }

  getScanLength(): number {
    const value = this.x00181302;
    if (value === undefined) {
      throw new Error('ScanLength is undefined');
    }
    return value;
  }

  // Acquisition Matrix
  get AcquisitionMatrix(): Array<number | undefined> | undefined {
    return this.x00181310;
  }

  get x00181310(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181310']?.Value;
    return convert(value, 0x00181310, 'Array<number | undefined>');
  }

  getAcquisitionMatrix(): Array<number | undefined> {
    const value = this.x00181310;
    if (value === undefined) {
      throw new Error('AcquisitionMatrix is undefined');
    }
    return value;
  }

  // In-plane Phase Encoding Direction
  get InPlanePhaseEncodingDirection(): string | undefined {
    return this.x00181312;
  }

  get x00181312(): string | undefined {
    const value = this.dwResponse['00181312']?.Value;
    return convert(value?.[0], 0x00181312, 'string');
  }

  getInPlanePhaseEncodingDirection(): string {
    const value = this.x00181312;
    if (value === undefined) {
      throw new Error('InPlanePhaseEncodingDirection is undefined');
    }
    return value;
  }

  // Flip Angle
  get FlipAngle(): number | undefined {
    return this.x00181314;
  }

  get x00181314(): number | undefined {
    const value = this.dwResponse['00181314']?.Value;
    return convert(value?.[0], 0x00181314, 'number');
  }

  getFlipAngle(): number {
    const value = this.x00181314;
    if (value === undefined) {
      throw new Error('FlipAngle is undefined');
    }
    return value;
  }

  // Variable Flip Angle Flag
  get VariableFlipAngleFlag(): string | undefined {
    return this.x00181315;
  }

  get x00181315(): string | undefined {
    const value = this.dwResponse['00181315']?.Value;
    return convert(value?.[0], 0x00181315, 'string');
  }

  getVariableFlipAngleFlag(): string {
    const value = this.x00181315;
    if (value === undefined) {
      throw new Error('VariableFlipAngleFlag is undefined');
    }
    return value;
  }

  // SAR
  get SAR(): number | undefined {
    return this.x00181316;
  }

  get x00181316(): number | undefined {
    const value = this.dwResponse['00181316']?.Value;
    return convert(value?.[0], 0x00181316, 'number');
  }

  getSAR(): number {
    const value = this.x00181316;
    if (value === undefined) {
      throw new Error('SAR is undefined');
    }
    return value;
  }

  // dB/dt
  get dBdt(): number | undefined {
    return this.x00181318;
  }

  get x00181318(): number | undefined {
    const value = this.dwResponse['00181318']?.Value;
    return convert(value?.[0], 0x00181318, 'number');
  }

  getdBdt(): number {
    const value = this.x00181318;
    if (value === undefined) {
      throw new Error('dBdt is undefined');
    }
    return value;
  }

  // Acquisition Device Processing Description
  get AcquisitionDeviceProcessingDescription(): string | undefined {
    return this.x00181400;
  }

  get x00181400(): string | undefined {
    const value = this.dwResponse['00181400']?.Value;
    return convert(value?.[0], 0x00181400, 'string');
  }

  getAcquisitionDeviceProcessingDescription(): string {
    const value = this.x00181400;
    if (value === undefined) {
      throw new Error('AcquisitionDeviceProcessingDescription is undefined');
    }
    return value;
  }

  // Acquisition Device Processing Code
  get AcquisitionDeviceProcessingCode(): string | undefined {
    return this.x00181401;
  }

  get x00181401(): string | undefined {
    const value = this.dwResponse['00181401']?.Value;
    return convert(value?.[0], 0x00181401, 'string');
  }

  getAcquisitionDeviceProcessingCode(): string {
    const value = this.x00181401;
    if (value === undefined) {
      throw new Error('AcquisitionDeviceProcessingCode is undefined');
    }
    return value;
  }

  // Cassette Orientation
  get CassetteOrientation(): string | undefined {
    return this.x00181402;
  }

  get x00181402(): string | undefined {
    const value = this.dwResponse['00181402']?.Value;
    return convert(value?.[0], 0x00181402, 'string');
  }

  getCassetteOrientation(): string {
    const value = this.x00181402;
    if (value === undefined) {
      throw new Error('CassetteOrientation is undefined');
    }
    return value;
  }

  // Cassette Size
  get CassetteSize(): string | undefined {
    return this.x00181403;
  }

  get x00181403(): string | undefined {
    const value = this.dwResponse['00181403']?.Value;
    return convert(value?.[0], 0x00181403, 'string');
  }

  getCassetteSize(): string {
    const value = this.x00181403;
    if (value === undefined) {
      throw new Error('CassetteSize is undefined');
    }
    return value;
  }

  // Exposures on Plate
  get ExposuresOnPlate(): number | undefined {
    return this.x00181404;
  }

  get x00181404(): number | undefined {
    const value = this.dwResponse['00181404']?.Value;
    return convert(value?.[0], 0x00181404, 'number');
  }

  getExposuresOnPlate(): number {
    const value = this.x00181404;
    if (value === undefined) {
      throw new Error('ExposuresOnPlate is undefined');
    }
    return value;
  }

  // Relative X-Ray Exposure
  get RelativeXRayExposure(): number | undefined {
    return this.x00181405;
  }

  get x00181405(): number | undefined {
    const value = this.dwResponse['00181405']?.Value;
    return convert(value?.[0], 0x00181405, 'number');
  }

  getRelativeXRayExposure(): number {
    const value = this.x00181405;
    if (value === undefined) {
      throw new Error('RelativeXRayExposure is undefined');
    }
    return value;
  }

  // Exposure Index
  get ExposureIndex(): number | undefined {
    return this.x00181411;
  }

  get x00181411(): number | undefined {
    const value = this.dwResponse['00181411']?.Value;
    return convert(value?.[0], 0x00181411, 'number');
  }

  getExposureIndex(): number {
    const value = this.x00181411;
    if (value === undefined) {
      throw new Error('ExposureIndex is undefined');
    }
    return value;
  }

  // Target Exposure Index
  get TargetExposureIndex(): number | undefined {
    return this.x00181412;
  }

  get x00181412(): number | undefined {
    const value = this.dwResponse['00181412']?.Value;
    return convert(value?.[0], 0x00181412, 'number');
  }

  getTargetExposureIndex(): number {
    const value = this.x00181412;
    if (value === undefined) {
      throw new Error('TargetExposureIndex is undefined');
    }
    return value;
  }

  // Deviation Index
  get DeviationIndex(): number | undefined {
    return this.x00181413;
  }

  get x00181413(): number | undefined {
    const value = this.dwResponse['00181413']?.Value;
    return convert(value?.[0], 0x00181413, 'number');
  }

  getDeviationIndex(): number {
    const value = this.x00181413;
    if (value === undefined) {
      throw new Error('DeviationIndex is undefined');
    }
    return value;
  }

  // Column Angulation
  get ColumnAngulation(): number | undefined {
    return this.x00181450;
  }

  get x00181450(): number | undefined {
    const value = this.dwResponse['00181450']?.Value;
    return convert(value?.[0], 0x00181450, 'number');
  }

  getColumnAngulation(): number {
    const value = this.x00181450;
    if (value === undefined) {
      throw new Error('ColumnAngulation is undefined');
    }
    return value;
  }

  // Tomo Layer Height
  get TomoLayerHeight(): number | undefined {
    return this.x00181460;
  }

  get x00181460(): number | undefined {
    const value = this.dwResponse['00181460']?.Value;
    return convert(value?.[0], 0x00181460, 'number');
  }

  getTomoLayerHeight(): number {
    const value = this.x00181460;
    if (value === undefined) {
      throw new Error('TomoLayerHeight is undefined');
    }
    return value;
  }

  // Tomo Angle
  get TomoAngle(): number | undefined {
    return this.x00181470;
  }

  get x00181470(): number | undefined {
    const value = this.dwResponse['00181470']?.Value;
    return convert(value?.[0], 0x00181470, 'number');
  }

  getTomoAngle(): number {
    const value = this.x00181470;
    if (value === undefined) {
      throw new Error('TomoAngle is undefined');
    }
    return value;
  }

  // Tomo Time
  get TomoTime(): number | undefined {
    return this.x00181480;
  }

  get x00181480(): number | undefined {
    const value = this.dwResponse['00181480']?.Value;
    return convert(value?.[0], 0x00181480, 'number');
  }

  getTomoTime(): number {
    const value = this.x00181480;
    if (value === undefined) {
      throw new Error('TomoTime is undefined');
    }
    return value;
  }

  // Tomo Type
  get TomoType(): string | undefined {
    return this.x00181490;
  }

  get x00181490(): string | undefined {
    const value = this.dwResponse['00181490']?.Value;
    return convert(value?.[0], 0x00181490, 'string');
  }

  getTomoType(): string {
    const value = this.x00181490;
    if (value === undefined) {
      throw new Error('TomoType is undefined');
    }
    return value;
  }

  // Tomo Class
  get TomoClass(): string | undefined {
    return this.x00181491;
  }

  get x00181491(): string | undefined {
    const value = this.dwResponse['00181491']?.Value;
    return convert(value?.[0], 0x00181491, 'string');
  }

  getTomoClass(): string {
    const value = this.x00181491;
    if (value === undefined) {
      throw new Error('TomoClass is undefined');
    }
    return value;
  }

  // Number of Tomosynthesis Source Images
  get NumberOfTomosynthesisSourceImages(): number | undefined {
    return this.x00181495;
  }

  get x00181495(): number | undefined {
    const value = this.dwResponse['00181495']?.Value;
    return convert(value?.[0], 0x00181495, 'number');
  }

  getNumberOfTomosynthesisSourceImages(): number {
    const value = this.x00181495;
    if (value === undefined) {
      throw new Error('NumberOfTomosynthesisSourceImages is undefined');
    }
    return value;
  }

  // Positioner Motion
  get PositionerMotion(): string | undefined {
    return this.x00181500;
  }

  get x00181500(): string | undefined {
    const value = this.dwResponse['00181500']?.Value;
    return convert(value?.[0], 0x00181500, 'string');
  }

  getPositionerMotion(): string {
    const value = this.x00181500;
    if (value === undefined) {
      throw new Error('PositionerMotion is undefined');
    }
    return value;
  }

  // Positioner Type
  get PositionerType(): string | undefined {
    return this.x00181508;
  }

  get x00181508(): string | undefined {
    const value = this.dwResponse['00181508']?.Value;
    return convert(value?.[0], 0x00181508, 'string');
  }

  getPositionerType(): string {
    const value = this.x00181508;
    if (value === undefined) {
      throw new Error('PositionerType is undefined');
    }
    return value;
  }

  // Positioner Primary Angle
  get PositionerPrimaryAngle(): number | undefined {
    return this.x00181510;
  }

  get x00181510(): number | undefined {
    const value = this.dwResponse['00181510']?.Value;
    return convert(value?.[0], 0x00181510, 'number');
  }

  getPositionerPrimaryAngle(): number {
    const value = this.x00181510;
    if (value === undefined) {
      throw new Error('PositionerPrimaryAngle is undefined');
    }
    return value;
  }

  // Positioner Secondary Angle
  get PositionerSecondaryAngle(): number | undefined {
    return this.x00181511;
  }

  get x00181511(): number | undefined {
    const value = this.dwResponse['00181511']?.Value;
    return convert(value?.[0], 0x00181511, 'number');
  }

  getPositionerSecondaryAngle(): number {
    const value = this.x00181511;
    if (value === undefined) {
      throw new Error('PositionerSecondaryAngle is undefined');
    }
    return value;
  }

  // Positioner Primary Angle Increment
  get PositionerPrimaryAngleIncrement(): Array<number | undefined> | undefined {
    return this.x00181520;
  }

  get x00181520(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181520']?.Value;
    return convert(value, 0x00181520, 'Array<number | undefined>');
  }

  getPositionerPrimaryAngleIncrement(): Array<number | undefined> {
    const value = this.x00181520;
    if (value === undefined) {
      throw new Error('PositionerPrimaryAngleIncrement is undefined');
    }
    return value;
  }

  // Positioner Secondary Angle Increment
  get PositionerSecondaryAngleIncrement(): Array<number | undefined> | undefined {
    return this.x00181521;
  }

  get x00181521(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181521']?.Value;
    return convert(value, 0x00181521, 'Array<number | undefined>');
  }

  getPositionerSecondaryAngleIncrement(): Array<number | undefined> {
    const value = this.x00181521;
    if (value === undefined) {
      throw new Error('PositionerSecondaryAngleIncrement is undefined');
    }
    return value;
  }

  // Detector Primary Angle
  get DetectorPrimaryAngle(): number | undefined {
    return this.x00181530;
  }

  get x00181530(): number | undefined {
    const value = this.dwResponse['00181530']?.Value;
    return convert(value?.[0], 0x00181530, 'number');
  }

  getDetectorPrimaryAngle(): number {
    const value = this.x00181530;
    if (value === undefined) {
      throw new Error('DetectorPrimaryAngle is undefined');
    }
    return value;
  }

  // Detector Secondary Angle
  get DetectorSecondaryAngle(): number | undefined {
    return this.x00181531;
  }

  get x00181531(): number | undefined {
    const value = this.dwResponse['00181531']?.Value;
    return convert(value?.[0], 0x00181531, 'number');
  }

  getDetectorSecondaryAngle(): number {
    const value = this.x00181531;
    if (value === undefined) {
      throw new Error('DetectorSecondaryAngle is undefined');
    }
    return value;
  }

  // Shutter Shape
  get ShutterShape(): Array<string | undefined> | undefined {
    return this.x00181600;
  }

  get x00181600(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00181600']?.Value;
    return convert(value, 0x00181600, 'Array<string | undefined>');
  }

  getShutterShape(): Array<string | undefined> {
    const value = this.x00181600;
    if (value === undefined) {
      throw new Error('ShutterShape is undefined');
    }
    return value;
  }

  // Shutter Left Vertical Edge
  get ShutterLeftVerticalEdge(): number | undefined {
    return this.x00181602;
  }

  get x00181602(): number | undefined {
    const value = this.dwResponse['00181602']?.Value;
    return convert(value?.[0], 0x00181602, 'number');
  }

  getShutterLeftVerticalEdge(): number {
    const value = this.x00181602;
    if (value === undefined) {
      throw new Error('ShutterLeftVerticalEdge is undefined');
    }
    return value;
  }

  // Shutter Right Vertical Edge
  get ShutterRightVerticalEdge(): number | undefined {
    return this.x00181604;
  }

  get x00181604(): number | undefined {
    const value = this.dwResponse['00181604']?.Value;
    return convert(value?.[0], 0x00181604, 'number');
  }

  getShutterRightVerticalEdge(): number {
    const value = this.x00181604;
    if (value === undefined) {
      throw new Error('ShutterRightVerticalEdge is undefined');
    }
    return value;
  }

  // Shutter Upper Horizontal Edge
  get ShutterUpperHorizontalEdge(): number | undefined {
    return this.x00181606;
  }

  get x00181606(): number | undefined {
    const value = this.dwResponse['00181606']?.Value;
    return convert(value?.[0], 0x00181606, 'number');
  }

  getShutterUpperHorizontalEdge(): number {
    const value = this.x00181606;
    if (value === undefined) {
      throw new Error('ShutterUpperHorizontalEdge is undefined');
    }
    return value;
  }

  // Shutter Lower Horizontal Edge
  get ShutterLowerHorizontalEdge(): number | undefined {
    return this.x00181608;
  }

  get x00181608(): number | undefined {
    const value = this.dwResponse['00181608']?.Value;
    return convert(value?.[0], 0x00181608, 'number');
  }

  getShutterLowerHorizontalEdge(): number {
    const value = this.x00181608;
    if (value === undefined) {
      throw new Error('ShutterLowerHorizontalEdge is undefined');
    }
    return value;
  }

  // Center of Circular Shutter
  get CenterOfCircularShutter(): Array<number | undefined> | undefined {
    return this.x00181610;
  }

  get x00181610(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181610']?.Value;
    return convert(value, 0x00181610, 'Array<number | undefined>');
  }

  getCenterOfCircularShutter(): Array<number | undefined> {
    const value = this.x00181610;
    if (value === undefined) {
      throw new Error('CenterOfCircularShutter is undefined');
    }
    return value;
  }

  // Radius of Circular Shutter
  get RadiusOfCircularShutter(): number | undefined {
    return this.x00181612;
  }

  get x00181612(): number | undefined {
    const value = this.dwResponse['00181612']?.Value;
    return convert(value?.[0], 0x00181612, 'number');
  }

  getRadiusOfCircularShutter(): number {
    const value = this.x00181612;
    if (value === undefined) {
      throw new Error('RadiusOfCircularShutter is undefined');
    }
    return value;
  }

  // Vertices of the Polygonal Shutter
  get VerticesOfThePolygonalShutter(): Array<number | undefined> | undefined {
    return this.x00181620;
  }

  get x00181620(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181620']?.Value;
    return convert(value, 0x00181620, 'Array<number | undefined>');
  }

  getVerticesOfThePolygonalShutter(): Array<number | undefined> {
    const value = this.x00181620;
    if (value === undefined) {
      throw new Error('VerticesOfThePolygonalShutter is undefined');
    }
    return value;
  }

  // Shutter Presentation Value
  get ShutterPresentationValue(): number | undefined {
    return this.x00181622;
  }

  get x00181622(): number | undefined {
    const value = this.dwResponse['00181622']?.Value;
    return convert(value?.[0], 0x00181622, 'number');
  }

  getShutterPresentationValue(): number {
    const value = this.x00181622;
    if (value === undefined) {
      throw new Error('ShutterPresentationValue is undefined');
    }
    return value;
  }

  // Shutter Overlay Group
  get ShutterOverlayGroup(): number | undefined {
    return this.x00181623;
  }

  get x00181623(): number | undefined {
    const value = this.dwResponse['00181623']?.Value;
    return convert(value?.[0], 0x00181623, 'number');
  }

  getShutterOverlayGroup(): number {
    const value = this.x00181623;
    if (value === undefined) {
      throw new Error('ShutterOverlayGroup is undefined');
    }
    return value;
  }

  // Shutter Presentation Color CIELab Value
  get ShutterPresentationColorCIELabValue(): Array<number | undefined> | undefined {
    return this.x00181624;
  }

  get x00181624(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181624']?.Value;
    return convert(value, 0x00181624, 'Array<number | undefined>');
  }

  getShutterPresentationColorCIELabValue(): Array<number | undefined> {
    const value = this.x00181624;
    if (value === undefined) {
      throw new Error('ShutterPresentationColorCIELabValue is undefined');
    }
    return value;
  }

  // Collimator Shape
  get CollimatorShape(): Array<string | undefined> | undefined {
    return this.x00181700;
  }

  get x00181700(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00181700']?.Value;
    return convert(value, 0x00181700, 'Array<string | undefined>');
  }

  getCollimatorShape(): Array<string | undefined> {
    const value = this.x00181700;
    if (value === undefined) {
      throw new Error('CollimatorShape is undefined');
    }
    return value;
  }

  // Collimator Left Vertical Edge
  get CollimatorLeftVerticalEdge(): number | undefined {
    return this.x00181702;
  }

  get x00181702(): number | undefined {
    const value = this.dwResponse['00181702']?.Value;
    return convert(value?.[0], 0x00181702, 'number');
  }

  getCollimatorLeftVerticalEdge(): number {
    const value = this.x00181702;
    if (value === undefined) {
      throw new Error('CollimatorLeftVerticalEdge is undefined');
    }
    return value;
  }

  // Collimator Right Vertical Edge
  get CollimatorRightVerticalEdge(): number | undefined {
    return this.x00181704;
  }

  get x00181704(): number | undefined {
    const value = this.dwResponse['00181704']?.Value;
    return convert(value?.[0], 0x00181704, 'number');
  }

  getCollimatorRightVerticalEdge(): number {
    const value = this.x00181704;
    if (value === undefined) {
      throw new Error('CollimatorRightVerticalEdge is undefined');
    }
    return value;
  }

  // Collimator Upper Horizontal Edge
  get CollimatorUpperHorizontalEdge(): number | undefined {
    return this.x00181706;
  }

  get x00181706(): number | undefined {
    const value = this.dwResponse['00181706']?.Value;
    return convert(value?.[0], 0x00181706, 'number');
  }

  getCollimatorUpperHorizontalEdge(): number {
    const value = this.x00181706;
    if (value === undefined) {
      throw new Error('CollimatorUpperHorizontalEdge is undefined');
    }
    return value;
  }

  // Collimator Lower Horizontal Edge
  get CollimatorLowerHorizontalEdge(): number | undefined {
    return this.x00181708;
  }

  get x00181708(): number | undefined {
    const value = this.dwResponse['00181708']?.Value;
    return convert(value?.[0], 0x00181708, 'number');
  }

  getCollimatorLowerHorizontalEdge(): number {
    const value = this.x00181708;
    if (value === undefined) {
      throw new Error('CollimatorLowerHorizontalEdge is undefined');
    }
    return value;
  }

  // Center of Circular Collimator
  get CenterOfCircularCollimator(): Array<number | undefined> | undefined {
    return this.x00181710;
  }

  get x00181710(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181710']?.Value;
    return convert(value, 0x00181710, 'Array<number | undefined>');
  }

  getCenterOfCircularCollimator(): Array<number | undefined> {
    const value = this.x00181710;
    if (value === undefined) {
      throw new Error('CenterOfCircularCollimator is undefined');
    }
    return value;
  }

  // Radius of Circular Collimator
  get RadiusOfCircularCollimator(): number | undefined {
    return this.x00181712;
  }

  get x00181712(): number | undefined {
    const value = this.dwResponse['00181712']?.Value;
    return convert(value?.[0], 0x00181712, 'number');
  }

  getRadiusOfCircularCollimator(): number {
    const value = this.x00181712;
    if (value === undefined) {
      throw new Error('RadiusOfCircularCollimator is undefined');
    }
    return value;
  }

  // Vertices of the Polygonal Collimator
  get VerticesOfThePolygonalCollimator(): Array<number | undefined> | undefined {
    return this.x00181720;
  }

  get x00181720(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00181720']?.Value;
    return convert(value, 0x00181720, 'Array<number | undefined>');
  }

  getVerticesOfThePolygonalCollimator(): Array<number | undefined> {
    const value = this.x00181720;
    if (value === undefined) {
      throw new Error('VerticesOfThePolygonalCollimator is undefined');
    }
    return value;
  }

  // Acquisition Time Synchronized
  get AcquisitionTimeSynchronized(): string | undefined {
    return this.x00181800;
  }

  get x00181800(): string | undefined {
    const value = this.dwResponse['00181800']?.Value;
    return convert(value?.[0], 0x00181800, 'string');
  }

  getAcquisitionTimeSynchronized(): string {
    const value = this.x00181800;
    if (value === undefined) {
      throw new Error('AcquisitionTimeSynchronized is undefined');
    }
    return value;
  }

  // Time Source
  get TimeSource(): string | undefined {
    return this.x00181801;
  }

  get x00181801(): string | undefined {
    const value = this.dwResponse['00181801']?.Value;
    return convert(value?.[0], 0x00181801, 'string');
  }

  getTimeSource(): string {
    const value = this.x00181801;
    if (value === undefined) {
      throw new Error('TimeSource is undefined');
    }
    return value;
  }

  // Time Distribution Protocol
  get TimeDistributionProtocol(): string | undefined {
    return this.x00181802;
  }

  get x00181802(): string | undefined {
    const value = this.dwResponse['00181802']?.Value;
    return convert(value?.[0], 0x00181802, 'string');
  }

  getTimeDistributionProtocol(): string {
    const value = this.x00181802;
    if (value === undefined) {
      throw new Error('TimeDistributionProtocol is undefined');
    }
    return value;
  }

  // NTP Source Address
  get NTPSourceAddress(): string | undefined {
    return this.x00181803;
  }

  get x00181803(): string | undefined {
    const value = this.dwResponse['00181803']?.Value;
    return convert(value?.[0], 0x00181803, 'string');
  }

  getNTPSourceAddress(): string {
    const value = this.x00181803;
    if (value === undefined) {
      throw new Error('NTPSourceAddress is undefined');
    }
    return value;
  }

  // Page Number Vector
  get PageNumberVector(): Array<number | undefined> | undefined {
    return this.x00182001;
  }

  get x00182001(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00182001']?.Value;
    return convert(value, 0x00182001, 'Array<number | undefined>');
  }

  getPageNumberVector(): Array<number | undefined> {
    const value = this.x00182001;
    if (value === undefined) {
      throw new Error('PageNumberVector is undefined');
    }
    return value;
  }

  // Frame Label Vector
  get FrameLabelVector(): Array<string | undefined> | undefined {
    return this.x00182002;
  }

  get x00182002(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00182002']?.Value;
    return convert(value, 0x00182002, 'Array<string | undefined>');
  }

  getFrameLabelVector(): Array<string | undefined> {
    const value = this.x00182002;
    if (value === undefined) {
      throw new Error('FrameLabelVector is undefined');
    }
    return value;
  }

  // Frame Primary Angle Vector
  get FramePrimaryAngleVector(): Array<number | undefined> | undefined {
    return this.x00182003;
  }

  get x00182003(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00182003']?.Value;
    return convert(value, 0x00182003, 'Array<number | undefined>');
  }

  getFramePrimaryAngleVector(): Array<number | undefined> {
    const value = this.x00182003;
    if (value === undefined) {
      throw new Error('FramePrimaryAngleVector is undefined');
    }
    return value;
  }

  // Frame Secondary Angle Vector
  get FrameSecondaryAngleVector(): Array<number | undefined> | undefined {
    return this.x00182004;
  }

  get x00182004(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00182004']?.Value;
    return convert(value, 0x00182004, 'Array<number | undefined>');
  }

  getFrameSecondaryAngleVector(): Array<number | undefined> {
    const value = this.x00182004;
    if (value === undefined) {
      throw new Error('FrameSecondaryAngleVector is undefined');
    }
    return value;
  }

  // Slice Location Vector
  get SliceLocationVector(): Array<number | undefined> | undefined {
    return this.x00182005;
  }

  get x00182005(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00182005']?.Value;
    return convert(value, 0x00182005, 'Array<number | undefined>');
  }

  getSliceLocationVector(): Array<number | undefined> {
    const value = this.x00182005;
    if (value === undefined) {
      throw new Error('SliceLocationVector is undefined');
    }
    return value;
  }

  // Display Window Label Vector
  get DisplayWindowLabelVector(): Array<string | undefined> | undefined {
    return this.x00182006;
  }

  get x00182006(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00182006']?.Value;
    return convert(value, 0x00182006, 'Array<string | undefined>');
  }

  getDisplayWindowLabelVector(): Array<string | undefined> {
    const value = this.x00182006;
    if (value === undefined) {
      throw new Error('DisplayWindowLabelVector is undefined');
    }
    return value;
  }

  // Nominal Scanned Pixel Spacing
  get NominalScannedPixelSpacing(): Array<number | undefined> | undefined {
    return this.x00182010;
  }

  get x00182010(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00182010']?.Value;
    return convert(value, 0x00182010, 'Array<number | undefined>');
  }

  getNominalScannedPixelSpacing(): Array<number | undefined> {
    const value = this.x00182010;
    if (value === undefined) {
      throw new Error('NominalScannedPixelSpacing is undefined');
    }
    return value;
  }

  // Digitizing Device Transport Direction
  get DigitizingDeviceTransportDirection(): string | undefined {
    return this.x00182020;
  }

  get x00182020(): string | undefined {
    const value = this.dwResponse['00182020']?.Value;
    return convert(value?.[0], 0x00182020, 'string');
  }

  getDigitizingDeviceTransportDirection(): string {
    const value = this.x00182020;
    if (value === undefined) {
      throw new Error('DigitizingDeviceTransportDirection is undefined');
    }
    return value;
  }

  // Rotation of Scanned Film
  get RotationOfScannedFilm(): number | undefined {
    return this.x00182030;
  }

  get x00182030(): number | undefined {
    const value = this.dwResponse['00182030']?.Value;
    return convert(value?.[0], 0x00182030, 'number');
  }

  getRotationOfScannedFilm(): number {
    const value = this.x00182030;
    if (value === undefined) {
      throw new Error('RotationOfScannedFilm is undefined');
    }
    return value;
  }

  // Biopsy Target Sequence
  get BiopsyTargetSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00182041;
  }

  get x00182041(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00182041']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBiopsyTargetSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00182041;
    if (value === undefined) {
      throw new Error('BiopsyTargetSequence is undefined');
    }
    return value;
  }

  // Target UID
  get TargetUID(): string | undefined {
    return this.x00182042;
  }

  get x00182042(): string | undefined {
    const value = this.dwResponse['00182042']?.Value;
    return convert(value?.[0], 0x00182042, 'string');
  }

  getTargetUID(): string {
    const value = this.x00182042;
    if (value === undefined) {
      throw new Error('TargetUID is undefined');
    }
    return value;
  }

  // Localizing Cursor Position
  get LocalizingCursorPosition(): Array<number | undefined> | undefined {
    return this.x00182043;
  }

  get x00182043(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00182043']?.Value;
    return convert(value, 0x00182043, 'Array<number | undefined>');
  }

  getLocalizingCursorPosition(): Array<number | undefined> {
    const value = this.x00182043;
    if (value === undefined) {
      throw new Error('LocalizingCursorPosition is undefined');
    }
    return value;
  }

  // Calculated Target Position
  get CalculatedTargetPosition(): Array<number | undefined> | undefined {
    return this.x00182044;
  }

  get x00182044(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00182044']?.Value;
    return convert(value, 0x00182044, 'Array<number | undefined>');
  }

  getCalculatedTargetPosition(): Array<number | undefined> {
    const value = this.x00182044;
    if (value === undefined) {
      throw new Error('CalculatedTargetPosition is undefined');
    }
    return value;
  }

  // Target Label
  get TargetLabel(): string | undefined {
    return this.x00182045;
  }

  get x00182045(): string | undefined {
    const value = this.dwResponse['00182045']?.Value;
    return convert(value?.[0], 0x00182045, 'string');
  }

  getTargetLabel(): string {
    const value = this.x00182045;
    if (value === undefined) {
      throw new Error('TargetLabel is undefined');
    }
    return value;
  }

  // Displayed Z Value
  get DisplayedZValue(): number | undefined {
    return this.x00182046;
  }

  get x00182046(): number | undefined {
    const value = this.dwResponse['00182046']?.Value;
    return convert(value?.[0], 0x00182046, 'number');
  }

  getDisplayedZValue(): number {
    const value = this.x00182046;
    if (value === undefined) {
      throw new Error('DisplayedZValue is undefined');
    }
    return value;
  }

  // IVUS Acquisition
  get IVUSAcquisition(): string | undefined {
    return this.x00183100;
  }

  get x00183100(): string | undefined {
    const value = this.dwResponse['00183100']?.Value;
    return convert(value?.[0], 0x00183100, 'string');
  }

  getIVUSAcquisition(): string {
    const value = this.x00183100;
    if (value === undefined) {
      throw new Error('IVUSAcquisition is undefined');
    }
    return value;
  }

  // IVUS Pullback Rate
  get IVUSPullbackRate(): number | undefined {
    return this.x00183101;
  }

  get x00183101(): number | undefined {
    const value = this.dwResponse['00183101']?.Value;
    return convert(value?.[0], 0x00183101, 'number');
  }

  getIVUSPullbackRate(): number {
    const value = this.x00183101;
    if (value === undefined) {
      throw new Error('IVUSPullbackRate is undefined');
    }
    return value;
  }

  // IVUS Gated Rate
  get IVUSGatedRate(): number | undefined {
    return this.x00183102;
  }

  get x00183102(): number | undefined {
    const value = this.dwResponse['00183102']?.Value;
    return convert(value?.[0], 0x00183102, 'number');
  }

  getIVUSGatedRate(): number {
    const value = this.x00183102;
    if (value === undefined) {
      throw new Error('IVUSGatedRate is undefined');
    }
    return value;
  }

  // IVUS Pullback Start Frame Number
  get IVUSPullbackStartFrameNumber(): number | undefined {
    return this.x00183103;
  }

  get x00183103(): number | undefined {
    const value = this.dwResponse['00183103']?.Value;
    return convert(value?.[0], 0x00183103, 'number');
  }

  getIVUSPullbackStartFrameNumber(): number {
    const value = this.x00183103;
    if (value === undefined) {
      throw new Error('IVUSPullbackStartFrameNumber is undefined');
    }
    return value;
  }

  // IVUS Pullback Stop Frame Number
  get IVUSPullbackStopFrameNumber(): number | undefined {
    return this.x00183104;
  }

  get x00183104(): number | undefined {
    const value = this.dwResponse['00183104']?.Value;
    return convert(value?.[0], 0x00183104, 'number');
  }

  getIVUSPullbackStopFrameNumber(): number {
    const value = this.x00183104;
    if (value === undefined) {
      throw new Error('IVUSPullbackStopFrameNumber is undefined');
    }
    return value;
  }

  // Lesion Number
  get LesionNumber(): Array<number | undefined> | undefined {
    return this.x00183105;
  }

  get x00183105(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00183105']?.Value;
    return convert(value, 0x00183105, 'Array<number | undefined>');
  }

  getLesionNumber(): Array<number | undefined> {
    const value = this.x00183105;
    if (value === undefined) {
      throw new Error('LesionNumber is undefined');
    }
    return value;
  }

  // Output Power
  get OutputPower(): Array<string | undefined> | undefined {
    return this.x00185000;
  }

  get x00185000(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00185000']?.Value;
    return convert(value, 0x00185000, 'Array<string | undefined>');
  }

  getOutputPower(): Array<string | undefined> {
    const value = this.x00185000;
    if (value === undefined) {
      throw new Error('OutputPower is undefined');
    }
    return value;
  }

  // Transducer Data
  get TransducerData(): Array<string | undefined> | undefined {
    return this.x00185010;
  }

  get x00185010(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00185010']?.Value;
    return convert(value, 0x00185010, 'Array<string | undefined>');
  }

  getTransducerData(): Array<string | undefined> {
    const value = this.x00185010;
    if (value === undefined) {
      throw new Error('TransducerData is undefined');
    }
    return value;
  }

  // Focus Depth
  get FocusDepth(): number | undefined {
    return this.x00185012;
  }

  get x00185012(): number | undefined {
    const value = this.dwResponse['00185012']?.Value;
    return convert(value?.[0], 0x00185012, 'number');
  }

  getFocusDepth(): number {
    const value = this.x00185012;
    if (value === undefined) {
      throw new Error('FocusDepth is undefined');
    }
    return value;
  }

  // Processing Function
  get ProcessingFunction(): string | undefined {
    return this.x00185020;
  }

  get x00185020(): string | undefined {
    const value = this.dwResponse['00185020']?.Value;
    return convert(value?.[0], 0x00185020, 'string');
  }

  getProcessingFunction(): string {
    const value = this.x00185020;
    if (value === undefined) {
      throw new Error('ProcessingFunction is undefined');
    }
    return value;
  }

  // Postprocessing Function
  get PostprocessingFunction(): string | undefined {
    return this.x00185021;
  }

  get x00185021(): string | undefined {
    const value = this.dwResponse['00185021']?.Value;
    return convert(value?.[0], 0x00185021, 'string');
  }

  getPostprocessingFunction(): string {
    const value = this.x00185021;
    if (value === undefined) {
      throw new Error('PostprocessingFunction is undefined');
    }
    return value;
  }

  // Mechanical Index
  get MechanicalIndex(): number | undefined {
    return this.x00185022;
  }

  get x00185022(): number | undefined {
    const value = this.dwResponse['00185022']?.Value;
    return convert(value?.[0], 0x00185022, 'number');
  }

  getMechanicalIndex(): number {
    const value = this.x00185022;
    if (value === undefined) {
      throw new Error('MechanicalIndex is undefined');
    }
    return value;
  }

  // Bone Thermal Index
  get BoneThermalIndex(): number | undefined {
    return this.x00185024;
  }

  get x00185024(): number | undefined {
    const value = this.dwResponse['00185024']?.Value;
    return convert(value?.[0], 0x00185024, 'number');
  }

  getBoneThermalIndex(): number {
    const value = this.x00185024;
    if (value === undefined) {
      throw new Error('BoneThermalIndex is undefined');
    }
    return value;
  }

  // Cranial Thermal Index
  get CranialThermalIndex(): number | undefined {
    return this.x00185026;
  }

  get x00185026(): number | undefined {
    const value = this.dwResponse['00185026']?.Value;
    return convert(value?.[0], 0x00185026, 'number');
  }

  getCranialThermalIndex(): number {
    const value = this.x00185026;
    if (value === undefined) {
      throw new Error('CranialThermalIndex is undefined');
    }
    return value;
  }

  // Soft Tissue Thermal Index
  get SoftTissueThermalIndex(): number | undefined {
    return this.x00185027;
  }

  get x00185027(): number | undefined {
    const value = this.dwResponse['00185027']?.Value;
    return convert(value?.[0], 0x00185027, 'number');
  }

  getSoftTissueThermalIndex(): number {
    const value = this.x00185027;
    if (value === undefined) {
      throw new Error('SoftTissueThermalIndex is undefined');
    }
    return value;
  }

  // Soft Tissue-focus Thermal Index
  get SoftTissueFocusThermalIndex(): number | undefined {
    return this.x00185028;
  }

  get x00185028(): number | undefined {
    const value = this.dwResponse['00185028']?.Value;
    return convert(value?.[0], 0x00185028, 'number');
  }

  getSoftTissueFocusThermalIndex(): number {
    const value = this.x00185028;
    if (value === undefined) {
      throw new Error('SoftTissueFocusThermalIndex is undefined');
    }
    return value;
  }

  // Soft Tissue-surface Thermal Index
  get SoftTissueSurfaceThermalIndex(): number | undefined {
    return this.x00185029;
  }

  get x00185029(): number | undefined {
    const value = this.dwResponse['00185029']?.Value;
    return convert(value?.[0], 0x00185029, 'number');
  }

  getSoftTissueSurfaceThermalIndex(): number {
    const value = this.x00185029;
    if (value === undefined) {
      throw new Error('SoftTissueSurfaceThermalIndex is undefined');
    }
    return value;
  }

  // Dynamic Range
  get DynamicRange(): number | undefined {
    return this.x00185030;
  }

  get x00185030(): number | undefined {
    const value = this.dwResponse['00185030']?.Value;
    return convert(value?.[0], 0x00185030, 'number');
  }

  getDynamicRange(): number {
    const value = this.x00185030;
    if (value === undefined) {
      throw new Error('DynamicRange is undefined');
    }
    return value;
  }

  // Total Gain
  get TotalGain(): number | undefined {
    return this.x00185040;
  }

  get x00185040(): number | undefined {
    const value = this.dwResponse['00185040']?.Value;
    return convert(value?.[0], 0x00185040, 'number');
  }

  getTotalGain(): number {
    const value = this.x00185040;
    if (value === undefined) {
      throw new Error('TotalGain is undefined');
    }
    return value;
  }

  // Depth of Scan Field
  get DepthOfScanField(): number | undefined {
    return this.x00185050;
  }

  get x00185050(): number | undefined {
    const value = this.dwResponse['00185050']?.Value;
    return convert(value?.[0], 0x00185050, 'number');
  }

  getDepthOfScanField(): number {
    const value = this.x00185050;
    if (value === undefined) {
      throw new Error('DepthOfScanField is undefined');
    }
    return value;
  }

  // Patient Position
  get PatientPosition(): string | undefined {
    return this.x00185100;
  }

  get x00185100(): string | undefined {
    const value = this.dwResponse['00185100']?.Value;
    return convert(value?.[0], 0x00185100, 'string');
  }

  getPatientPosition(): string {
    const value = this.x00185100;
    if (value === undefined) {
      throw new Error('PatientPosition is undefined');
    }
    return value;
  }

  // View Position
  get ViewPosition(): string | undefined {
    return this.x00185101;
  }

  get x00185101(): string | undefined {
    const value = this.dwResponse['00185101']?.Value;
    return convert(value?.[0], 0x00185101, 'string');
  }

  getViewPosition(): string {
    const value = this.x00185101;
    if (value === undefined) {
      throw new Error('ViewPosition is undefined');
    }
    return value;
  }

  // Projection Eponymous Name Code Sequence
  get ProjectionEponymousNameCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00185104;
  }

  get x00185104(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00185104']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getProjectionEponymousNameCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00185104;
    if (value === undefined) {
      throw new Error('ProjectionEponymousNameCodeSequence is undefined');
    }
    return value;
  }

  // Image Transformation Matrix
  get ImageTransformationMatrix(): Array<number | undefined> | undefined {
    return this.x00185210;
  }

  get x00185210(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00185210']?.Value;
    return convert(value, 0x00185210, 'Array<number | undefined>');
  }

  getImageTransformationMatrix(): Array<number | undefined> {
    const value = this.x00185210;
    if (value === undefined) {
      throw new Error('ImageTransformationMatrix is undefined');
    }
    return value;
  }

  // Image Translation Vector
  get ImageTranslationVector(): Array<number | undefined> | undefined {
    return this.x00185212;
  }

  get x00185212(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00185212']?.Value;
    return convert(value, 0x00185212, 'Array<number | undefined>');
  }

  getImageTranslationVector(): Array<number | undefined> {
    const value = this.x00185212;
    if (value === undefined) {
      throw new Error('ImageTranslationVector is undefined');
    }
    return value;
  }

  // Sensitivity
  get Sensitivity(): number | undefined {
    return this.x00186000;
  }

  get x00186000(): number | undefined {
    const value = this.dwResponse['00186000']?.Value;
    return convert(value?.[0], 0x00186000, 'number');
  }

  getSensitivity(): number {
    const value = this.x00186000;
    if (value === undefined) {
      throw new Error('Sensitivity is undefined');
    }
    return value;
  }

  // Sequence of Ultrasound Regions
  get SequenceOfUltrasoundRegions(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00186011;
  }

  get x00186011(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00186011']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSequenceOfUltrasoundRegions(): Array<Partial<Dataset> | undefined> {
    const value = this.x00186011;
    if (value === undefined) {
      throw new Error('SequenceOfUltrasoundRegions is undefined');
    }
    return value;
  }

  // Region Spatial Format
  get RegionSpatialFormat(): number | undefined {
    return this.x00186012;
  }

  get x00186012(): number | undefined {
    const value = this.dwResponse['00186012']?.Value;
    return convert(value?.[0], 0x00186012, 'number');
  }

  getRegionSpatialFormat(): number {
    const value = this.x00186012;
    if (value === undefined) {
      throw new Error('RegionSpatialFormat is undefined');
    }
    return value;
  }

  // Region Data Type
  get RegionDataType(): number | undefined {
    return this.x00186014;
  }

  get x00186014(): number | undefined {
    const value = this.dwResponse['00186014']?.Value;
    return convert(value?.[0], 0x00186014, 'number');
  }

  getRegionDataType(): number {
    const value = this.x00186014;
    if (value === undefined) {
      throw new Error('RegionDataType is undefined');
    }
    return value;
  }

  // Region Flags
  get RegionFlags(): number | undefined {
    return this.x00186016;
  }

  get x00186016(): number | undefined {
    const value = this.dwResponse['00186016']?.Value;
    return convert(value?.[0], 0x00186016, 'number');
  }

  getRegionFlags(): number {
    const value = this.x00186016;
    if (value === undefined) {
      throw new Error('RegionFlags is undefined');
    }
    return value;
  }

  // Region Location Min X0
  get RegionLocationMinX0(): number | undefined {
    return this.x00186018;
  }

  get x00186018(): number | undefined {
    const value = this.dwResponse['00186018']?.Value;
    return convert(value?.[0], 0x00186018, 'number');
  }

  getRegionLocationMinX0(): number {
    const value = this.x00186018;
    if (value === undefined) {
      throw new Error('RegionLocationMinX0 is undefined');
    }
    return value;
  }

  // Region Location Min Y0
  get RegionLocationMinY0(): number | undefined {
    return this.x0018601a;
  }

  get x0018601a(): number | undefined {
    const value = this.dwResponse['0018601A']?.Value;
    return convert(value?.[0], 0x0018601a, 'number');
  }

  getRegionLocationMinY0(): number {
    const value = this.x0018601a;
    if (value === undefined) {
      throw new Error('RegionLocationMinY0 is undefined');
    }
    return value;
  }

  // Region Location Max X1
  get RegionLocationMaxX1(): number | undefined {
    return this.x0018601c;
  }

  get x0018601c(): number | undefined {
    const value = this.dwResponse['0018601C']?.Value;
    return convert(value?.[0], 0x0018601c, 'number');
  }

  getRegionLocationMaxX1(): number {
    const value = this.x0018601c;
    if (value === undefined) {
      throw new Error('RegionLocationMaxX1 is undefined');
    }
    return value;
  }

  // Region Location Max Y1
  get RegionLocationMaxY1(): number | undefined {
    return this.x0018601e;
  }

  get x0018601e(): number | undefined {
    const value = this.dwResponse['0018601E']?.Value;
    return convert(value?.[0], 0x0018601e, 'number');
  }

  getRegionLocationMaxY1(): number {
    const value = this.x0018601e;
    if (value === undefined) {
      throw new Error('RegionLocationMaxY1 is undefined');
    }
    return value;
  }

  // Reference Pixel X0
  get ReferencePixelX0(): number | undefined {
    return this.x00186020;
  }

  get x00186020(): number | undefined {
    const value = this.dwResponse['00186020']?.Value;
    return convert(value?.[0], 0x00186020, 'number');
  }

  getReferencePixelX0(): number {
    const value = this.x00186020;
    if (value === undefined) {
      throw new Error('ReferencePixelX0 is undefined');
    }
    return value;
  }

  // Reference Pixel Y0
  get ReferencePixelY0(): number | undefined {
    return this.x00186022;
  }

  get x00186022(): number | undefined {
    const value = this.dwResponse['00186022']?.Value;
    return convert(value?.[0], 0x00186022, 'number');
  }

  getReferencePixelY0(): number {
    const value = this.x00186022;
    if (value === undefined) {
      throw new Error('ReferencePixelY0 is undefined');
    }
    return value;
  }

  // Physical Units X Direction
  get PhysicalUnitsXDirection(): number | undefined {
    return this.x00186024;
  }

  get x00186024(): number | undefined {
    const value = this.dwResponse['00186024']?.Value;
    return convert(value?.[0], 0x00186024, 'number');
  }

  getPhysicalUnitsXDirection(): number {
    const value = this.x00186024;
    if (value === undefined) {
      throw new Error('PhysicalUnitsXDirection is undefined');
    }
    return value;
  }

  // Physical Units Y Direction
  get PhysicalUnitsYDirection(): number | undefined {
    return this.x00186026;
  }

  get x00186026(): number | undefined {
    const value = this.dwResponse['00186026']?.Value;
    return convert(value?.[0], 0x00186026, 'number');
  }

  getPhysicalUnitsYDirection(): number {
    const value = this.x00186026;
    if (value === undefined) {
      throw new Error('PhysicalUnitsYDirection is undefined');
    }
    return value;
  }

  // Reference Pixel Physical Value X
  get ReferencePixelPhysicalValueX(): number | undefined {
    return this.x00186028;
  }

  get x00186028(): number | undefined {
    const value = this.dwResponse['00186028']?.Value;
    return convert(value?.[0], 0x00186028, 'number');
  }

  getReferencePixelPhysicalValueX(): number {
    const value = this.x00186028;
    if (value === undefined) {
      throw new Error('ReferencePixelPhysicalValueX is undefined');
    }
    return value;
  }

  // Reference Pixel Physical Value Y
  get ReferencePixelPhysicalValueY(): number | undefined {
    return this.x0018602a;
  }

  get x0018602a(): number | undefined {
    const value = this.dwResponse['0018602A']?.Value;
    return convert(value?.[0], 0x0018602a, 'number');
  }

  getReferencePixelPhysicalValueY(): number {
    const value = this.x0018602a;
    if (value === undefined) {
      throw new Error('ReferencePixelPhysicalValueY is undefined');
    }
    return value;
  }

  // Physical Delta X
  get PhysicalDeltaX(): number | undefined {
    return this.x0018602c;
  }

  get x0018602c(): number | undefined {
    const value = this.dwResponse['0018602C']?.Value;
    return convert(value?.[0], 0x0018602c, 'number');
  }

  getPhysicalDeltaX(): number {
    const value = this.x0018602c;
    if (value === undefined) {
      throw new Error('PhysicalDeltaX is undefined');
    }
    return value;
  }

  // Physical Delta Y
  get PhysicalDeltaY(): number | undefined {
    return this.x0018602e;
  }

  get x0018602e(): number | undefined {
    const value = this.dwResponse['0018602E']?.Value;
    return convert(value?.[0], 0x0018602e, 'number');
  }

  getPhysicalDeltaY(): number {
    const value = this.x0018602e;
    if (value === undefined) {
      throw new Error('PhysicalDeltaY is undefined');
    }
    return value;
  }

  // Transducer Frequency
  get TransducerFrequency(): number | undefined {
    return this.x00186030;
  }

  get x00186030(): number | undefined {
    const value = this.dwResponse['00186030']?.Value;
    return convert(value?.[0], 0x00186030, 'number');
  }

  getTransducerFrequency(): number {
    const value = this.x00186030;
    if (value === undefined) {
      throw new Error('TransducerFrequency is undefined');
    }
    return value;
  }

  // Transducer Type
  get TransducerType(): string | undefined {
    return this.x00186031;
  }

  get x00186031(): string | undefined {
    const value = this.dwResponse['00186031']?.Value;
    return convert(value?.[0], 0x00186031, 'string');
  }

  getTransducerType(): string {
    const value = this.x00186031;
    if (value === undefined) {
      throw new Error('TransducerType is undefined');
    }
    return value;
  }

  // Pulse Repetition Frequency
  get PulseRepetitionFrequency(): number | undefined {
    return this.x00186032;
  }

  get x00186032(): number | undefined {
    const value = this.dwResponse['00186032']?.Value;
    return convert(value?.[0], 0x00186032, 'number');
  }

  getPulseRepetitionFrequency(): number {
    const value = this.x00186032;
    if (value === undefined) {
      throw new Error('PulseRepetitionFrequency is undefined');
    }
    return value;
  }

  // Doppler Correction Angle
  get DopplerCorrectionAngle(): number | undefined {
    return this.x00186034;
  }

  get x00186034(): number | undefined {
    const value = this.dwResponse['00186034']?.Value;
    return convert(value?.[0], 0x00186034, 'number');
  }

  getDopplerCorrectionAngle(): number {
    const value = this.x00186034;
    if (value === undefined) {
      throw new Error('DopplerCorrectionAngle is undefined');
    }
    return value;
  }

  // Steering Angle
  get SteeringAngle(): number | undefined {
    return this.x00186036;
  }

  get x00186036(): number | undefined {
    const value = this.dwResponse['00186036']?.Value;
    return convert(value?.[0], 0x00186036, 'number');
  }

  getSteeringAngle(): number {
    const value = this.x00186036;
    if (value === undefined) {
      throw new Error('SteeringAngle is undefined');
    }
    return value;
  }

  // Doppler Sample Volume X Position (Retired)
  get DopplerSampleVolumeXPositionRetired(): number | undefined {
    return this.x00186038;
  }

  get x00186038(): number | undefined {
    const value = this.dwResponse['00186038']?.Value;
    return convert(value?.[0], 0x00186038, 'number');
  }

  getDopplerSampleVolumeXPositionRetired(): number {
    const value = this.x00186038;
    if (value === undefined) {
      throw new Error('DopplerSampleVolumeXPositionRetired is undefined');
    }
    return value;
  }

  // Doppler Sample Volume X Position
  get DopplerSampleVolumeXPosition(): number | undefined {
    return this.x00186039;
  }

  get x00186039(): number | undefined {
    const value = this.dwResponse['00186039']?.Value;
    return convert(value?.[0], 0x00186039, 'number');
  }

  getDopplerSampleVolumeXPosition(): number {
    const value = this.x00186039;
    if (value === undefined) {
      throw new Error('DopplerSampleVolumeXPosition is undefined');
    }
    return value;
  }

  // Doppler Sample Volume Y Position (Retired)
  get DopplerSampleVolumeYPositionRetired(): number | undefined {
    return this.x0018603a;
  }

  get x0018603a(): number | undefined {
    const value = this.dwResponse['0018603A']?.Value;
    return convert(value?.[0], 0x0018603a, 'number');
  }

  getDopplerSampleVolumeYPositionRetired(): number {
    const value = this.x0018603a;
    if (value === undefined) {
      throw new Error('DopplerSampleVolumeYPositionRetired is undefined');
    }
    return value;
  }

  // Doppler Sample Volume Y Position
  get DopplerSampleVolumeYPosition(): number | undefined {
    return this.x0018603b;
  }

  get x0018603b(): number | undefined {
    const value = this.dwResponse['0018603B']?.Value;
    return convert(value?.[0], 0x0018603b, 'number');
  }

  getDopplerSampleVolumeYPosition(): number {
    const value = this.x0018603b;
    if (value === undefined) {
      throw new Error('DopplerSampleVolumeYPosition is undefined');
    }
    return value;
  }

  // TM-Line Position X0 (Retired)
  get TMLinePositionX0Retired(): number | undefined {
    return this.x0018603c;
  }

  get x0018603c(): number | undefined {
    const value = this.dwResponse['0018603C']?.Value;
    return convert(value?.[0], 0x0018603c, 'number');
  }

  getTMLinePositionX0Retired(): number {
    const value = this.x0018603c;
    if (value === undefined) {
      throw new Error('TMLinePositionX0Retired is undefined');
    }
    return value;
  }

  // TM-Line Position X0
  get TMLinePositionX0(): number | undefined {
    return this.x0018603d;
  }

  get x0018603d(): number | undefined {
    const value = this.dwResponse['0018603D']?.Value;
    return convert(value?.[0], 0x0018603d, 'number');
  }

  getTMLinePositionX0(): number {
    const value = this.x0018603d;
    if (value === undefined) {
      throw new Error('TMLinePositionX0 is undefined');
    }
    return value;
  }

  // TM-Line Position Y0 (Retired)
  get TMLinePositionY0Retired(): number | undefined {
    return this.x0018603e;
  }

  get x0018603e(): number | undefined {
    const value = this.dwResponse['0018603E']?.Value;
    return convert(value?.[0], 0x0018603e, 'number');
  }

  getTMLinePositionY0Retired(): number {
    const value = this.x0018603e;
    if (value === undefined) {
      throw new Error('TMLinePositionY0Retired is undefined');
    }
    return value;
  }

  // TM-Line Position Y0
  get TMLinePositionY0(): number | undefined {
    return this.x0018603f;
  }

  get x0018603f(): number | undefined {
    const value = this.dwResponse['0018603F']?.Value;
    return convert(value?.[0], 0x0018603f, 'number');
  }

  getTMLinePositionY0(): number {
    const value = this.x0018603f;
    if (value === undefined) {
      throw new Error('TMLinePositionY0 is undefined');
    }
    return value;
  }

  // TM-Line Position X1 (Retired)
  get TMLinePositionX1Retired(): number | undefined {
    return this.x00186040;
  }

  get x00186040(): number | undefined {
    const value = this.dwResponse['00186040']?.Value;
    return convert(value?.[0], 0x00186040, 'number');
  }

  getTMLinePositionX1Retired(): number {
    const value = this.x00186040;
    if (value === undefined) {
      throw new Error('TMLinePositionX1Retired is undefined');
    }
    return value;
  }

  // TM-Line Position X1
  get TMLinePositionX1(): number | undefined {
    return this.x00186041;
  }

  get x00186041(): number | undefined {
    const value = this.dwResponse['00186041']?.Value;
    return convert(value?.[0], 0x00186041, 'number');
  }

  getTMLinePositionX1(): number {
    const value = this.x00186041;
    if (value === undefined) {
      throw new Error('TMLinePositionX1 is undefined');
    }
    return value;
  }

  // TM-Line Position Y1 (Retired)
  get TMLinePositionY1Retired(): number | undefined {
    return this.x00186042;
  }

  get x00186042(): number | undefined {
    const value = this.dwResponse['00186042']?.Value;
    return convert(value?.[0], 0x00186042, 'number');
  }

  getTMLinePositionY1Retired(): number {
    const value = this.x00186042;
    if (value === undefined) {
      throw new Error('TMLinePositionY1Retired is undefined');
    }
    return value;
  }

  // TM-Line Position Y1
  get TMLinePositionY1(): number | undefined {
    return this.x00186043;
  }

  get x00186043(): number | undefined {
    const value = this.dwResponse['00186043']?.Value;
    return convert(value?.[0], 0x00186043, 'number');
  }

  getTMLinePositionY1(): number {
    const value = this.x00186043;
    if (value === undefined) {
      throw new Error('TMLinePositionY1 is undefined');
    }
    return value;
  }

  // Pixel Component Organization
  get PixelComponentOrganization(): number | undefined {
    return this.x00186044;
  }

  get x00186044(): number | undefined {
    const value = this.dwResponse['00186044']?.Value;
    return convert(value?.[0], 0x00186044, 'number');
  }

  getPixelComponentOrganization(): number {
    const value = this.x00186044;
    if (value === undefined) {
      throw new Error('PixelComponentOrganization is undefined');
    }
    return value;
  }

  // Pixel Component Mask
  get PixelComponentMask(): number | undefined {
    return this.x00186046;
  }

  get x00186046(): number | undefined {
    const value = this.dwResponse['00186046']?.Value;
    return convert(value?.[0], 0x00186046, 'number');
  }

  getPixelComponentMask(): number {
    const value = this.x00186046;
    if (value === undefined) {
      throw new Error('PixelComponentMask is undefined');
    }
    return value;
  }

  // Pixel Component Range Start
  get PixelComponentRangeStart(): number | undefined {
    return this.x00186048;
  }

  get x00186048(): number | undefined {
    const value = this.dwResponse['00186048']?.Value;
    return convert(value?.[0], 0x00186048, 'number');
  }

  getPixelComponentRangeStart(): number {
    const value = this.x00186048;
    if (value === undefined) {
      throw new Error('PixelComponentRangeStart is undefined');
    }
    return value;
  }

  // Pixel Component Range Stop
  get PixelComponentRangeStop(): number | undefined {
    return this.x0018604a;
  }

  get x0018604a(): number | undefined {
    const value = this.dwResponse['0018604A']?.Value;
    return convert(value?.[0], 0x0018604a, 'number');
  }

  getPixelComponentRangeStop(): number {
    const value = this.x0018604a;
    if (value === undefined) {
      throw new Error('PixelComponentRangeStop is undefined');
    }
    return value;
  }

  // Pixel Component Physical Units
  get PixelComponentPhysicalUnits(): number | undefined {
    return this.x0018604c;
  }

  get x0018604c(): number | undefined {
    const value = this.dwResponse['0018604C']?.Value;
    return convert(value?.[0], 0x0018604c, 'number');
  }

  getPixelComponentPhysicalUnits(): number {
    const value = this.x0018604c;
    if (value === undefined) {
      throw new Error('PixelComponentPhysicalUnits is undefined');
    }
    return value;
  }

  // Pixel Component Data Type
  get PixelComponentDataType(): number | undefined {
    return this.x0018604e;
  }

  get x0018604e(): number | undefined {
    const value = this.dwResponse['0018604E']?.Value;
    return convert(value?.[0], 0x0018604e, 'number');
  }

  getPixelComponentDataType(): number {
    const value = this.x0018604e;
    if (value === undefined) {
      throw new Error('PixelComponentDataType is undefined');
    }
    return value;
  }

  // Number of Table Break Points
  get NumberOfTableBreakPoints(): number | undefined {
    return this.x00186050;
  }

  get x00186050(): number | undefined {
    const value = this.dwResponse['00186050']?.Value;
    return convert(value?.[0], 0x00186050, 'number');
  }

  getNumberOfTableBreakPoints(): number {
    const value = this.x00186050;
    if (value === undefined) {
      throw new Error('NumberOfTableBreakPoints is undefined');
    }
    return value;
  }

  // Table of X Break Points
  get TableOfXBreakPoints(): Array<number | undefined> | undefined {
    return this.x00186052;
  }

  get x00186052(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00186052']?.Value;
    return convert(value, 0x00186052, 'Array<number | undefined>');
  }

  getTableOfXBreakPoints(): Array<number | undefined> {
    const value = this.x00186052;
    if (value === undefined) {
      throw new Error('TableOfXBreakPoints is undefined');
    }
    return value;
  }

  // Table of Y Break Points
  get TableOfYBreakPoints(): Array<number | undefined> | undefined {
    return this.x00186054;
  }

  get x00186054(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00186054']?.Value;
    return convert(value, 0x00186054, 'Array<number | undefined>');
  }

  getTableOfYBreakPoints(): Array<number | undefined> {
    const value = this.x00186054;
    if (value === undefined) {
      throw new Error('TableOfYBreakPoints is undefined');
    }
    return value;
  }

  // Number of Table Entries
  get NumberOfTableEntries(): number | undefined {
    return this.x00186056;
  }

  get x00186056(): number | undefined {
    const value = this.dwResponse['00186056']?.Value;
    return convert(value?.[0], 0x00186056, 'number');
  }

  getNumberOfTableEntries(): number {
    const value = this.x00186056;
    if (value === undefined) {
      throw new Error('NumberOfTableEntries is undefined');
    }
    return value;
  }

  // Table of Pixel Values
  get TableOfPixelValues(): Array<number | undefined> | undefined {
    return this.x00186058;
  }

  get x00186058(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00186058']?.Value;
    return convert(value, 0x00186058, 'Array<number | undefined>');
  }

  getTableOfPixelValues(): Array<number | undefined> {
    const value = this.x00186058;
    if (value === undefined) {
      throw new Error('TableOfPixelValues is undefined');
    }
    return value;
  }

  // Table of Parameter Values
  get TableOfParameterValues(): Array<number | undefined> | undefined {
    return this.x0018605a;
  }

  get x0018605a(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0018605A']?.Value;
    return convert(value, 0x0018605a, 'Array<number | undefined>');
  }

  getTableOfParameterValues(): Array<number | undefined> {
    const value = this.x0018605a;
    if (value === undefined) {
      throw new Error('TableOfParameterValues is undefined');
    }
    return value;
  }

  // R Wave Time Vector
  get RWaveTimeVector(): Array<number | undefined> | undefined {
    return this.x00186060;
  }

  get x00186060(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00186060']?.Value;
    return convert(value, 0x00186060, 'Array<number | undefined>');
  }

  getRWaveTimeVector(): Array<number | undefined> {
    const value = this.x00186060;
    if (value === undefined) {
      throw new Error('RWaveTimeVector is undefined');
    }
    return value;
  }

  // Detector Conditions Nominal Flag
  get DetectorConditionsNominalFlag(): string | undefined {
    return this.x00187000;
  }

  get x00187000(): string | undefined {
    const value = this.dwResponse['00187000']?.Value;
    return convert(value?.[0], 0x00187000, 'string');
  }

  getDetectorConditionsNominalFlag(): string {
    const value = this.x00187000;
    if (value === undefined) {
      throw new Error('DetectorConditionsNominalFlag is undefined');
    }
    return value;
  }

  // Detector Temperature
  get DetectorTemperature(): number | undefined {
    return this.x00187001;
  }

  get x00187001(): number | undefined {
    const value = this.dwResponse['00187001']?.Value;
    return convert(value?.[0], 0x00187001, 'number');
  }

  getDetectorTemperature(): number {
    const value = this.x00187001;
    if (value === undefined) {
      throw new Error('DetectorTemperature is undefined');
    }
    return value;
  }

  // Detector Type
  get DetectorType(): string | undefined {
    return this.x00187004;
  }

  get x00187004(): string | undefined {
    const value = this.dwResponse['00187004']?.Value;
    return convert(value?.[0], 0x00187004, 'string');
  }

  getDetectorType(): string {
    const value = this.x00187004;
    if (value === undefined) {
      throw new Error('DetectorType is undefined');
    }
    return value;
  }

  // Detector Configuration
  get DetectorConfiguration(): string | undefined {
    return this.x00187005;
  }

  get x00187005(): string | undefined {
    const value = this.dwResponse['00187005']?.Value;
    return convert(value?.[0], 0x00187005, 'string');
  }

  getDetectorConfiguration(): string {
    const value = this.x00187005;
    if (value === undefined) {
      throw new Error('DetectorConfiguration is undefined');
    }
    return value;
  }

  // Detector ID
  get DetectorID(): string | undefined {
    return this.x0018700a;
  }

  get x0018700a(): string | undefined {
    const value = this.dwResponse['0018700A']?.Value;
    return convert(value?.[0], 0x0018700a, 'string');
  }

  getDetectorID(): string {
    const value = this.x0018700a;
    if (value === undefined) {
      throw new Error('DetectorID is undefined');
    }
    return value;
  }

  // Date of Last Detector Calibration
  get DateOfLastDetectorCalibration(): Date | undefined {
    return this.x0018700c;
  }

  get x0018700c(): Date | undefined {
    const value = this.dwResponse['0018700C']?.Value;
    return convert(value?.[0], 0x0018700c, 'Date');
  }

  getDateOfLastDetectorCalibration(): Date {
    const value = this.x0018700c;
    if (value === undefined) {
      throw new Error('DateOfLastDetectorCalibration is undefined');
    }
    return value;
  }

  // Time of Last Detector Calibration
  get TimeOfLastDetectorCalibration(): string | undefined {
    return this.x0018700e;
  }

  get x0018700e(): string | undefined {
    const value = this.dwResponse['0018700E']?.Value;
    return convert(value?.[0], 0x0018700e, 'string');
  }

  getTimeOfLastDetectorCalibration(): string {
    const value = this.x0018700e;
    if (value === undefined) {
      throw new Error('TimeOfLastDetectorCalibration is undefined');
    }
    return value;
  }

  // Exposures on Detector Since Last Calibration
  get ExposuresOnDetectorSinceLastCalibration(): number | undefined {
    return this.x00187010;
  }

  get x00187010(): number | undefined {
    const value = this.dwResponse['00187010']?.Value;
    return convert(value?.[0], 0x00187010, 'number');
  }

  getExposuresOnDetectorSinceLastCalibration(): number {
    const value = this.x00187010;
    if (value === undefined) {
      throw new Error('ExposuresOnDetectorSinceLastCalibration is undefined');
    }
    return value;
  }

  // Exposures on Detector Since Manufactured
  get ExposuresOnDetectorSinceManufactured(): number | undefined {
    return this.x00187011;
  }

  get x00187011(): number | undefined {
    const value = this.dwResponse['00187011']?.Value;
    return convert(value?.[0], 0x00187011, 'number');
  }

  getExposuresOnDetectorSinceManufactured(): number {
    const value = this.x00187011;
    if (value === undefined) {
      throw new Error('ExposuresOnDetectorSinceManufactured is undefined');
    }
    return value;
  }

  // Detector Time Since Last Exposure
  get DetectorTimeSinceLastExposure(): number | undefined {
    return this.x00187012;
  }

  get x00187012(): number | undefined {
    const value = this.dwResponse['00187012']?.Value;
    return convert(value?.[0], 0x00187012, 'number');
  }

  getDetectorTimeSinceLastExposure(): number {
    const value = this.x00187012;
    if (value === undefined) {
      throw new Error('DetectorTimeSinceLastExposure is undefined');
    }
    return value;
  }

  // Detector Active Time
  get DetectorActiveTime(): number | undefined {
    return this.x00187014;
  }

  get x00187014(): number | undefined {
    const value = this.dwResponse['00187014']?.Value;
    return convert(value?.[0], 0x00187014, 'number');
  }

  getDetectorActiveTime(): number {
    const value = this.x00187014;
    if (value === undefined) {
      throw new Error('DetectorActiveTime is undefined');
    }
    return value;
  }

  // Detector Activation Offset From Exposure
  get DetectorActivationOffsetFromExposure(): number | undefined {
    return this.x00187016;
  }

  get x00187016(): number | undefined {
    const value = this.dwResponse['00187016']?.Value;
    return convert(value?.[0], 0x00187016, 'number');
  }

  getDetectorActivationOffsetFromExposure(): number {
    const value = this.x00187016;
    if (value === undefined) {
      throw new Error('DetectorActivationOffsetFromExposure is undefined');
    }
    return value;
  }

  // Detector Binning
  get DetectorBinning(): Array<number | undefined> | undefined {
    return this.x0018701a;
  }

  get x0018701a(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0018701A']?.Value;
    return convert(value, 0x0018701a, 'Array<number | undefined>');
  }

  getDetectorBinning(): Array<number | undefined> {
    const value = this.x0018701a;
    if (value === undefined) {
      throw new Error('DetectorBinning is undefined');
    }
    return value;
  }

  // Detector Element Physical Size
  get DetectorElementPhysicalSize(): Array<number | undefined> | undefined {
    return this.x00187020;
  }

  get x00187020(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00187020']?.Value;
    return convert(value, 0x00187020, 'Array<number | undefined>');
  }

  getDetectorElementPhysicalSize(): Array<number | undefined> {
    const value = this.x00187020;
    if (value === undefined) {
      throw new Error('DetectorElementPhysicalSize is undefined');
    }
    return value;
  }

  // Detector Element Spacing
  get DetectorElementSpacing(): Array<number | undefined> | undefined {
    return this.x00187022;
  }

  get x00187022(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00187022']?.Value;
    return convert(value, 0x00187022, 'Array<number | undefined>');
  }

  getDetectorElementSpacing(): Array<number | undefined> {
    const value = this.x00187022;
    if (value === undefined) {
      throw new Error('DetectorElementSpacing is undefined');
    }
    return value;
  }

  // Detector Active Shape
  get DetectorActiveShape(): string | undefined {
    return this.x00187024;
  }

  get x00187024(): string | undefined {
    const value = this.dwResponse['00187024']?.Value;
    return convert(value?.[0], 0x00187024, 'string');
  }

  getDetectorActiveShape(): string {
    const value = this.x00187024;
    if (value === undefined) {
      throw new Error('DetectorActiveShape is undefined');
    }
    return value;
  }

  // Detector Active Dimension(s)
  get DetectorActiveDimensions(): Array<number | undefined> | undefined {
    return this.x00187026;
  }

  get x00187026(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00187026']?.Value;
    return convert(value, 0x00187026, 'Array<number | undefined>');
  }

  getDetectorActiveDimensions(): Array<number | undefined> {
    const value = this.x00187026;
    if (value === undefined) {
      throw new Error('DetectorActiveDimensions is undefined');
    }
    return value;
  }

  // Detector Active Origin
  get DetectorActiveOrigin(): Array<number | undefined> | undefined {
    return this.x00187028;
  }

  get x00187028(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00187028']?.Value;
    return convert(value, 0x00187028, 'Array<number | undefined>');
  }

  getDetectorActiveOrigin(): Array<number | undefined> {
    const value = this.x00187028;
    if (value === undefined) {
      throw new Error('DetectorActiveOrigin is undefined');
    }
    return value;
  }

  // Detector Manufacturer Name
  get DetectorManufacturerName(): string | undefined {
    return this.x0018702a;
  }

  get x0018702a(): string | undefined {
    const value = this.dwResponse['0018702A']?.Value;
    return convert(value?.[0], 0x0018702a, 'string');
  }

  getDetectorManufacturerName(): string {
    const value = this.x0018702a;
    if (value === undefined) {
      throw new Error('DetectorManufacturerName is undefined');
    }
    return value;
  }

  // Detector Manufacturer's Model Name
  get DetectorManufacturerModelName(): string | undefined {
    return this.x0018702b;
  }

  get x0018702b(): string | undefined {
    const value = this.dwResponse['0018702B']?.Value;
    return convert(value?.[0], 0x0018702b, 'string');
  }

  getDetectorManufacturerModelName(): string {
    const value = this.x0018702b;
    if (value === undefined) {
      throw new Error('DetectorManufacturerModelName is undefined');
    }
    return value;
  }

  // Field of View Origin
  get FieldOfViewOrigin(): Array<number | undefined> | undefined {
    return this.x00187030;
  }

  get x00187030(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00187030']?.Value;
    return convert(value, 0x00187030, 'Array<number | undefined>');
  }

  getFieldOfViewOrigin(): Array<number | undefined> {
    const value = this.x00187030;
    if (value === undefined) {
      throw new Error('FieldOfViewOrigin is undefined');
    }
    return value;
  }

  // Field of View Rotation
  get FieldOfViewRotation(): number | undefined {
    return this.x00187032;
  }

  get x00187032(): number | undefined {
    const value = this.dwResponse['00187032']?.Value;
    return convert(value?.[0], 0x00187032, 'number');
  }

  getFieldOfViewRotation(): number {
    const value = this.x00187032;
    if (value === undefined) {
      throw new Error('FieldOfViewRotation is undefined');
    }
    return value;
  }

  // Field of View Horizontal Flip
  get FieldOfViewHorizontalFlip(): string | undefined {
    return this.x00187034;
  }

  get x00187034(): string | undefined {
    const value = this.dwResponse['00187034']?.Value;
    return convert(value?.[0], 0x00187034, 'string');
  }

  getFieldOfViewHorizontalFlip(): string {
    const value = this.x00187034;
    if (value === undefined) {
      throw new Error('FieldOfViewHorizontalFlip is undefined');
    }
    return value;
  }

  // Pixel Data Area Origin Relative To FOV
  get PixelDataAreaOriginRelativeToFOV(): Array<number | undefined> | undefined {
    return this.x00187036;
  }

  get x00187036(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00187036']?.Value;
    return convert(value, 0x00187036, 'Array<number | undefined>');
  }

  getPixelDataAreaOriginRelativeToFOV(): Array<number | undefined> {
    const value = this.x00187036;
    if (value === undefined) {
      throw new Error('PixelDataAreaOriginRelativeToFOV is undefined');
    }
    return value;
  }

  // Pixel Data Area Rotation Angle Relative To FOV
  get PixelDataAreaRotationAngleRelativeToFOV(): number | undefined {
    return this.x00187038;
  }

  get x00187038(): number | undefined {
    const value = this.dwResponse['00187038']?.Value;
    return convert(value?.[0], 0x00187038, 'number');
  }

  getPixelDataAreaRotationAngleRelativeToFOV(): number {
    const value = this.x00187038;
    if (value === undefined) {
      throw new Error('PixelDataAreaRotationAngleRelativeToFOV is undefined');
    }
    return value;
  }

  // Grid Thickness
  get GridThickness(): number | undefined {
    return this.x00187042;
  }

  get x00187042(): number | undefined {
    const value = this.dwResponse['00187042']?.Value;
    return convert(value?.[0], 0x00187042, 'number');
  }

  getGridThickness(): number {
    const value = this.x00187042;
    if (value === undefined) {
      throw new Error('GridThickness is undefined');
    }
    return value;
  }

  // Grid Pitch
  get GridPitch(): number | undefined {
    return this.x00187044;
  }

  get x00187044(): number | undefined {
    const value = this.dwResponse['00187044']?.Value;
    return convert(value?.[0], 0x00187044, 'number');
  }

  getGridPitch(): number {
    const value = this.x00187044;
    if (value === undefined) {
      throw new Error('GridPitch is undefined');
    }
    return value;
  }

  // Grid Aspect Ratio
  get GridAspectRatio(): Array<number | undefined> | undefined {
    return this.x00187046;
  }

  get x00187046(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00187046']?.Value;
    return convert(value, 0x00187046, 'Array<number | undefined>');
  }

  getGridAspectRatio(): Array<number | undefined> {
    const value = this.x00187046;
    if (value === undefined) {
      throw new Error('GridAspectRatio is undefined');
    }
    return value;
  }

  // Grid Period
  get GridPeriod(): number | undefined {
    return this.x00187048;
  }

  get x00187048(): number | undefined {
    const value = this.dwResponse['00187048']?.Value;
    return convert(value?.[0], 0x00187048, 'number');
  }

  getGridPeriod(): number {
    const value = this.x00187048;
    if (value === undefined) {
      throw new Error('GridPeriod is undefined');
    }
    return value;
  }

  // Grid Focal Distance
  get GridFocalDistance(): number | undefined {
    return this.x0018704c;
  }

  get x0018704c(): number | undefined {
    const value = this.dwResponse['0018704C']?.Value;
    return convert(value?.[0], 0x0018704c, 'number');
  }

  getGridFocalDistance(): number {
    const value = this.x0018704c;
    if (value === undefined) {
      throw new Error('GridFocalDistance is undefined');
    }
    return value;
  }

  // Filter Material
  get FilterMaterial(): Array<string | undefined> | undefined {
    return this.x00187050;
  }

  get x00187050(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00187050']?.Value;
    return convert(value, 0x00187050, 'Array<string | undefined>');
  }

  getFilterMaterial(): Array<string | undefined> {
    const value = this.x00187050;
    if (value === undefined) {
      throw new Error('FilterMaterial is undefined');
    }
    return value;
  }

  // Filter Thickness Minimum
  get FilterThicknessMinimum(): Array<number | undefined> | undefined {
    return this.x00187052;
  }

  get x00187052(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00187052']?.Value;
    return convert(value, 0x00187052, 'Array<number | undefined>');
  }

  getFilterThicknessMinimum(): Array<number | undefined> {
    const value = this.x00187052;
    if (value === undefined) {
      throw new Error('FilterThicknessMinimum is undefined');
    }
    return value;
  }

  // Filter Thickness Maximum
  get FilterThicknessMaximum(): Array<number | undefined> | undefined {
    return this.x00187054;
  }

  get x00187054(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00187054']?.Value;
    return convert(value, 0x00187054, 'Array<number | undefined>');
  }

  getFilterThicknessMaximum(): Array<number | undefined> {
    const value = this.x00187054;
    if (value === undefined) {
      throw new Error('FilterThicknessMaximum is undefined');
    }
    return value;
  }

  // Filter Beam Path Length Minimum
  get FilterBeamPathLengthMinimum(): Array<number | undefined> | undefined {
    return this.x00187056;
  }

  get x00187056(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00187056']?.Value;
    return convert(value, 0x00187056, 'Array<number | undefined>');
  }

  getFilterBeamPathLengthMinimum(): Array<number | undefined> {
    const value = this.x00187056;
    if (value === undefined) {
      throw new Error('FilterBeamPathLengthMinimum is undefined');
    }
    return value;
  }

  // Filter Beam Path Length Maximum
  get FilterBeamPathLengthMaximum(): Array<number | undefined> | undefined {
    return this.x00187058;
  }

  get x00187058(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00187058']?.Value;
    return convert(value, 0x00187058, 'Array<number | undefined>');
  }

  getFilterBeamPathLengthMaximum(): Array<number | undefined> {
    const value = this.x00187058;
    if (value === undefined) {
      throw new Error('FilterBeamPathLengthMaximum is undefined');
    }
    return value;
  }

  // Exposure Control Mode
  get ExposureControlMode(): string | undefined {
    return this.x00187060;
  }

  get x00187060(): string | undefined {
    const value = this.dwResponse['00187060']?.Value;
    return convert(value?.[0], 0x00187060, 'string');
  }

  getExposureControlMode(): string {
    const value = this.x00187060;
    if (value === undefined) {
      throw new Error('ExposureControlMode is undefined');
    }
    return value;
  }

  // Exposure Status
  get ExposureStatus(): string | undefined {
    return this.x00187064;
  }

  get x00187064(): string | undefined {
    const value = this.dwResponse['00187064']?.Value;
    return convert(value?.[0], 0x00187064, 'string');
  }

  getExposureStatus(): string {
    const value = this.x00187064;
    if (value === undefined) {
      throw new Error('ExposureStatus is undefined');
    }
    return value;
  }

  // Phototimer Setting
  get PhototimerSetting(): number | undefined {
    return this.x00187065;
  }

  get x00187065(): number | undefined {
    const value = this.dwResponse['00187065']?.Value;
    return convert(value?.[0], 0x00187065, 'number');
  }

  getPhototimerSetting(): number {
    const value = this.x00187065;
    if (value === undefined) {
      throw new Error('PhototimerSetting is undefined');
    }
    return value;
  }

  // Exposure Time in µS
  get ExposureTimeInuS(): number | undefined {
    return this.x00188150;
  }

  get x00188150(): number | undefined {
    const value = this.dwResponse['00188150']?.Value;
    return convert(value?.[0], 0x00188150, 'number');
  }

  getExposureTimeInuS(): number {
    const value = this.x00188150;
    if (value === undefined) {
      throw new Error('ExposureTimeInuS is undefined');
    }
    return value;
  }

  // X-Ray Tube Current in µA
  get XRayTubeCurrentInuA(): number | undefined {
    return this.x00188151;
  }

  get x00188151(): number | undefined {
    const value = this.dwResponse['00188151']?.Value;
    return convert(value?.[0], 0x00188151, 'number');
  }

  getXRayTubeCurrentInuA(): number {
    const value = this.x00188151;
    if (value === undefined) {
      throw new Error('XRayTubeCurrentInuA is undefined');
    }
    return value;
  }

  // Content Qualification
  get ContentQualification(): string | undefined {
    return this.x00189004;
  }

  get x00189004(): string | undefined {
    const value = this.dwResponse['00189004']?.Value;
    return convert(value?.[0], 0x00189004, 'string');
  }

  getContentQualification(): string {
    const value = this.x00189004;
    if (value === undefined) {
      throw new Error('ContentQualification is undefined');
    }
    return value;
  }

  // Pulse Sequence Name
  get PulseSequenceName(): string | undefined {
    return this.x00189005;
  }

  get x00189005(): string | undefined {
    const value = this.dwResponse['00189005']?.Value;
    return convert(value?.[0], 0x00189005, 'string');
  }

  getPulseSequenceName(): string {
    const value = this.x00189005;
    if (value === undefined) {
      throw new Error('PulseSequenceName is undefined');
    }
    return value;
  }

  // MR Imaging Modifier Sequence
  get MRImagingModifierSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189006;
  }

  get x00189006(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189006']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMRImagingModifierSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189006;
    if (value === undefined) {
      throw new Error('MRImagingModifierSequence is undefined');
    }
    return value;
  }

  // Echo Pulse Sequence
  get EchoPulseSequence(): string | undefined {
    return this.x00189008;
  }

  get x00189008(): string | undefined {
    const value = this.dwResponse['00189008']?.Value;
    return convert(value?.[0], 0x00189008, 'string');
  }

  getEchoPulseSequence(): string {
    const value = this.x00189008;
    if (value === undefined) {
      throw new Error('EchoPulseSequence is undefined');
    }
    return value;
  }

  // Inversion Recovery
  get InversionRecovery(): string | undefined {
    return this.x00189009;
  }

  get x00189009(): string | undefined {
    const value = this.dwResponse['00189009']?.Value;
    return convert(value?.[0], 0x00189009, 'string');
  }

  getInversionRecovery(): string {
    const value = this.x00189009;
    if (value === undefined) {
      throw new Error('InversionRecovery is undefined');
    }
    return value;
  }

  // Flow Compensation
  get FlowCompensation(): string | undefined {
    return this.x00189010;
  }

  get x00189010(): string | undefined {
    const value = this.dwResponse['00189010']?.Value;
    return convert(value?.[0], 0x00189010, 'string');
  }

  getFlowCompensation(): string {
    const value = this.x00189010;
    if (value === undefined) {
      throw new Error('FlowCompensation is undefined');
    }
    return value;
  }

  // Multiple Spin Echo
  get MultipleSpinEcho(): string | undefined {
    return this.x00189011;
  }

  get x00189011(): string | undefined {
    const value = this.dwResponse['00189011']?.Value;
    return convert(value?.[0], 0x00189011, 'string');
  }

  getMultipleSpinEcho(): string {
    const value = this.x00189011;
    if (value === undefined) {
      throw new Error('MultipleSpinEcho is undefined');
    }
    return value;
  }

  // Multi-planar Excitation
  get MultiPlanarExcitation(): string | undefined {
    return this.x00189012;
  }

  get x00189012(): string | undefined {
    const value = this.dwResponse['00189012']?.Value;
    return convert(value?.[0], 0x00189012, 'string');
  }

  getMultiPlanarExcitation(): string {
    const value = this.x00189012;
    if (value === undefined) {
      throw new Error('MultiPlanarExcitation is undefined');
    }
    return value;
  }

  // Phase Contrast
  get PhaseContrast(): string | undefined {
    return this.x00189014;
  }

  get x00189014(): string | undefined {
    const value = this.dwResponse['00189014']?.Value;
    return convert(value?.[0], 0x00189014, 'string');
  }

  getPhaseContrast(): string {
    const value = this.x00189014;
    if (value === undefined) {
      throw new Error('PhaseContrast is undefined');
    }
    return value;
  }

  // Time of Flight Contrast
  get TimeOfFlightContrast(): string | undefined {
    return this.x00189015;
  }

  get x00189015(): string | undefined {
    const value = this.dwResponse['00189015']?.Value;
    return convert(value?.[0], 0x00189015, 'string');
  }

  getTimeOfFlightContrast(): string {
    const value = this.x00189015;
    if (value === undefined) {
      throw new Error('TimeOfFlightContrast is undefined');
    }
    return value;
  }

  // Spoiling
  get Spoiling(): string | undefined {
    return this.x00189016;
  }

  get x00189016(): string | undefined {
    const value = this.dwResponse['00189016']?.Value;
    return convert(value?.[0], 0x00189016, 'string');
  }

  getSpoiling(): string {
    const value = this.x00189016;
    if (value === undefined) {
      throw new Error('Spoiling is undefined');
    }
    return value;
  }

  // Steady State Pulse Sequence
  get SteadyStatePulseSequence(): string | undefined {
    return this.x00189017;
  }

  get x00189017(): string | undefined {
    const value = this.dwResponse['00189017']?.Value;
    return convert(value?.[0], 0x00189017, 'string');
  }

  getSteadyStatePulseSequence(): string {
    const value = this.x00189017;
    if (value === undefined) {
      throw new Error('SteadyStatePulseSequence is undefined');
    }
    return value;
  }

  // Echo Planar Pulse Sequence
  get EchoPlanarPulseSequence(): string | undefined {
    return this.x00189018;
  }

  get x00189018(): string | undefined {
    const value = this.dwResponse['00189018']?.Value;
    return convert(value?.[0], 0x00189018, 'string');
  }

  getEchoPlanarPulseSequence(): string {
    const value = this.x00189018;
    if (value === undefined) {
      throw new Error('EchoPlanarPulseSequence is undefined');
    }
    return value;
  }

  // Tag Angle First Axis
  get TagAngleFirstAxis(): number | undefined {
    return this.x00189019;
  }

  get x00189019(): number | undefined {
    const value = this.dwResponse['00189019']?.Value;
    return convert(value?.[0], 0x00189019, 'number');
  }

  getTagAngleFirstAxis(): number {
    const value = this.x00189019;
    if (value === undefined) {
      throw new Error('TagAngleFirstAxis is undefined');
    }
    return value;
  }

  // Magnetization Transfer
  get MagnetizationTransfer(): string | undefined {
    return this.x00189020;
  }

  get x00189020(): string | undefined {
    const value = this.dwResponse['00189020']?.Value;
    return convert(value?.[0], 0x00189020, 'string');
  }

  getMagnetizationTransfer(): string {
    const value = this.x00189020;
    if (value === undefined) {
      throw new Error('MagnetizationTransfer is undefined');
    }
    return value;
  }

  // T2 Preparation
  get T2Preparation(): string | undefined {
    return this.x00189021;
  }

  get x00189021(): string | undefined {
    const value = this.dwResponse['00189021']?.Value;
    return convert(value?.[0], 0x00189021, 'string');
  }

  getT2Preparation(): string {
    const value = this.x00189021;
    if (value === undefined) {
      throw new Error('T2Preparation is undefined');
    }
    return value;
  }

  // Blood Signal Nulling
  get BloodSignalNulling(): string | undefined {
    return this.x00189022;
  }

  get x00189022(): string | undefined {
    const value = this.dwResponse['00189022']?.Value;
    return convert(value?.[0], 0x00189022, 'string');
  }

  getBloodSignalNulling(): string {
    const value = this.x00189022;
    if (value === undefined) {
      throw new Error('BloodSignalNulling is undefined');
    }
    return value;
  }

  // Saturation Recovery
  get SaturationRecovery(): string | undefined {
    return this.x00189024;
  }

  get x00189024(): string | undefined {
    const value = this.dwResponse['00189024']?.Value;
    return convert(value?.[0], 0x00189024, 'string');
  }

  getSaturationRecovery(): string {
    const value = this.x00189024;
    if (value === undefined) {
      throw new Error('SaturationRecovery is undefined');
    }
    return value;
  }

  // Spectrally Selected Suppression
  get SpectrallySelectedSuppression(): string | undefined {
    return this.x00189025;
  }

  get x00189025(): string | undefined {
    const value = this.dwResponse['00189025']?.Value;
    return convert(value?.[0], 0x00189025, 'string');
  }

  getSpectrallySelectedSuppression(): string {
    const value = this.x00189025;
    if (value === undefined) {
      throw new Error('SpectrallySelectedSuppression is undefined');
    }
    return value;
  }

  // Spectrally Selected Excitation
  get SpectrallySelectedExcitation(): string | undefined {
    return this.x00189026;
  }

  get x00189026(): string | undefined {
    const value = this.dwResponse['00189026']?.Value;
    return convert(value?.[0], 0x00189026, 'string');
  }

  getSpectrallySelectedExcitation(): string {
    const value = this.x00189026;
    if (value === undefined) {
      throw new Error('SpectrallySelectedExcitation is undefined');
    }
    return value;
  }

  // Spatial Pre-saturation
  get SpatialPresaturation(): string | undefined {
    return this.x00189027;
  }

  get x00189027(): string | undefined {
    const value = this.dwResponse['00189027']?.Value;
    return convert(value?.[0], 0x00189027, 'string');
  }

  getSpatialPresaturation(): string {
    const value = this.x00189027;
    if (value === undefined) {
      throw new Error('SpatialPresaturation is undefined');
    }
    return value;
  }

  // Tagging
  get Tagging(): string | undefined {
    return this.x00189028;
  }

  get x00189028(): string | undefined {
    const value = this.dwResponse['00189028']?.Value;
    return convert(value?.[0], 0x00189028, 'string');
  }

  getTagging(): string {
    const value = this.x00189028;
    if (value === undefined) {
      throw new Error('Tagging is undefined');
    }
    return value;
  }

  // Oversampling Phase
  get OversamplingPhase(): string | undefined {
    return this.x00189029;
  }

  get x00189029(): string | undefined {
    const value = this.dwResponse['00189029']?.Value;
    return convert(value?.[0], 0x00189029, 'string');
  }

  getOversamplingPhase(): string {
    const value = this.x00189029;
    if (value === undefined) {
      throw new Error('OversamplingPhase is undefined');
    }
    return value;
  }

  // Tag Spacing First Dimension
  get TagSpacingFirstDimension(): number | undefined {
    return this.x00189030;
  }

  get x00189030(): number | undefined {
    const value = this.dwResponse['00189030']?.Value;
    return convert(value?.[0], 0x00189030, 'number');
  }

  getTagSpacingFirstDimension(): number {
    const value = this.x00189030;
    if (value === undefined) {
      throw new Error('TagSpacingFirstDimension is undefined');
    }
    return value;
  }

  // Geometry of k-Space Traversal
  get GeometryOfKSpaceTraversal(): string | undefined {
    return this.x00189032;
  }

  get x00189032(): string | undefined {
    const value = this.dwResponse['00189032']?.Value;
    return convert(value?.[0], 0x00189032, 'string');
  }

  getGeometryOfKSpaceTraversal(): string {
    const value = this.x00189032;
    if (value === undefined) {
      throw new Error('GeometryOfKSpaceTraversal is undefined');
    }
    return value;
  }

  // Segmented k-Space Traversal
  get SegmentedKSpaceTraversal(): string | undefined {
    return this.x00189033;
  }

  get x00189033(): string | undefined {
    const value = this.dwResponse['00189033']?.Value;
    return convert(value?.[0], 0x00189033, 'string');
  }

  getSegmentedKSpaceTraversal(): string {
    const value = this.x00189033;
    if (value === undefined) {
      throw new Error('SegmentedKSpaceTraversal is undefined');
    }
    return value;
  }

  // Rectilinear Phase Encode Reordering
  get RectilinearPhaseEncodeReordering(): string | undefined {
    return this.x00189034;
  }

  get x00189034(): string | undefined {
    const value = this.dwResponse['00189034']?.Value;
    return convert(value?.[0], 0x00189034, 'string');
  }

  getRectilinearPhaseEncodeReordering(): string {
    const value = this.x00189034;
    if (value === undefined) {
      throw new Error('RectilinearPhaseEncodeReordering is undefined');
    }
    return value;
  }

  // Tag Thickness
  get TagThickness(): number | undefined {
    return this.x00189035;
  }

  get x00189035(): number | undefined {
    const value = this.dwResponse['00189035']?.Value;
    return convert(value?.[0], 0x00189035, 'number');
  }

  getTagThickness(): number {
    const value = this.x00189035;
    if (value === undefined) {
      throw new Error('TagThickness is undefined');
    }
    return value;
  }

  // Partial Fourier Direction
  get PartialFourierDirection(): string | undefined {
    return this.x00189036;
  }

  get x00189036(): string | undefined {
    const value = this.dwResponse['00189036']?.Value;
    return convert(value?.[0], 0x00189036, 'string');
  }

  getPartialFourierDirection(): string {
    const value = this.x00189036;
    if (value === undefined) {
      throw new Error('PartialFourierDirection is undefined');
    }
    return value;
  }

  // Cardiac Synchronization Technique
  get CardiacSynchronizationTechnique(): string | undefined {
    return this.x00189037;
  }

  get x00189037(): string | undefined {
    const value = this.dwResponse['00189037']?.Value;
    return convert(value?.[0], 0x00189037, 'string');
  }

  getCardiacSynchronizationTechnique(): string {
    const value = this.x00189037;
    if (value === undefined) {
      throw new Error('CardiacSynchronizationTechnique is undefined');
    }
    return value;
  }

  // Receive Coil Manufacturer Name
  get ReceiveCoilManufacturerName(): string | undefined {
    return this.x00189041;
  }

  get x00189041(): string | undefined {
    const value = this.dwResponse['00189041']?.Value;
    return convert(value?.[0], 0x00189041, 'string');
  }

  getReceiveCoilManufacturerName(): string {
    const value = this.x00189041;
    if (value === undefined) {
      throw new Error('ReceiveCoilManufacturerName is undefined');
    }
    return value;
  }

  // MR Receive Coil Sequence
  get MRReceiveCoilSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189042;
  }

  get x00189042(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189042']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMRReceiveCoilSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189042;
    if (value === undefined) {
      throw new Error('MRReceiveCoilSequence is undefined');
    }
    return value;
  }

  // Receive Coil Type
  get ReceiveCoilType(): string | undefined {
    return this.x00189043;
  }

  get x00189043(): string | undefined {
    const value = this.dwResponse['00189043']?.Value;
    return convert(value?.[0], 0x00189043, 'string');
  }

  getReceiveCoilType(): string {
    const value = this.x00189043;
    if (value === undefined) {
      throw new Error('ReceiveCoilType is undefined');
    }
    return value;
  }

  // Quadrature Receive Coil
  get QuadratureReceiveCoil(): string | undefined {
    return this.x00189044;
  }

  get x00189044(): string | undefined {
    const value = this.dwResponse['00189044']?.Value;
    return convert(value?.[0], 0x00189044, 'string');
  }

  getQuadratureReceiveCoil(): string {
    const value = this.x00189044;
    if (value === undefined) {
      throw new Error('QuadratureReceiveCoil is undefined');
    }
    return value;
  }

  // Multi-Coil Definition Sequence
  get MultiCoilDefinitionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189045;
  }

  get x00189045(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189045']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMultiCoilDefinitionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189045;
    if (value === undefined) {
      throw new Error('MultiCoilDefinitionSequence is undefined');
    }
    return value;
  }

  // Multi-Coil Configuration
  get MultiCoilConfiguration(): string | undefined {
    return this.x00189046;
  }

  get x00189046(): string | undefined {
    const value = this.dwResponse['00189046']?.Value;
    return convert(value?.[0], 0x00189046, 'string');
  }

  getMultiCoilConfiguration(): string {
    const value = this.x00189046;
    if (value === undefined) {
      throw new Error('MultiCoilConfiguration is undefined');
    }
    return value;
  }

  // Multi-Coil Element Name
  get MultiCoilElementName(): string | undefined {
    return this.x00189047;
  }

  get x00189047(): string | undefined {
    const value = this.dwResponse['00189047']?.Value;
    return convert(value?.[0], 0x00189047, 'string');
  }

  getMultiCoilElementName(): string {
    const value = this.x00189047;
    if (value === undefined) {
      throw new Error('MultiCoilElementName is undefined');
    }
    return value;
  }

  // Multi-Coil Element Used
  get MultiCoilElementUsed(): string | undefined {
    return this.x00189048;
  }

  get x00189048(): string | undefined {
    const value = this.dwResponse['00189048']?.Value;
    return convert(value?.[0], 0x00189048, 'string');
  }

  getMultiCoilElementUsed(): string {
    const value = this.x00189048;
    if (value === undefined) {
      throw new Error('MultiCoilElementUsed is undefined');
    }
    return value;
  }

  // MR Transmit Coil Sequence
  get MRTransmitCoilSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189049;
  }

  get x00189049(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189049']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMRTransmitCoilSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189049;
    if (value === undefined) {
      throw new Error('MRTransmitCoilSequence is undefined');
    }
    return value;
  }

  // Transmit Coil Manufacturer Name
  get TransmitCoilManufacturerName(): string | undefined {
    return this.x00189050;
  }

  get x00189050(): string | undefined {
    const value = this.dwResponse['00189050']?.Value;
    return convert(value?.[0], 0x00189050, 'string');
  }

  getTransmitCoilManufacturerName(): string {
    const value = this.x00189050;
    if (value === undefined) {
      throw new Error('TransmitCoilManufacturerName is undefined');
    }
    return value;
  }

  // Transmit Coil Type
  get TransmitCoilType(): string | undefined {
    return this.x00189051;
  }

  get x00189051(): string | undefined {
    const value = this.dwResponse['00189051']?.Value;
    return convert(value?.[0], 0x00189051, 'string');
  }

  getTransmitCoilType(): string {
    const value = this.x00189051;
    if (value === undefined) {
      throw new Error('TransmitCoilType is undefined');
    }
    return value;
  }

  // Spectral Width
  get SpectralWidth(): Array<number | undefined> | undefined {
    return this.x00189052;
  }

  get x00189052(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189052']?.Value;
    return convert(value, 0x00189052, 'Array<number | undefined>');
  }

  getSpectralWidth(): Array<number | undefined> {
    const value = this.x00189052;
    if (value === undefined) {
      throw new Error('SpectralWidth is undefined');
    }
    return value;
  }

  // Chemical Shift Reference
  get ChemicalShiftReference(): Array<number | undefined> | undefined {
    return this.x00189053;
  }

  get x00189053(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189053']?.Value;
    return convert(value, 0x00189053, 'Array<number | undefined>');
  }

  getChemicalShiftReference(): Array<number | undefined> {
    const value = this.x00189053;
    if (value === undefined) {
      throw new Error('ChemicalShiftReference is undefined');
    }
    return value;
  }

  // Volume Localization Technique
  get VolumeLocalizationTechnique(): string | undefined {
    return this.x00189054;
  }

  get x00189054(): string | undefined {
    const value = this.dwResponse['00189054']?.Value;
    return convert(value?.[0], 0x00189054, 'string');
  }

  getVolumeLocalizationTechnique(): string {
    const value = this.x00189054;
    if (value === undefined) {
      throw new Error('VolumeLocalizationTechnique is undefined');
    }
    return value;
  }

  // MR Acquisition Frequency Encoding Steps
  get MRAcquisitionFrequencyEncodingSteps(): number | undefined {
    return this.x00189058;
  }

  get x00189058(): number | undefined {
    const value = this.dwResponse['00189058']?.Value;
    return convert(value?.[0], 0x00189058, 'number');
  }

  getMRAcquisitionFrequencyEncodingSteps(): number {
    const value = this.x00189058;
    if (value === undefined) {
      throw new Error('MRAcquisitionFrequencyEncodingSteps is undefined');
    }
    return value;
  }

  // De-coupling
  get Decoupling(): string | undefined {
    return this.x00189059;
  }

  get x00189059(): string | undefined {
    const value = this.dwResponse['00189059']?.Value;
    return convert(value?.[0], 0x00189059, 'string');
  }

  getDecoupling(): string {
    const value = this.x00189059;
    if (value === undefined) {
      throw new Error('Decoupling is undefined');
    }
    return value;
  }

  // De-coupled Nucleus
  get DecoupledNucleus(): Array<string | undefined> | undefined {
    return this.x00189060;
  }

  get x00189060(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00189060']?.Value;
    return convert(value, 0x00189060, 'Array<string | undefined>');
  }

  getDecoupledNucleus(): Array<string | undefined> {
    const value = this.x00189060;
    if (value === undefined) {
      throw new Error('DecoupledNucleus is undefined');
    }
    return value;
  }

  // De-coupling Frequency
  get DecouplingFrequency(): Array<number | undefined> | undefined {
    return this.x00189061;
  }

  get x00189061(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189061']?.Value;
    return convert(value, 0x00189061, 'Array<number | undefined>');
  }

  getDecouplingFrequency(): Array<number | undefined> {
    const value = this.x00189061;
    if (value === undefined) {
      throw new Error('DecouplingFrequency is undefined');
    }
    return value;
  }

  // De-coupling Method
  get DecouplingMethod(): string | undefined {
    return this.x00189062;
  }

  get x00189062(): string | undefined {
    const value = this.dwResponse['00189062']?.Value;
    return convert(value?.[0], 0x00189062, 'string');
  }

  getDecouplingMethod(): string {
    const value = this.x00189062;
    if (value === undefined) {
      throw new Error('DecouplingMethod is undefined');
    }
    return value;
  }

  // De-coupling Chemical Shift Reference
  get DecouplingChemicalShiftReference(): Array<number | undefined> | undefined {
    return this.x00189063;
  }

  get x00189063(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189063']?.Value;
    return convert(value, 0x00189063, 'Array<number | undefined>');
  }

  getDecouplingChemicalShiftReference(): Array<number | undefined> {
    const value = this.x00189063;
    if (value === undefined) {
      throw new Error('DecouplingChemicalShiftReference is undefined');
    }
    return value;
  }

  // k-space Filtering
  get KSpaceFiltering(): string | undefined {
    return this.x00189064;
  }

  get x00189064(): string | undefined {
    const value = this.dwResponse['00189064']?.Value;
    return convert(value?.[0], 0x00189064, 'string');
  }

  getKSpaceFiltering(): string {
    const value = this.x00189064;
    if (value === undefined) {
      throw new Error('KSpaceFiltering is undefined');
    }
    return value;
  }

  // Time Domain Filtering
  get TimeDomainFiltering(): Array<string | undefined> | undefined {
    return this.x00189065;
  }

  get x00189065(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00189065']?.Value;
    return convert(value, 0x00189065, 'Array<string | undefined>');
  }

  getTimeDomainFiltering(): Array<string | undefined> {
    const value = this.x00189065;
    if (value === undefined) {
      throw new Error('TimeDomainFiltering is undefined');
    }
    return value;
  }

  // Number of Zero Fills
  get NumberOfZeroFills(): Array<number | undefined> | undefined {
    return this.x00189066;
  }

  get x00189066(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189066']?.Value;
    return convert(value, 0x00189066, 'Array<number | undefined>');
  }

  getNumberOfZeroFills(): Array<number | undefined> {
    const value = this.x00189066;
    if (value === undefined) {
      throw new Error('NumberOfZeroFills is undefined');
    }
    return value;
  }

  // Baseline Correction
  get BaselineCorrection(): string | undefined {
    return this.x00189067;
  }

  get x00189067(): string | undefined {
    const value = this.dwResponse['00189067']?.Value;
    return convert(value?.[0], 0x00189067, 'string');
  }

  getBaselineCorrection(): string {
    const value = this.x00189067;
    if (value === undefined) {
      throw new Error('BaselineCorrection is undefined');
    }
    return value;
  }

  // Parallel Reduction Factor In-plane
  get ParallelReductionFactorInPlane(): number | undefined {
    return this.x00189069;
  }

  get x00189069(): number | undefined {
    const value = this.dwResponse['00189069']?.Value;
    return convert(value?.[0], 0x00189069, 'number');
  }

  getParallelReductionFactorInPlane(): number {
    const value = this.x00189069;
    if (value === undefined) {
      throw new Error('ParallelReductionFactorInPlane is undefined');
    }
    return value;
  }

  // Cardiac R-R Interval Specified
  get CardiacRRIntervalSpecified(): number | undefined {
    return this.x00189070;
  }

  get x00189070(): number | undefined {
    const value = this.dwResponse['00189070']?.Value;
    return convert(value?.[0], 0x00189070, 'number');
  }

  getCardiacRRIntervalSpecified(): number {
    const value = this.x00189070;
    if (value === undefined) {
      throw new Error('CardiacRRIntervalSpecified is undefined');
    }
    return value;
  }

  // Acquisition Duration
  get AcquisitionDuration(): number | undefined {
    return this.x00189073;
  }

  get x00189073(): number | undefined {
    const value = this.dwResponse['00189073']?.Value;
    return convert(value?.[0], 0x00189073, 'number');
  }

  getAcquisitionDuration(): number {
    const value = this.x00189073;
    if (value === undefined) {
      throw new Error('AcquisitionDuration is undefined');
    }
    return value;
  }

  // Frame Acquisition DateTime
  get FrameAcquisitionDateTime(): string | undefined {
    return this.x00189074;
  }

  get x00189074(): string | undefined {
    const value = this.dwResponse['00189074']?.Value;
    return convert(value?.[0], 0x00189074, 'string');
  }

  getFrameAcquisitionDateTime(): string {
    const value = this.x00189074;
    if (value === undefined) {
      throw new Error('FrameAcquisitionDateTime is undefined');
    }
    return value;
  }

  // Diffusion Directionality
  get DiffusionDirectionality(): string | undefined {
    return this.x00189075;
  }

  get x00189075(): string | undefined {
    const value = this.dwResponse['00189075']?.Value;
    return convert(value?.[0], 0x00189075, 'string');
  }

  getDiffusionDirectionality(): string {
    const value = this.x00189075;
    if (value === undefined) {
      throw new Error('DiffusionDirectionality is undefined');
    }
    return value;
  }

  // Diffusion Gradient Direction Sequence
  get DiffusionGradientDirectionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189076;
  }

  get x00189076(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189076']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDiffusionGradientDirectionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189076;
    if (value === undefined) {
      throw new Error('DiffusionGradientDirectionSequence is undefined');
    }
    return value;
  }

  // Parallel Acquisition
  get ParallelAcquisition(): string | undefined {
    return this.x00189077;
  }

  get x00189077(): string | undefined {
    const value = this.dwResponse['00189077']?.Value;
    return convert(value?.[0], 0x00189077, 'string');
  }

  getParallelAcquisition(): string {
    const value = this.x00189077;
    if (value === undefined) {
      throw new Error('ParallelAcquisition is undefined');
    }
    return value;
  }

  // Parallel Acquisition Technique
  get ParallelAcquisitionTechnique(): string | undefined {
    return this.x00189078;
  }

  get x00189078(): string | undefined {
    const value = this.dwResponse['00189078']?.Value;
    return convert(value?.[0], 0x00189078, 'string');
  }

  getParallelAcquisitionTechnique(): string {
    const value = this.x00189078;
    if (value === undefined) {
      throw new Error('ParallelAcquisitionTechnique is undefined');
    }
    return value;
  }

  // Inversion Times
  get InversionTimes(): Array<number | undefined> | undefined {
    return this.x00189079;
  }

  get x00189079(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189079']?.Value;
    return convert(value, 0x00189079, 'Array<number | undefined>');
  }

  getInversionTimes(): Array<number | undefined> {
    const value = this.x00189079;
    if (value === undefined) {
      throw new Error('InversionTimes is undefined');
    }
    return value;
  }

  // Partial Fourier
  get PartialFourier(): string | undefined {
    return this.x00189081;
  }

  get x00189081(): string | undefined {
    const value = this.dwResponse['00189081']?.Value;
    return convert(value?.[0], 0x00189081, 'string');
  }

  getPartialFourier(): string {
    const value = this.x00189081;
    if (value === undefined) {
      throw new Error('PartialFourier is undefined');
    }
    return value;
  }

  // Effective Echo Time
  get EffectiveEchoTime(): number | undefined {
    return this.x00189082;
  }

  get x00189082(): number | undefined {
    const value = this.dwResponse['00189082']?.Value;
    return convert(value?.[0], 0x00189082, 'number');
  }

  getEffectiveEchoTime(): number {
    const value = this.x00189082;
    if (value === undefined) {
      throw new Error('EffectiveEchoTime is undefined');
    }
    return value;
  }

  // Metabolite Map Code Sequence
  get MetaboliteMapCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189083;
  }

  get x00189083(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189083']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMetaboliteMapCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189083;
    if (value === undefined) {
      throw new Error('MetaboliteMapCodeSequence is undefined');
    }
    return value;
  }

  // Chemical Shift Sequence
  get ChemicalShiftSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189084;
  }

  get x00189084(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189084']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getChemicalShiftSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189084;
    if (value === undefined) {
      throw new Error('ChemicalShiftSequence is undefined');
    }
    return value;
  }

  // Cardiac Signal Source
  get CardiacSignalSource(): string | undefined {
    return this.x00189085;
  }

  get x00189085(): string | undefined {
    const value = this.dwResponse['00189085']?.Value;
    return convert(value?.[0], 0x00189085, 'string');
  }

  getCardiacSignalSource(): string {
    const value = this.x00189085;
    if (value === undefined) {
      throw new Error('CardiacSignalSource is undefined');
    }
    return value;
  }

  // Diffusion b-value
  get DiffusionBValue(): number | undefined {
    return this.x00189087;
  }

  get x00189087(): number | undefined {
    const value = this.dwResponse['00189087']?.Value;
    return convert(value?.[0], 0x00189087, 'number');
  }

  getDiffusionBValue(): number {
    const value = this.x00189087;
    if (value === undefined) {
      throw new Error('DiffusionBValue is undefined');
    }
    return value;
  }

  // Diffusion Gradient Orientation
  get DiffusionGradientOrientation(): Array<number | undefined> | undefined {
    return this.x00189089;
  }

  get x00189089(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189089']?.Value;
    return convert(value, 0x00189089, 'Array<number | undefined>');
  }

  getDiffusionGradientOrientation(): Array<number | undefined> {
    const value = this.x00189089;
    if (value === undefined) {
      throw new Error('DiffusionGradientOrientation is undefined');
    }
    return value;
  }

  // Velocity Encoding Direction
  get VelocityEncodingDirection(): Array<number | undefined> | undefined {
    return this.x00189090;
  }

  get x00189090(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189090']?.Value;
    return convert(value, 0x00189090, 'Array<number | undefined>');
  }

  getVelocityEncodingDirection(): Array<number | undefined> {
    const value = this.x00189090;
    if (value === undefined) {
      throw new Error('VelocityEncodingDirection is undefined');
    }
    return value;
  }

  // Velocity Encoding Minimum Value
  get VelocityEncodingMinimumValue(): number | undefined {
    return this.x00189091;
  }

  get x00189091(): number | undefined {
    const value = this.dwResponse['00189091']?.Value;
    return convert(value?.[0], 0x00189091, 'number');
  }

  getVelocityEncodingMinimumValue(): number {
    const value = this.x00189091;
    if (value === undefined) {
      throw new Error('VelocityEncodingMinimumValue is undefined');
    }
    return value;
  }

  // Velocity Encoding Acquisition Sequence
  get VelocityEncodingAcquisitionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189092;
  }

  get x00189092(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189092']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVelocityEncodingAcquisitionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189092;
    if (value === undefined) {
      throw new Error('VelocityEncodingAcquisitionSequence is undefined');
    }
    return value;
  }

  // Number of k-Space Trajectories
  get NumberOfKSpaceTrajectories(): number | undefined {
    return this.x00189093;
  }

  get x00189093(): number | undefined {
    const value = this.dwResponse['00189093']?.Value;
    return convert(value?.[0], 0x00189093, 'number');
  }

  getNumberOfKSpaceTrajectories(): number {
    const value = this.x00189093;
    if (value === undefined) {
      throw new Error('NumberOfKSpaceTrajectories is undefined');
    }
    return value;
  }

  // Coverage of k-Space
  get CoverageOfKSpace(): string | undefined {
    return this.x00189094;
  }

  get x00189094(): string | undefined {
    const value = this.dwResponse['00189094']?.Value;
    return convert(value?.[0], 0x00189094, 'string');
  }

  getCoverageOfKSpace(): string {
    const value = this.x00189094;
    if (value === undefined) {
      throw new Error('CoverageOfKSpace is undefined');
    }
    return value;
  }

  // Spectroscopy Acquisition Phase Rows
  get SpectroscopyAcquisitionPhaseRows(): number | undefined {
    return this.x00189095;
  }

  get x00189095(): number | undefined {
    const value = this.dwResponse['00189095']?.Value;
    return convert(value?.[0], 0x00189095, 'number');
  }

  getSpectroscopyAcquisitionPhaseRows(): number {
    const value = this.x00189095;
    if (value === undefined) {
      throw new Error('SpectroscopyAcquisitionPhaseRows is undefined');
    }
    return value;
  }

  // Parallel Reduction Factor In-plane (Retired)
  get ParallelReductionFactorInPlaneRetired(): number | undefined {
    return this.x00189096;
  }

  get x00189096(): number | undefined {
    const value = this.dwResponse['00189096']?.Value;
    return convert(value?.[0], 0x00189096, 'number');
  }

  getParallelReductionFactorInPlaneRetired(): number {
    const value = this.x00189096;
    if (value === undefined) {
      throw new Error('ParallelReductionFactorInPlaneRetired is undefined');
    }
    return value;
  }

  // Transmitter Frequency
  get TransmitterFrequency(): Array<number | undefined> | undefined {
    return this.x00189098;
  }

  get x00189098(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189098']?.Value;
    return convert(value, 0x00189098, 'Array<number | undefined>');
  }

  getTransmitterFrequency(): Array<number | undefined> {
    const value = this.x00189098;
    if (value === undefined) {
      throw new Error('TransmitterFrequency is undefined');
    }
    return value;
  }

  // Resonant Nucleus
  get ResonantNucleus(): Array<string | undefined> | undefined {
    return this.x00189100;
  }

  get x00189100(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00189100']?.Value;
    return convert(value, 0x00189100, 'Array<string | undefined>');
  }

  getResonantNucleus(): Array<string | undefined> {
    const value = this.x00189100;
    if (value === undefined) {
      throw new Error('ResonantNucleus is undefined');
    }
    return value;
  }

  // Frequency Correction
  get FrequencyCorrection(): string | undefined {
    return this.x00189101;
  }

  get x00189101(): string | undefined {
    const value = this.dwResponse['00189101']?.Value;
    return convert(value?.[0], 0x00189101, 'string');
  }

  getFrequencyCorrection(): string {
    const value = this.x00189101;
    if (value === undefined) {
      throw new Error('FrequencyCorrection is undefined');
    }
    return value;
  }

  // MR Spectroscopy FOV/Geometry Sequence
  get MRSpectroscopyFOVGeometrySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189103;
  }

  get x00189103(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189103']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMRSpectroscopyFOVGeometrySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189103;
    if (value === undefined) {
      throw new Error('MRSpectroscopyFOVGeometrySequence is undefined');
    }
    return value;
  }

  // Slab Thickness
  get SlabThickness(): number | undefined {
    return this.x00189104;
  }

  get x00189104(): number | undefined {
    const value = this.dwResponse['00189104']?.Value;
    return convert(value?.[0], 0x00189104, 'number');
  }

  getSlabThickness(): number {
    const value = this.x00189104;
    if (value === undefined) {
      throw new Error('SlabThickness is undefined');
    }
    return value;
  }

  // Slab Orientation
  get SlabOrientation(): Array<number | undefined> | undefined {
    return this.x00189105;
  }

  get x00189105(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189105']?.Value;
    return convert(value, 0x00189105, 'Array<number | undefined>');
  }

  getSlabOrientation(): Array<number | undefined> {
    const value = this.x00189105;
    if (value === undefined) {
      throw new Error('SlabOrientation is undefined');
    }
    return value;
  }

  // Mid Slab Position
  get MidSlabPosition(): Array<number | undefined> | undefined {
    return this.x00189106;
  }

  get x00189106(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189106']?.Value;
    return convert(value, 0x00189106, 'Array<number | undefined>');
  }

  getMidSlabPosition(): Array<number | undefined> {
    const value = this.x00189106;
    if (value === undefined) {
      throw new Error('MidSlabPosition is undefined');
    }
    return value;
  }

  // MR Spatial Saturation Sequence
  get MRSpatialSaturationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189107;
  }

  get x00189107(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189107']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMRSpatialSaturationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189107;
    if (value === undefined) {
      throw new Error('MRSpatialSaturationSequence is undefined');
    }
    return value;
  }

  // MR Timing and Related Parameters Sequence
  get MRTimingAndRelatedParametersSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189112;
  }

  get x00189112(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189112']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMRTimingAndRelatedParametersSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189112;
    if (value === undefined) {
      throw new Error('MRTimingAndRelatedParametersSequence is undefined');
    }
    return value;
  }

  // MR Echo Sequence
  get MREchoSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189114;
  }

  get x00189114(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189114']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMREchoSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189114;
    if (value === undefined) {
      throw new Error('MREchoSequence is undefined');
    }
    return value;
  }

  // MR Modifier Sequence
  get MRModifierSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189115;
  }

  get x00189115(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189115']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMRModifierSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189115;
    if (value === undefined) {
      throw new Error('MRModifierSequence is undefined');
    }
    return value;
  }

  // MR Diffusion Sequence
  get MRDiffusionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189117;
  }

  get x00189117(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189117']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMRDiffusionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189117;
    if (value === undefined) {
      throw new Error('MRDiffusionSequence is undefined');
    }
    return value;
  }

  // Cardiac Synchronization Sequence
  get CardiacSynchronizationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189118;
  }

  get x00189118(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189118']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCardiacSynchronizationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189118;
    if (value === undefined) {
      throw new Error('CardiacSynchronizationSequence is undefined');
    }
    return value;
  }

  // MR Averages Sequence
  get MRAveragesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189119;
  }

  get x00189119(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189119']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMRAveragesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189119;
    if (value === undefined) {
      throw new Error('MRAveragesSequence is undefined');
    }
    return value;
  }

  // MR FOV/Geometry Sequence
  get MRFOVGeometrySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189125;
  }

  get x00189125(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189125']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMRFOVGeometrySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189125;
    if (value === undefined) {
      throw new Error('MRFOVGeometrySequence is undefined');
    }
    return value;
  }

  // Volume Localization Sequence
  get VolumeLocalizationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189126;
  }

  get x00189126(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189126']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVolumeLocalizationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189126;
    if (value === undefined) {
      throw new Error('VolumeLocalizationSequence is undefined');
    }
    return value;
  }

  // Spectroscopy Acquisition Data Columns
  get SpectroscopyAcquisitionDataColumns(): number | undefined {
    return this.x00189127;
  }

  get x00189127(): number | undefined {
    const value = this.dwResponse['00189127']?.Value;
    return convert(value?.[0], 0x00189127, 'number');
  }

  getSpectroscopyAcquisitionDataColumns(): number {
    const value = this.x00189127;
    if (value === undefined) {
      throw new Error('SpectroscopyAcquisitionDataColumns is undefined');
    }
    return value;
  }

  // Diffusion Anisotropy Type
  get DiffusionAnisotropyType(): string | undefined {
    return this.x00189147;
  }

  get x00189147(): string | undefined {
    const value = this.dwResponse['00189147']?.Value;
    return convert(value?.[0], 0x00189147, 'string');
  }

  getDiffusionAnisotropyType(): string {
    const value = this.x00189147;
    if (value === undefined) {
      throw new Error('DiffusionAnisotropyType is undefined');
    }
    return value;
  }

  // Frame Reference DateTime
  get FrameReferenceDateTime(): string | undefined {
    return this.x00189151;
  }

  get x00189151(): string | undefined {
    const value = this.dwResponse['00189151']?.Value;
    return convert(value?.[0], 0x00189151, 'string');
  }

  getFrameReferenceDateTime(): string {
    const value = this.x00189151;
    if (value === undefined) {
      throw new Error('FrameReferenceDateTime is undefined');
    }
    return value;
  }

  // MR Metabolite Map Sequence
  get MRMetaboliteMapSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189152;
  }

  get x00189152(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189152']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMRMetaboliteMapSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189152;
    if (value === undefined) {
      throw new Error('MRMetaboliteMapSequence is undefined');
    }
    return value;
  }

  // Parallel Reduction Factor out-of-plane
  get ParallelReductionFactorOutOfPlane(): number | undefined {
    return this.x00189155;
  }

  get x00189155(): number | undefined {
    const value = this.dwResponse['00189155']?.Value;
    return convert(value?.[0], 0x00189155, 'number');
  }

  getParallelReductionFactorOutOfPlane(): number {
    const value = this.x00189155;
    if (value === undefined) {
      throw new Error('ParallelReductionFactorOutOfPlane is undefined');
    }
    return value;
  }

  // Spectroscopy Acquisition Out-of-plane Phase Steps
  get SpectroscopyAcquisitionOutOfPlanePhaseSteps(): number | undefined {
    return this.x00189159;
  }

  get x00189159(): number | undefined {
    const value = this.dwResponse['00189159']?.Value;
    return convert(value?.[0], 0x00189159, 'number');
  }

  getSpectroscopyAcquisitionOutOfPlanePhaseSteps(): number {
    const value = this.x00189159;
    if (value === undefined) {
      throw new Error('SpectroscopyAcquisitionOutOfPlanePhaseSteps is undefined');
    }
    return value;
  }

  // Bulk Motion Status
  get BulkMotionStatus(): string | undefined {
    return this.x00189166;
  }

  get x00189166(): string | undefined {
    const value = this.dwResponse['00189166']?.Value;
    return convert(value?.[0], 0x00189166, 'string');
  }

  getBulkMotionStatus(): string {
    const value = this.x00189166;
    if (value === undefined) {
      throw new Error('BulkMotionStatus is undefined');
    }
    return value;
  }

  // Parallel Reduction Factor Second In-plane
  get ParallelReductionFactorSecondInPlane(): number | undefined {
    return this.x00189168;
  }

  get x00189168(): number | undefined {
    const value = this.dwResponse['00189168']?.Value;
    return convert(value?.[0], 0x00189168, 'number');
  }

  getParallelReductionFactorSecondInPlane(): number {
    const value = this.x00189168;
    if (value === undefined) {
      throw new Error('ParallelReductionFactorSecondInPlane is undefined');
    }
    return value;
  }

  // Cardiac Beat Rejection Technique
  get CardiacBeatRejectionTechnique(): string | undefined {
    return this.x00189169;
  }

  get x00189169(): string | undefined {
    const value = this.dwResponse['00189169']?.Value;
    return convert(value?.[0], 0x00189169, 'string');
  }

  getCardiacBeatRejectionTechnique(): string {
    const value = this.x00189169;
    if (value === undefined) {
      throw new Error('CardiacBeatRejectionTechnique is undefined');
    }
    return value;
  }

  // Respiratory Motion Compensation Technique
  get RespiratoryMotionCompensationTechnique(): string | undefined {
    return this.x00189170;
  }

  get x00189170(): string | undefined {
    const value = this.dwResponse['00189170']?.Value;
    return convert(value?.[0], 0x00189170, 'string');
  }

  getRespiratoryMotionCompensationTechnique(): string {
    const value = this.x00189170;
    if (value === undefined) {
      throw new Error('RespiratoryMotionCompensationTechnique is undefined');
    }
    return value;
  }

  // Respiratory Signal Source
  get RespiratorySignalSource(): string | undefined {
    return this.x00189171;
  }

  get x00189171(): string | undefined {
    const value = this.dwResponse['00189171']?.Value;
    return convert(value?.[0], 0x00189171, 'string');
  }

  getRespiratorySignalSource(): string {
    const value = this.x00189171;
    if (value === undefined) {
      throw new Error('RespiratorySignalSource is undefined');
    }
    return value;
  }

  // Bulk Motion Compensation Technique
  get BulkMotionCompensationTechnique(): string | undefined {
    return this.x00189172;
  }

  get x00189172(): string | undefined {
    const value = this.dwResponse['00189172']?.Value;
    return convert(value?.[0], 0x00189172, 'string');
  }

  getBulkMotionCompensationTechnique(): string {
    const value = this.x00189172;
    if (value === undefined) {
      throw new Error('BulkMotionCompensationTechnique is undefined');
    }
    return value;
  }

  // Bulk Motion Signal Source
  get BulkMotionSignalSource(): string | undefined {
    return this.x00189173;
  }

  get x00189173(): string | undefined {
    const value = this.dwResponse['00189173']?.Value;
    return convert(value?.[0], 0x00189173, 'string');
  }

  getBulkMotionSignalSource(): string {
    const value = this.x00189173;
    if (value === undefined) {
      throw new Error('BulkMotionSignalSource is undefined');
    }
    return value;
  }

  // Applicable Safety Standard Agency
  get ApplicableSafetyStandardAgency(): string | undefined {
    return this.x00189174;
  }

  get x00189174(): string | undefined {
    const value = this.dwResponse['00189174']?.Value;
    return convert(value?.[0], 0x00189174, 'string');
  }

  getApplicableSafetyStandardAgency(): string {
    const value = this.x00189174;
    if (value === undefined) {
      throw new Error('ApplicableSafetyStandardAgency is undefined');
    }
    return value;
  }

  // Applicable Safety Standard Description
  get ApplicableSafetyStandardDescription(): string | undefined {
    return this.x00189175;
  }

  get x00189175(): string | undefined {
    const value = this.dwResponse['00189175']?.Value;
    return convert(value?.[0], 0x00189175, 'string');
  }

  getApplicableSafetyStandardDescription(): string {
    const value = this.x00189175;
    if (value === undefined) {
      throw new Error('ApplicableSafetyStandardDescription is undefined');
    }
    return value;
  }

  // Operating Mode Sequence
  get OperatingModeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189176;
  }

  get x00189176(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189176']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOperatingModeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189176;
    if (value === undefined) {
      throw new Error('OperatingModeSequence is undefined');
    }
    return value;
  }

  // Operating Mode Type
  get OperatingModeType(): string | undefined {
    return this.x00189177;
  }

  get x00189177(): string | undefined {
    const value = this.dwResponse['00189177']?.Value;
    return convert(value?.[0], 0x00189177, 'string');
  }

  getOperatingModeType(): string {
    const value = this.x00189177;
    if (value === undefined) {
      throw new Error('OperatingModeType is undefined');
    }
    return value;
  }

  // Operating Mode
  get OperatingMode(): string | undefined {
    return this.x00189178;
  }

  get x00189178(): string | undefined {
    const value = this.dwResponse['00189178']?.Value;
    return convert(value?.[0], 0x00189178, 'string');
  }

  getOperatingMode(): string {
    const value = this.x00189178;
    if (value === undefined) {
      throw new Error('OperatingMode is undefined');
    }
    return value;
  }

  // Specific Absorption Rate Definition
  get SpecificAbsorptionRateDefinition(): string | undefined {
    return this.x00189179;
  }

  get x00189179(): string | undefined {
    const value = this.dwResponse['00189179']?.Value;
    return convert(value?.[0], 0x00189179, 'string');
  }

  getSpecificAbsorptionRateDefinition(): string {
    const value = this.x00189179;
    if (value === undefined) {
      throw new Error('SpecificAbsorptionRateDefinition is undefined');
    }
    return value;
  }

  // Gradient Output Type
  get GradientOutputType(): string | undefined {
    return this.x00189180;
  }

  get x00189180(): string | undefined {
    const value = this.dwResponse['00189180']?.Value;
    return convert(value?.[0], 0x00189180, 'string');
  }

  getGradientOutputType(): string {
    const value = this.x00189180;
    if (value === undefined) {
      throw new Error('GradientOutputType is undefined');
    }
    return value;
  }

  // Specific Absorption Rate Value
  get SpecificAbsorptionRateValue(): number | undefined {
    return this.x00189181;
  }

  get x00189181(): number | undefined {
    const value = this.dwResponse['00189181']?.Value;
    return convert(value?.[0], 0x00189181, 'number');
  }

  getSpecificAbsorptionRateValue(): number {
    const value = this.x00189181;
    if (value === undefined) {
      throw new Error('SpecificAbsorptionRateValue is undefined');
    }
    return value;
  }

  // Gradient Output
  get GradientOutput(): number | undefined {
    return this.x00189182;
  }

  get x00189182(): number | undefined {
    const value = this.dwResponse['00189182']?.Value;
    return convert(value?.[0], 0x00189182, 'number');
  }

  getGradientOutput(): number {
    const value = this.x00189182;
    if (value === undefined) {
      throw new Error('GradientOutput is undefined');
    }
    return value;
  }

  // Flow Compensation Direction
  get FlowCompensationDirection(): string | undefined {
    return this.x00189183;
  }

  get x00189183(): string | undefined {
    const value = this.dwResponse['00189183']?.Value;
    return convert(value?.[0], 0x00189183, 'string');
  }

  getFlowCompensationDirection(): string {
    const value = this.x00189183;
    if (value === undefined) {
      throw new Error('FlowCompensationDirection is undefined');
    }
    return value;
  }

  // Tagging Delay
  get TaggingDelay(): number | undefined {
    return this.x00189184;
  }

  get x00189184(): number | undefined {
    const value = this.dwResponse['00189184']?.Value;
    return convert(value?.[0], 0x00189184, 'number');
  }

  getTaggingDelay(): number {
    const value = this.x00189184;
    if (value === undefined) {
      throw new Error('TaggingDelay is undefined');
    }
    return value;
  }

  // Respiratory Signal Source ID
  get RespiratorySignalSourceID(): string | undefined {
    return this.x00189186;
  }

  get x00189186(): string | undefined {
    const value = this.dwResponse['00189186']?.Value;
    return convert(value?.[0], 0x00189186, 'string');
  }

  getRespiratorySignalSourceID(): string {
    const value = this.x00189186;
    if (value === undefined) {
      throw new Error('RespiratorySignalSourceID is undefined');
    }
    return value;
  }

  // Chemical Shift Minimum Integration Limit in Hz
  get ChemicalShiftMinimumIntegrationLimitInHz(): number | undefined {
    return this.x00189195;
  }

  get x00189195(): number | undefined {
    const value = this.dwResponse['00189195']?.Value;
    return convert(value?.[0], 0x00189195, 'number');
  }

  getChemicalShiftMinimumIntegrationLimitInHz(): number {
    const value = this.x00189195;
    if (value === undefined) {
      throw new Error('ChemicalShiftMinimumIntegrationLimitInHz is undefined');
    }
    return value;
  }

  // Chemical Shift Maximum Integration Limit in Hz
  get ChemicalShiftMaximumIntegrationLimitInHz(): number | undefined {
    return this.x00189196;
  }

  get x00189196(): number | undefined {
    const value = this.dwResponse['00189196']?.Value;
    return convert(value?.[0], 0x00189196, 'number');
  }

  getChemicalShiftMaximumIntegrationLimitInHz(): number {
    const value = this.x00189196;
    if (value === undefined) {
      throw new Error('ChemicalShiftMaximumIntegrationLimitInHz is undefined');
    }
    return value;
  }

  // MR Velocity Encoding Sequence
  get MRVelocityEncodingSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189197;
  }

  get x00189197(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189197']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMRVelocityEncodingSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189197;
    if (value === undefined) {
      throw new Error('MRVelocityEncodingSequence is undefined');
    }
    return value;
  }

  // First Order Phase Correction
  get FirstOrderPhaseCorrection(): string | undefined {
    return this.x00189198;
  }

  get x00189198(): string | undefined {
    const value = this.dwResponse['00189198']?.Value;
    return convert(value?.[0], 0x00189198, 'string');
  }

  getFirstOrderPhaseCorrection(): string {
    const value = this.x00189198;
    if (value === undefined) {
      throw new Error('FirstOrderPhaseCorrection is undefined');
    }
    return value;
  }

  // Water Referenced Phase Correction
  get WaterReferencedPhaseCorrection(): string | undefined {
    return this.x00189199;
  }

  get x00189199(): string | undefined {
    const value = this.dwResponse['00189199']?.Value;
    return convert(value?.[0], 0x00189199, 'string');
  }

  getWaterReferencedPhaseCorrection(): string {
    const value = this.x00189199;
    if (value === undefined) {
      throw new Error('WaterReferencedPhaseCorrection is undefined');
    }
    return value;
  }

  // MR Spectroscopy Acquisition Type
  get MRSpectroscopyAcquisitionType(): string | undefined {
    return this.x00189200;
  }

  get x00189200(): string | undefined {
    const value = this.dwResponse['00189200']?.Value;
    return convert(value?.[0], 0x00189200, 'string');
  }

  getMRSpectroscopyAcquisitionType(): string {
    const value = this.x00189200;
    if (value === undefined) {
      throw new Error('MRSpectroscopyAcquisitionType is undefined');
    }
    return value;
  }

  // Respiratory Cycle Position
  get RespiratoryCyclePosition(): string | undefined {
    return this.x00189214;
  }

  get x00189214(): string | undefined {
    const value = this.dwResponse['00189214']?.Value;
    return convert(value?.[0], 0x00189214, 'string');
  }

  getRespiratoryCyclePosition(): string {
    const value = this.x00189214;
    if (value === undefined) {
      throw new Error('RespiratoryCyclePosition is undefined');
    }
    return value;
  }

  // Velocity Encoding Maximum Value
  get VelocityEncodingMaximumValue(): number | undefined {
    return this.x00189217;
  }

  get x00189217(): number | undefined {
    const value = this.dwResponse['00189217']?.Value;
    return convert(value?.[0], 0x00189217, 'number');
  }

  getVelocityEncodingMaximumValue(): number {
    const value = this.x00189217;
    if (value === undefined) {
      throw new Error('VelocityEncodingMaximumValue is undefined');
    }
    return value;
  }

  // Tag Spacing Second Dimension
  get TagSpacingSecondDimension(): number | undefined {
    return this.x00189218;
  }

  get x00189218(): number | undefined {
    const value = this.dwResponse['00189218']?.Value;
    return convert(value?.[0], 0x00189218, 'number');
  }

  getTagSpacingSecondDimension(): number {
    const value = this.x00189218;
    if (value === undefined) {
      throw new Error('TagSpacingSecondDimension is undefined');
    }
    return value;
  }

  // Tag Angle Second Axis
  get TagAngleSecondAxis(): Uint8Array | undefined {
    return this.x00189219;
  }

  get x00189219(): Uint8Array | undefined {
    const value = this.dwResponse['00189219']?.Value;
    return convert(value?.[0], 0x00189219, 'Uint8Array');
  }

  getTagAngleSecondAxis(): Uint8Array {
    const value = this.x00189219;
    if (value === undefined) {
      throw new Error('TagAngleSecondAxis is undefined');
    }
    return value;
  }

  // Frame Acquisition Duration
  get FrameAcquisitionDuration(): number | undefined {
    return this.x00189220;
  }

  get x00189220(): number | undefined {
    const value = this.dwResponse['00189220']?.Value;
    return convert(value?.[0], 0x00189220, 'number');
  }

  getFrameAcquisitionDuration(): number {
    const value = this.x00189220;
    if (value === undefined) {
      throw new Error('FrameAcquisitionDuration is undefined');
    }
    return value;
  }

  // MR Image Frame Type Sequence
  get MRImageFrameTypeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189226;
  }

  get x00189226(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189226']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMRImageFrameTypeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189226;
    if (value === undefined) {
      throw new Error('MRImageFrameTypeSequence is undefined');
    }
    return value;
  }

  // MR Spectroscopy Frame Type Sequence
  get MRSpectroscopyFrameTypeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189227;
  }

  get x00189227(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189227']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMRSpectroscopyFrameTypeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189227;
    if (value === undefined) {
      throw new Error('MRSpectroscopyFrameTypeSequence is undefined');
    }
    return value;
  }

  // MR Acquisition Phase Encoding Steps in-plane
  get MRAcquisitionPhaseEncodingStepsInPlane(): number | undefined {
    return this.x00189231;
  }

  get x00189231(): number | undefined {
    const value = this.dwResponse['00189231']?.Value;
    return convert(value?.[0], 0x00189231, 'number');
  }

  getMRAcquisitionPhaseEncodingStepsInPlane(): number {
    const value = this.x00189231;
    if (value === undefined) {
      throw new Error('MRAcquisitionPhaseEncodingStepsInPlane is undefined');
    }
    return value;
  }

  // MR Acquisition Phase Encoding Steps out-of-plane
  get MRAcquisitionPhaseEncodingStepsOutOfPlane(): number | undefined {
    return this.x00189232;
  }

  get x00189232(): number | undefined {
    const value = this.dwResponse['00189232']?.Value;
    return convert(value?.[0], 0x00189232, 'number');
  }

  getMRAcquisitionPhaseEncodingStepsOutOfPlane(): number {
    const value = this.x00189232;
    if (value === undefined) {
      throw new Error('MRAcquisitionPhaseEncodingStepsOutOfPlane is undefined');
    }
    return value;
  }

  // Spectroscopy Acquisition Phase Columns
  get SpectroscopyAcquisitionPhaseColumns(): number | undefined {
    return this.x00189234;
  }

  get x00189234(): number | undefined {
    const value = this.dwResponse['00189234']?.Value;
    return convert(value?.[0], 0x00189234, 'number');
  }

  getSpectroscopyAcquisitionPhaseColumns(): number {
    const value = this.x00189234;
    if (value === undefined) {
      throw new Error('SpectroscopyAcquisitionPhaseColumns is undefined');
    }
    return value;
  }

  // Cardiac Cycle Position
  get CardiacCyclePosition(): string | undefined {
    return this.x00189236;
  }

  get x00189236(): string | undefined {
    const value = this.dwResponse['00189236']?.Value;
    return convert(value?.[0], 0x00189236, 'string');
  }

  getCardiacCyclePosition(): string {
    const value = this.x00189236;
    if (value === undefined) {
      throw new Error('CardiacCyclePosition is undefined');
    }
    return value;
  }

  // Specific Absorption Rate Sequence
  get SpecificAbsorptionRateSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189239;
  }

  get x00189239(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189239']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSpecificAbsorptionRateSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189239;
    if (value === undefined) {
      throw new Error('SpecificAbsorptionRateSequence is undefined');
    }
    return value;
  }

  // RF Echo Train Length
  get RFEchoTrainLength(): number | undefined {
    return this.x00189240;
  }

  get x00189240(): number | undefined {
    const value = this.dwResponse['00189240']?.Value;
    return convert(value?.[0], 0x00189240, 'number');
  }

  getRFEchoTrainLength(): number {
    const value = this.x00189240;
    if (value === undefined) {
      throw new Error('RFEchoTrainLength is undefined');
    }
    return value;
  }

  // Gradient Echo Train Length
  get GradientEchoTrainLength(): number | undefined {
    return this.x00189241;
  }

  get x00189241(): number | undefined {
    const value = this.dwResponse['00189241']?.Value;
    return convert(value?.[0], 0x00189241, 'number');
  }

  getGradientEchoTrainLength(): number {
    const value = this.x00189241;
    if (value === undefined) {
      throw new Error('GradientEchoTrainLength is undefined');
    }
    return value;
  }

  // Arterial Spin Labeling Contrast
  get ArterialSpinLabelingContrast(): string | undefined {
    return this.x00189250;
  }

  get x00189250(): string | undefined {
    const value = this.dwResponse['00189250']?.Value;
    return convert(value?.[0], 0x00189250, 'string');
  }

  getArterialSpinLabelingContrast(): string {
    const value = this.x00189250;
    if (value === undefined) {
      throw new Error('ArterialSpinLabelingContrast is undefined');
    }
    return value;
  }

  // MR Arterial Spin Labeling Sequence
  get MRArterialSpinLabelingSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189251;
  }

  get x00189251(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189251']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMRArterialSpinLabelingSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189251;
    if (value === undefined) {
      throw new Error('MRArterialSpinLabelingSequence is undefined');
    }
    return value;
  }

  // ASL Technique Description
  get ASLTechniqueDescription(): string | undefined {
    return this.x00189252;
  }

  get x00189252(): string | undefined {
    const value = this.dwResponse['00189252']?.Value;
    return convert(value?.[0], 0x00189252, 'string');
  }

  getASLTechniqueDescription(): string {
    const value = this.x00189252;
    if (value === undefined) {
      throw new Error('ASLTechniqueDescription is undefined');
    }
    return value;
  }

  // ASL Slab Number
  get ASLSlabNumber(): number | undefined {
    return this.x00189253;
  }

  get x00189253(): number | undefined {
    const value = this.dwResponse['00189253']?.Value;
    return convert(value?.[0], 0x00189253, 'number');
  }

  getASLSlabNumber(): number {
    const value = this.x00189253;
    if (value === undefined) {
      throw new Error('ASLSlabNumber is undefined');
    }
    return value;
  }

  // ASL Slab Thickness
  get ASLSlabThickness(): number | undefined {
    return this.x00189254;
  }

  get x00189254(): number | undefined {
    const value = this.dwResponse['00189254']?.Value;
    return convert(value?.[0], 0x00189254, 'number');
  }

  getASLSlabThickness(): number {
    const value = this.x00189254;
    if (value === undefined) {
      throw new Error('ASLSlabThickness is undefined');
    }
    return value;
  }

  // ASL Slab Orientation
  get ASLSlabOrientation(): Array<number | undefined> | undefined {
    return this.x00189255;
  }

  get x00189255(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189255']?.Value;
    return convert(value, 0x00189255, 'Array<number | undefined>');
  }

  getASLSlabOrientation(): Array<number | undefined> {
    const value = this.x00189255;
    if (value === undefined) {
      throw new Error('ASLSlabOrientation is undefined');
    }
    return value;
  }

  // ASL Mid Slab Position
  get ASLMidSlabPosition(): Array<number | undefined> | undefined {
    return this.x00189256;
  }

  get x00189256(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189256']?.Value;
    return convert(value, 0x00189256, 'Array<number | undefined>');
  }

  getASLMidSlabPosition(): Array<number | undefined> {
    const value = this.x00189256;
    if (value === undefined) {
      throw new Error('ASLMidSlabPosition is undefined');
    }
    return value;
  }

  // ASL Context
  get ASLContext(): string | undefined {
    return this.x00189257;
  }

  get x00189257(): string | undefined {
    const value = this.dwResponse['00189257']?.Value;
    return convert(value?.[0], 0x00189257, 'string');
  }

  getASLContext(): string {
    const value = this.x00189257;
    if (value === undefined) {
      throw new Error('ASLContext is undefined');
    }
    return value;
  }

  // ASL Pulse Train Duration
  get ASLPulseTrainDuration(): number | undefined {
    return this.x00189258;
  }

  get x00189258(): number | undefined {
    const value = this.dwResponse['00189258']?.Value;
    return convert(value?.[0], 0x00189258, 'number');
  }

  getASLPulseTrainDuration(): number {
    const value = this.x00189258;
    if (value === undefined) {
      throw new Error('ASLPulseTrainDuration is undefined');
    }
    return value;
  }

  // ASL Crusher Flag
  get ASLCrusherFlag(): string | undefined {
    return this.x00189259;
  }

  get x00189259(): string | undefined {
    const value = this.dwResponse['00189259']?.Value;
    return convert(value?.[0], 0x00189259, 'string');
  }

  getASLCrusherFlag(): string {
    const value = this.x00189259;
    if (value === undefined) {
      throw new Error('ASLCrusherFlag is undefined');
    }
    return value;
  }

  // ASL Crusher Flow Limit
  get ASLCrusherFlowLimit(): number | undefined {
    return this.x0018925a;
  }

  get x0018925a(): number | undefined {
    const value = this.dwResponse['0018925A']?.Value;
    return convert(value?.[0], 0x0018925a, 'number');
  }

  getASLCrusherFlowLimit(): number {
    const value = this.x0018925a;
    if (value === undefined) {
      throw new Error('ASLCrusherFlowLimit is undefined');
    }
    return value;
  }

  // ASL Crusher Description
  get ASLCrusherDescription(): string | undefined {
    return this.x0018925b;
  }

  get x0018925b(): string | undefined {
    const value = this.dwResponse['0018925B']?.Value;
    return convert(value?.[0], 0x0018925b, 'string');
  }

  getASLCrusherDescription(): string {
    const value = this.x0018925b;
    if (value === undefined) {
      throw new Error('ASLCrusherDescription is undefined');
    }
    return value;
  }

  // ASL Bolus Cut-off Flag
  get ASLBolusCutoffFlag(): string | undefined {
    return this.x0018925c;
  }

  get x0018925c(): string | undefined {
    const value = this.dwResponse['0018925C']?.Value;
    return convert(value?.[0], 0x0018925c, 'string');
  }

  getASLBolusCutoffFlag(): string {
    const value = this.x0018925c;
    if (value === undefined) {
      throw new Error('ASLBolusCutoffFlag is undefined');
    }
    return value;
  }

  // ASL Bolus Cut-off Timing Sequence
  get ASLBolusCutoffTimingSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0018925d;
  }

  get x0018925d(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0018925D']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getASLBolusCutoffTimingSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0018925d;
    if (value === undefined) {
      throw new Error('ASLBolusCutoffTimingSequence is undefined');
    }
    return value;
  }

  // ASL Bolus Cut-off Technique
  get ASLBolusCutoffTechnique(): string | undefined {
    return this.x0018925e;
  }

  get x0018925e(): string | undefined {
    const value = this.dwResponse['0018925E']?.Value;
    return convert(value?.[0], 0x0018925e, 'string');
  }

  getASLBolusCutoffTechnique(): string {
    const value = this.x0018925e;
    if (value === undefined) {
      throw new Error('ASLBolusCutoffTechnique is undefined');
    }
    return value;
  }

  // ASL Bolus Cut-off Delay Time
  get ASLBolusCutoffDelayTime(): number | undefined {
    return this.x0018925f;
  }

  get x0018925f(): number | undefined {
    const value = this.dwResponse['0018925F']?.Value;
    return convert(value?.[0], 0x0018925f, 'number');
  }

  getASLBolusCutoffDelayTime(): number {
    const value = this.x0018925f;
    if (value === undefined) {
      throw new Error('ASLBolusCutoffDelayTime is undefined');
    }
    return value;
  }

  // ASL Slab Sequence
  get ASLSlabSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189260;
  }

  get x00189260(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189260']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getASLSlabSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189260;
    if (value === undefined) {
      throw new Error('ASLSlabSequence is undefined');
    }
    return value;
  }

  // Chemical Shift Minimum Integration Limit in ppm
  get ChemicalShiftMinimumIntegrationLimitInppm(): number | undefined {
    return this.x00189295;
  }

  get x00189295(): number | undefined {
    const value = this.dwResponse['00189295']?.Value;
    return convert(value?.[0], 0x00189295, 'number');
  }

  getChemicalShiftMinimumIntegrationLimitInppm(): number {
    const value = this.x00189295;
    if (value === undefined) {
      throw new Error('ChemicalShiftMinimumIntegrationLimitInppm is undefined');
    }
    return value;
  }

  // Chemical Shift Maximum Integration Limit in ppm
  get ChemicalShiftMaximumIntegrationLimitInppm(): number | undefined {
    return this.x00189296;
  }

  get x00189296(): number | undefined {
    const value = this.dwResponse['00189296']?.Value;
    return convert(value?.[0], 0x00189296, 'number');
  }

  getChemicalShiftMaximumIntegrationLimitInppm(): number {
    const value = this.x00189296;
    if (value === undefined) {
      throw new Error('ChemicalShiftMaximumIntegrationLimitInppm is undefined');
    }
    return value;
  }

  // Water Reference Acquisition
  get WaterReferenceAcquisition(): string | undefined {
    return this.x00189297;
  }

  get x00189297(): string | undefined {
    const value = this.dwResponse['00189297']?.Value;
    return convert(value?.[0], 0x00189297, 'string');
  }

  getWaterReferenceAcquisition(): string {
    const value = this.x00189297;
    if (value === undefined) {
      throw new Error('WaterReferenceAcquisition is undefined');
    }
    return value;
  }

  // Echo Peak Position
  get EchoPeakPosition(): number | undefined {
    return this.x00189298;
  }

  get x00189298(): number | undefined {
    const value = this.dwResponse['00189298']?.Value;
    return convert(value?.[0], 0x00189298, 'number');
  }

  getEchoPeakPosition(): number {
    const value = this.x00189298;
    if (value === undefined) {
      throw new Error('EchoPeakPosition is undefined');
    }
    return value;
  }

  // CT Acquisition Type Sequence
  get CTAcquisitionTypeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189301;
  }

  get x00189301(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189301']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCTAcquisitionTypeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189301;
    if (value === undefined) {
      throw new Error('CTAcquisitionTypeSequence is undefined');
    }
    return value;
  }

  // Acquisition Type
  get AcquisitionType(): string | undefined {
    return this.x00189302;
  }

  get x00189302(): string | undefined {
    const value = this.dwResponse['00189302']?.Value;
    return convert(value?.[0], 0x00189302, 'string');
  }

  getAcquisitionType(): string {
    const value = this.x00189302;
    if (value === undefined) {
      throw new Error('AcquisitionType is undefined');
    }
    return value;
  }

  // Tube Angle
  get TubeAngle(): number | undefined {
    return this.x00189303;
  }

  get x00189303(): number | undefined {
    const value = this.dwResponse['00189303']?.Value;
    return convert(value?.[0], 0x00189303, 'number');
  }

  getTubeAngle(): number {
    const value = this.x00189303;
    if (value === undefined) {
      throw new Error('TubeAngle is undefined');
    }
    return value;
  }

  // CT Acquisition Details Sequence
  get CTAcquisitionDetailsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189304;
  }

  get x00189304(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189304']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCTAcquisitionDetailsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189304;
    if (value === undefined) {
      throw new Error('CTAcquisitionDetailsSequence is undefined');
    }
    return value;
  }

  // Revolution Time
  get RevolutionTime(): number | undefined {
    return this.x00189305;
  }

  get x00189305(): number | undefined {
    const value = this.dwResponse['00189305']?.Value;
    return convert(value?.[0], 0x00189305, 'number');
  }

  getRevolutionTime(): number {
    const value = this.x00189305;
    if (value === undefined) {
      throw new Error('RevolutionTime is undefined');
    }
    return value;
  }

  // Single Collimation Width
  get SingleCollimationWidth(): number | undefined {
    return this.x00189306;
  }

  get x00189306(): number | undefined {
    const value = this.dwResponse['00189306']?.Value;
    return convert(value?.[0], 0x00189306, 'number');
  }

  getSingleCollimationWidth(): number {
    const value = this.x00189306;
    if (value === undefined) {
      throw new Error('SingleCollimationWidth is undefined');
    }
    return value;
  }

  // Total Collimation Width
  get TotalCollimationWidth(): number | undefined {
    return this.x00189307;
  }

  get x00189307(): number | undefined {
    const value = this.dwResponse['00189307']?.Value;
    return convert(value?.[0], 0x00189307, 'number');
  }

  getTotalCollimationWidth(): number {
    const value = this.x00189307;
    if (value === undefined) {
      throw new Error('TotalCollimationWidth is undefined');
    }
    return value;
  }

  // CT Table Dynamics Sequence
  get CTTableDynamicsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189308;
  }

  get x00189308(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189308']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCTTableDynamicsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189308;
    if (value === undefined) {
      throw new Error('CTTableDynamicsSequence is undefined');
    }
    return value;
  }

  // Table Speed
  get TableSpeed(): number | undefined {
    return this.x00189309;
  }

  get x00189309(): number | undefined {
    const value = this.dwResponse['00189309']?.Value;
    return convert(value?.[0], 0x00189309, 'number');
  }

  getTableSpeed(): number {
    const value = this.x00189309;
    if (value === undefined) {
      throw new Error('TableSpeed is undefined');
    }
    return value;
  }

  // Table Feed per Rotation
  get TableFeedPerRotation(): number | undefined {
    return this.x00189310;
  }

  get x00189310(): number | undefined {
    const value = this.dwResponse['00189310']?.Value;
    return convert(value?.[0], 0x00189310, 'number');
  }

  getTableFeedPerRotation(): number {
    const value = this.x00189310;
    if (value === undefined) {
      throw new Error('TableFeedPerRotation is undefined');
    }
    return value;
  }

  // Spiral Pitch Factor
  get SpiralPitchFactor(): number | undefined {
    return this.x00189311;
  }

  get x00189311(): number | undefined {
    const value = this.dwResponse['00189311']?.Value;
    return convert(value?.[0], 0x00189311, 'number');
  }

  getSpiralPitchFactor(): number {
    const value = this.x00189311;
    if (value === undefined) {
      throw new Error('SpiralPitchFactor is undefined');
    }
    return value;
  }

  // CT Geometry Sequence
  get CTGeometrySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189312;
  }

  get x00189312(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189312']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCTGeometrySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189312;
    if (value === undefined) {
      throw new Error('CTGeometrySequence is undefined');
    }
    return value;
  }

  // Data Collection Center (Patient)
  get DataCollectionCenterPatient(): Array<number | undefined> | undefined {
    return this.x00189313;
  }

  get x00189313(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189313']?.Value;
    return convert(value, 0x00189313, 'Array<number | undefined>');
  }

  getDataCollectionCenterPatient(): Array<number | undefined> {
    const value = this.x00189313;
    if (value === undefined) {
      throw new Error('DataCollectionCenterPatient is undefined');
    }
    return value;
  }

  // CT Reconstruction Sequence
  get CTReconstructionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189314;
  }

  get x00189314(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189314']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCTReconstructionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189314;
    if (value === undefined) {
      throw new Error('CTReconstructionSequence is undefined');
    }
    return value;
  }

  // Reconstruction Algorithm
  get ReconstructionAlgorithm(): string | undefined {
    return this.x00189315;
  }

  get x00189315(): string | undefined {
    const value = this.dwResponse['00189315']?.Value;
    return convert(value?.[0], 0x00189315, 'string');
  }

  getReconstructionAlgorithm(): string {
    const value = this.x00189315;
    if (value === undefined) {
      throw new Error('ReconstructionAlgorithm is undefined');
    }
    return value;
  }

  // Convolution Kernel Group
  get ConvolutionKernelGroup(): string | undefined {
    return this.x00189316;
  }

  get x00189316(): string | undefined {
    const value = this.dwResponse['00189316']?.Value;
    return convert(value?.[0], 0x00189316, 'string');
  }

  getConvolutionKernelGroup(): string {
    const value = this.x00189316;
    if (value === undefined) {
      throw new Error('ConvolutionKernelGroup is undefined');
    }
    return value;
  }

  // Reconstruction Field of View
  get ReconstructionFieldOfView(): Array<number | undefined> | undefined {
    return this.x00189317;
  }

  get x00189317(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189317']?.Value;
    return convert(value, 0x00189317, 'Array<number | undefined>');
  }

  getReconstructionFieldOfView(): Array<number | undefined> {
    const value = this.x00189317;
    if (value === undefined) {
      throw new Error('ReconstructionFieldOfView is undefined');
    }
    return value;
  }

  // Reconstruction Target Center (Patient)
  get ReconstructionTargetCenterPatient(): Array<number | undefined> | undefined {
    return this.x00189318;
  }

  get x00189318(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189318']?.Value;
    return convert(value, 0x00189318, 'Array<number | undefined>');
  }

  getReconstructionTargetCenterPatient(): Array<number | undefined> {
    const value = this.x00189318;
    if (value === undefined) {
      throw new Error('ReconstructionTargetCenterPatient is undefined');
    }
    return value;
  }

  // Reconstruction Angle
  get ReconstructionAngle(): number | undefined {
    return this.x00189319;
  }

  get x00189319(): number | undefined {
    const value = this.dwResponse['00189319']?.Value;
    return convert(value?.[0], 0x00189319, 'number');
  }

  getReconstructionAngle(): number {
    const value = this.x00189319;
    if (value === undefined) {
      throw new Error('ReconstructionAngle is undefined');
    }
    return value;
  }

  // Image Filter
  get ImageFilter(): string | undefined {
    return this.x00189320;
  }

  get x00189320(): string | undefined {
    const value = this.dwResponse['00189320']?.Value;
    return convert(value?.[0], 0x00189320, 'string');
  }

  getImageFilter(): string {
    const value = this.x00189320;
    if (value === undefined) {
      throw new Error('ImageFilter is undefined');
    }
    return value;
  }

  // CT Exposure Sequence
  get CTExposureSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189321;
  }

  get x00189321(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189321']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCTExposureSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189321;
    if (value === undefined) {
      throw new Error('CTExposureSequence is undefined');
    }
    return value;
  }

  // Reconstruction Pixel Spacing
  get ReconstructionPixelSpacing(): Array<number | undefined> | undefined {
    return this.x00189322;
  }

  get x00189322(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189322']?.Value;
    return convert(value, 0x00189322, 'Array<number | undefined>');
  }

  getReconstructionPixelSpacing(): Array<number | undefined> {
    const value = this.x00189322;
    if (value === undefined) {
      throw new Error('ReconstructionPixelSpacing is undefined');
    }
    return value;
  }

  // Exposure Modulation Type
  get ExposureModulationType(): string | undefined {
    return this.x00189323;
  }

  get x00189323(): string | undefined {
    const value = this.dwResponse['00189323']?.Value;
    return convert(value?.[0], 0x00189323, 'string');
  }

  getExposureModulationType(): string {
    const value = this.x00189323;
    if (value === undefined) {
      throw new Error('ExposureModulationType is undefined');
    }
    return value;
  }

  // Estimated Dose Saving
  get EstimatedDoseSaving(): number | undefined {
    return this.x00189324;
  }

  get x00189324(): number | undefined {
    const value = this.dwResponse['00189324']?.Value;
    return convert(value?.[0], 0x00189324, 'number');
  }

  getEstimatedDoseSaving(): number {
    const value = this.x00189324;
    if (value === undefined) {
      throw new Error('EstimatedDoseSaving is undefined');
    }
    return value;
  }

  // CT X-Ray Details Sequence
  get CTXRayDetailsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189325;
  }

  get x00189325(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189325']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCTXRayDetailsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189325;
    if (value === undefined) {
      throw new Error('CTXRayDetailsSequence is undefined');
    }
    return value;
  }

  // CT Position Sequence
  get CTPositionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189326;
  }

  get x00189326(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189326']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCTPositionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189326;
    if (value === undefined) {
      throw new Error('CTPositionSequence is undefined');
    }
    return value;
  }

  // Table Position
  get TablePosition(): number | undefined {
    return this.x00189327;
  }

  get x00189327(): number | undefined {
    const value = this.dwResponse['00189327']?.Value;
    return convert(value?.[0], 0x00189327, 'number');
  }

  getTablePosition(): number {
    const value = this.x00189327;
    if (value === undefined) {
      throw new Error('TablePosition is undefined');
    }
    return value;
  }

  // Exposure Time in ms
  get ExposureTimeInms(): number | undefined {
    return this.x00189328;
  }

  get x00189328(): number | undefined {
    const value = this.dwResponse['00189328']?.Value;
    return convert(value?.[0], 0x00189328, 'number');
  }

  getExposureTimeInms(): number {
    const value = this.x00189328;
    if (value === undefined) {
      throw new Error('ExposureTimeInms is undefined');
    }
    return value;
  }

  // CT Image Frame Type Sequence
  get CTImageFrameTypeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189329;
  }

  get x00189329(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189329']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCTImageFrameTypeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189329;
    if (value === undefined) {
      throw new Error('CTImageFrameTypeSequence is undefined');
    }
    return value;
  }

  // X-Ray Tube Current in mA
  get XRayTubeCurrentInmA(): number | undefined {
    return this.x00189330;
  }

  get x00189330(): number | undefined {
    const value = this.dwResponse['00189330']?.Value;
    return convert(value?.[0], 0x00189330, 'number');
  }

  getXRayTubeCurrentInmA(): number {
    const value = this.x00189330;
    if (value === undefined) {
      throw new Error('XRayTubeCurrentInmA is undefined');
    }
    return value;
  }

  // Exposure in mAs
  get ExposureInmAs(): number | undefined {
    return this.x00189332;
  }

  get x00189332(): number | undefined {
    const value = this.dwResponse['00189332']?.Value;
    return convert(value?.[0], 0x00189332, 'number');
  }

  getExposureInmAs(): number {
    const value = this.x00189332;
    if (value === undefined) {
      throw new Error('ExposureInmAs is undefined');
    }
    return value;
  }

  // Constant Volume Flag
  get ConstantVolumeFlag(): string | undefined {
    return this.x00189333;
  }

  get x00189333(): string | undefined {
    const value = this.dwResponse['00189333']?.Value;
    return convert(value?.[0], 0x00189333, 'string');
  }

  getConstantVolumeFlag(): string {
    const value = this.x00189333;
    if (value === undefined) {
      throw new Error('ConstantVolumeFlag is undefined');
    }
    return value;
  }

  // Fluoroscopy Flag
  get FluoroscopyFlag(): string | undefined {
    return this.x00189334;
  }

  get x00189334(): string | undefined {
    const value = this.dwResponse['00189334']?.Value;
    return convert(value?.[0], 0x00189334, 'string');
  }

  getFluoroscopyFlag(): string {
    const value = this.x00189334;
    if (value === undefined) {
      throw new Error('FluoroscopyFlag is undefined');
    }
    return value;
  }

  // Distance Source to Data Collection Center
  get DistanceSourceToDataCollectionCenter(): number | undefined {
    return this.x00189335;
  }

  get x00189335(): number | undefined {
    const value = this.dwResponse['00189335']?.Value;
    return convert(value?.[0], 0x00189335, 'number');
  }

  getDistanceSourceToDataCollectionCenter(): number {
    const value = this.x00189335;
    if (value === undefined) {
      throw new Error('DistanceSourceToDataCollectionCenter is undefined');
    }
    return value;
  }

  // Contrast/Bolus Agent Number
  get ContrastBolusAgentNumber(): number | undefined {
    return this.x00189337;
  }

  get x00189337(): number | undefined {
    const value = this.dwResponse['00189337']?.Value;
    return convert(value?.[0], 0x00189337, 'number');
  }

  getContrastBolusAgentNumber(): number {
    const value = this.x00189337;
    if (value === undefined) {
      throw new Error('ContrastBolusAgentNumber is undefined');
    }
    return value;
  }

  // Contrast/Bolus Ingredient Code Sequence
  get ContrastBolusIngredientCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189338;
  }

  get x00189338(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189338']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getContrastBolusIngredientCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189338;
    if (value === undefined) {
      throw new Error('ContrastBolusIngredientCodeSequence is undefined');
    }
    return value;
  }

  // Contrast Administration Profile Sequence
  get ContrastAdministrationProfileSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189340;
  }

  get x00189340(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189340']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getContrastAdministrationProfileSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189340;
    if (value === undefined) {
      throw new Error('ContrastAdministrationProfileSequence is undefined');
    }
    return value;
  }

  // Contrast/Bolus Usage Sequence
  get ContrastBolusUsageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189341;
  }

  get x00189341(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189341']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getContrastBolusUsageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189341;
    if (value === undefined) {
      throw new Error('ContrastBolusUsageSequence is undefined');
    }
    return value;
  }

  // Contrast/Bolus Agent Administered
  get ContrastBolusAgentAdministered(): string | undefined {
    return this.x00189342;
  }

  get x00189342(): string | undefined {
    const value = this.dwResponse['00189342']?.Value;
    return convert(value?.[0], 0x00189342, 'string');
  }

  getContrastBolusAgentAdministered(): string {
    const value = this.x00189342;
    if (value === undefined) {
      throw new Error('ContrastBolusAgentAdministered is undefined');
    }
    return value;
  }

  // Contrast/Bolus Agent Detected
  get ContrastBolusAgentDetected(): string | undefined {
    return this.x00189343;
  }

  get x00189343(): string | undefined {
    const value = this.dwResponse['00189343']?.Value;
    return convert(value?.[0], 0x00189343, 'string');
  }

  getContrastBolusAgentDetected(): string {
    const value = this.x00189343;
    if (value === undefined) {
      throw new Error('ContrastBolusAgentDetected is undefined');
    }
    return value;
  }

  // Contrast/Bolus Agent Phase
  get ContrastBolusAgentPhase(): string | undefined {
    return this.x00189344;
  }

  get x00189344(): string | undefined {
    const value = this.dwResponse['00189344']?.Value;
    return convert(value?.[0], 0x00189344, 'string');
  }

  getContrastBolusAgentPhase(): string {
    const value = this.x00189344;
    if (value === undefined) {
      throw new Error('ContrastBolusAgentPhase is undefined');
    }
    return value;
  }

  // CTDIvol
  get CTDIvol(): number | undefined {
    return this.x00189345;
  }

  get x00189345(): number | undefined {
    const value = this.dwResponse['00189345']?.Value;
    return convert(value?.[0], 0x00189345, 'number');
  }

  getCTDIvol(): number {
    const value = this.x00189345;
    if (value === undefined) {
      throw new Error('CTDIvol is undefined');
    }
    return value;
  }

  // CTDI Phantom Type Code Sequence
  get CTDIPhantomTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189346;
  }

  get x00189346(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189346']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCTDIPhantomTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189346;
    if (value === undefined) {
      throw new Error('CTDIPhantomTypeCodeSequence is undefined');
    }
    return value;
  }

  // Calcium Scoring Mass Factor Patient
  get CalciumScoringMassFactorPatient(): number | undefined {
    return this.x00189351;
  }

  get x00189351(): number | undefined {
    const value = this.dwResponse['00189351']?.Value;
    return convert(value?.[0], 0x00189351, 'number');
  }

  getCalciumScoringMassFactorPatient(): number {
    const value = this.x00189351;
    if (value === undefined) {
      throw new Error('CalciumScoringMassFactorPatient is undefined');
    }
    return value;
  }

  // Calcium Scoring Mass Factor Device
  get CalciumScoringMassFactorDevice(): Array<number | undefined> | undefined {
    return this.x00189352;
  }

  get x00189352(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189352']?.Value;
    return convert(value, 0x00189352, 'Array<number | undefined>');
  }

  getCalciumScoringMassFactorDevice(): Array<number | undefined> {
    const value = this.x00189352;
    if (value === undefined) {
      throw new Error('CalciumScoringMassFactorDevice is undefined');
    }
    return value;
  }

  // Energy Weighting Factor
  get EnergyWeightingFactor(): number | undefined {
    return this.x00189353;
  }

  get x00189353(): number | undefined {
    const value = this.dwResponse['00189353']?.Value;
    return convert(value?.[0], 0x00189353, 'number');
  }

  getEnergyWeightingFactor(): number {
    const value = this.x00189353;
    if (value === undefined) {
      throw new Error('EnergyWeightingFactor is undefined');
    }
    return value;
  }

  // CT Additional X-Ray Source Sequence
  get CTAdditionalXRaySourceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189360;
  }

  get x00189360(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189360']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCTAdditionalXRaySourceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189360;
    if (value === undefined) {
      throw new Error('CTAdditionalXRaySourceSequence is undefined');
    }
    return value;
  }

  // Projection Pixel Calibration Sequence
  get ProjectionPixelCalibrationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189401;
  }

  get x00189401(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189401']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getProjectionPixelCalibrationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189401;
    if (value === undefined) {
      throw new Error('ProjectionPixelCalibrationSequence is undefined');
    }
    return value;
  }

  // Distance Source to Isocenter
  get DistanceSourceToIsocenter(): number | undefined {
    return this.x00189402;
  }

  get x00189402(): number | undefined {
    const value = this.dwResponse['00189402']?.Value;
    return convert(value?.[0], 0x00189402, 'number');
  }

  getDistanceSourceToIsocenter(): number {
    const value = this.x00189402;
    if (value === undefined) {
      throw new Error('DistanceSourceToIsocenter is undefined');
    }
    return value;
  }

  // Distance Object to Table Top
  get DistanceObjectToTableTop(): number | undefined {
    return this.x00189403;
  }

  get x00189403(): number | undefined {
    const value = this.dwResponse['00189403']?.Value;
    return convert(value?.[0], 0x00189403, 'number');
  }

  getDistanceObjectToTableTop(): number {
    const value = this.x00189403;
    if (value === undefined) {
      throw new Error('DistanceObjectToTableTop is undefined');
    }
    return value;
  }

  // Object Pixel Spacing in Center of Beam
  get ObjectPixelSpacingInCenterOfBeam(): Array<number | undefined> | undefined {
    return this.x00189404;
  }

  get x00189404(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189404']?.Value;
    return convert(value, 0x00189404, 'Array<number | undefined>');
  }

  getObjectPixelSpacingInCenterOfBeam(): Array<number | undefined> {
    const value = this.x00189404;
    if (value === undefined) {
      throw new Error('ObjectPixelSpacingInCenterOfBeam is undefined');
    }
    return value;
  }

  // Positioner Position Sequence
  get PositionerPositionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189405;
  }

  get x00189405(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189405']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPositionerPositionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189405;
    if (value === undefined) {
      throw new Error('PositionerPositionSequence is undefined');
    }
    return value;
  }

  // Table Position Sequence
  get TablePositionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189406;
  }

  get x00189406(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189406']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTablePositionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189406;
    if (value === undefined) {
      throw new Error('TablePositionSequence is undefined');
    }
    return value;
  }

  // Collimator Shape Sequence
  get CollimatorShapeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189407;
  }

  get x00189407(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189407']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCollimatorShapeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189407;
    if (value === undefined) {
      throw new Error('CollimatorShapeSequence is undefined');
    }
    return value;
  }

  // Planes in Acquisition
  get PlanesInAcquisition(): string | undefined {
    return this.x00189410;
  }

  get x00189410(): string | undefined {
    const value = this.dwResponse['00189410']?.Value;
    return convert(value?.[0], 0x00189410, 'string');
  }

  getPlanesInAcquisition(): string {
    const value = this.x00189410;
    if (value === undefined) {
      throw new Error('PlanesInAcquisition is undefined');
    }
    return value;
  }

  // XA/XRF Frame Characteristics Sequence
  get XAXRFFrameCharacteristicsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189412;
  }

  get x00189412(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189412']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getXAXRFFrameCharacteristicsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189412;
    if (value === undefined) {
      throw new Error('XAXRFFrameCharacteristicsSequence is undefined');
    }
    return value;
  }

  // Frame Acquisition Sequence
  get FrameAcquisitionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189417;
  }

  get x00189417(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189417']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFrameAcquisitionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189417;
    if (value === undefined) {
      throw new Error('FrameAcquisitionSequence is undefined');
    }
    return value;
  }

  // X-Ray Receptor Type
  get XRayReceptorType(): string | undefined {
    return this.x00189420;
  }

  get x00189420(): string | undefined {
    const value = this.dwResponse['00189420']?.Value;
    return convert(value?.[0], 0x00189420, 'string');
  }

  getXRayReceptorType(): string {
    const value = this.x00189420;
    if (value === undefined) {
      throw new Error('XRayReceptorType is undefined');
    }
    return value;
  }

  // Acquisition Protocol Name
  get AcquisitionProtocolName(): string | undefined {
    return this.x00189423;
  }

  get x00189423(): string | undefined {
    const value = this.dwResponse['00189423']?.Value;
    return convert(value?.[0], 0x00189423, 'string');
  }

  getAcquisitionProtocolName(): string {
    const value = this.x00189423;
    if (value === undefined) {
      throw new Error('AcquisitionProtocolName is undefined');
    }
    return value;
  }

  // Contrast/Bolus Ingredient Opaque
  get ContrastBolusIngredientOpaque(): string | undefined {
    return this.x00189425;
  }

  get x00189425(): string | undefined {
    const value = this.dwResponse['00189425']?.Value;
    return convert(value?.[0], 0x00189425, 'string');
  }

  getContrastBolusIngredientOpaque(): string {
    const value = this.x00189425;
    if (value === undefined) {
      throw new Error('ContrastBolusIngredientOpaque is undefined');
    }
    return value;
  }

  // Distance Receptor Plane to Detector Housing
  get DistanceReceptorPlaneToDetectorHousing(): number | undefined {
    return this.x00189426;
  }

  get x00189426(): number | undefined {
    const value = this.dwResponse['00189426']?.Value;
    return convert(value?.[0], 0x00189426, 'number');
  }

  getDistanceReceptorPlaneToDetectorHousing(): number {
    const value = this.x00189426;
    if (value === undefined) {
      throw new Error('DistanceReceptorPlaneToDetectorHousing is undefined');
    }
    return value;
  }

  // Intensifier Active Shape
  get IntensifierActiveShape(): string | undefined {
    return this.x00189427;
  }

  get x00189427(): string | undefined {
    const value = this.dwResponse['00189427']?.Value;
    return convert(value?.[0], 0x00189427, 'string');
  }

  getIntensifierActiveShape(): string {
    const value = this.x00189427;
    if (value === undefined) {
      throw new Error('IntensifierActiveShape is undefined');
    }
    return value;
  }

  // Intensifier Active Dimension(s)
  get IntensifierActiveDimensions(): Array<number | undefined> | undefined {
    return this.x00189428;
  }

  get x00189428(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189428']?.Value;
    return convert(value, 0x00189428, 'Array<number | undefined>');
  }

  getIntensifierActiveDimensions(): Array<number | undefined> {
    const value = this.x00189428;
    if (value === undefined) {
      throw new Error('IntensifierActiveDimensions is undefined');
    }
    return value;
  }

  // Physical Detector Size
  get PhysicalDetectorSize(): Array<number | undefined> | undefined {
    return this.x00189429;
  }

  get x00189429(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189429']?.Value;
    return convert(value, 0x00189429, 'Array<number | undefined>');
  }

  getPhysicalDetectorSize(): Array<number | undefined> {
    const value = this.x00189429;
    if (value === undefined) {
      throw new Error('PhysicalDetectorSize is undefined');
    }
    return value;
  }

  // Position of Isocenter Projection
  get PositionOfIsocenterProjection(): Array<number | undefined> | undefined {
    return this.x00189430;
  }

  get x00189430(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189430']?.Value;
    return convert(value, 0x00189430, 'Array<number | undefined>');
  }

  getPositionOfIsocenterProjection(): Array<number | undefined> {
    const value = this.x00189430;
    if (value === undefined) {
      throw new Error('PositionOfIsocenterProjection is undefined');
    }
    return value;
  }

  // Field of View Sequence
  get FieldOfViewSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189432;
  }

  get x00189432(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189432']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFieldOfViewSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189432;
    if (value === undefined) {
      throw new Error('FieldOfViewSequence is undefined');
    }
    return value;
  }

  // Field of View Description
  get FieldOfViewDescription(): string | undefined {
    return this.x00189433;
  }

  get x00189433(): string | undefined {
    const value = this.dwResponse['00189433']?.Value;
    return convert(value?.[0], 0x00189433, 'string');
  }

  getFieldOfViewDescription(): string {
    const value = this.x00189433;
    if (value === undefined) {
      throw new Error('FieldOfViewDescription is undefined');
    }
    return value;
  }

  // Exposure Control Sensing Regions Sequence
  get ExposureControlSensingRegionsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189434;
  }

  get x00189434(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189434']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getExposureControlSensingRegionsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189434;
    if (value === undefined) {
      throw new Error('ExposureControlSensingRegionsSequence is undefined');
    }
    return value;
  }

  // Exposure Control Sensing Region Shape
  get ExposureControlSensingRegionShape(): string | undefined {
    return this.x00189435;
  }

  get x00189435(): string | undefined {
    const value = this.dwResponse['00189435']?.Value;
    return convert(value?.[0], 0x00189435, 'string');
  }

  getExposureControlSensingRegionShape(): string {
    const value = this.x00189435;
    if (value === undefined) {
      throw new Error('ExposureControlSensingRegionShape is undefined');
    }
    return value;
  }

  // Exposure Control Sensing Region Left Vertical Edge
  get ExposureControlSensingRegionLeftVerticalEdge(): Uint8Array | undefined {
    return this.x00189436;
  }

  get x00189436(): Uint8Array | undefined {
    const value = this.dwResponse['00189436']?.Value;
    return convert(value?.[0], 0x00189436, 'Uint8Array');
  }

  getExposureControlSensingRegionLeftVerticalEdge(): Uint8Array {
    const value = this.x00189436;
    if (value === undefined) {
      throw new Error('ExposureControlSensingRegionLeftVerticalEdge is undefined');
    }
    return value;
  }

  // Exposure Control Sensing Region Right Vertical Edge
  get ExposureControlSensingRegionRightVerticalEdge(): Uint8Array | undefined {
    return this.x00189437;
  }

  get x00189437(): Uint8Array | undefined {
    const value = this.dwResponse['00189437']?.Value;
    return convert(value?.[0], 0x00189437, 'Uint8Array');
  }

  getExposureControlSensingRegionRightVerticalEdge(): Uint8Array {
    const value = this.x00189437;
    if (value === undefined) {
      throw new Error('ExposureControlSensingRegionRightVerticalEdge is undefined');
    }
    return value;
  }

  // Exposure Control Sensing Region Upper Horizontal Edge
  get ExposureControlSensingRegionUpperHorizontalEdge(): Uint8Array | undefined {
    return this.x00189438;
  }

  get x00189438(): Uint8Array | undefined {
    const value = this.dwResponse['00189438']?.Value;
    return convert(value?.[0], 0x00189438, 'Uint8Array');
  }

  getExposureControlSensingRegionUpperHorizontalEdge(): Uint8Array {
    const value = this.x00189438;
    if (value === undefined) {
      throw new Error('ExposureControlSensingRegionUpperHorizontalEdge is undefined');
    }
    return value;
  }

  // Exposure Control Sensing Region Lower Horizontal Edge
  get ExposureControlSensingRegionLowerHorizontalEdge(): Uint8Array | undefined {
    return this.x00189439;
  }

  get x00189439(): Uint8Array | undefined {
    const value = this.dwResponse['00189439']?.Value;
    return convert(value?.[0], 0x00189439, 'Uint8Array');
  }

  getExposureControlSensingRegionLowerHorizontalEdge(): Uint8Array {
    const value = this.x00189439;
    if (value === undefined) {
      throw new Error('ExposureControlSensingRegionLowerHorizontalEdge is undefined');
    }
    return value;
  }

  // Center of Circular Exposure Control Sensing Region
  get CenterOfCircularExposureControlSensingRegion(): Array<Uint8Array | undefined> | undefined {
    return this.x00189440;
  }

  get x00189440(): Array<Uint8Array | undefined> | undefined {
    const value = this.dwResponse['00189440']?.Value;
    return convert(value, 0x00189440, 'Array<Uint8Array | undefined>');
  }

  getCenterOfCircularExposureControlSensingRegion(): Array<Uint8Array | undefined> {
    const value = this.x00189440;
    if (value === undefined) {
      throw new Error('CenterOfCircularExposureControlSensingRegion is undefined');
    }
    return value;
  }

  // Radius of Circular Exposure Control Sensing Region
  get RadiusOfCircularExposureControlSensingRegion(): number | undefined {
    return this.x00189441;
  }

  get x00189441(): number | undefined {
    const value = this.dwResponse['00189441']?.Value;
    return convert(value?.[0], 0x00189441, 'number');
  }

  getRadiusOfCircularExposureControlSensingRegion(): number {
    const value = this.x00189441;
    if (value === undefined) {
      throw new Error('RadiusOfCircularExposureControlSensingRegion is undefined');
    }
    return value;
  }

  // Vertices of the Polygonal Exposure Control Sensing Region
  get VerticesOfThePolygonalExposureControlSensingRegion(): Array<Uint8Array | undefined> | undefined {
    return this.x00189442;
  }

  get x00189442(): Array<Uint8Array | undefined> | undefined {
    const value = this.dwResponse['00189442']?.Value;
    return convert(value, 0x00189442, 'Array<Uint8Array | undefined>');
  }

  getVerticesOfThePolygonalExposureControlSensingRegion(): Array<Uint8Array | undefined> {
    const value = this.x00189442;
    if (value === undefined) {
      throw new Error('VerticesOfThePolygonalExposureControlSensingRegion is undefined');
    }
    return value;
  }

  // Column Angulation (Patient)
  get ColumnAngulationPatient(): number | undefined {
    return this.x00189447;
  }

  get x00189447(): number | undefined {
    const value = this.dwResponse['00189447']?.Value;
    return convert(value?.[0], 0x00189447, 'number');
  }

  getColumnAngulationPatient(): number {
    const value = this.x00189447;
    if (value === undefined) {
      throw new Error('ColumnAngulationPatient is undefined');
    }
    return value;
  }

  // Beam Angle
  get BeamAngle(): number | undefined {
    return this.x00189449;
  }

  get x00189449(): number | undefined {
    const value = this.dwResponse['00189449']?.Value;
    return convert(value?.[0], 0x00189449, 'number');
  }

  getBeamAngle(): number {
    const value = this.x00189449;
    if (value === undefined) {
      throw new Error('BeamAngle is undefined');
    }
    return value;
  }

  // Frame Detector Parameters Sequence
  get FrameDetectorParametersSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189451;
  }

  get x00189451(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189451']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFrameDetectorParametersSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189451;
    if (value === undefined) {
      throw new Error('FrameDetectorParametersSequence is undefined');
    }
    return value;
  }

  // Calculated Anatomy Thickness
  get CalculatedAnatomyThickness(): number | undefined {
    return this.x00189452;
  }

  get x00189452(): number | undefined {
    const value = this.dwResponse['00189452']?.Value;
    return convert(value?.[0], 0x00189452, 'number');
  }

  getCalculatedAnatomyThickness(): number {
    const value = this.x00189452;
    if (value === undefined) {
      throw new Error('CalculatedAnatomyThickness is undefined');
    }
    return value;
  }

  // Calibration Sequence
  get CalibrationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189455;
  }

  get x00189455(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189455']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCalibrationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189455;
    if (value === undefined) {
      throw new Error('CalibrationSequence is undefined');
    }
    return value;
  }

  // Object Thickness Sequence
  get ObjectThicknessSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189456;
  }

  get x00189456(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189456']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getObjectThicknessSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189456;
    if (value === undefined) {
      throw new Error('ObjectThicknessSequence is undefined');
    }
    return value;
  }

  // Plane Identification
  get PlaneIdentification(): string | undefined {
    return this.x00189457;
  }

  get x00189457(): string | undefined {
    const value = this.dwResponse['00189457']?.Value;
    return convert(value?.[0], 0x00189457, 'string');
  }

  getPlaneIdentification(): string {
    const value = this.x00189457;
    if (value === undefined) {
      throw new Error('PlaneIdentification is undefined');
    }
    return value;
  }

  // Field of View Dimension(s) in Float
  get FieldOfViewDimensionsInFloat(): Array<number | undefined> | undefined {
    return this.x00189461;
  }

  get x00189461(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189461']?.Value;
    return convert(value, 0x00189461, 'Array<number | undefined>');
  }

  getFieldOfViewDimensionsInFloat(): Array<number | undefined> {
    const value = this.x00189461;
    if (value === undefined) {
      throw new Error('FieldOfViewDimensionsInFloat is undefined');
    }
    return value;
  }

  // Isocenter Reference System Sequence
  get IsocenterReferenceSystemSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189462;
  }

  get x00189462(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189462']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIsocenterReferenceSystemSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189462;
    if (value === undefined) {
      throw new Error('IsocenterReferenceSystemSequence is undefined');
    }
    return value;
  }

  // Positioner Isocenter Primary Angle
  get PositionerIsocenterPrimaryAngle(): number | undefined {
    return this.x00189463;
  }

  get x00189463(): number | undefined {
    const value = this.dwResponse['00189463']?.Value;
    return convert(value?.[0], 0x00189463, 'number');
  }

  getPositionerIsocenterPrimaryAngle(): number {
    const value = this.x00189463;
    if (value === undefined) {
      throw new Error('PositionerIsocenterPrimaryAngle is undefined');
    }
    return value;
  }

  // Positioner Isocenter Secondary Angle
  get PositionerIsocenterSecondaryAngle(): number | undefined {
    return this.x00189464;
  }

  get x00189464(): number | undefined {
    const value = this.dwResponse['00189464']?.Value;
    return convert(value?.[0], 0x00189464, 'number');
  }

  getPositionerIsocenterSecondaryAngle(): number {
    const value = this.x00189464;
    if (value === undefined) {
      throw new Error('PositionerIsocenterSecondaryAngle is undefined');
    }
    return value;
  }

  // Positioner Isocenter Detector Rotation Angle
  get PositionerIsocenterDetectorRotationAngle(): number | undefined {
    return this.x00189465;
  }

  get x00189465(): number | undefined {
    const value = this.dwResponse['00189465']?.Value;
    return convert(value?.[0], 0x00189465, 'number');
  }

  getPositionerIsocenterDetectorRotationAngle(): number {
    const value = this.x00189465;
    if (value === undefined) {
      throw new Error('PositionerIsocenterDetectorRotationAngle is undefined');
    }
    return value;
  }

  // Table X Position to Isocenter
  get TableXPositionToIsocenter(): number | undefined {
    return this.x00189466;
  }

  get x00189466(): number | undefined {
    const value = this.dwResponse['00189466']?.Value;
    return convert(value?.[0], 0x00189466, 'number');
  }

  getTableXPositionToIsocenter(): number {
    const value = this.x00189466;
    if (value === undefined) {
      throw new Error('TableXPositionToIsocenter is undefined');
    }
    return value;
  }

  // Table Y Position to Isocenter
  get TableYPositionToIsocenter(): number | undefined {
    return this.x00189467;
  }

  get x00189467(): number | undefined {
    const value = this.dwResponse['00189467']?.Value;
    return convert(value?.[0], 0x00189467, 'number');
  }

  getTableYPositionToIsocenter(): number {
    const value = this.x00189467;
    if (value === undefined) {
      throw new Error('TableYPositionToIsocenter is undefined');
    }
    return value;
  }

  // Table Z Position to Isocenter
  get TableZPositionToIsocenter(): number | undefined {
    return this.x00189468;
  }

  get x00189468(): number | undefined {
    const value = this.dwResponse['00189468']?.Value;
    return convert(value?.[0], 0x00189468, 'number');
  }

  getTableZPositionToIsocenter(): number {
    const value = this.x00189468;
    if (value === undefined) {
      throw new Error('TableZPositionToIsocenter is undefined');
    }
    return value;
  }

  // Table Horizontal Rotation Angle
  get TableHorizontalRotationAngle(): number | undefined {
    return this.x00189469;
  }

  get x00189469(): number | undefined {
    const value = this.dwResponse['00189469']?.Value;
    return convert(value?.[0], 0x00189469, 'number');
  }

  getTableHorizontalRotationAngle(): number {
    const value = this.x00189469;
    if (value === undefined) {
      throw new Error('TableHorizontalRotationAngle is undefined');
    }
    return value;
  }

  // Table Head Tilt Angle
  get TableHeadTiltAngle(): number | undefined {
    return this.x00189470;
  }

  get x00189470(): number | undefined {
    const value = this.dwResponse['00189470']?.Value;
    return convert(value?.[0], 0x00189470, 'number');
  }

  getTableHeadTiltAngle(): number {
    const value = this.x00189470;
    if (value === undefined) {
      throw new Error('TableHeadTiltAngle is undefined');
    }
    return value;
  }

  // Table Cradle Tilt Angle
  get TableCradleTiltAngle(): number | undefined {
    return this.x00189471;
  }

  get x00189471(): number | undefined {
    const value = this.dwResponse['00189471']?.Value;
    return convert(value?.[0], 0x00189471, 'number');
  }

  getTableCradleTiltAngle(): number {
    const value = this.x00189471;
    if (value === undefined) {
      throw new Error('TableCradleTiltAngle is undefined');
    }
    return value;
  }

  // Frame Display Shutter Sequence
  get FrameDisplayShutterSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189472;
  }

  get x00189472(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189472']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFrameDisplayShutterSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189472;
    if (value === undefined) {
      throw new Error('FrameDisplayShutterSequence is undefined');
    }
    return value;
  }

  // Acquired Image Area Dose Product
  get AcquiredImageAreaDoseProduct(): number | undefined {
    return this.x00189473;
  }

  get x00189473(): number | undefined {
    const value = this.dwResponse['00189473']?.Value;
    return convert(value?.[0], 0x00189473, 'number');
  }

  getAcquiredImageAreaDoseProduct(): number {
    const value = this.x00189473;
    if (value === undefined) {
      throw new Error('AcquiredImageAreaDoseProduct is undefined');
    }
    return value;
  }

  // C-arm Positioner Tabletop Relationship
  get CArmPositionerTabletopRelationship(): string | undefined {
    return this.x00189474;
  }

  get x00189474(): string | undefined {
    const value = this.dwResponse['00189474']?.Value;
    return convert(value?.[0], 0x00189474, 'string');
  }

  getCArmPositionerTabletopRelationship(): string {
    const value = this.x00189474;
    if (value === undefined) {
      throw new Error('CArmPositionerTabletopRelationship is undefined');
    }
    return value;
  }

  // X-Ray Geometry Sequence
  get XRayGeometrySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189476;
  }

  get x00189476(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189476']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getXRayGeometrySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189476;
    if (value === undefined) {
      throw new Error('XRayGeometrySequence is undefined');
    }
    return value;
  }

  // Irradiation Event Identification Sequence
  get IrradiationEventIdentificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189477;
  }

  get x00189477(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189477']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIrradiationEventIdentificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189477;
    if (value === undefined) {
      throw new Error('IrradiationEventIdentificationSequence is undefined');
    }
    return value;
  }

  // X-Ray 3D Frame Type Sequence
  get XRay3DFrameTypeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189504;
  }

  get x00189504(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189504']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getXRay3DFrameTypeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189504;
    if (value === undefined) {
      throw new Error('XRay3DFrameTypeSequence is undefined');
    }
    return value;
  }

  // Contributing Sources Sequence
  get ContributingSourcesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189506;
  }

  get x00189506(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189506']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getContributingSourcesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189506;
    if (value === undefined) {
      throw new Error('ContributingSourcesSequence is undefined');
    }
    return value;
  }

  // X-Ray 3D Acquisition Sequence
  get XRay3DAcquisitionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189507;
  }

  get x00189507(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189507']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getXRay3DAcquisitionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189507;
    if (value === undefined) {
      throw new Error('XRay3DAcquisitionSequence is undefined');
    }
    return value;
  }

  // Primary Positioner Scan Arc
  get PrimaryPositionerScanArc(): number | undefined {
    return this.x00189508;
  }

  get x00189508(): number | undefined {
    const value = this.dwResponse['00189508']?.Value;
    return convert(value?.[0], 0x00189508, 'number');
  }

  getPrimaryPositionerScanArc(): number {
    const value = this.x00189508;
    if (value === undefined) {
      throw new Error('PrimaryPositionerScanArc is undefined');
    }
    return value;
  }

  // Secondary Positioner Scan Arc
  get SecondaryPositionerScanArc(): number | undefined {
    return this.x00189509;
  }

  get x00189509(): number | undefined {
    const value = this.dwResponse['00189509']?.Value;
    return convert(value?.[0], 0x00189509, 'number');
  }

  getSecondaryPositionerScanArc(): number {
    const value = this.x00189509;
    if (value === undefined) {
      throw new Error('SecondaryPositionerScanArc is undefined');
    }
    return value;
  }

  // Primary Positioner Scan Start Angle
  get PrimaryPositionerScanStartAngle(): number | undefined {
    return this.x00189510;
  }

  get x00189510(): number | undefined {
    const value = this.dwResponse['00189510']?.Value;
    return convert(value?.[0], 0x00189510, 'number');
  }

  getPrimaryPositionerScanStartAngle(): number {
    const value = this.x00189510;
    if (value === undefined) {
      throw new Error('PrimaryPositionerScanStartAngle is undefined');
    }
    return value;
  }

  // Secondary Positioner Scan Start Angle
  get SecondaryPositionerScanStartAngle(): number | undefined {
    return this.x00189511;
  }

  get x00189511(): number | undefined {
    const value = this.dwResponse['00189511']?.Value;
    return convert(value?.[0], 0x00189511, 'number');
  }

  getSecondaryPositionerScanStartAngle(): number {
    const value = this.x00189511;
    if (value === undefined) {
      throw new Error('SecondaryPositionerScanStartAngle is undefined');
    }
    return value;
  }

  // Primary Positioner Increment
  get PrimaryPositionerIncrement(): number | undefined {
    return this.x00189514;
  }

  get x00189514(): number | undefined {
    const value = this.dwResponse['00189514']?.Value;
    return convert(value?.[0], 0x00189514, 'number');
  }

  getPrimaryPositionerIncrement(): number {
    const value = this.x00189514;
    if (value === undefined) {
      throw new Error('PrimaryPositionerIncrement is undefined');
    }
    return value;
  }

  // Secondary Positioner Increment
  get SecondaryPositionerIncrement(): number | undefined {
    return this.x00189515;
  }

  get x00189515(): number | undefined {
    const value = this.dwResponse['00189515']?.Value;
    return convert(value?.[0], 0x00189515, 'number');
  }

  getSecondaryPositionerIncrement(): number {
    const value = this.x00189515;
    if (value === undefined) {
      throw new Error('SecondaryPositionerIncrement is undefined');
    }
    return value;
  }

  // Start Acquisition DateTime
  get StartAcquisitionDateTime(): string | undefined {
    return this.x00189516;
  }

  get x00189516(): string | undefined {
    const value = this.dwResponse['00189516']?.Value;
    return convert(value?.[0], 0x00189516, 'string');
  }

  getStartAcquisitionDateTime(): string {
    const value = this.x00189516;
    if (value === undefined) {
      throw new Error('StartAcquisitionDateTime is undefined');
    }
    return value;
  }

  // End Acquisition DateTime
  get EndAcquisitionDateTime(): string | undefined {
    return this.x00189517;
  }

  get x00189517(): string | undefined {
    const value = this.dwResponse['00189517']?.Value;
    return convert(value?.[0], 0x00189517, 'string');
  }

  getEndAcquisitionDateTime(): string {
    const value = this.x00189517;
    if (value === undefined) {
      throw new Error('EndAcquisitionDateTime is undefined');
    }
    return value;
  }

  // Primary Positioner Increment Sign
  get PrimaryPositionerIncrementSign(): Uint8Array | undefined {
    return this.x00189518;
  }

  get x00189518(): Uint8Array | undefined {
    const value = this.dwResponse['00189518']?.Value;
    return convert(value?.[0], 0x00189518, 'Uint8Array');
  }

  getPrimaryPositionerIncrementSign(): Uint8Array {
    const value = this.x00189518;
    if (value === undefined) {
      throw new Error('PrimaryPositionerIncrementSign is undefined');
    }
    return value;
  }

  // Secondary Positioner Increment Sign
  get SecondaryPositionerIncrementSign(): Uint8Array | undefined {
    return this.x00189519;
  }

  get x00189519(): Uint8Array | undefined {
    const value = this.dwResponse['00189519']?.Value;
    return convert(value?.[0], 0x00189519, 'Uint8Array');
  }

  getSecondaryPositionerIncrementSign(): Uint8Array {
    const value = this.x00189519;
    if (value === undefined) {
      throw new Error('SecondaryPositionerIncrementSign is undefined');
    }
    return value;
  }

  // Application Name
  get ApplicationName(): string | undefined {
    return this.x00189524;
  }

  get x00189524(): string | undefined {
    const value = this.dwResponse['00189524']?.Value;
    return convert(value?.[0], 0x00189524, 'string');
  }

  getApplicationName(): string {
    const value = this.x00189524;
    if (value === undefined) {
      throw new Error('ApplicationName is undefined');
    }
    return value;
  }

  // Application Version
  get ApplicationVersion(): string | undefined {
    return this.x00189525;
  }

  get x00189525(): string | undefined {
    const value = this.dwResponse['00189525']?.Value;
    return convert(value?.[0], 0x00189525, 'string');
  }

  getApplicationVersion(): string {
    const value = this.x00189525;
    if (value === undefined) {
      throw new Error('ApplicationVersion is undefined');
    }
    return value;
  }

  // Application Manufacturer
  get ApplicationManufacturer(): string | undefined {
    return this.x00189526;
  }

  get x00189526(): string | undefined {
    const value = this.dwResponse['00189526']?.Value;
    return convert(value?.[0], 0x00189526, 'string');
  }

  getApplicationManufacturer(): string {
    const value = this.x00189526;
    if (value === undefined) {
      throw new Error('ApplicationManufacturer is undefined');
    }
    return value;
  }

  // Algorithm Type
  get AlgorithmType(): string | undefined {
    return this.x00189527;
  }

  get x00189527(): string | undefined {
    const value = this.dwResponse['00189527']?.Value;
    return convert(value?.[0], 0x00189527, 'string');
  }

  getAlgorithmType(): string {
    const value = this.x00189527;
    if (value === undefined) {
      throw new Error('AlgorithmType is undefined');
    }
    return value;
  }

  // Algorithm Description
  get AlgorithmDescription(): string | undefined {
    return this.x00189528;
  }

  get x00189528(): string | undefined {
    const value = this.dwResponse['00189528']?.Value;
    return convert(value?.[0], 0x00189528, 'string');
  }

  getAlgorithmDescription(): string {
    const value = this.x00189528;
    if (value === undefined) {
      throw new Error('AlgorithmDescription is undefined');
    }
    return value;
  }

  // X-Ray 3D Reconstruction Sequence
  get XRay3DReconstructionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189530;
  }

  get x00189530(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189530']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getXRay3DReconstructionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189530;
    if (value === undefined) {
      throw new Error('XRay3DReconstructionSequence is undefined');
    }
    return value;
  }

  // Reconstruction Description
  get ReconstructionDescription(): string | undefined {
    return this.x00189531;
  }

  get x00189531(): string | undefined {
    const value = this.dwResponse['00189531']?.Value;
    return convert(value?.[0], 0x00189531, 'string');
  }

  getReconstructionDescription(): string {
    const value = this.x00189531;
    if (value === undefined) {
      throw new Error('ReconstructionDescription is undefined');
    }
    return value;
  }

  // Per Projection Acquisition Sequence
  get PerProjectionAcquisitionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189538;
  }

  get x00189538(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189538']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPerProjectionAcquisitionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189538;
    if (value === undefined) {
      throw new Error('PerProjectionAcquisitionSequence is undefined');
    }
    return value;
  }

  // Detector Position Sequence
  get DetectorPositionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189541;
  }

  get x00189541(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189541']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDetectorPositionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189541;
    if (value === undefined) {
      throw new Error('DetectorPositionSequence is undefined');
    }
    return value;
  }

  // X-Ray Acquisition Dose Sequence
  get XRayAcquisitionDoseSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189542;
  }

  get x00189542(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189542']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getXRayAcquisitionDoseSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189542;
    if (value === undefined) {
      throw new Error('XRayAcquisitionDoseSequence is undefined');
    }
    return value;
  }

  // X-Ray Source Isocenter Primary Angle
  get XRaySourceIsocenterPrimaryAngle(): number | undefined {
    return this.x00189543;
  }

  get x00189543(): number | undefined {
    const value = this.dwResponse['00189543']?.Value;
    return convert(value?.[0], 0x00189543, 'number');
  }

  getXRaySourceIsocenterPrimaryAngle(): number {
    const value = this.x00189543;
    if (value === undefined) {
      throw new Error('XRaySourceIsocenterPrimaryAngle is undefined');
    }
    return value;
  }

  // X-Ray Source Isocenter Secondary Angle
  get XRaySourceIsocenterSecondaryAngle(): number | undefined {
    return this.x00189544;
  }

  get x00189544(): number | undefined {
    const value = this.dwResponse['00189544']?.Value;
    return convert(value?.[0], 0x00189544, 'number');
  }

  getXRaySourceIsocenterSecondaryAngle(): number {
    const value = this.x00189544;
    if (value === undefined) {
      throw new Error('XRaySourceIsocenterSecondaryAngle is undefined');
    }
    return value;
  }

  // Breast Support Isocenter Primary Angle
  get BreastSupportIsocenterPrimaryAngle(): number | undefined {
    return this.x00189545;
  }

  get x00189545(): number | undefined {
    const value = this.dwResponse['00189545']?.Value;
    return convert(value?.[0], 0x00189545, 'number');
  }

  getBreastSupportIsocenterPrimaryAngle(): number {
    const value = this.x00189545;
    if (value === undefined) {
      throw new Error('BreastSupportIsocenterPrimaryAngle is undefined');
    }
    return value;
  }

  // Breast Support Isocenter Secondary Angle
  get BreastSupportIsocenterSecondaryAngle(): number | undefined {
    return this.x00189546;
  }

  get x00189546(): number | undefined {
    const value = this.dwResponse['00189546']?.Value;
    return convert(value?.[0], 0x00189546, 'number');
  }

  getBreastSupportIsocenterSecondaryAngle(): number {
    const value = this.x00189546;
    if (value === undefined) {
      throw new Error('BreastSupportIsocenterSecondaryAngle is undefined');
    }
    return value;
  }

  // Breast Support X Position to Isocenter
  get BreastSupportXPositionToIsocenter(): number | undefined {
    return this.x00189547;
  }

  get x00189547(): number | undefined {
    const value = this.dwResponse['00189547']?.Value;
    return convert(value?.[0], 0x00189547, 'number');
  }

  getBreastSupportXPositionToIsocenter(): number {
    const value = this.x00189547;
    if (value === undefined) {
      throw new Error('BreastSupportXPositionToIsocenter is undefined');
    }
    return value;
  }

  // Breast Support Y Position to Isocenter
  get BreastSupportYPositionToIsocenter(): number | undefined {
    return this.x00189548;
  }

  get x00189548(): number | undefined {
    const value = this.dwResponse['00189548']?.Value;
    return convert(value?.[0], 0x00189548, 'number');
  }

  getBreastSupportYPositionToIsocenter(): number {
    const value = this.x00189548;
    if (value === undefined) {
      throw new Error('BreastSupportYPositionToIsocenter is undefined');
    }
    return value;
  }

  // Breast Support Z Position to Isocenter
  get BreastSupportZPositionToIsocenter(): number | undefined {
    return this.x00189549;
  }

  get x00189549(): number | undefined {
    const value = this.dwResponse['00189549']?.Value;
    return convert(value?.[0], 0x00189549, 'number');
  }

  getBreastSupportZPositionToIsocenter(): number {
    const value = this.x00189549;
    if (value === undefined) {
      throw new Error('BreastSupportZPositionToIsocenter is undefined');
    }
    return value;
  }

  // Detector Isocenter Primary Angle
  get DetectorIsocenterPrimaryAngle(): number | undefined {
    return this.x00189550;
  }

  get x00189550(): number | undefined {
    const value = this.dwResponse['00189550']?.Value;
    return convert(value?.[0], 0x00189550, 'number');
  }

  getDetectorIsocenterPrimaryAngle(): number {
    const value = this.x00189550;
    if (value === undefined) {
      throw new Error('DetectorIsocenterPrimaryAngle is undefined');
    }
    return value;
  }

  // Detector Isocenter Secondary Angle
  get DetectorIsocenterSecondaryAngle(): number | undefined {
    return this.x00189551;
  }

  get x00189551(): number | undefined {
    const value = this.dwResponse['00189551']?.Value;
    return convert(value?.[0], 0x00189551, 'number');
  }

  getDetectorIsocenterSecondaryAngle(): number {
    const value = this.x00189551;
    if (value === undefined) {
      throw new Error('DetectorIsocenterSecondaryAngle is undefined');
    }
    return value;
  }

  // Detector X Position to Isocenter
  get DetectorXPositionToIsocenter(): number | undefined {
    return this.x00189552;
  }

  get x00189552(): number | undefined {
    const value = this.dwResponse['00189552']?.Value;
    return convert(value?.[0], 0x00189552, 'number');
  }

  getDetectorXPositionToIsocenter(): number {
    const value = this.x00189552;
    if (value === undefined) {
      throw new Error('DetectorXPositionToIsocenter is undefined');
    }
    return value;
  }

  // Detector Y Position to Isocenter
  get DetectorYPositionToIsocenter(): number | undefined {
    return this.x00189553;
  }

  get x00189553(): number | undefined {
    const value = this.dwResponse['00189553']?.Value;
    return convert(value?.[0], 0x00189553, 'number');
  }

  getDetectorYPositionToIsocenter(): number {
    const value = this.x00189553;
    if (value === undefined) {
      throw new Error('DetectorYPositionToIsocenter is undefined');
    }
    return value;
  }

  // Detector Z Position to Isocenter
  get DetectorZPositionToIsocenter(): number | undefined {
    return this.x00189554;
  }

  get x00189554(): number | undefined {
    const value = this.dwResponse['00189554']?.Value;
    return convert(value?.[0], 0x00189554, 'number');
  }

  getDetectorZPositionToIsocenter(): number {
    const value = this.x00189554;
    if (value === undefined) {
      throw new Error('DetectorZPositionToIsocenter is undefined');
    }
    return value;
  }

  // X-Ray Grid Sequence
  get XRayGridSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189555;
  }

  get x00189555(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189555']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getXRayGridSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189555;
    if (value === undefined) {
      throw new Error('XRayGridSequence is undefined');
    }
    return value;
  }

  // X-Ray Filter Sequence
  get XRayFilterSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189556;
  }

  get x00189556(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189556']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getXRayFilterSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189556;
    if (value === undefined) {
      throw new Error('XRayFilterSequence is undefined');
    }
    return value;
  }

  // Detector Active Area TLHC Position
  get DetectorActiveAreaTLHCPosition(): Array<number | undefined> | undefined {
    return this.x00189557;
  }

  get x00189557(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189557']?.Value;
    return convert(value, 0x00189557, 'Array<number | undefined>');
  }

  getDetectorActiveAreaTLHCPosition(): Array<number | undefined> {
    const value = this.x00189557;
    if (value === undefined) {
      throw new Error('DetectorActiveAreaTLHCPosition is undefined');
    }
    return value;
  }

  // Detector Active Area Orientation
  get DetectorActiveAreaOrientation(): Array<number | undefined> | undefined {
    return this.x00189558;
  }

  get x00189558(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189558']?.Value;
    return convert(value, 0x00189558, 'Array<number | undefined>');
  }

  getDetectorActiveAreaOrientation(): Array<number | undefined> {
    const value = this.x00189558;
    if (value === undefined) {
      throw new Error('DetectorActiveAreaOrientation is undefined');
    }
    return value;
  }

  // Positioner Primary Angle Direction
  get PositionerPrimaryAngleDirection(): string | undefined {
    return this.x00189559;
  }

  get x00189559(): string | undefined {
    const value = this.dwResponse['00189559']?.Value;
    return convert(value?.[0], 0x00189559, 'string');
  }

  getPositionerPrimaryAngleDirection(): string {
    const value = this.x00189559;
    if (value === undefined) {
      throw new Error('PositionerPrimaryAngleDirection is undefined');
    }
    return value;
  }

  // Diffusion b-matrix Sequence
  get DiffusionBMatrixSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189601;
  }

  get x00189601(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189601']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDiffusionBMatrixSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189601;
    if (value === undefined) {
      throw new Error('DiffusionBMatrixSequence is undefined');
    }
    return value;
  }

  // Diffusion b-value XX
  get DiffusionBValueXX(): number | undefined {
    return this.x00189602;
  }

  get x00189602(): number | undefined {
    const value = this.dwResponse['00189602']?.Value;
    return convert(value?.[0], 0x00189602, 'number');
  }

  getDiffusionBValueXX(): number {
    const value = this.x00189602;
    if (value === undefined) {
      throw new Error('DiffusionBValueXX is undefined');
    }
    return value;
  }

  // Diffusion b-value XY
  get DiffusionBValueXY(): number | undefined {
    return this.x00189603;
  }

  get x00189603(): number | undefined {
    const value = this.dwResponse['00189603']?.Value;
    return convert(value?.[0], 0x00189603, 'number');
  }

  getDiffusionBValueXY(): number {
    const value = this.x00189603;
    if (value === undefined) {
      throw new Error('DiffusionBValueXY is undefined');
    }
    return value;
  }

  // Diffusion b-value XZ
  get DiffusionBValueXZ(): number | undefined {
    return this.x00189604;
  }

  get x00189604(): number | undefined {
    const value = this.dwResponse['00189604']?.Value;
    return convert(value?.[0], 0x00189604, 'number');
  }

  getDiffusionBValueXZ(): number {
    const value = this.x00189604;
    if (value === undefined) {
      throw new Error('DiffusionBValueXZ is undefined');
    }
    return value;
  }

  // Diffusion b-value YY
  get DiffusionBValueYY(): number | undefined {
    return this.x00189605;
  }

  get x00189605(): number | undefined {
    const value = this.dwResponse['00189605']?.Value;
    return convert(value?.[0], 0x00189605, 'number');
  }

  getDiffusionBValueYY(): number {
    const value = this.x00189605;
    if (value === undefined) {
      throw new Error('DiffusionBValueYY is undefined');
    }
    return value;
  }

  // Diffusion b-value YZ
  get DiffusionBValueYZ(): number | undefined {
    return this.x00189606;
  }

  get x00189606(): number | undefined {
    const value = this.dwResponse['00189606']?.Value;
    return convert(value?.[0], 0x00189606, 'number');
  }

  getDiffusionBValueYZ(): number {
    const value = this.x00189606;
    if (value === undefined) {
      throw new Error('DiffusionBValueYZ is undefined');
    }
    return value;
  }

  // Diffusion b-value ZZ
  get DiffusionBValueZZ(): number | undefined {
    return this.x00189607;
  }

  get x00189607(): number | undefined {
    const value = this.dwResponse['00189607']?.Value;
    return convert(value?.[0], 0x00189607, 'number');
  }

  getDiffusionBValueZZ(): number {
    const value = this.x00189607;
    if (value === undefined) {
      throw new Error('DiffusionBValueZZ is undefined');
    }
    return value;
  }

  // Decay Correction DateTime
  get DecayCorrectionDateTime(): string | undefined {
    return this.x00189701;
  }

  get x00189701(): string | undefined {
    const value = this.dwResponse['00189701']?.Value;
    return convert(value?.[0], 0x00189701, 'string');
  }

  getDecayCorrectionDateTime(): string {
    const value = this.x00189701;
    if (value === undefined) {
      throw new Error('DecayCorrectionDateTime is undefined');
    }
    return value;
  }

  // Start Density Threshold
  get StartDensityThreshold(): number | undefined {
    return this.x00189715;
  }

  get x00189715(): number | undefined {
    const value = this.dwResponse['00189715']?.Value;
    return convert(value?.[0], 0x00189715, 'number');
  }

  getStartDensityThreshold(): number {
    const value = this.x00189715;
    if (value === undefined) {
      throw new Error('StartDensityThreshold is undefined');
    }
    return value;
  }

  // Start Relative Density Difference Threshold
  get StartRelativeDensityDifferenceThreshold(): number | undefined {
    return this.x00189716;
  }

  get x00189716(): number | undefined {
    const value = this.dwResponse['00189716']?.Value;
    return convert(value?.[0], 0x00189716, 'number');
  }

  getStartRelativeDensityDifferenceThreshold(): number {
    const value = this.x00189716;
    if (value === undefined) {
      throw new Error('StartRelativeDensityDifferenceThreshold is undefined');
    }
    return value;
  }

  // Start Cardiac Trigger Count Threshold
  get StartCardiacTriggerCountThreshold(): number | undefined {
    return this.x00189717;
  }

  get x00189717(): number | undefined {
    const value = this.dwResponse['00189717']?.Value;
    return convert(value?.[0], 0x00189717, 'number');
  }

  getStartCardiacTriggerCountThreshold(): number {
    const value = this.x00189717;
    if (value === undefined) {
      throw new Error('StartCardiacTriggerCountThreshold is undefined');
    }
    return value;
  }

  // Start Respiratory Trigger Count Threshold
  get StartRespiratoryTriggerCountThreshold(): number | undefined {
    return this.x00189718;
  }

  get x00189718(): number | undefined {
    const value = this.dwResponse['00189718']?.Value;
    return convert(value?.[0], 0x00189718, 'number');
  }

  getStartRespiratoryTriggerCountThreshold(): number {
    const value = this.x00189718;
    if (value === undefined) {
      throw new Error('StartRespiratoryTriggerCountThreshold is undefined');
    }
    return value;
  }

  // Termination Counts Threshold
  get TerminationCountsThreshold(): number | undefined {
    return this.x00189719;
  }

  get x00189719(): number | undefined {
    const value = this.dwResponse['00189719']?.Value;
    return convert(value?.[0], 0x00189719, 'number');
  }

  getTerminationCountsThreshold(): number {
    const value = this.x00189719;
    if (value === undefined) {
      throw new Error('TerminationCountsThreshold is undefined');
    }
    return value;
  }

  // Termination Density Threshold
  get TerminationDensityThreshold(): number | undefined {
    return this.x00189720;
  }

  get x00189720(): number | undefined {
    const value = this.dwResponse['00189720']?.Value;
    return convert(value?.[0], 0x00189720, 'number');
  }

  getTerminationDensityThreshold(): number {
    const value = this.x00189720;
    if (value === undefined) {
      throw new Error('TerminationDensityThreshold is undefined');
    }
    return value;
  }

  // Termination Relative Density Threshold
  get TerminationRelativeDensityThreshold(): number | undefined {
    return this.x00189721;
  }

  get x00189721(): number | undefined {
    const value = this.dwResponse['00189721']?.Value;
    return convert(value?.[0], 0x00189721, 'number');
  }

  getTerminationRelativeDensityThreshold(): number {
    const value = this.x00189721;
    if (value === undefined) {
      throw new Error('TerminationRelativeDensityThreshold is undefined');
    }
    return value;
  }

  // Termination Time Threshold
  get TerminationTimeThreshold(): number | undefined {
    return this.x00189722;
  }

  get x00189722(): number | undefined {
    const value = this.dwResponse['00189722']?.Value;
    return convert(value?.[0], 0x00189722, 'number');
  }

  getTerminationTimeThreshold(): number {
    const value = this.x00189722;
    if (value === undefined) {
      throw new Error('TerminationTimeThreshold is undefined');
    }
    return value;
  }

  // Termination Cardiac Trigger Count Threshold
  get TerminationCardiacTriggerCountThreshold(): number | undefined {
    return this.x00189723;
  }

  get x00189723(): number | undefined {
    const value = this.dwResponse['00189723']?.Value;
    return convert(value?.[0], 0x00189723, 'number');
  }

  getTerminationCardiacTriggerCountThreshold(): number {
    const value = this.x00189723;
    if (value === undefined) {
      throw new Error('TerminationCardiacTriggerCountThreshold is undefined');
    }
    return value;
  }

  // Termination Respiratory Trigger Count Threshold
  get TerminationRespiratoryTriggerCountThreshold(): number | undefined {
    return this.x00189724;
  }

  get x00189724(): number | undefined {
    const value = this.dwResponse['00189724']?.Value;
    return convert(value?.[0], 0x00189724, 'number');
  }

  getTerminationRespiratoryTriggerCountThreshold(): number {
    const value = this.x00189724;
    if (value === undefined) {
      throw new Error('TerminationRespiratoryTriggerCountThreshold is undefined');
    }
    return value;
  }

  // Detector Geometry
  get DetectorGeometry(): string | undefined {
    return this.x00189725;
  }

  get x00189725(): string | undefined {
    const value = this.dwResponse['00189725']?.Value;
    return convert(value?.[0], 0x00189725, 'string');
  }

  getDetectorGeometry(): string {
    const value = this.x00189725;
    if (value === undefined) {
      throw new Error('DetectorGeometry is undefined');
    }
    return value;
  }

  // Transverse Detector Separation
  get TransverseDetectorSeparation(): number | undefined {
    return this.x00189726;
  }

  get x00189726(): number | undefined {
    const value = this.dwResponse['00189726']?.Value;
    return convert(value?.[0], 0x00189726, 'number');
  }

  getTransverseDetectorSeparation(): number {
    const value = this.x00189726;
    if (value === undefined) {
      throw new Error('TransverseDetectorSeparation is undefined');
    }
    return value;
  }

  // Axial Detector Dimension
  get AxialDetectorDimension(): number | undefined {
    return this.x00189727;
  }

  get x00189727(): number | undefined {
    const value = this.dwResponse['00189727']?.Value;
    return convert(value?.[0], 0x00189727, 'number');
  }

  getAxialDetectorDimension(): number {
    const value = this.x00189727;
    if (value === undefined) {
      throw new Error('AxialDetectorDimension is undefined');
    }
    return value;
  }

  // Radiopharmaceutical Agent Number
  get RadiopharmaceuticalAgentNumber(): number | undefined {
    return this.x00189729;
  }

  get x00189729(): number | undefined {
    const value = this.dwResponse['00189729']?.Value;
    return convert(value?.[0], 0x00189729, 'number');
  }

  getRadiopharmaceuticalAgentNumber(): number {
    const value = this.x00189729;
    if (value === undefined) {
      throw new Error('RadiopharmaceuticalAgentNumber is undefined');
    }
    return value;
  }

  // PET Frame Acquisition Sequence
  get PETFrameAcquisitionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189732;
  }

  get x00189732(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189732']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPETFrameAcquisitionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189732;
    if (value === undefined) {
      throw new Error('PETFrameAcquisitionSequence is undefined');
    }
    return value;
  }

  // PET Detector Motion Details Sequence
  get PETDetectorMotionDetailsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189733;
  }

  get x00189733(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189733']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPETDetectorMotionDetailsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189733;
    if (value === undefined) {
      throw new Error('PETDetectorMotionDetailsSequence is undefined');
    }
    return value;
  }

  // PET Table Dynamics Sequence
  get PETTableDynamicsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189734;
  }

  get x00189734(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189734']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPETTableDynamicsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189734;
    if (value === undefined) {
      throw new Error('PETTableDynamicsSequence is undefined');
    }
    return value;
  }

  // PET Position Sequence
  get PETPositionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189735;
  }

  get x00189735(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189735']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPETPositionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189735;
    if (value === undefined) {
      throw new Error('PETPositionSequence is undefined');
    }
    return value;
  }

  // PET Frame Correction Factors Sequence
  get PETFrameCorrectionFactorsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189736;
  }

  get x00189736(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189736']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPETFrameCorrectionFactorsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189736;
    if (value === undefined) {
      throw new Error('PETFrameCorrectionFactorsSequence is undefined');
    }
    return value;
  }

  // Radiopharmaceutical Usage Sequence
  get RadiopharmaceuticalUsageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189737;
  }

  get x00189737(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189737']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRadiopharmaceuticalUsageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189737;
    if (value === undefined) {
      throw new Error('RadiopharmaceuticalUsageSequence is undefined');
    }
    return value;
  }

  // Attenuation Correction Source
  get AttenuationCorrectionSource(): string | undefined {
    return this.x00189738;
  }

  get x00189738(): string | undefined {
    const value = this.dwResponse['00189738']?.Value;
    return convert(value?.[0], 0x00189738, 'string');
  }

  getAttenuationCorrectionSource(): string {
    const value = this.x00189738;
    if (value === undefined) {
      throw new Error('AttenuationCorrectionSource is undefined');
    }
    return value;
  }

  // Number of Iterations
  get NumberOfIterations(): number | undefined {
    return this.x00189739;
  }

  get x00189739(): number | undefined {
    const value = this.dwResponse['00189739']?.Value;
    return convert(value?.[0], 0x00189739, 'number');
  }

  getNumberOfIterations(): number {
    const value = this.x00189739;
    if (value === undefined) {
      throw new Error('NumberOfIterations is undefined');
    }
    return value;
  }

  // Number of Subsets
  get NumberOfSubsets(): number | undefined {
    return this.x00189740;
  }

  get x00189740(): number | undefined {
    const value = this.dwResponse['00189740']?.Value;
    return convert(value?.[0], 0x00189740, 'number');
  }

  getNumberOfSubsets(): number {
    const value = this.x00189740;
    if (value === undefined) {
      throw new Error('NumberOfSubsets is undefined');
    }
    return value;
  }

  // PET Reconstruction Sequence
  get PETReconstructionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189749;
  }

  get x00189749(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189749']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPETReconstructionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189749;
    if (value === undefined) {
      throw new Error('PETReconstructionSequence is undefined');
    }
    return value;
  }

  // PET Frame Type Sequence
  get PETFrameTypeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189751;
  }

  get x00189751(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189751']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPETFrameTypeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189751;
    if (value === undefined) {
      throw new Error('PETFrameTypeSequence is undefined');
    }
    return value;
  }

  // Time of Flight Information Used
  get TimeOfFlightInformationUsed(): string | undefined {
    return this.x00189755;
  }

  get x00189755(): string | undefined {
    const value = this.dwResponse['00189755']?.Value;
    return convert(value?.[0], 0x00189755, 'string');
  }

  getTimeOfFlightInformationUsed(): string {
    const value = this.x00189755;
    if (value === undefined) {
      throw new Error('TimeOfFlightInformationUsed is undefined');
    }
    return value;
  }

  // Reconstruction Type
  get ReconstructionType(): string | undefined {
    return this.x00189756;
  }

  get x00189756(): string | undefined {
    const value = this.dwResponse['00189756']?.Value;
    return convert(value?.[0], 0x00189756, 'string');
  }

  getReconstructionType(): string {
    const value = this.x00189756;
    if (value === undefined) {
      throw new Error('ReconstructionType is undefined');
    }
    return value;
  }

  // Decay Corrected
  get DecayCorrected(): string | undefined {
    return this.x00189758;
  }

  get x00189758(): string | undefined {
    const value = this.dwResponse['00189758']?.Value;
    return convert(value?.[0], 0x00189758, 'string');
  }

  getDecayCorrected(): string {
    const value = this.x00189758;
    if (value === undefined) {
      throw new Error('DecayCorrected is undefined');
    }
    return value;
  }

  // Attenuation Corrected
  get AttenuationCorrected(): string | undefined {
    return this.x00189759;
  }

  get x00189759(): string | undefined {
    const value = this.dwResponse['00189759']?.Value;
    return convert(value?.[0], 0x00189759, 'string');
  }

  getAttenuationCorrected(): string {
    const value = this.x00189759;
    if (value === undefined) {
      throw new Error('AttenuationCorrected is undefined');
    }
    return value;
  }

  // Scatter Corrected
  get ScatterCorrected(): string | undefined {
    return this.x00189760;
  }

  get x00189760(): string | undefined {
    const value = this.dwResponse['00189760']?.Value;
    return convert(value?.[0], 0x00189760, 'string');
  }

  getScatterCorrected(): string {
    const value = this.x00189760;
    if (value === undefined) {
      throw new Error('ScatterCorrected is undefined');
    }
    return value;
  }

  // Dead Time Corrected
  get DeadTimeCorrected(): string | undefined {
    return this.x00189761;
  }

  get x00189761(): string | undefined {
    const value = this.dwResponse['00189761']?.Value;
    return convert(value?.[0], 0x00189761, 'string');
  }

  getDeadTimeCorrected(): string {
    const value = this.x00189761;
    if (value === undefined) {
      throw new Error('DeadTimeCorrected is undefined');
    }
    return value;
  }

  // Gantry Motion Corrected
  get GantryMotionCorrected(): string | undefined {
    return this.x00189762;
  }

  get x00189762(): string | undefined {
    const value = this.dwResponse['00189762']?.Value;
    return convert(value?.[0], 0x00189762, 'string');
  }

  getGantryMotionCorrected(): string {
    const value = this.x00189762;
    if (value === undefined) {
      throw new Error('GantryMotionCorrected is undefined');
    }
    return value;
  }

  // Patient Motion Corrected
  get PatientMotionCorrected(): string | undefined {
    return this.x00189763;
  }

  get x00189763(): string | undefined {
    const value = this.dwResponse['00189763']?.Value;
    return convert(value?.[0], 0x00189763, 'string');
  }

  getPatientMotionCorrected(): string {
    const value = this.x00189763;
    if (value === undefined) {
      throw new Error('PatientMotionCorrected is undefined');
    }
    return value;
  }

  // Count Loss Normalization Corrected
  get CountLossNormalizationCorrected(): string | undefined {
    return this.x00189764;
  }

  get x00189764(): string | undefined {
    const value = this.dwResponse['00189764']?.Value;
    return convert(value?.[0], 0x00189764, 'string');
  }

  getCountLossNormalizationCorrected(): string {
    const value = this.x00189764;
    if (value === undefined) {
      throw new Error('CountLossNormalizationCorrected is undefined');
    }
    return value;
  }

  // Randoms Corrected
  get RandomsCorrected(): string | undefined {
    return this.x00189765;
  }

  get x00189765(): string | undefined {
    const value = this.dwResponse['00189765']?.Value;
    return convert(value?.[0], 0x00189765, 'string');
  }

  getRandomsCorrected(): string {
    const value = this.x00189765;
    if (value === undefined) {
      throw new Error('RandomsCorrected is undefined');
    }
    return value;
  }

  // Non-uniform Radial Sampling Corrected
  get NonUniformRadialSamplingCorrected(): string | undefined {
    return this.x00189766;
  }

  get x00189766(): string | undefined {
    const value = this.dwResponse['00189766']?.Value;
    return convert(value?.[0], 0x00189766, 'string');
  }

  getNonUniformRadialSamplingCorrected(): string {
    const value = this.x00189766;
    if (value === undefined) {
      throw new Error('NonUniformRadialSamplingCorrected is undefined');
    }
    return value;
  }

  // Sensitivity Calibrated
  get SensitivityCalibrated(): string | undefined {
    return this.x00189767;
  }

  get x00189767(): string | undefined {
    const value = this.dwResponse['00189767']?.Value;
    return convert(value?.[0], 0x00189767, 'string');
  }

  getSensitivityCalibrated(): string {
    const value = this.x00189767;
    if (value === undefined) {
      throw new Error('SensitivityCalibrated is undefined');
    }
    return value;
  }

  // Detector Normalization Correction
  get DetectorNormalizationCorrection(): string | undefined {
    return this.x00189768;
  }

  get x00189768(): string | undefined {
    const value = this.dwResponse['00189768']?.Value;
    return convert(value?.[0], 0x00189768, 'string');
  }

  getDetectorNormalizationCorrection(): string {
    const value = this.x00189768;
    if (value === undefined) {
      throw new Error('DetectorNormalizationCorrection is undefined');
    }
    return value;
  }

  // Iterative Reconstruction Method
  get IterativeReconstructionMethod(): string | undefined {
    return this.x00189769;
  }

  get x00189769(): string | undefined {
    const value = this.dwResponse['00189769']?.Value;
    return convert(value?.[0], 0x00189769, 'string');
  }

  getIterativeReconstructionMethod(): string {
    const value = this.x00189769;
    if (value === undefined) {
      throw new Error('IterativeReconstructionMethod is undefined');
    }
    return value;
  }

  // Attenuation Correction Temporal Relationship
  get AttenuationCorrectionTemporalRelationship(): string | undefined {
    return this.x00189770;
  }

  get x00189770(): string | undefined {
    const value = this.dwResponse['00189770']?.Value;
    return convert(value?.[0], 0x00189770, 'string');
  }

  getAttenuationCorrectionTemporalRelationship(): string {
    const value = this.x00189770;
    if (value === undefined) {
      throw new Error('AttenuationCorrectionTemporalRelationship is undefined');
    }
    return value;
  }

  // Patient Physiological State Sequence
  get PatientPhysiologicalStateSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189771;
  }

  get x00189771(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189771']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPatientPhysiologicalStateSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189771;
    if (value === undefined) {
      throw new Error('PatientPhysiologicalStateSequence is undefined');
    }
    return value;
  }

  // Patient Physiological State Code Sequence
  get PatientPhysiologicalStateCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189772;
  }

  get x00189772(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189772']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPatientPhysiologicalStateCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189772;
    if (value === undefined) {
      throw new Error('PatientPhysiologicalStateCodeSequence is undefined');
    }
    return value;
  }

  // Depth(s) of Focus
  get DepthsOfFocus(): Array<number | undefined> | undefined {
    return this.x00189801;
  }

  get x00189801(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00189801']?.Value;
    return convert(value, 0x00189801, 'Array<number | undefined>');
  }

  getDepthsOfFocus(): Array<number | undefined> {
    const value = this.x00189801;
    if (value === undefined) {
      throw new Error('DepthsOfFocus is undefined');
    }
    return value;
  }

  // Excluded Intervals Sequence
  get ExcludedIntervalsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189803;
  }

  get x00189803(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189803']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getExcludedIntervalsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189803;
    if (value === undefined) {
      throw new Error('ExcludedIntervalsSequence is undefined');
    }
    return value;
  }

  // Exclusion Start DateTime
  get ExclusionStartDateTime(): string | undefined {
    return this.x00189804;
  }

  get x00189804(): string | undefined {
    const value = this.dwResponse['00189804']?.Value;
    return convert(value?.[0], 0x00189804, 'string');
  }

  getExclusionStartDateTime(): string {
    const value = this.x00189804;
    if (value === undefined) {
      throw new Error('ExclusionStartDateTime is undefined');
    }
    return value;
  }

  // Exclusion Duration
  get ExclusionDuration(): number | undefined {
    return this.x00189805;
  }

  get x00189805(): number | undefined {
    const value = this.dwResponse['00189805']?.Value;
    return convert(value?.[0], 0x00189805, 'number');
  }

  getExclusionDuration(): number {
    const value = this.x00189805;
    if (value === undefined) {
      throw new Error('ExclusionDuration is undefined');
    }
    return value;
  }

  // US Image Description Sequence
  get USImageDescriptionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189806;
  }

  get x00189806(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189806']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getUSImageDescriptionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189806;
    if (value === undefined) {
      throw new Error('USImageDescriptionSequence is undefined');
    }
    return value;
  }

  // Image Data Type Sequence
  get ImageDataTypeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189807;
  }

  get x00189807(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189807']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getImageDataTypeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189807;
    if (value === undefined) {
      throw new Error('ImageDataTypeSequence is undefined');
    }
    return value;
  }

  // Data Type
  get DataType(): string | undefined {
    return this.x00189808;
  }

  get x00189808(): string | undefined {
    const value = this.dwResponse['00189808']?.Value;
    return convert(value?.[0], 0x00189808, 'string');
  }

  getDataType(): string {
    const value = this.x00189808;
    if (value === undefined) {
      throw new Error('DataType is undefined');
    }
    return value;
  }

  // Transducer Scan Pattern Code Sequence
  get TransducerScanPatternCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00189809;
  }

  get x00189809(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00189809']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTransducerScanPatternCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00189809;
    if (value === undefined) {
      throw new Error('TransducerScanPatternCodeSequence is undefined');
    }
    return value;
  }

  // Aliased Data Type
  get AliasedDataType(): string | undefined {
    return this.x0018980b;
  }

  get x0018980b(): string | undefined {
    const value = this.dwResponse['0018980B']?.Value;
    return convert(value?.[0], 0x0018980b, 'string');
  }

  getAliasedDataType(): string {
    const value = this.x0018980b;
    if (value === undefined) {
      throw new Error('AliasedDataType is undefined');
    }
    return value;
  }

  // Position Measuring Device Used
  get PositionMeasuringDeviceUsed(): string | undefined {
    return this.x0018980c;
  }

  get x0018980c(): string | undefined {
    const value = this.dwResponse['0018980C']?.Value;
    return convert(value?.[0], 0x0018980c, 'string');
  }

  getPositionMeasuringDeviceUsed(): string {
    const value = this.x0018980c;
    if (value === undefined) {
      throw new Error('PositionMeasuringDeviceUsed is undefined');
    }
    return value;
  }

  // Transducer Geometry Code Sequence
  get TransducerGeometryCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0018980d;
  }

  get x0018980d(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0018980D']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTransducerGeometryCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0018980d;
    if (value === undefined) {
      throw new Error('TransducerGeometryCodeSequence is undefined');
    }
    return value;
  }

  // Transducer Beam Steering Code Sequence
  get TransducerBeamSteeringCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0018980e;
  }

  get x0018980e(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0018980E']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTransducerBeamSteeringCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0018980e;
    if (value === undefined) {
      throw new Error('TransducerBeamSteeringCodeSequence is undefined');
    }
    return value;
  }

  // Transducer Application Code Sequence
  get TransducerApplicationCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0018980f;
  }

  get x0018980f(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0018980F']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTransducerApplicationCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0018980f;
    if (value === undefined) {
      throw new Error('TransducerApplicationCodeSequence is undefined');
    }
    return value;
  }

  // Zero Velocity Pixel Value
  get ZeroVelocityPixelValue(): number | undefined {
    return this.x00189810;
  }

  get x00189810(): number | undefined {
    const value = this.dwResponse['00189810']?.Value;
    return convert(value?.[0], 0x00189810, 'number');
  }

  getZeroVelocityPixelValue(): number {
    const value = this.x00189810;
    if (value === undefined) {
      throw new Error('ZeroVelocityPixelValue is undefined');
    }
    return value;
  }

  // Contributing Equipment Sequence
  get ContributingEquipmentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0018a001;
  }

  get x0018a001(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0018A001']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getContributingEquipmentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0018a001;
    if (value === undefined) {
      throw new Error('ContributingEquipmentSequence is undefined');
    }
    return value;
  }

  // Contribution DateTime
  get ContributionDateTime(): string | undefined {
    return this.x0018a002;
  }

  get x0018a002(): string | undefined {
    const value = this.dwResponse['0018A002']?.Value;
    return convert(value?.[0], 0x0018a002, 'string');
  }

  getContributionDateTime(): string {
    const value = this.x0018a002;
    if (value === undefined) {
      throw new Error('ContributionDateTime is undefined');
    }
    return value;
  }

  // Study Instance UID
  get StudyInstanceUID(): string | undefined {
    return this.x0020000d;
  }

  get x0020000d(): string | undefined {
    const value = this.dwResponse['0020000D']?.Value;
    return convert(value?.[0], 0x0020000d, 'string');
  }

  getStudyInstanceUID(): string {
    const value = this.x0020000d;
    if (value === undefined) {
      throw new Error('StudyInstanceUID is undefined');
    }
    return value;
  }

  // Series Instance UID
  get SeriesInstanceUID(): string | undefined {
    return this.x0020000e;
  }

  get x0020000e(): string | undefined {
    const value = this.dwResponse['0020000E']?.Value;
    return convert(value?.[0], 0x0020000e, 'string');
  }

  getSeriesInstanceUID(): string {
    const value = this.x0020000e;
    if (value === undefined) {
      throw new Error('SeriesInstanceUID is undefined');
    }
    return value;
  }

  // Study ID
  get StudyID(): string | undefined {
    return this.x00200010;
  }

  get x00200010(): string | undefined {
    const value = this.dwResponse['00200010']?.Value;
    return convert(value?.[0], 0x00200010, 'string');
  }

  getStudyID(): string {
    const value = this.x00200010;
    if (value === undefined) {
      throw new Error('StudyID is undefined');
    }
    return value;
  }

  // Series Number
  get SeriesNumber(): number | undefined {
    return this.x00200011;
  }

  get x00200011(): number | undefined {
    const value = this.dwResponse['00200011']?.Value;
    return convert(value?.[0], 0x00200011, 'number');
  }

  getSeriesNumber(): number {
    const value = this.x00200011;
    if (value === undefined) {
      throw new Error('SeriesNumber is undefined');
    }
    return value;
  }

  // Acquisition Number
  get AcquisitionNumber(): number | undefined {
    return this.x00200012;
  }

  get x00200012(): number | undefined {
    const value = this.dwResponse['00200012']?.Value;
    return convert(value?.[0], 0x00200012, 'number');
  }

  getAcquisitionNumber(): number {
    const value = this.x00200012;
    if (value === undefined) {
      throw new Error('AcquisitionNumber is undefined');
    }
    return value;
  }

  // Instance Number
  get InstanceNumber(): number | undefined {
    return this.x00200013;
  }

  get x00200013(): number | undefined {
    const value = this.dwResponse['00200013']?.Value;
    return convert(value?.[0], 0x00200013, 'number');
  }

  getInstanceNumber(): number {
    const value = this.x00200013;
    if (value === undefined) {
      throw new Error('InstanceNumber is undefined');
    }
    return value;
  }

  // Isotope Number
  get IsotopeNumber(): number | undefined {
    return this.x00200014;
  }

  get x00200014(): number | undefined {
    const value = this.dwResponse['00200014']?.Value;
    return convert(value?.[0], 0x00200014, 'number');
  }

  getIsotopeNumber(): number {
    const value = this.x00200014;
    if (value === undefined) {
      throw new Error('IsotopeNumber is undefined');
    }
    return value;
  }

  // Phase Number
  get PhaseNumber(): number | undefined {
    return this.x00200015;
  }

  get x00200015(): number | undefined {
    const value = this.dwResponse['00200015']?.Value;
    return convert(value?.[0], 0x00200015, 'number');
  }

  getPhaseNumber(): number {
    const value = this.x00200015;
    if (value === undefined) {
      throw new Error('PhaseNumber is undefined');
    }
    return value;
  }

  // Interval Number
  get IntervalNumber(): number | undefined {
    return this.x00200016;
  }

  get x00200016(): number | undefined {
    const value = this.dwResponse['00200016']?.Value;
    return convert(value?.[0], 0x00200016, 'number');
  }

  getIntervalNumber(): number {
    const value = this.x00200016;
    if (value === undefined) {
      throw new Error('IntervalNumber is undefined');
    }
    return value;
  }

  // Time Slot Number
  get TimeSlotNumber(): number | undefined {
    return this.x00200017;
  }

  get x00200017(): number | undefined {
    const value = this.dwResponse['00200017']?.Value;
    return convert(value?.[0], 0x00200017, 'number');
  }

  getTimeSlotNumber(): number {
    const value = this.x00200017;
    if (value === undefined) {
      throw new Error('TimeSlotNumber is undefined');
    }
    return value;
  }

  // Angle Number
  get AngleNumber(): number | undefined {
    return this.x00200018;
  }

  get x00200018(): number | undefined {
    const value = this.dwResponse['00200018']?.Value;
    return convert(value?.[0], 0x00200018, 'number');
  }

  getAngleNumber(): number {
    const value = this.x00200018;
    if (value === undefined) {
      throw new Error('AngleNumber is undefined');
    }
    return value;
  }

  // Item Number
  get ItemNumber(): number | undefined {
    return this.x00200019;
  }

  get x00200019(): number | undefined {
    const value = this.dwResponse['00200019']?.Value;
    return convert(value?.[0], 0x00200019, 'number');
  }

  getItemNumber(): number {
    const value = this.x00200019;
    if (value === undefined) {
      throw new Error('ItemNumber is undefined');
    }
    return value;
  }

  // Patient Orientation
  get PatientOrientation(): Array<string | undefined> | undefined {
    return this.x00200020;
  }

  get x00200020(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00200020']?.Value;
    return convert(value, 0x00200020, 'Array<string | undefined>');
  }

  getPatientOrientation(): Array<string | undefined> {
    const value = this.x00200020;
    if (value === undefined) {
      throw new Error('PatientOrientation is undefined');
    }
    return value;
  }

  // Overlay Number
  get OverlayNumber(): number | undefined {
    return this.x00200022;
  }

  get x00200022(): number | undefined {
    const value = this.dwResponse['00200022']?.Value;
    return convert(value?.[0], 0x00200022, 'number');
  }

  getOverlayNumber(): number {
    const value = this.x00200022;
    if (value === undefined) {
      throw new Error('OverlayNumber is undefined');
    }
    return value;
  }

  // Curve Number
  get CurveNumber(): number | undefined {
    return this.x00200024;
  }

  get x00200024(): number | undefined {
    const value = this.dwResponse['00200024']?.Value;
    return convert(value?.[0], 0x00200024, 'number');
  }

  getCurveNumber(): number {
    const value = this.x00200024;
    if (value === undefined) {
      throw new Error('CurveNumber is undefined');
    }
    return value;
  }

  // LUT Number
  get LUTNumber(): number | undefined {
    return this.x00200026;
  }

  get x00200026(): number | undefined {
    const value = this.dwResponse['00200026']?.Value;
    return convert(value?.[0], 0x00200026, 'number');
  }

  getLUTNumber(): number {
    const value = this.x00200026;
    if (value === undefined) {
      throw new Error('LUTNumber is undefined');
    }
    return value;
  }

  // Image Position
  get ImagePosition(): Array<number | undefined> | undefined {
    return this.x00200030;
  }

  get x00200030(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00200030']?.Value;
    return convert(value, 0x00200030, 'Array<number | undefined>');
  }

  getImagePosition(): Array<number | undefined> {
    const value = this.x00200030;
    if (value === undefined) {
      throw new Error('ImagePosition is undefined');
    }
    return value;
  }

  // Image Position (Patient)
  get ImagePositionPatient(): Array<number | undefined> | undefined {
    return this.x00200032;
  }

  get x00200032(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00200032']?.Value;
    return convert(value, 0x00200032, 'Array<number | undefined>');
  }

  getImagePositionPatient(): Array<number | undefined> {
    const value = this.x00200032;
    if (value === undefined) {
      throw new Error('ImagePositionPatient is undefined');
    }
    return value;
  }

  // Image Orientation
  get ImageOrientation(): Array<number | undefined> | undefined {
    return this.x00200035;
  }

  get x00200035(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00200035']?.Value;
    return convert(value, 0x00200035, 'Array<number | undefined>');
  }

  getImageOrientation(): Array<number | undefined> {
    const value = this.x00200035;
    if (value === undefined) {
      throw new Error('ImageOrientation is undefined');
    }
    return value;
  }

  // Image Orientation (Patient)
  get ImageOrientationPatient(): Array<number | undefined> | undefined {
    return this.x00200037;
  }

  get x00200037(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00200037']?.Value;
    return convert(value, 0x00200037, 'Array<number | undefined>');
  }

  getImageOrientationPatient(): Array<number | undefined> {
    const value = this.x00200037;
    if (value === undefined) {
      throw new Error('ImageOrientationPatient is undefined');
    }
    return value;
  }

  // Location
  get Location(): number | undefined {
    return this.x00200050;
  }

  get x00200050(): number | undefined {
    const value = this.dwResponse['00200050']?.Value;
    return convert(value?.[0], 0x00200050, 'number');
  }

  getLocation(): number {
    const value = this.x00200050;
    if (value === undefined) {
      throw new Error('Location is undefined');
    }
    return value;
  }

  // Frame of Reference UID
  get FrameOfReferenceUID(): string | undefined {
    return this.x00200052;
  }

  get x00200052(): string | undefined {
    const value = this.dwResponse['00200052']?.Value;
    return convert(value?.[0], 0x00200052, 'string');
  }

  getFrameOfReferenceUID(): string {
    const value = this.x00200052;
    if (value === undefined) {
      throw new Error('FrameOfReferenceUID is undefined');
    }
    return value;
  }

  // Laterality
  get Laterality(): string | undefined {
    return this.x00200060;
  }

  get x00200060(): string | undefined {
    const value = this.dwResponse['00200060']?.Value;
    return convert(value?.[0], 0x00200060, 'string');
  }

  getLaterality(): string {
    const value = this.x00200060;
    if (value === undefined) {
      throw new Error('Laterality is undefined');
    }
    return value;
  }

  // Image Laterality
  get ImageLaterality(): string | undefined {
    return this.x00200062;
  }

  get x00200062(): string | undefined {
    const value = this.dwResponse['00200062']?.Value;
    return convert(value?.[0], 0x00200062, 'string');
  }

  getImageLaterality(): string {
    const value = this.x00200062;
    if (value === undefined) {
      throw new Error('ImageLaterality is undefined');
    }
    return value;
  }

  // Image Geometry Type
  get ImageGeometryType(): string | undefined {
    return this.x00200070;
  }

  get x00200070(): string | undefined {
    const value = this.dwResponse['00200070']?.Value;
    return convert(value?.[0], 0x00200070, 'string');
  }

  getImageGeometryType(): string {
    const value = this.x00200070;
    if (value === undefined) {
      throw new Error('ImageGeometryType is undefined');
    }
    return value;
  }

  // Masking Image
  get MaskingImage(): Array<string | undefined> | undefined {
    return this.x00200080;
  }

  get x00200080(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00200080']?.Value;
    return convert(value, 0x00200080, 'Array<string | undefined>');
  }

  getMaskingImage(): Array<string | undefined> {
    const value = this.x00200080;
    if (value === undefined) {
      throw new Error('MaskingImage is undefined');
    }
    return value;
  }

  // Report Number
  get ReportNumber(): number | undefined {
    return this.x002000aa;
  }

  get x002000aa(): number | undefined {
    const value = this.dwResponse['002000AA']?.Value;
    return convert(value?.[0], 0x002000aa, 'number');
  }

  getReportNumber(): number {
    const value = this.x002000aa;
    if (value === undefined) {
      throw new Error('ReportNumber is undefined');
    }
    return value;
  }

  // Temporal Position Identifier
  get TemporalPositionIdentifier(): number | undefined {
    return this.x00200100;
  }

  get x00200100(): number | undefined {
    const value = this.dwResponse['00200100']?.Value;
    return convert(value?.[0], 0x00200100, 'number');
  }

  getTemporalPositionIdentifier(): number {
    const value = this.x00200100;
    if (value === undefined) {
      throw new Error('TemporalPositionIdentifier is undefined');
    }
    return value;
  }

  // Number of Temporal Positions
  get NumberOfTemporalPositions(): number | undefined {
    return this.x00200105;
  }

  get x00200105(): number | undefined {
    const value = this.dwResponse['00200105']?.Value;
    return convert(value?.[0], 0x00200105, 'number');
  }

  getNumberOfTemporalPositions(): number {
    const value = this.x00200105;
    if (value === undefined) {
      throw new Error('NumberOfTemporalPositions is undefined');
    }
    return value;
  }

  // Temporal Resolution
  get TemporalResolution(): number | undefined {
    return this.x00200110;
  }

  get x00200110(): number | undefined {
    const value = this.dwResponse['00200110']?.Value;
    return convert(value?.[0], 0x00200110, 'number');
  }

  getTemporalResolution(): number {
    const value = this.x00200110;
    if (value === undefined) {
      throw new Error('TemporalResolution is undefined');
    }
    return value;
  }

  // Synchronization Frame of Reference UID
  get SynchronizationFrameOfReferenceUID(): string | undefined {
    return this.x00200200;
  }

  get x00200200(): string | undefined {
    const value = this.dwResponse['00200200']?.Value;
    return convert(value?.[0], 0x00200200, 'string');
  }

  getSynchronizationFrameOfReferenceUID(): string {
    const value = this.x00200200;
    if (value === undefined) {
      throw new Error('SynchronizationFrameOfReferenceUID is undefined');
    }
    return value;
  }

  // SOP Instance UID of Concatenation Source
  get SOPInstanceUIDOfConcatenationSource(): string | undefined {
    return this.x00200242;
  }

  get x00200242(): string | undefined {
    const value = this.dwResponse['00200242']?.Value;
    return convert(value?.[0], 0x00200242, 'string');
  }

  getSOPInstanceUIDOfConcatenationSource(): string {
    const value = this.x00200242;
    if (value === undefined) {
      throw new Error('SOPInstanceUIDOfConcatenationSource is undefined');
    }
    return value;
  }

  // Series in Study
  get SeriesInStudy(): number | undefined {
    return this.x00201000;
  }

  get x00201000(): number | undefined {
    const value = this.dwResponse['00201000']?.Value;
    return convert(value?.[0], 0x00201000, 'number');
  }

  getSeriesInStudy(): number {
    const value = this.x00201000;
    if (value === undefined) {
      throw new Error('SeriesInStudy is undefined');
    }
    return value;
  }

  // Acquisitions in Series
  get AcquisitionsInSeries(): number | undefined {
    return this.x00201001;
  }

  get x00201001(): number | undefined {
    const value = this.dwResponse['00201001']?.Value;
    return convert(value?.[0], 0x00201001, 'number');
  }

  getAcquisitionsInSeries(): number {
    const value = this.x00201001;
    if (value === undefined) {
      throw new Error('AcquisitionsInSeries is undefined');
    }
    return value;
  }

  // Images in Acquisition
  get ImagesInAcquisition(): number | undefined {
    return this.x00201002;
  }

  get x00201002(): number | undefined {
    const value = this.dwResponse['00201002']?.Value;
    return convert(value?.[0], 0x00201002, 'number');
  }

  getImagesInAcquisition(): number {
    const value = this.x00201002;
    if (value === undefined) {
      throw new Error('ImagesInAcquisition is undefined');
    }
    return value;
  }

  // Images in Series
  get ImagesInSeries(): number | undefined {
    return this.x00201003;
  }

  get x00201003(): number | undefined {
    const value = this.dwResponse['00201003']?.Value;
    return convert(value?.[0], 0x00201003, 'number');
  }

  getImagesInSeries(): number {
    const value = this.x00201003;
    if (value === undefined) {
      throw new Error('ImagesInSeries is undefined');
    }
    return value;
  }

  // Acquisitions in Study
  get AcquisitionsInStudy(): number | undefined {
    return this.x00201004;
  }

  get x00201004(): number | undefined {
    const value = this.dwResponse['00201004']?.Value;
    return convert(value?.[0], 0x00201004, 'number');
  }

  getAcquisitionsInStudy(): number {
    const value = this.x00201004;
    if (value === undefined) {
      throw new Error('AcquisitionsInStudy is undefined');
    }
    return value;
  }

  // Images in Study
  get ImagesInStudy(): number | undefined {
    return this.x00201005;
  }

  get x00201005(): number | undefined {
    const value = this.dwResponse['00201005']?.Value;
    return convert(value?.[0], 0x00201005, 'number');
  }

  getImagesInStudy(): number {
    const value = this.x00201005;
    if (value === undefined) {
      throw new Error('ImagesInStudy is undefined');
    }
    return value;
  }

  // Reference
  get Reference(): Array<string | undefined> | undefined {
    return this.x00201020;
  }

  get x00201020(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00201020']?.Value;
    return convert(value, 0x00201020, 'Array<string | undefined>');
  }

  getReference(): Array<string | undefined> {
    const value = this.x00201020;
    if (value === undefined) {
      throw new Error('Reference is undefined');
    }
    return value;
  }

  // Position Reference Indicator
  get PositionReferenceIndicator(): string | undefined {
    return this.x00201040;
  }

  get x00201040(): string | undefined {
    const value = this.dwResponse['00201040']?.Value;
    return convert(value?.[0], 0x00201040, 'string');
  }

  getPositionReferenceIndicator(): string {
    const value = this.x00201040;
    if (value === undefined) {
      throw new Error('PositionReferenceIndicator is undefined');
    }
    return value;
  }

  // Slice Location
  get SliceLocation(): number | undefined {
    return this.x00201041;
  }

  get x00201041(): number | undefined {
    const value = this.dwResponse['00201041']?.Value;
    return convert(value?.[0], 0x00201041, 'number');
  }

  getSliceLocation(): number {
    const value = this.x00201041;
    if (value === undefined) {
      throw new Error('SliceLocation is undefined');
    }
    return value;
  }

  // Other Study Numbers
  get OtherStudyNumbers(): Array<number | undefined> | undefined {
    return this.x00201070;
  }

  get x00201070(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00201070']?.Value;
    return convert(value, 0x00201070, 'Array<number | undefined>');
  }

  getOtherStudyNumbers(): Array<number | undefined> {
    const value = this.x00201070;
    if (value === undefined) {
      throw new Error('OtherStudyNumbers is undefined');
    }
    return value;
  }

  // Number of Patient Related Studies
  get NumberOfPatientRelatedStudies(): number | undefined {
    return this.x00201200;
  }

  get x00201200(): number | undefined {
    const value = this.dwResponse['00201200']?.Value;
    return convert(value?.[0], 0x00201200, 'number');
  }

  getNumberOfPatientRelatedStudies(): number {
    const value = this.x00201200;
    if (value === undefined) {
      throw new Error('NumberOfPatientRelatedStudies is undefined');
    }
    return value;
  }

  // Number of Patient Related Series
  get NumberOfPatientRelatedSeries(): number | undefined {
    return this.x00201202;
  }

  get x00201202(): number | undefined {
    const value = this.dwResponse['00201202']?.Value;
    return convert(value?.[0], 0x00201202, 'number');
  }

  getNumberOfPatientRelatedSeries(): number {
    const value = this.x00201202;
    if (value === undefined) {
      throw new Error('NumberOfPatientRelatedSeries is undefined');
    }
    return value;
  }

  // Number of Patient Related Instances
  get NumberOfPatientRelatedInstances(): number | undefined {
    return this.x00201204;
  }

  get x00201204(): number | undefined {
    const value = this.dwResponse['00201204']?.Value;
    return convert(value?.[0], 0x00201204, 'number');
  }

  getNumberOfPatientRelatedInstances(): number {
    const value = this.x00201204;
    if (value === undefined) {
      throw new Error('NumberOfPatientRelatedInstances is undefined');
    }
    return value;
  }

  // Number of Study Related Series
  get NumberOfStudyRelatedSeries(): number | undefined {
    return this.x00201206;
  }

  get x00201206(): number | undefined {
    const value = this.dwResponse['00201206']?.Value;
    return convert(value?.[0], 0x00201206, 'number');
  }

  getNumberOfStudyRelatedSeries(): number {
    const value = this.x00201206;
    if (value === undefined) {
      throw new Error('NumberOfStudyRelatedSeries is undefined');
    }
    return value;
  }

  // Number of Study Related Instances
  get NumberOfStudyRelatedInstances(): number | undefined {
    return this.x00201208;
  }

  get x00201208(): number | undefined {
    const value = this.dwResponse['00201208']?.Value;
    return convert(value?.[0], 0x00201208, 'number');
  }

  getNumberOfStudyRelatedInstances(): number {
    const value = this.x00201208;
    if (value === undefined) {
      throw new Error('NumberOfStudyRelatedInstances is undefined');
    }
    return value;
  }

  // Number of Series Related Instances
  get NumberOfSeriesRelatedInstances(): number | undefined {
    return this.x00201209;
  }

  get x00201209(): number | undefined {
    const value = this.dwResponse['00201209']?.Value;
    return convert(value?.[0], 0x00201209, 'number');
  }

  getNumberOfSeriesRelatedInstances(): number {
    const value = this.x00201209;
    if (value === undefined) {
      throw new Error('NumberOfSeriesRelatedInstances is undefined');
    }
    return value;
  }

  // Source Image IDs
  get SourceImageIDs(): Array<string | undefined> | undefined {
    return this.x002031xx;
  }

  get x002031xx(): Array<string | undefined> | undefined {
    const value = this.dwResponse['002031XX']?.Value;
    throw new Error('Unsupported field SourceImageIDs (002031xx)');
  }

  getSourceImageIDs(): Array<string | undefined> {
    const value = this.x002031xx;
    if (value === undefined) {
      throw new Error('SourceImageIDs is undefined');
    }
    return value;
  }

  // Modifying Device ID
  get ModifyingDeviceID(): string | undefined {
    return this.x00203401;
  }

  get x00203401(): string | undefined {
    const value = this.dwResponse['00203401']?.Value;
    return convert(value?.[0], 0x00203401, 'string');
  }

  getModifyingDeviceID(): string {
    const value = this.x00203401;
    if (value === undefined) {
      throw new Error('ModifyingDeviceID is undefined');
    }
    return value;
  }

  // Modified Image ID
  get ModifiedImageID(): string | undefined {
    return this.x00203402;
  }

  get x00203402(): string | undefined {
    const value = this.dwResponse['00203402']?.Value;
    return convert(value?.[0], 0x00203402, 'string');
  }

  getModifiedImageID(): string {
    const value = this.x00203402;
    if (value === undefined) {
      throw new Error('ModifiedImageID is undefined');
    }
    return value;
  }

  // Modified Image Date
  get ModifiedImageDate(): Date | undefined {
    return this.x00203403;
  }

  get x00203403(): Date | undefined {
    const value = this.dwResponse['00203403']?.Value;
    return convert(value?.[0], 0x00203403, 'Date');
  }

  getModifiedImageDate(): Date {
    const value = this.x00203403;
    if (value === undefined) {
      throw new Error('ModifiedImageDate is undefined');
    }
    return value;
  }

  // Modifying Device Manufacturer
  get ModifyingDeviceManufacturer(): string | undefined {
    return this.x00203404;
  }

  get x00203404(): string | undefined {
    const value = this.dwResponse['00203404']?.Value;
    return convert(value?.[0], 0x00203404, 'string');
  }

  getModifyingDeviceManufacturer(): string {
    const value = this.x00203404;
    if (value === undefined) {
      throw new Error('ModifyingDeviceManufacturer is undefined');
    }
    return value;
  }

  // Modified Image Time
  get ModifiedImageTime(): string | undefined {
    return this.x00203405;
  }

  get x00203405(): string | undefined {
    const value = this.dwResponse['00203405']?.Value;
    return convert(value?.[0], 0x00203405, 'string');
  }

  getModifiedImageTime(): string {
    const value = this.x00203405;
    if (value === undefined) {
      throw new Error('ModifiedImageTime is undefined');
    }
    return value;
  }

  // Modified Image Description
  get ModifiedImageDescription(): string | undefined {
    return this.x00203406;
  }

  get x00203406(): string | undefined {
    const value = this.dwResponse['00203406']?.Value;
    return convert(value?.[0], 0x00203406, 'string');
  }

  getModifiedImageDescription(): string {
    const value = this.x00203406;
    if (value === undefined) {
      throw new Error('ModifiedImageDescription is undefined');
    }
    return value;
  }

  // Original Image Identification
  get OriginalImageIdentification(): Array<Uint16Array | undefined> | undefined {
    return this.x00205000;
  }

  get x00205000(): Array<Uint16Array | undefined> | undefined {
    const value = this.dwResponse['00205000']?.Value;
    return convert(value, 0x00205000, 'Array<Uint16Array | undefined>');
  }

  getOriginalImageIdentification(): Array<Uint16Array | undefined> {
    const value = this.x00205000;
    if (value === undefined) {
      throw new Error('OriginalImageIdentification is undefined');
    }
    return value;
  }

  // Original Image Identification Nomenclature
  get OriginalImageIdentificationNomenclature(): Array<string | undefined> | undefined {
    return this.x00205002;
  }

  get x00205002(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00205002']?.Value;
    return convert(value, 0x00205002, 'Array<string | undefined>');
  }

  getOriginalImageIdentificationNomenclature(): Array<string | undefined> {
    const value = this.x00205002;
    if (value === undefined) {
      throw new Error('OriginalImageIdentificationNomenclature is undefined');
    }
    return value;
  }

  // Stack ID
  get StackID(): string | undefined {
    return this.x00209056;
  }

  get x00209056(): string | undefined {
    const value = this.dwResponse['00209056']?.Value;
    return convert(value?.[0], 0x00209056, 'string');
  }

  getStackID(): string {
    const value = this.x00209056;
    if (value === undefined) {
      throw new Error('StackID is undefined');
    }
    return value;
  }

  // In-Stack Position Number
  get InStackPositionNumber(): number | undefined {
    return this.x00209057;
  }

  get x00209057(): number | undefined {
    const value = this.dwResponse['00209057']?.Value;
    return convert(value?.[0], 0x00209057, 'number');
  }

  getInStackPositionNumber(): number {
    const value = this.x00209057;
    if (value === undefined) {
      throw new Error('InStackPositionNumber is undefined');
    }
    return value;
  }

  // Frame Anatomy Sequence
  get FrameAnatomySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00209071;
  }

  get x00209071(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00209071']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFrameAnatomySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00209071;
    if (value === undefined) {
      throw new Error('FrameAnatomySequence is undefined');
    }
    return value;
  }

  // Frame Laterality
  get FrameLaterality(): string | undefined {
    return this.x00209072;
  }

  get x00209072(): string | undefined {
    const value = this.dwResponse['00209072']?.Value;
    return convert(value?.[0], 0x00209072, 'string');
  }

  getFrameLaterality(): string {
    const value = this.x00209072;
    if (value === undefined) {
      throw new Error('FrameLaterality is undefined');
    }
    return value;
  }

  // Frame Content Sequence
  get FrameContentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00209111;
  }

  get x00209111(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00209111']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFrameContentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00209111;
    if (value === undefined) {
      throw new Error('FrameContentSequence is undefined');
    }
    return value;
  }

  // Plane Position Sequence
  get PlanePositionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00209113;
  }

  get x00209113(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00209113']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPlanePositionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00209113;
    if (value === undefined) {
      throw new Error('PlanePositionSequence is undefined');
    }
    return value;
  }

  // Plane Orientation Sequence
  get PlaneOrientationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00209116;
  }

  get x00209116(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00209116']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPlaneOrientationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00209116;
    if (value === undefined) {
      throw new Error('PlaneOrientationSequence is undefined');
    }
    return value;
  }

  // Temporal Position Index
  get TemporalPositionIndex(): number | undefined {
    return this.x00209128;
  }

  get x00209128(): number | undefined {
    const value = this.dwResponse['00209128']?.Value;
    return convert(value?.[0], 0x00209128, 'number');
  }

  getTemporalPositionIndex(): number {
    const value = this.x00209128;
    if (value === undefined) {
      throw new Error('TemporalPositionIndex is undefined');
    }
    return value;
  }

  // Nominal Cardiac Trigger Delay Time
  get NominalCardiacTriggerDelayTime(): number | undefined {
    return this.x00209153;
  }

  get x00209153(): number | undefined {
    const value = this.dwResponse['00209153']?.Value;
    return convert(value?.[0], 0x00209153, 'number');
  }

  getNominalCardiacTriggerDelayTime(): number {
    const value = this.x00209153;
    if (value === undefined) {
      throw new Error('NominalCardiacTriggerDelayTime is undefined');
    }
    return value;
  }

  // Nominal Cardiac Trigger Time Prior To R-Peak
  get NominalCardiacTriggerTimePriorToRPeak(): number | undefined {
    return this.x00209154;
  }

  get x00209154(): number | undefined {
    const value = this.dwResponse['00209154']?.Value;
    return convert(value?.[0], 0x00209154, 'number');
  }

  getNominalCardiacTriggerTimePriorToRPeak(): number {
    const value = this.x00209154;
    if (value === undefined) {
      throw new Error('NominalCardiacTriggerTimePriorToRPeak is undefined');
    }
    return value;
  }

  // Actual Cardiac Trigger Time Prior To R-Peak
  get ActualCardiacTriggerTimePriorToRPeak(): number | undefined {
    return this.x00209155;
  }

  get x00209155(): number | undefined {
    const value = this.dwResponse['00209155']?.Value;
    return convert(value?.[0], 0x00209155, 'number');
  }

  getActualCardiacTriggerTimePriorToRPeak(): number {
    const value = this.x00209155;
    if (value === undefined) {
      throw new Error('ActualCardiacTriggerTimePriorToRPeak is undefined');
    }
    return value;
  }

  // Frame Acquisition Number
  get FrameAcquisitionNumber(): number | undefined {
    return this.x00209156;
  }

  get x00209156(): number | undefined {
    const value = this.dwResponse['00209156']?.Value;
    return convert(value?.[0], 0x00209156, 'number');
  }

  getFrameAcquisitionNumber(): number {
    const value = this.x00209156;
    if (value === undefined) {
      throw new Error('FrameAcquisitionNumber is undefined');
    }
    return value;
  }

  // Dimension Index Values
  get DimensionIndexValues(): Array<number | undefined> | undefined {
    return this.x00209157;
  }

  get x00209157(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00209157']?.Value;
    return convert(value, 0x00209157, 'Array<number | undefined>');
  }

  getDimensionIndexValues(): Array<number | undefined> {
    const value = this.x00209157;
    if (value === undefined) {
      throw new Error('DimensionIndexValues is undefined');
    }
    return value;
  }

  // Concatenation UID
  get ConcatenationUID(): string | undefined {
    return this.x00209161;
  }

  get x00209161(): string | undefined {
    const value = this.dwResponse['00209161']?.Value;
    return convert(value?.[0], 0x00209161, 'string');
  }

  getConcatenationUID(): string {
    const value = this.x00209161;
    if (value === undefined) {
      throw new Error('ConcatenationUID is undefined');
    }
    return value;
  }

  // In-concatenation Number
  get InConcatenationNumber(): number | undefined {
    return this.x00209162;
  }

  get x00209162(): number | undefined {
    const value = this.dwResponse['00209162']?.Value;
    return convert(value?.[0], 0x00209162, 'number');
  }

  getInConcatenationNumber(): number {
    const value = this.x00209162;
    if (value === undefined) {
      throw new Error('InConcatenationNumber is undefined');
    }
    return value;
  }

  // In-concatenation Total Number
  get InConcatenationTotalNumber(): number | undefined {
    return this.x00209163;
  }

  get x00209163(): number | undefined {
    const value = this.dwResponse['00209163']?.Value;
    return convert(value?.[0], 0x00209163, 'number');
  }

  getInConcatenationTotalNumber(): number {
    const value = this.x00209163;
    if (value === undefined) {
      throw new Error('InConcatenationTotalNumber is undefined');
    }
    return value;
  }

  // Dimension Organization UID
  get DimensionOrganizationUID(): string | undefined {
    return this.x00209164;
  }

  get x00209164(): string | undefined {
    const value = this.dwResponse['00209164']?.Value;
    return convert(value?.[0], 0x00209164, 'string');
  }

  getDimensionOrganizationUID(): string {
    const value = this.x00209164;
    if (value === undefined) {
      throw new Error('DimensionOrganizationUID is undefined');
    }
    return value;
  }

  // Dimension Index Pointer
  get DimensionIndexPointer(): Uint16Array | undefined {
    return this.x00209165;
  }

  get x00209165(): Uint16Array | undefined {
    const value = this.dwResponse['00209165']?.Value;
    return convert(value?.[0], 0x00209165, 'Uint16Array');
  }

  getDimensionIndexPointer(): Uint16Array {
    const value = this.x00209165;
    if (value === undefined) {
      throw new Error('DimensionIndexPointer is undefined');
    }
    return value;
  }

  // Functional Group Pointer
  get FunctionalGroupPointer(): Uint16Array | undefined {
    return this.x00209167;
  }

  get x00209167(): Uint16Array | undefined {
    const value = this.dwResponse['00209167']?.Value;
    return convert(value?.[0], 0x00209167, 'Uint16Array');
  }

  getFunctionalGroupPointer(): Uint16Array {
    const value = this.x00209167;
    if (value === undefined) {
      throw new Error('FunctionalGroupPointer is undefined');
    }
    return value;
  }

  // Unassigned Shared Converted Attributes Sequence
  get UnassignedSharedConvertedAttributesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00209170;
  }

  get x00209170(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00209170']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getUnassignedSharedConvertedAttributesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00209170;
    if (value === undefined) {
      throw new Error('UnassignedSharedConvertedAttributesSequence is undefined');
    }
    return value;
  }

  // Unassigned Per-Frame Converted Attributes Sequence
  get UnassignedPerFrameConvertedAttributesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00209171;
  }

  get x00209171(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00209171']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getUnassignedPerFrameConvertedAttributesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00209171;
    if (value === undefined) {
      throw new Error('UnassignedPerFrameConvertedAttributesSequence is undefined');
    }
    return value;
  }

  // Conversion Source Attributes Sequence
  get ConversionSourceAttributesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00209172;
  }

  get x00209172(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00209172']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getConversionSourceAttributesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00209172;
    if (value === undefined) {
      throw new Error('ConversionSourceAttributesSequence is undefined');
    }
    return value;
  }

  // Dimension Index Private Creator
  get DimensionIndexPrivateCreator(): string | undefined {
    return this.x00209213;
  }

  get x00209213(): string | undefined {
    const value = this.dwResponse['00209213']?.Value;
    return convert(value?.[0], 0x00209213, 'string');
  }

  getDimensionIndexPrivateCreator(): string {
    const value = this.x00209213;
    if (value === undefined) {
      throw new Error('DimensionIndexPrivateCreator is undefined');
    }
    return value;
  }

  // Dimension Organization Sequence
  get DimensionOrganizationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00209221;
  }

  get x00209221(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00209221']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDimensionOrganizationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00209221;
    if (value === undefined) {
      throw new Error('DimensionOrganizationSequence is undefined');
    }
    return value;
  }

  // Dimension Index Sequence
  get DimensionIndexSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00209222;
  }

  get x00209222(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00209222']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDimensionIndexSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00209222;
    if (value === undefined) {
      throw new Error('DimensionIndexSequence is undefined');
    }
    return value;
  }

  // Concatenation Frame Offset Number
  get ConcatenationFrameOffsetNumber(): number | undefined {
    return this.x00209228;
  }

  get x00209228(): number | undefined {
    const value = this.dwResponse['00209228']?.Value;
    return convert(value?.[0], 0x00209228, 'number');
  }

  getConcatenationFrameOffsetNumber(): number {
    const value = this.x00209228;
    if (value === undefined) {
      throw new Error('ConcatenationFrameOffsetNumber is undefined');
    }
    return value;
  }

  // Functional Group Private Creator
  get FunctionalGroupPrivateCreator(): string | undefined {
    return this.x00209238;
  }

  get x00209238(): string | undefined {
    const value = this.dwResponse['00209238']?.Value;
    return convert(value?.[0], 0x00209238, 'string');
  }

  getFunctionalGroupPrivateCreator(): string {
    const value = this.x00209238;
    if (value === undefined) {
      throw new Error('FunctionalGroupPrivateCreator is undefined');
    }
    return value;
  }

  // Nominal Percentage of Cardiac Phase
  get NominalPercentageOfCardiacPhase(): number | undefined {
    return this.x00209241;
  }

  get x00209241(): number | undefined {
    const value = this.dwResponse['00209241']?.Value;
    return convert(value?.[0], 0x00209241, 'number');
  }

  getNominalPercentageOfCardiacPhase(): number {
    const value = this.x00209241;
    if (value === undefined) {
      throw new Error('NominalPercentageOfCardiacPhase is undefined');
    }
    return value;
  }

  // Nominal Percentage of Respiratory Phase
  get NominalPercentageOfRespiratoryPhase(): number | undefined {
    return this.x00209245;
  }

  get x00209245(): number | undefined {
    const value = this.dwResponse['00209245']?.Value;
    return convert(value?.[0], 0x00209245, 'number');
  }

  getNominalPercentageOfRespiratoryPhase(): number {
    const value = this.x00209245;
    if (value === undefined) {
      throw new Error('NominalPercentageOfRespiratoryPhase is undefined');
    }
    return value;
  }

  // Starting Respiratory Amplitude
  get StartingRespiratoryAmplitude(): number | undefined {
    return this.x00209246;
  }

  get x00209246(): number | undefined {
    const value = this.dwResponse['00209246']?.Value;
    return convert(value?.[0], 0x00209246, 'number');
  }

  getStartingRespiratoryAmplitude(): number {
    const value = this.x00209246;
    if (value === undefined) {
      throw new Error('StartingRespiratoryAmplitude is undefined');
    }
    return value;
  }

  // Starting Respiratory Phase
  get StartingRespiratoryPhase(): string | undefined {
    return this.x00209247;
  }

  get x00209247(): string | undefined {
    const value = this.dwResponse['00209247']?.Value;
    return convert(value?.[0], 0x00209247, 'string');
  }

  getStartingRespiratoryPhase(): string {
    const value = this.x00209247;
    if (value === undefined) {
      throw new Error('StartingRespiratoryPhase is undefined');
    }
    return value;
  }

  // Ending Respiratory Amplitude
  get EndingRespiratoryAmplitude(): number | undefined {
    return this.x00209248;
  }

  get x00209248(): number | undefined {
    const value = this.dwResponse['00209248']?.Value;
    return convert(value?.[0], 0x00209248, 'number');
  }

  getEndingRespiratoryAmplitude(): number {
    const value = this.x00209248;
    if (value === undefined) {
      throw new Error('EndingRespiratoryAmplitude is undefined');
    }
    return value;
  }

  // Ending Respiratory Phase
  get EndingRespiratoryPhase(): string | undefined {
    return this.x00209249;
  }

  get x00209249(): string | undefined {
    const value = this.dwResponse['00209249']?.Value;
    return convert(value?.[0], 0x00209249, 'string');
  }

  getEndingRespiratoryPhase(): string {
    const value = this.x00209249;
    if (value === undefined) {
      throw new Error('EndingRespiratoryPhase is undefined');
    }
    return value;
  }

  // Respiratory Trigger Type
  get RespiratoryTriggerType(): string | undefined {
    return this.x00209250;
  }

  get x00209250(): string | undefined {
    const value = this.dwResponse['00209250']?.Value;
    return convert(value?.[0], 0x00209250, 'string');
  }

  getRespiratoryTriggerType(): string {
    const value = this.x00209250;
    if (value === undefined) {
      throw new Error('RespiratoryTriggerType is undefined');
    }
    return value;
  }

  // R-R Interval Time Nominal
  get RRIntervalTimeNominal(): number | undefined {
    return this.x00209251;
  }

  get x00209251(): number | undefined {
    const value = this.dwResponse['00209251']?.Value;
    return convert(value?.[0], 0x00209251, 'number');
  }

  getRRIntervalTimeNominal(): number {
    const value = this.x00209251;
    if (value === undefined) {
      throw new Error('RRIntervalTimeNominal is undefined');
    }
    return value;
  }

  // Actual Cardiac Trigger Delay Time
  get ActualCardiacTriggerDelayTime(): number | undefined {
    return this.x00209252;
  }

  get x00209252(): number | undefined {
    const value = this.dwResponse['00209252']?.Value;
    return convert(value?.[0], 0x00209252, 'number');
  }

  getActualCardiacTriggerDelayTime(): number {
    const value = this.x00209252;
    if (value === undefined) {
      throw new Error('ActualCardiacTriggerDelayTime is undefined');
    }
    return value;
  }

  // Respiratory Synchronization Sequence
  get RespiratorySynchronizationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00209253;
  }

  get x00209253(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00209253']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRespiratorySynchronizationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00209253;
    if (value === undefined) {
      throw new Error('RespiratorySynchronizationSequence is undefined');
    }
    return value;
  }

  // Respiratory Interval Time
  get RespiratoryIntervalTime(): number | undefined {
    return this.x00209254;
  }

  get x00209254(): number | undefined {
    const value = this.dwResponse['00209254']?.Value;
    return convert(value?.[0], 0x00209254, 'number');
  }

  getRespiratoryIntervalTime(): number {
    const value = this.x00209254;
    if (value === undefined) {
      throw new Error('RespiratoryIntervalTime is undefined');
    }
    return value;
  }

  // Nominal Respiratory Trigger Delay Time
  get NominalRespiratoryTriggerDelayTime(): number | undefined {
    return this.x00209255;
  }

  get x00209255(): number | undefined {
    const value = this.dwResponse['00209255']?.Value;
    return convert(value?.[0], 0x00209255, 'number');
  }

  getNominalRespiratoryTriggerDelayTime(): number {
    const value = this.x00209255;
    if (value === undefined) {
      throw new Error('NominalRespiratoryTriggerDelayTime is undefined');
    }
    return value;
  }

  // Respiratory Trigger Delay Threshold
  get RespiratoryTriggerDelayThreshold(): number | undefined {
    return this.x00209256;
  }

  get x00209256(): number | undefined {
    const value = this.dwResponse['00209256']?.Value;
    return convert(value?.[0], 0x00209256, 'number');
  }

  getRespiratoryTriggerDelayThreshold(): number {
    const value = this.x00209256;
    if (value === undefined) {
      throw new Error('RespiratoryTriggerDelayThreshold is undefined');
    }
    return value;
  }

  // Actual Respiratory Trigger Delay Time
  get ActualRespiratoryTriggerDelayTime(): number | undefined {
    return this.x00209257;
  }

  get x00209257(): number | undefined {
    const value = this.dwResponse['00209257']?.Value;
    return convert(value?.[0], 0x00209257, 'number');
  }

  getActualRespiratoryTriggerDelayTime(): number {
    const value = this.x00209257;
    if (value === undefined) {
      throw new Error('ActualRespiratoryTriggerDelayTime is undefined');
    }
    return value;
  }

  // Image Position (Volume)
  get ImagePositionVolume(): Array<number | undefined> | undefined {
    return this.x00209301;
  }

  get x00209301(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00209301']?.Value;
    return convert(value, 0x00209301, 'Array<number | undefined>');
  }

  getImagePositionVolume(): Array<number | undefined> {
    const value = this.x00209301;
    if (value === undefined) {
      throw new Error('ImagePositionVolume is undefined');
    }
    return value;
  }

  // Image Orientation (Volume)
  get ImageOrientationVolume(): Array<number | undefined> | undefined {
    return this.x00209302;
  }

  get x00209302(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00209302']?.Value;
    return convert(value, 0x00209302, 'Array<number | undefined>');
  }

  getImageOrientationVolume(): Array<number | undefined> {
    const value = this.x00209302;
    if (value === undefined) {
      throw new Error('ImageOrientationVolume is undefined');
    }
    return value;
  }

  // Ultrasound Acquisition Geometry
  get UltrasoundAcquisitionGeometry(): string | undefined {
    return this.x00209307;
  }

  get x00209307(): string | undefined {
    const value = this.dwResponse['00209307']?.Value;
    return convert(value?.[0], 0x00209307, 'string');
  }

  getUltrasoundAcquisitionGeometry(): string {
    const value = this.x00209307;
    if (value === undefined) {
      throw new Error('UltrasoundAcquisitionGeometry is undefined');
    }
    return value;
  }

  // Apex Position
  get ApexPosition(): Array<number | undefined> | undefined {
    return this.x00209308;
  }

  get x00209308(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00209308']?.Value;
    return convert(value, 0x00209308, 'Array<number | undefined>');
  }

  getApexPosition(): Array<number | undefined> {
    const value = this.x00209308;
    if (value === undefined) {
      throw new Error('ApexPosition is undefined');
    }
    return value;
  }

  // Volume to Transducer Mapping Matrix
  get VolumeToTransducerMappingMatrix(): Array<number | undefined> | undefined {
    return this.x00209309;
  }

  get x00209309(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00209309']?.Value;
    return convert(value, 0x00209309, 'Array<number | undefined>');
  }

  getVolumeToTransducerMappingMatrix(): Array<number | undefined> {
    const value = this.x00209309;
    if (value === undefined) {
      throw new Error('VolumeToTransducerMappingMatrix is undefined');
    }
    return value;
  }

  // Volume to Table Mapping Matrix
  get VolumeToTableMappingMatrix(): Array<number | undefined> | undefined {
    return this.x0020930a;
  }

  get x0020930a(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0020930A']?.Value;
    return convert(value, 0x0020930a, 'Array<number | undefined>');
  }

  getVolumeToTableMappingMatrix(): Array<number | undefined> {
    const value = this.x0020930a;
    if (value === undefined) {
      throw new Error('VolumeToTableMappingMatrix is undefined');
    }
    return value;
  }

  // Volume to Transducer Relationship
  get VolumeToTransducerRelationship(): string | undefined {
    return this.x0020930b;
  }

  get x0020930b(): string | undefined {
    const value = this.dwResponse['0020930B']?.Value;
    return convert(value?.[0], 0x0020930b, 'string');
  }

  getVolumeToTransducerRelationship(): string {
    const value = this.x0020930b;
    if (value === undefined) {
      throw new Error('VolumeToTransducerRelationship is undefined');
    }
    return value;
  }

  // Patient Frame of Reference Source
  get PatientFrameOfReferenceSource(): string | undefined {
    return this.x0020930c;
  }

  get x0020930c(): string | undefined {
    const value = this.dwResponse['0020930C']?.Value;
    return convert(value?.[0], 0x0020930c, 'string');
  }

  getPatientFrameOfReferenceSource(): string {
    const value = this.x0020930c;
    if (value === undefined) {
      throw new Error('PatientFrameOfReferenceSource is undefined');
    }
    return value;
  }

  // Temporal Position Time Offset
  get TemporalPositionTimeOffset(): number | undefined {
    return this.x0020930d;
  }

  get x0020930d(): number | undefined {
    const value = this.dwResponse['0020930D']?.Value;
    return convert(value?.[0], 0x0020930d, 'number');
  }

  getTemporalPositionTimeOffset(): number {
    const value = this.x0020930d;
    if (value === undefined) {
      throw new Error('TemporalPositionTimeOffset is undefined');
    }
    return value;
  }

  // Plane Position (Volume) Sequence
  get PlanePositionVolumeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0020930e;
  }

  get x0020930e(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0020930E']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPlanePositionVolumeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0020930e;
    if (value === undefined) {
      throw new Error('PlanePositionVolumeSequence is undefined');
    }
    return value;
  }

  // Plane Orientation (Volume) Sequence
  get PlaneOrientationVolumeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0020930f;
  }

  get x0020930f(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0020930F']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPlaneOrientationVolumeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0020930f;
    if (value === undefined) {
      throw new Error('PlaneOrientationVolumeSequence is undefined');
    }
    return value;
  }

  // Temporal Position Sequence
  get TemporalPositionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00209310;
  }

  get x00209310(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00209310']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTemporalPositionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00209310;
    if (value === undefined) {
      throw new Error('TemporalPositionSequence is undefined');
    }
    return value;
  }

  // Dimension Organization Type
  get DimensionOrganizationType(): string | undefined {
    return this.x00209311;
  }

  get x00209311(): string | undefined {
    const value = this.dwResponse['00209311']?.Value;
    return convert(value?.[0], 0x00209311, 'string');
  }

  getDimensionOrganizationType(): string {
    const value = this.x00209311;
    if (value === undefined) {
      throw new Error('DimensionOrganizationType is undefined');
    }
    return value;
  }

  // Volume Frame of Reference UID
  get VolumeFrameOfReferenceUID(): string | undefined {
    return this.x00209312;
  }

  get x00209312(): string | undefined {
    const value = this.dwResponse['00209312']?.Value;
    return convert(value?.[0], 0x00209312, 'string');
  }

  getVolumeFrameOfReferenceUID(): string {
    const value = this.x00209312;
    if (value === undefined) {
      throw new Error('VolumeFrameOfReferenceUID is undefined');
    }
    return value;
  }

  // Table Frame of Reference UID
  get TableFrameOfReferenceUID(): string | undefined {
    return this.x00209313;
  }

  get x00209313(): string | undefined {
    const value = this.dwResponse['00209313']?.Value;
    return convert(value?.[0], 0x00209313, 'string');
  }

  getTableFrameOfReferenceUID(): string {
    const value = this.x00209313;
    if (value === undefined) {
      throw new Error('TableFrameOfReferenceUID is undefined');
    }
    return value;
  }

  // Dimension Description Label
  get DimensionDescriptionLabel(): string | undefined {
    return this.x00209421;
  }

  get x00209421(): string | undefined {
    const value = this.dwResponse['00209421']?.Value;
    return convert(value?.[0], 0x00209421, 'string');
  }

  getDimensionDescriptionLabel(): string {
    const value = this.x00209421;
    if (value === undefined) {
      throw new Error('DimensionDescriptionLabel is undefined');
    }
    return value;
  }

  // Patient Orientation in Frame Sequence
  get PatientOrientationInFrameSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00209450;
  }

  get x00209450(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00209450']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPatientOrientationInFrameSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00209450;
    if (value === undefined) {
      throw new Error('PatientOrientationInFrameSequence is undefined');
    }
    return value;
  }

  // Frame Label
  get FrameLabel(): string | undefined {
    return this.x00209453;
  }

  get x00209453(): string | undefined {
    const value = this.dwResponse['00209453']?.Value;
    return convert(value?.[0], 0x00209453, 'string');
  }

  getFrameLabel(): string {
    const value = this.x00209453;
    if (value === undefined) {
      throw new Error('FrameLabel is undefined');
    }
    return value;
  }

  // Acquisition Index
  get AcquisitionIndex(): Array<number | undefined> | undefined {
    return this.x00209518;
  }

  get x00209518(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00209518']?.Value;
    return convert(value, 0x00209518, 'Array<number | undefined>');
  }

  getAcquisitionIndex(): Array<number | undefined> {
    const value = this.x00209518;
    if (value === undefined) {
      throw new Error('AcquisitionIndex is undefined');
    }
    return value;
  }

  // Contributing SOP Instances Reference Sequence
  get ContributingSOPInstancesReferenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00209529;
  }

  get x00209529(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00209529']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getContributingSOPInstancesReferenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00209529;
    if (value === undefined) {
      throw new Error('ContributingSOPInstancesReferenceSequence is undefined');
    }
    return value;
  }

  // Reconstruction Index
  get ReconstructionIndex(): number | undefined {
    return this.x00209536;
  }

  get x00209536(): number | undefined {
    const value = this.dwResponse['00209536']?.Value;
    return convert(value?.[0], 0x00209536, 'number');
  }

  getReconstructionIndex(): number {
    const value = this.x00209536;
    if (value === undefined) {
      throw new Error('ReconstructionIndex is undefined');
    }
    return value;
  }

  // Light Path Filter Pass-Through Wavelength
  get LightPathFilterPassThroughWavelength(): number | undefined {
    return this.x00220001;
  }

  get x00220001(): number | undefined {
    const value = this.dwResponse['00220001']?.Value;
    return convert(value?.[0], 0x00220001, 'number');
  }

  getLightPathFilterPassThroughWavelength(): number {
    const value = this.x00220001;
    if (value === undefined) {
      throw new Error('LightPathFilterPassThroughWavelength is undefined');
    }
    return value;
  }

  // Light Path Filter Pass Band
  get LightPathFilterPassBand(): Array<number | undefined> | undefined {
    return this.x00220002;
  }

  get x00220002(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00220002']?.Value;
    return convert(value, 0x00220002, 'Array<number | undefined>');
  }

  getLightPathFilterPassBand(): Array<number | undefined> {
    const value = this.x00220002;
    if (value === undefined) {
      throw new Error('LightPathFilterPassBand is undefined');
    }
    return value;
  }

  // Image Path Filter Pass-Through Wavelength
  get ImagePathFilterPassThroughWavelength(): number | undefined {
    return this.x00220003;
  }

  get x00220003(): number | undefined {
    const value = this.dwResponse['00220003']?.Value;
    return convert(value?.[0], 0x00220003, 'number');
  }

  getImagePathFilterPassThroughWavelength(): number {
    const value = this.x00220003;
    if (value === undefined) {
      throw new Error('ImagePathFilterPassThroughWavelength is undefined');
    }
    return value;
  }

  // Image Path Filter Pass Band
  get ImagePathFilterPassBand(): Array<number | undefined> | undefined {
    return this.x00220004;
  }

  get x00220004(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00220004']?.Value;
    return convert(value, 0x00220004, 'Array<number | undefined>');
  }

  getImagePathFilterPassBand(): Array<number | undefined> {
    const value = this.x00220004;
    if (value === undefined) {
      throw new Error('ImagePathFilterPassBand is undefined');
    }
    return value;
  }

  // Patient Eye Movement Commanded
  get PatientEyeMovementCommanded(): string | undefined {
    return this.x00220005;
  }

  get x00220005(): string | undefined {
    const value = this.dwResponse['00220005']?.Value;
    return convert(value?.[0], 0x00220005, 'string');
  }

  getPatientEyeMovementCommanded(): string {
    const value = this.x00220005;
    if (value === undefined) {
      throw new Error('PatientEyeMovementCommanded is undefined');
    }
    return value;
  }

  // Patient Eye Movement Command Code Sequence
  get PatientEyeMovementCommandCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00220006;
  }

  get x00220006(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00220006']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPatientEyeMovementCommandCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00220006;
    if (value === undefined) {
      throw new Error('PatientEyeMovementCommandCodeSequence is undefined');
    }
    return value;
  }

  // Spherical Lens Power
  get SphericalLensPower(): number | undefined {
    return this.x00220007;
  }

  get x00220007(): number | undefined {
    const value = this.dwResponse['00220007']?.Value;
    return convert(value?.[0], 0x00220007, 'number');
  }

  getSphericalLensPower(): number {
    const value = this.x00220007;
    if (value === undefined) {
      throw new Error('SphericalLensPower is undefined');
    }
    return value;
  }

  // Cylinder Lens Power
  get CylinderLensPower(): number | undefined {
    return this.x00220008;
  }

  get x00220008(): number | undefined {
    const value = this.dwResponse['00220008']?.Value;
    return convert(value?.[0], 0x00220008, 'number');
  }

  getCylinderLensPower(): number {
    const value = this.x00220008;
    if (value === undefined) {
      throw new Error('CylinderLensPower is undefined');
    }
    return value;
  }

  // Cylinder Axis
  get CylinderAxis(): number | undefined {
    return this.x00220009;
  }

  get x00220009(): number | undefined {
    const value = this.dwResponse['00220009']?.Value;
    return convert(value?.[0], 0x00220009, 'number');
  }

  getCylinderAxis(): number {
    const value = this.x00220009;
    if (value === undefined) {
      throw new Error('CylinderAxis is undefined');
    }
    return value;
  }

  // Emmetropic Magnification
  get EmmetropicMagnification(): number | undefined {
    return this.x0022000a;
  }

  get x0022000a(): number | undefined {
    const value = this.dwResponse['0022000A']?.Value;
    return convert(value?.[0], 0x0022000a, 'number');
  }

  getEmmetropicMagnification(): number {
    const value = this.x0022000a;
    if (value === undefined) {
      throw new Error('EmmetropicMagnification is undefined');
    }
    return value;
  }

  // Intra Ocular Pressure
  get IntraOcularPressure(): number | undefined {
    return this.x0022000b;
  }

  get x0022000b(): number | undefined {
    const value = this.dwResponse['0022000B']?.Value;
    return convert(value?.[0], 0x0022000b, 'number');
  }

  getIntraOcularPressure(): number {
    const value = this.x0022000b;
    if (value === undefined) {
      throw new Error('IntraOcularPressure is undefined');
    }
    return value;
  }

  // Horizontal Field of View
  get HorizontalFieldOfView(): number | undefined {
    return this.x0022000c;
  }

  get x0022000c(): number | undefined {
    const value = this.dwResponse['0022000C']?.Value;
    return convert(value?.[0], 0x0022000c, 'number');
  }

  getHorizontalFieldOfView(): number {
    const value = this.x0022000c;
    if (value === undefined) {
      throw new Error('HorizontalFieldOfView is undefined');
    }
    return value;
  }

  // Pupil Dilated
  get PupilDilated(): string | undefined {
    return this.x0022000d;
  }

  get x0022000d(): string | undefined {
    const value = this.dwResponse['0022000D']?.Value;
    return convert(value?.[0], 0x0022000d, 'string');
  }

  getPupilDilated(): string {
    const value = this.x0022000d;
    if (value === undefined) {
      throw new Error('PupilDilated is undefined');
    }
    return value;
  }

  // Degree of Dilation
  get DegreeOfDilation(): number | undefined {
    return this.x0022000e;
  }

  get x0022000e(): number | undefined {
    const value = this.dwResponse['0022000E']?.Value;
    return convert(value?.[0], 0x0022000e, 'number');
  }

  getDegreeOfDilation(): number {
    const value = this.x0022000e;
    if (value === undefined) {
      throw new Error('DegreeOfDilation is undefined');
    }
    return value;
  }

  // Stereo Baseline Angle
  get StereoBaselineAngle(): number | undefined {
    return this.x00220010;
  }

  get x00220010(): number | undefined {
    const value = this.dwResponse['00220010']?.Value;
    return convert(value?.[0], 0x00220010, 'number');
  }

  getStereoBaselineAngle(): number {
    const value = this.x00220010;
    if (value === undefined) {
      throw new Error('StereoBaselineAngle is undefined');
    }
    return value;
  }

  // Stereo Baseline Displacement
  get StereoBaselineDisplacement(): number | undefined {
    return this.x00220011;
  }

  get x00220011(): number | undefined {
    const value = this.dwResponse['00220011']?.Value;
    return convert(value?.[0], 0x00220011, 'number');
  }

  getStereoBaselineDisplacement(): number {
    const value = this.x00220011;
    if (value === undefined) {
      throw new Error('StereoBaselineDisplacement is undefined');
    }
    return value;
  }

  // Stereo Horizontal Pixel Offset
  get StereoHorizontalPixelOffset(): number | undefined {
    return this.x00220012;
  }

  get x00220012(): number | undefined {
    const value = this.dwResponse['00220012']?.Value;
    return convert(value?.[0], 0x00220012, 'number');
  }

  getStereoHorizontalPixelOffset(): number {
    const value = this.x00220012;
    if (value === undefined) {
      throw new Error('StereoHorizontalPixelOffset is undefined');
    }
    return value;
  }

  // Stereo Vertical Pixel Offset
  get StereoVerticalPixelOffset(): number | undefined {
    return this.x00220013;
  }

  get x00220013(): number | undefined {
    const value = this.dwResponse['00220013']?.Value;
    return convert(value?.[0], 0x00220013, 'number');
  }

  getStereoVerticalPixelOffset(): number {
    const value = this.x00220013;
    if (value === undefined) {
      throw new Error('StereoVerticalPixelOffset is undefined');
    }
    return value;
  }

  // Stereo Rotation
  get StereoRotation(): number | undefined {
    return this.x00220014;
  }

  get x00220014(): number | undefined {
    const value = this.dwResponse['00220014']?.Value;
    return convert(value?.[0], 0x00220014, 'number');
  }

  getStereoRotation(): number {
    const value = this.x00220014;
    if (value === undefined) {
      throw new Error('StereoRotation is undefined');
    }
    return value;
  }

  // Acquisition Device Type Code Sequence
  get AcquisitionDeviceTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00220015;
  }

  get x00220015(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00220015']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAcquisitionDeviceTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00220015;
    if (value === undefined) {
      throw new Error('AcquisitionDeviceTypeCodeSequence is undefined');
    }
    return value;
  }

  // Illumination Type Code Sequence
  get IlluminationTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00220016;
  }

  get x00220016(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00220016']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIlluminationTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00220016;
    if (value === undefined) {
      throw new Error('IlluminationTypeCodeSequence is undefined');
    }
    return value;
  }

  // Light Path Filter Type Stack Code Sequence
  get LightPathFilterTypeStackCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00220017;
  }

  get x00220017(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00220017']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getLightPathFilterTypeStackCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00220017;
    if (value === undefined) {
      throw new Error('LightPathFilterTypeStackCodeSequence is undefined');
    }
    return value;
  }

  // Image Path Filter Type Stack Code Sequence
  get ImagePathFilterTypeStackCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00220018;
  }

  get x00220018(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00220018']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getImagePathFilterTypeStackCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00220018;
    if (value === undefined) {
      throw new Error('ImagePathFilterTypeStackCodeSequence is undefined');
    }
    return value;
  }

  // Lenses Code Sequence
  get LensesCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00220019;
  }

  get x00220019(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00220019']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getLensesCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00220019;
    if (value === undefined) {
      throw new Error('LensesCodeSequence is undefined');
    }
    return value;
  }

  // Channel Description Code Sequence
  get ChannelDescriptionCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0022001a;
  }

  get x0022001a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0022001A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getChannelDescriptionCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0022001a;
    if (value === undefined) {
      throw new Error('ChannelDescriptionCodeSequence is undefined');
    }
    return value;
  }

  // Refractive State Sequence
  get RefractiveStateSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0022001b;
  }

  get x0022001b(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0022001B']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRefractiveStateSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0022001b;
    if (value === undefined) {
      throw new Error('RefractiveStateSequence is undefined');
    }
    return value;
  }

  // Mydriatic Agent Code Sequence
  get MydriaticAgentCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0022001c;
  }

  get x0022001c(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0022001C']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMydriaticAgentCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0022001c;
    if (value === undefined) {
      throw new Error('MydriaticAgentCodeSequence is undefined');
    }
    return value;
  }

  // Relative Image Position Code Sequence
  get RelativeImagePositionCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0022001d;
  }

  get x0022001d(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0022001D']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRelativeImagePositionCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0022001d;
    if (value === undefined) {
      throw new Error('RelativeImagePositionCodeSequence is undefined');
    }
    return value;
  }

  // Camera Angle of View
  get CameraAngleOfView(): number | undefined {
    return this.x0022001e;
  }

  get x0022001e(): number | undefined {
    const value = this.dwResponse['0022001E']?.Value;
    return convert(value?.[0], 0x0022001e, 'number');
  }

  getCameraAngleOfView(): number {
    const value = this.x0022001e;
    if (value === undefined) {
      throw new Error('CameraAngleOfView is undefined');
    }
    return value;
  }

  // Stereo Pairs Sequence
  get StereoPairsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00220020;
  }

  get x00220020(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00220020']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getStereoPairsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00220020;
    if (value === undefined) {
      throw new Error('StereoPairsSequence is undefined');
    }
    return value;
  }

  // Left Image Sequence
  get LeftImageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00220021;
  }

  get x00220021(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00220021']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getLeftImageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00220021;
    if (value === undefined) {
      throw new Error('LeftImageSequence is undefined');
    }
    return value;
  }

  // Right Image Sequence
  get RightImageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00220022;
  }

  get x00220022(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00220022']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRightImageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00220022;
    if (value === undefined) {
      throw new Error('RightImageSequence is undefined');
    }
    return value;
  }

  // Axial Length of the Eye
  get AxialLengthOfTheEye(): number | undefined {
    return this.x00220030;
  }

  get x00220030(): number | undefined {
    const value = this.dwResponse['00220030']?.Value;
    return convert(value?.[0], 0x00220030, 'number');
  }

  getAxialLengthOfTheEye(): number {
    const value = this.x00220030;
    if (value === undefined) {
      throw new Error('AxialLengthOfTheEye is undefined');
    }
    return value;
  }

  // Ophthalmic Frame Location Sequence
  get OphthalmicFrameLocationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00220031;
  }

  get x00220031(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00220031']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicFrameLocationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00220031;
    if (value === undefined) {
      throw new Error('OphthalmicFrameLocationSequence is undefined');
    }
    return value;
  }

  // Reference Coordinates
  get ReferenceCoordinates(): Array<number | undefined> | undefined {
    return this.x00220032;
  }

  get x00220032(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00220032']?.Value;
    return convert(value, 0x00220032, 'Array<number | undefined>');
  }

  getReferenceCoordinates(): Array<number | undefined> {
    const value = this.x00220032;
    if (value === undefined) {
      throw new Error('ReferenceCoordinates is undefined');
    }
    return value;
  }

  // Depth Spatial Resolution
  get DepthSpatialResolution(): number | undefined {
    return this.x00220035;
  }

  get x00220035(): number | undefined {
    const value = this.dwResponse['00220035']?.Value;
    return convert(value?.[0], 0x00220035, 'number');
  }

  getDepthSpatialResolution(): number {
    const value = this.x00220035;
    if (value === undefined) {
      throw new Error('DepthSpatialResolution is undefined');
    }
    return value;
  }

  // Maximum Depth Distortion
  get MaximumDepthDistortion(): number | undefined {
    return this.x00220036;
  }

  get x00220036(): number | undefined {
    const value = this.dwResponse['00220036']?.Value;
    return convert(value?.[0], 0x00220036, 'number');
  }

  getMaximumDepthDistortion(): number {
    const value = this.x00220036;
    if (value === undefined) {
      throw new Error('MaximumDepthDistortion is undefined');
    }
    return value;
  }

  // Along-scan Spatial Resolution
  get AlongScanSpatialResolution(): number | undefined {
    return this.x00220037;
  }

  get x00220037(): number | undefined {
    const value = this.dwResponse['00220037']?.Value;
    return convert(value?.[0], 0x00220037, 'number');
  }

  getAlongScanSpatialResolution(): number {
    const value = this.x00220037;
    if (value === undefined) {
      throw new Error('AlongScanSpatialResolution is undefined');
    }
    return value;
  }

  // Maximum Along-scan Distortion
  get MaximumAlongScanDistortion(): number | undefined {
    return this.x00220038;
  }

  get x00220038(): number | undefined {
    const value = this.dwResponse['00220038']?.Value;
    return convert(value?.[0], 0x00220038, 'number');
  }

  getMaximumAlongScanDistortion(): number {
    const value = this.x00220038;
    if (value === undefined) {
      throw new Error('MaximumAlongScanDistortion is undefined');
    }
    return value;
  }

  // Ophthalmic Image Orientation
  get OphthalmicImageOrientation(): string | undefined {
    return this.x00220039;
  }

  get x00220039(): string | undefined {
    const value = this.dwResponse['00220039']?.Value;
    return convert(value?.[0], 0x00220039, 'string');
  }

  getOphthalmicImageOrientation(): string {
    const value = this.x00220039;
    if (value === undefined) {
      throw new Error('OphthalmicImageOrientation is undefined');
    }
    return value;
  }

  // Depth of Transverse Image
  get DepthOfTransverseImage(): number | undefined {
    return this.x00220041;
  }

  get x00220041(): number | undefined {
    const value = this.dwResponse['00220041']?.Value;
    return convert(value?.[0], 0x00220041, 'number');
  }

  getDepthOfTransverseImage(): number {
    const value = this.x00220041;
    if (value === undefined) {
      throw new Error('DepthOfTransverseImage is undefined');
    }
    return value;
  }

  // Mydriatic Agent Concentration Units Sequence
  get MydriaticAgentConcentrationUnitsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00220042;
  }

  get x00220042(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00220042']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMydriaticAgentConcentrationUnitsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00220042;
    if (value === undefined) {
      throw new Error('MydriaticAgentConcentrationUnitsSequence is undefined');
    }
    return value;
  }

  // Across-scan Spatial Resolution
  get AcrossScanSpatialResolution(): number | undefined {
    return this.x00220048;
  }

  get x00220048(): number | undefined {
    const value = this.dwResponse['00220048']?.Value;
    return convert(value?.[0], 0x00220048, 'number');
  }

  getAcrossScanSpatialResolution(): number {
    const value = this.x00220048;
    if (value === undefined) {
      throw new Error('AcrossScanSpatialResolution is undefined');
    }
    return value;
  }

  // Maximum Across-scan Distortion
  get MaximumAcrossScanDistortion(): number | undefined {
    return this.x00220049;
  }

  get x00220049(): number | undefined {
    const value = this.dwResponse['00220049']?.Value;
    return convert(value?.[0], 0x00220049, 'number');
  }

  getMaximumAcrossScanDistortion(): number {
    const value = this.x00220049;
    if (value === undefined) {
      throw new Error('MaximumAcrossScanDistortion is undefined');
    }
    return value;
  }

  // Mydriatic Agent Concentration
  get MydriaticAgentConcentration(): number | undefined {
    return this.x0022004e;
  }

  get x0022004e(): number | undefined {
    const value = this.dwResponse['0022004E']?.Value;
    return convert(value?.[0], 0x0022004e, 'number');
  }

  getMydriaticAgentConcentration(): number {
    const value = this.x0022004e;
    if (value === undefined) {
      throw new Error('MydriaticAgentConcentration is undefined');
    }
    return value;
  }

  // Illumination Wave Length
  get IlluminationWaveLength(): number | undefined {
    return this.x00220055;
  }

  get x00220055(): number | undefined {
    const value = this.dwResponse['00220055']?.Value;
    return convert(value?.[0], 0x00220055, 'number');
  }

  getIlluminationWaveLength(): number {
    const value = this.x00220055;
    if (value === undefined) {
      throw new Error('IlluminationWaveLength is undefined');
    }
    return value;
  }

  // Illumination Power
  get IlluminationPower(): number | undefined {
    return this.x00220056;
  }

  get x00220056(): number | undefined {
    const value = this.dwResponse['00220056']?.Value;
    return convert(value?.[0], 0x00220056, 'number');
  }

  getIlluminationPower(): number {
    const value = this.x00220056;
    if (value === undefined) {
      throw new Error('IlluminationPower is undefined');
    }
    return value;
  }

  // Illumination Bandwidth
  get IlluminationBandwidth(): number | undefined {
    return this.x00220057;
  }

  get x00220057(): number | undefined {
    const value = this.dwResponse['00220057']?.Value;
    return convert(value?.[0], 0x00220057, 'number');
  }

  getIlluminationBandwidth(): number {
    const value = this.x00220057;
    if (value === undefined) {
      throw new Error('IlluminationBandwidth is undefined');
    }
    return value;
  }

  // Mydriatic Agent Sequence
  get MydriaticAgentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00220058;
  }

  get x00220058(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00220058']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMydriaticAgentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00220058;
    if (value === undefined) {
      throw new Error('MydriaticAgentSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Measurements Right Eye Sequence
  get OphthalmicAxialMeasurementsRightEyeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221007;
  }

  get x00221007(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221007']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicAxialMeasurementsRightEyeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221007;
    if (value === undefined) {
      throw new Error('OphthalmicAxialMeasurementsRightEyeSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Measurements Left Eye Sequence
  get OphthalmicAxialMeasurementsLeftEyeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221008;
  }

  get x00221008(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221008']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicAxialMeasurementsLeftEyeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221008;
    if (value === undefined) {
      throw new Error('OphthalmicAxialMeasurementsLeftEyeSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Measurements Device Type
  get OphthalmicAxialMeasurementsDeviceType(): string | undefined {
    return this.x00221009;
  }

  get x00221009(): string | undefined {
    const value = this.dwResponse['00221009']?.Value;
    return convert(value?.[0], 0x00221009, 'string');
  }

  getOphthalmicAxialMeasurementsDeviceType(): string {
    const value = this.x00221009;
    if (value === undefined) {
      throw new Error('OphthalmicAxialMeasurementsDeviceType is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Length Measurements Type
  get OphthalmicAxialLengthMeasurementsType(): string | undefined {
    return this.x00221010;
  }

  get x00221010(): string | undefined {
    const value = this.dwResponse['00221010']?.Value;
    return convert(value?.[0], 0x00221010, 'string');
  }

  getOphthalmicAxialLengthMeasurementsType(): string {
    const value = this.x00221010;
    if (value === undefined) {
      throw new Error('OphthalmicAxialLengthMeasurementsType is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Length Sequence
  get OphthalmicAxialLengthSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221012;
  }

  get x00221012(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221012']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicAxialLengthSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221012;
    if (value === undefined) {
      throw new Error('OphthalmicAxialLengthSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Length
  get OphthalmicAxialLength(): number | undefined {
    return this.x00221019;
  }

  get x00221019(): number | undefined {
    const value = this.dwResponse['00221019']?.Value;
    return convert(value?.[0], 0x00221019, 'number');
  }

  getOphthalmicAxialLength(): number {
    const value = this.x00221019;
    if (value === undefined) {
      throw new Error('OphthalmicAxialLength is undefined');
    }
    return value;
  }

  // Lens Status Code Sequence
  get LensStatusCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221024;
  }

  get x00221024(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221024']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getLensStatusCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221024;
    if (value === undefined) {
      throw new Error('LensStatusCodeSequence is undefined');
    }
    return value;
  }

  // Vitreous Status Code Sequence
  get VitreousStatusCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221025;
  }

  get x00221025(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221025']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVitreousStatusCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221025;
    if (value === undefined) {
      throw new Error('VitreousStatusCodeSequence is undefined');
    }
    return value;
  }

  // IOL Formula Code Sequence
  get IOLFormulaCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221028;
  }

  get x00221028(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221028']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIOLFormulaCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221028;
    if (value === undefined) {
      throw new Error('IOLFormulaCodeSequence is undefined');
    }
    return value;
  }

  // IOL Formula Detail
  get IOLFormulaDetail(): string | undefined {
    return this.x00221029;
  }

  get x00221029(): string | undefined {
    const value = this.dwResponse['00221029']?.Value;
    return convert(value?.[0], 0x00221029, 'string');
  }

  getIOLFormulaDetail(): string {
    const value = this.x00221029;
    if (value === undefined) {
      throw new Error('IOLFormulaDetail is undefined');
    }
    return value;
  }

  // Keratometer Index
  get KeratometerIndex(): number | undefined {
    return this.x00221033;
  }

  get x00221033(): number | undefined {
    const value = this.dwResponse['00221033']?.Value;
    return convert(value?.[0], 0x00221033, 'number');
  }

  getKeratometerIndex(): number {
    const value = this.x00221033;
    if (value === undefined) {
      throw new Error('KeratometerIndex is undefined');
    }
    return value;
  }

  // Source of Ophthalmic Axial Length Code Sequence
  get SourceOfOphthalmicAxialLengthCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221035;
  }

  get x00221035(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221035']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSourceOfOphthalmicAxialLengthCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221035;
    if (value === undefined) {
      throw new Error('SourceOfOphthalmicAxialLengthCodeSequence is undefined');
    }
    return value;
  }

  // Target Refraction
  get TargetRefraction(): number | undefined {
    return this.x00221037;
  }

  get x00221037(): number | undefined {
    const value = this.dwResponse['00221037']?.Value;
    return convert(value?.[0], 0x00221037, 'number');
  }

  getTargetRefraction(): number {
    const value = this.x00221037;
    if (value === undefined) {
      throw new Error('TargetRefraction is undefined');
    }
    return value;
  }

  // Refractive Procedure Occurred
  get RefractiveProcedureOccurred(): string | undefined {
    return this.x00221039;
  }

  get x00221039(): string | undefined {
    const value = this.dwResponse['00221039']?.Value;
    return convert(value?.[0], 0x00221039, 'string');
  }

  getRefractiveProcedureOccurred(): string {
    const value = this.x00221039;
    if (value === undefined) {
      throw new Error('RefractiveProcedureOccurred is undefined');
    }
    return value;
  }

  // Refractive Surgery Type Code Sequence
  get RefractiveSurgeryTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221040;
  }

  get x00221040(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221040']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRefractiveSurgeryTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221040;
    if (value === undefined) {
      throw new Error('RefractiveSurgeryTypeCodeSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Ultrasound Method Code Sequence
  get OphthalmicUltrasoundMethodCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221044;
  }

  get x00221044(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221044']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicUltrasoundMethodCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221044;
    if (value === undefined) {
      throw new Error('OphthalmicUltrasoundMethodCodeSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Length Measurements Sequence
  get OphthalmicAxialLengthMeasurementsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221050;
  }

  get x00221050(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221050']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicAxialLengthMeasurementsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221050;
    if (value === undefined) {
      throw new Error('OphthalmicAxialLengthMeasurementsSequence is undefined');
    }
    return value;
  }

  // IOL Power
  get IOLPower(): number | undefined {
    return this.x00221053;
  }

  get x00221053(): number | undefined {
    const value = this.dwResponse['00221053']?.Value;
    return convert(value?.[0], 0x00221053, 'number');
  }

  getIOLPower(): number {
    const value = this.x00221053;
    if (value === undefined) {
      throw new Error('IOLPower is undefined');
    }
    return value;
  }

  // Predicted Refractive Error
  get PredictedRefractiveError(): number | undefined {
    return this.x00221054;
  }

  get x00221054(): number | undefined {
    const value = this.dwResponse['00221054']?.Value;
    return convert(value?.[0], 0x00221054, 'number');
  }

  getPredictedRefractiveError(): number {
    const value = this.x00221054;
    if (value === undefined) {
      throw new Error('PredictedRefractiveError is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Length Velocity
  get OphthalmicAxialLengthVelocity(): number | undefined {
    return this.x00221059;
  }

  get x00221059(): number | undefined {
    const value = this.dwResponse['00221059']?.Value;
    return convert(value?.[0], 0x00221059, 'number');
  }

  getOphthalmicAxialLengthVelocity(): number {
    const value = this.x00221059;
    if (value === undefined) {
      throw new Error('OphthalmicAxialLengthVelocity is undefined');
    }
    return value;
  }

  // Lens Status Description
  get LensStatusDescription(): string | undefined {
    return this.x00221065;
  }

  get x00221065(): string | undefined {
    const value = this.dwResponse['00221065']?.Value;
    return convert(value?.[0], 0x00221065, 'string');
  }

  getLensStatusDescription(): string {
    const value = this.x00221065;
    if (value === undefined) {
      throw new Error('LensStatusDescription is undefined');
    }
    return value;
  }

  // Vitreous Status Description
  get VitreousStatusDescription(): string | undefined {
    return this.x00221066;
  }

  get x00221066(): string | undefined {
    const value = this.dwResponse['00221066']?.Value;
    return convert(value?.[0], 0x00221066, 'string');
  }

  getVitreousStatusDescription(): string {
    const value = this.x00221066;
    if (value === undefined) {
      throw new Error('VitreousStatusDescription is undefined');
    }
    return value;
  }

  // IOL Power Sequence
  get IOLPowerSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221090;
  }

  get x00221090(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221090']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIOLPowerSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221090;
    if (value === undefined) {
      throw new Error('IOLPowerSequence is undefined');
    }
    return value;
  }

  // Lens Constant Sequence
  get LensConstantSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221092;
  }

  get x00221092(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221092']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getLensConstantSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221092;
    if (value === undefined) {
      throw new Error('LensConstantSequence is undefined');
    }
    return value;
  }

  // IOL Manufacturer
  get IOLManufacturer(): string | undefined {
    return this.x00221093;
  }

  get x00221093(): string | undefined {
    const value = this.dwResponse['00221093']?.Value;
    return convert(value?.[0], 0x00221093, 'string');
  }

  getIOLManufacturer(): string {
    const value = this.x00221093;
    if (value === undefined) {
      throw new Error('IOLManufacturer is undefined');
    }
    return value;
  }

  // Lens Constant Description
  get LensConstantDescription(): string | undefined {
    return this.x00221094;
  }

  get x00221094(): string | undefined {
    const value = this.dwResponse['00221094']?.Value;
    return convert(value?.[0], 0x00221094, 'string');
  }

  getLensConstantDescription(): string {
    const value = this.x00221094;
    if (value === undefined) {
      throw new Error('LensConstantDescription is undefined');
    }
    return value;
  }

  // Implant Name
  get ImplantName(): string | undefined {
    return this.x00221095;
  }

  get x00221095(): string | undefined {
    const value = this.dwResponse['00221095']?.Value;
    return convert(value?.[0], 0x00221095, 'string');
  }

  getImplantName(): string {
    const value = this.x00221095;
    if (value === undefined) {
      throw new Error('ImplantName is undefined');
    }
    return value;
  }

  // Keratometry Measurement Type Code Sequence
  get KeratometryMeasurementTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221096;
  }

  get x00221096(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221096']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getKeratometryMeasurementTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221096;
    if (value === undefined) {
      throw new Error('KeratometryMeasurementTypeCodeSequence is undefined');
    }
    return value;
  }

  // Implant Part Number
  get ImplantPartNumber(): string | undefined {
    return this.x00221097;
  }

  get x00221097(): string | undefined {
    const value = this.dwResponse['00221097']?.Value;
    return convert(value?.[0], 0x00221097, 'string');
  }

  getImplantPartNumber(): string {
    const value = this.x00221097;
    if (value === undefined) {
      throw new Error('ImplantPartNumber is undefined');
    }
    return value;
  }

  // Referenced Ophthalmic Axial Measurements Sequence
  get ReferencedOphthalmicAxialMeasurementsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221100;
  }

  get x00221100(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221100']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedOphthalmicAxialMeasurementsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221100;
    if (value === undefined) {
      throw new Error('ReferencedOphthalmicAxialMeasurementsSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Length Measurements Segment Name Code Sequence
  get OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221101;
  }

  get x00221101(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221101']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicAxialLengthMeasurementsSegmentNameCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221101;
    if (value === undefined) {
      throw new Error('OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence is undefined');
    }
    return value;
  }

  // Refractive Error Before Refractive Surgery Code Sequence
  get RefractiveErrorBeforeRefractiveSurgeryCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221103;
  }

  get x00221103(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221103']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRefractiveErrorBeforeRefractiveSurgeryCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221103;
    if (value === undefined) {
      throw new Error('RefractiveErrorBeforeRefractiveSurgeryCodeSequence is undefined');
    }
    return value;
  }

  // IOL Power For Exact Emmetropia
  get IOLPowerForExactEmmetropia(): number | undefined {
    return this.x00221121;
  }

  get x00221121(): number | undefined {
    const value = this.dwResponse['00221121']?.Value;
    return convert(value?.[0], 0x00221121, 'number');
  }

  getIOLPowerForExactEmmetropia(): number {
    const value = this.x00221121;
    if (value === undefined) {
      throw new Error('IOLPowerForExactEmmetropia is undefined');
    }
    return value;
  }

  // IOL Power For Exact Target Refraction
  get IOLPowerForExactTargetRefraction(): number | undefined {
    return this.x00221122;
  }

  get x00221122(): number | undefined {
    const value = this.dwResponse['00221122']?.Value;
    return convert(value?.[0], 0x00221122, 'number');
  }

  getIOLPowerForExactTargetRefraction(): number {
    const value = this.x00221122;
    if (value === undefined) {
      throw new Error('IOLPowerForExactTargetRefraction is undefined');
    }
    return value;
  }

  // Anterior Chamber Depth Definition Code Sequence
  get AnteriorChamberDepthDefinitionCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221125;
  }

  get x00221125(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221125']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAnteriorChamberDepthDefinitionCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221125;
    if (value === undefined) {
      throw new Error('AnteriorChamberDepthDefinitionCodeSequence is undefined');
    }
    return value;
  }

  // Lens Thickness Sequence
  get LensThicknessSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221127;
  }

  get x00221127(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221127']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getLensThicknessSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221127;
    if (value === undefined) {
      throw new Error('LensThicknessSequence is undefined');
    }
    return value;
  }

  // Anterior Chamber Depth Sequence
  get AnteriorChamberDepthSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221128;
  }

  get x00221128(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221128']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAnteriorChamberDepthSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221128;
    if (value === undefined) {
      throw new Error('AnteriorChamberDepthSequence is undefined');
    }
    return value;
  }

  // Lens Thickness
  get LensThickness(): number | undefined {
    return this.x00221130;
  }

  get x00221130(): number | undefined {
    const value = this.dwResponse['00221130']?.Value;
    return convert(value?.[0], 0x00221130, 'number');
  }

  getLensThickness(): number {
    const value = this.x00221130;
    if (value === undefined) {
      throw new Error('LensThickness is undefined');
    }
    return value;
  }

  // Anterior Chamber Depth
  get AnteriorChamberDepth(): number | undefined {
    return this.x00221131;
  }

  get x00221131(): number | undefined {
    const value = this.dwResponse['00221131']?.Value;
    return convert(value?.[0], 0x00221131, 'number');
  }

  getAnteriorChamberDepth(): number {
    const value = this.x00221131;
    if (value === undefined) {
      throw new Error('AnteriorChamberDepth is undefined');
    }
    return value;
  }

  // Source of Lens Thickness Data Code Sequence
  get SourceOfLensThicknessDataCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221132;
  }

  get x00221132(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221132']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSourceOfLensThicknessDataCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221132;
    if (value === undefined) {
      throw new Error('SourceOfLensThicknessDataCodeSequence is undefined');
    }
    return value;
  }

  // Source of Anterior Chamber Depth Data Code Sequence
  get SourceOfAnteriorChamberDepthDataCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221133;
  }

  get x00221133(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221133']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSourceOfAnteriorChamberDepthDataCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221133;
    if (value === undefined) {
      throw new Error('SourceOfAnteriorChamberDepthDataCodeSequence is undefined');
    }
    return value;
  }

  // Source of Refractive Measurements Sequence
  get SourceOfRefractiveMeasurementsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221134;
  }

  get x00221134(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221134']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSourceOfRefractiveMeasurementsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221134;
    if (value === undefined) {
      throw new Error('SourceOfRefractiveMeasurementsSequence is undefined');
    }
    return value;
  }

  // Source of Refractive Measurements Code Sequence
  get SourceOfRefractiveMeasurementsCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221135;
  }

  get x00221135(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221135']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSourceOfRefractiveMeasurementsCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221135;
    if (value === undefined) {
      throw new Error('SourceOfRefractiveMeasurementsCodeSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Length Measurement Modified
  get OphthalmicAxialLengthMeasurementModified(): string | undefined {
    return this.x00221140;
  }

  get x00221140(): string | undefined {
    const value = this.dwResponse['00221140']?.Value;
    return convert(value?.[0], 0x00221140, 'string');
  }

  getOphthalmicAxialLengthMeasurementModified(): string {
    const value = this.x00221140;
    if (value === undefined) {
      throw new Error('OphthalmicAxialLengthMeasurementModified is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Length Data Source Code Sequence
  get OphthalmicAxialLengthDataSourceCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221150;
  }

  get x00221150(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221150']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicAxialLengthDataSourceCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221150;
    if (value === undefined) {
      throw new Error('OphthalmicAxialLengthDataSourceCodeSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Length Acquisition Method Code Sequence
  get OphthalmicAxialLengthAcquisitionMethodCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221153;
  }

  get x00221153(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221153']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicAxialLengthAcquisitionMethodCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221153;
    if (value === undefined) {
      throw new Error('OphthalmicAxialLengthAcquisitionMethodCodeSequence is undefined');
    }
    return value;
  }

  // Signal to Noise Ratio
  get SignalToNoiseRatio(): number | undefined {
    return this.x00221155;
  }

  get x00221155(): number | undefined {
    const value = this.dwResponse['00221155']?.Value;
    return convert(value?.[0], 0x00221155, 'number');
  }

  getSignalToNoiseRatio(): number {
    const value = this.x00221155;
    if (value === undefined) {
      throw new Error('SignalToNoiseRatio is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Length Data Source Description
  get OphthalmicAxialLengthDataSourceDescription(): string | undefined {
    return this.x00221159;
  }

  get x00221159(): string | undefined {
    const value = this.dwResponse['00221159']?.Value;
    return convert(value?.[0], 0x00221159, 'string');
  }

  getOphthalmicAxialLengthDataSourceDescription(): string {
    const value = this.x00221159;
    if (value === undefined) {
      throw new Error('OphthalmicAxialLengthDataSourceDescription is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Length Measurements Total Length Sequence
  get OphthalmicAxialLengthMeasurementsTotalLengthSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221210;
  }

  get x00221210(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221210']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicAxialLengthMeasurementsTotalLengthSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221210;
    if (value === undefined) {
      throw new Error('OphthalmicAxialLengthMeasurementsTotalLengthSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Length Measurements Segmental Length Sequence
  get OphthalmicAxialLengthMeasurementsSegmentalLengthSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221211;
  }

  get x00221211(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221211']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicAxialLengthMeasurementsSegmentalLengthSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221211;
    if (value === undefined) {
      throw new Error('OphthalmicAxialLengthMeasurementsSegmentalLengthSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Length Measurements Length Summation Sequence
  get OphthalmicAxialLengthMeasurementsLengthSummationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221212;
  }

  get x00221212(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221212']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicAxialLengthMeasurementsLengthSummationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221212;
    if (value === undefined) {
      throw new Error('OphthalmicAxialLengthMeasurementsLengthSummationSequence is undefined');
    }
    return value;
  }

  // Ultrasound Ophthalmic Axial Length Measurements Sequence
  get UltrasoundOphthalmicAxialLengthMeasurementsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221220;
  }

  get x00221220(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221220']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getUltrasoundOphthalmicAxialLengthMeasurementsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221220;
    if (value === undefined) {
      throw new Error('UltrasoundOphthalmicAxialLengthMeasurementsSequence is undefined');
    }
    return value;
  }

  // Optical Ophthalmic Axial Length Measurements Sequence
  get OpticalOphthalmicAxialLengthMeasurementsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221225;
  }

  get x00221225(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221225']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOpticalOphthalmicAxialLengthMeasurementsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221225;
    if (value === undefined) {
      throw new Error('OpticalOphthalmicAxialLengthMeasurementsSequence is undefined');
    }
    return value;
  }

  // Ultrasound Selected Ophthalmic Axial Length Sequence
  get UltrasoundSelectedOphthalmicAxialLengthSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221230;
  }

  get x00221230(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221230']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getUltrasoundSelectedOphthalmicAxialLengthSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221230;
    if (value === undefined) {
      throw new Error('UltrasoundSelectedOphthalmicAxialLengthSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Length Selection Method Code Sequence
  get OphthalmicAxialLengthSelectionMethodCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221250;
  }

  get x00221250(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221250']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicAxialLengthSelectionMethodCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221250;
    if (value === undefined) {
      throw new Error('OphthalmicAxialLengthSelectionMethodCodeSequence is undefined');
    }
    return value;
  }

  // Optical Selected Ophthalmic Axial Length Sequence
  get OpticalSelectedOphthalmicAxialLengthSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221255;
  }

  get x00221255(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221255']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOpticalSelectedOphthalmicAxialLengthSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221255;
    if (value === undefined) {
      throw new Error('OpticalSelectedOphthalmicAxialLengthSequence is undefined');
    }
    return value;
  }

  // Selected Segmental Ophthalmic Axial Length Sequence
  get SelectedSegmentalOphthalmicAxialLengthSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221257;
  }

  get x00221257(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221257']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSelectedSegmentalOphthalmicAxialLengthSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221257;
    if (value === undefined) {
      throw new Error('SelectedSegmentalOphthalmicAxialLengthSequence is undefined');
    }
    return value;
  }

  // Selected Total Ophthalmic Axial Length Sequence
  get SelectedTotalOphthalmicAxialLengthSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221260;
  }

  get x00221260(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221260']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSelectedTotalOphthalmicAxialLengthSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221260;
    if (value === undefined) {
      throw new Error('SelectedTotalOphthalmicAxialLengthSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Length Quality Metric Sequence
  get OphthalmicAxialLengthQualityMetricSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221262;
  }

  get x00221262(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221262']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicAxialLengthQualityMetricSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221262;
    if (value === undefined) {
      throw new Error('OphthalmicAxialLengthQualityMetricSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Length Quality Metric Type Code Sequence
  get OphthalmicAxialLengthQualityMetricTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221265;
  }

  get x00221265(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221265']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicAxialLengthQualityMetricTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221265;
    if (value === undefined) {
      throw new Error('OphthalmicAxialLengthQualityMetricTypeCodeSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Axial Length Quality Metric Type Description
  get OphthalmicAxialLengthQualityMetricTypeDescription(): string | undefined {
    return this.x00221273;
  }

  get x00221273(): string | undefined {
    const value = this.dwResponse['00221273']?.Value;
    return convert(value?.[0], 0x00221273, 'string');
  }

  getOphthalmicAxialLengthQualityMetricTypeDescription(): string {
    const value = this.x00221273;
    if (value === undefined) {
      throw new Error('OphthalmicAxialLengthQualityMetricTypeDescription is undefined');
    }
    return value;
  }

  // Intraocular Lens Calculations Right Eye Sequence
  get IntraocularLensCalculationsRightEyeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221300;
  }

  get x00221300(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221300']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIntraocularLensCalculationsRightEyeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221300;
    if (value === undefined) {
      throw new Error('IntraocularLensCalculationsRightEyeSequence is undefined');
    }
    return value;
  }

  // Intraocular Lens Calculations Left Eye Sequence
  get IntraocularLensCalculationsLeftEyeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221310;
  }

  get x00221310(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221310']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIntraocularLensCalculationsLeftEyeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221310;
    if (value === undefined) {
      throw new Error('IntraocularLensCalculationsLeftEyeSequence is undefined');
    }
    return value;
  }

  // Referenced Ophthalmic Axial Length Measurement QC Image Sequence
  get ReferencedOphthalmicAxialLengthMeasurementQCImageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221330;
  }

  get x00221330(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221330']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedOphthalmicAxialLengthMeasurementQCImageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221330;
    if (value === undefined) {
      throw new Error('ReferencedOphthalmicAxialLengthMeasurementQCImageSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Mapping Device Type
  get OphthalmicMappingDeviceType(): string | undefined {
    return this.x00221415;
  }

  get x00221415(): string | undefined {
    const value = this.dwResponse['00221415']?.Value;
    return convert(value?.[0], 0x00221415, 'string');
  }

  getOphthalmicMappingDeviceType(): string {
    const value = this.x00221415;
    if (value === undefined) {
      throw new Error('OphthalmicMappingDeviceType is undefined');
    }
    return value;
  }

  // Acquisition Method Code Sequence
  get AcquisitionMethodCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221420;
  }

  get x00221420(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221420']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAcquisitionMethodCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221420;
    if (value === undefined) {
      throw new Error('AcquisitionMethodCodeSequence is undefined');
    }
    return value;
  }

  // Acquisition Method Algorithm Sequence
  get AcquisitionMethodAlgorithmSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221423;
  }

  get x00221423(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221423']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAcquisitionMethodAlgorithmSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221423;
    if (value === undefined) {
      throw new Error('AcquisitionMethodAlgorithmSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Thickness Map Type Code Sequence
  get OphthalmicThicknessMapTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221436;
  }

  get x00221436(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221436']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicThicknessMapTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221436;
    if (value === undefined) {
      throw new Error('OphthalmicThicknessMapTypeCodeSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Thickness Mapping Normals Sequence
  get OphthalmicThicknessMappingNormalsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221443;
  }

  get x00221443(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221443']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicThicknessMappingNormalsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221443;
    if (value === undefined) {
      throw new Error('OphthalmicThicknessMappingNormalsSequence is undefined');
    }
    return value;
  }

  // Retinal Thickness Definition Code Sequence
  get RetinalThicknessDefinitionCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221445;
  }

  get x00221445(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221445']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRetinalThicknessDefinitionCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221445;
    if (value === undefined) {
      throw new Error('RetinalThicknessDefinitionCodeSequence is undefined');
    }
    return value;
  }

  // Pixel Value Mapping to Coded Concept Sequence
  get PixelValueMappingToCodedConceptSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221450;
  }

  get x00221450(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221450']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPixelValueMappingToCodedConceptSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221450;
    if (value === undefined) {
      throw new Error('PixelValueMappingToCodedConceptSequence is undefined');
    }
    return value;
  }

  // Mapped Pixel Value
  get MappedPixelValue(): number | undefined {
    return this.x00221452;
  }

  get x00221452(): number | undefined {
    const value = this.dwResponse['00221452']?.Value;
    return convert(value?.[0], 0x00221452, 'number');
  }

  getMappedPixelValue(): number {
    const value = this.x00221452;
    if (value === undefined) {
      throw new Error('MappedPixelValue is undefined');
    }
    return value;
  }

  // Pixel Value Mapping Explanation
  get PixelValueMappingExplanation(): string | undefined {
    return this.x00221454;
  }

  get x00221454(): string | undefined {
    const value = this.dwResponse['00221454']?.Value;
    return convert(value?.[0], 0x00221454, 'string');
  }

  getPixelValueMappingExplanation(): string {
    const value = this.x00221454;
    if (value === undefined) {
      throw new Error('PixelValueMappingExplanation is undefined');
    }
    return value;
  }

  // Ophthalmic Thickness Map Quality Threshold Sequence
  get OphthalmicThicknessMapQualityThresholdSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221458;
  }

  get x00221458(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221458']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicThicknessMapQualityThresholdSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221458;
    if (value === undefined) {
      throw new Error('OphthalmicThicknessMapQualityThresholdSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Thickness Map Threshold Quality Rating
  get OphthalmicThicknessMapThresholdQualityRating(): number | undefined {
    return this.x00221460;
  }

  get x00221460(): number | undefined {
    const value = this.dwResponse['00221460']?.Value;
    return convert(value?.[0], 0x00221460, 'number');
  }

  getOphthalmicThicknessMapThresholdQualityRating(): number {
    const value = this.x00221460;
    if (value === undefined) {
      throw new Error('OphthalmicThicknessMapThresholdQualityRating is undefined');
    }
    return value;
  }

  // Anatomic Structure Reference Point
  get AnatomicStructureReferencePoint(): Array<number | undefined> | undefined {
    return this.x00221463;
  }

  get x00221463(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00221463']?.Value;
    return convert(value, 0x00221463, 'Array<number | undefined>');
  }

  getAnatomicStructureReferencePoint(): Array<number | undefined> {
    const value = this.x00221463;
    if (value === undefined) {
      throw new Error('AnatomicStructureReferencePoint is undefined');
    }
    return value;
  }

  // Registration to Localizer Sequence
  get RegistrationToLocalizerSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221465;
  }

  get x00221465(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221465']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRegistrationToLocalizerSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221465;
    if (value === undefined) {
      throw new Error('RegistrationToLocalizerSequence is undefined');
    }
    return value;
  }

  // Registered Localizer Units
  get RegisteredLocalizerUnits(): string | undefined {
    return this.x00221466;
  }

  get x00221466(): string | undefined {
    const value = this.dwResponse['00221466']?.Value;
    return convert(value?.[0], 0x00221466, 'string');
  }

  getRegisteredLocalizerUnits(): string {
    const value = this.x00221466;
    if (value === undefined) {
      throw new Error('RegisteredLocalizerUnits is undefined');
    }
    return value;
  }

  // Registered Localizer Top Left Hand Corner
  get RegisteredLocalizerTopLeftHandCorner(): Array<number | undefined> | undefined {
    return this.x00221467;
  }

  get x00221467(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00221467']?.Value;
    return convert(value, 0x00221467, 'Array<number | undefined>');
  }

  getRegisteredLocalizerTopLeftHandCorner(): Array<number | undefined> {
    const value = this.x00221467;
    if (value === undefined) {
      throw new Error('RegisteredLocalizerTopLeftHandCorner is undefined');
    }
    return value;
  }

  // Registered Localizer Bottom Right Hand Corner
  get RegisteredLocalizerBottomRightHandCorner(): Array<number | undefined> | undefined {
    return this.x00221468;
  }

  get x00221468(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00221468']?.Value;
    return convert(value, 0x00221468, 'Array<number | undefined>');
  }

  getRegisteredLocalizerBottomRightHandCorner(): Array<number | undefined> {
    const value = this.x00221468;
    if (value === undefined) {
      throw new Error('RegisteredLocalizerBottomRightHandCorner is undefined');
    }
    return value;
  }

  // Ophthalmic Thickness Map Quality Rating Sequence
  get OphthalmicThicknessMapQualityRatingSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221470;
  }

  get x00221470(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221470']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicThicknessMapQualityRatingSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221470;
    if (value === undefined) {
      throw new Error('OphthalmicThicknessMapQualityRatingSequence is undefined');
    }
    return value;
  }

  // Relevant OPT Attributes Sequence
  get RelevantOPTAttributesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00221472;
  }

  get x00221472(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00221472']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRelevantOPTAttributesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00221472;
    if (value === undefined) {
      throw new Error('RelevantOPTAttributesSequence is undefined');
    }
    return value;
  }

  // Visual Field Horizontal Extent
  get VisualFieldHorizontalExtent(): number | undefined {
    return this.x00240010;
  }

  get x00240010(): number | undefined {
    const value = this.dwResponse['00240010']?.Value;
    return convert(value?.[0], 0x00240010, 'number');
  }

  getVisualFieldHorizontalExtent(): number {
    const value = this.x00240010;
    if (value === undefined) {
      throw new Error('VisualFieldHorizontalExtent is undefined');
    }
    return value;
  }

  // Visual Field Vertical Extent
  get VisualFieldVerticalExtent(): number | undefined {
    return this.x00240011;
  }

  get x00240011(): number | undefined {
    const value = this.dwResponse['00240011']?.Value;
    return convert(value?.[0], 0x00240011, 'number');
  }

  getVisualFieldVerticalExtent(): number {
    const value = this.x00240011;
    if (value === undefined) {
      throw new Error('VisualFieldVerticalExtent is undefined');
    }
    return value;
  }

  // Visual Field Shape
  get VisualFieldShape(): string | undefined {
    return this.x00240012;
  }

  get x00240012(): string | undefined {
    const value = this.dwResponse['00240012']?.Value;
    return convert(value?.[0], 0x00240012, 'string');
  }

  getVisualFieldShape(): string {
    const value = this.x00240012;
    if (value === undefined) {
      throw new Error('VisualFieldShape is undefined');
    }
    return value;
  }

  // Screening Test Mode Code Sequence
  get ScreeningTestModeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240016;
  }

  get x00240016(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240016']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getScreeningTestModeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240016;
    if (value === undefined) {
      throw new Error('ScreeningTestModeCodeSequence is undefined');
    }
    return value;
  }

  // Maximum Stimulus Luminance
  get MaximumStimulusLuminance(): number | undefined {
    return this.x00240018;
  }

  get x00240018(): number | undefined {
    const value = this.dwResponse['00240018']?.Value;
    return convert(value?.[0], 0x00240018, 'number');
  }

  getMaximumStimulusLuminance(): number {
    const value = this.x00240018;
    if (value === undefined) {
      throw new Error('MaximumStimulusLuminance is undefined');
    }
    return value;
  }

  // Background Luminance
  get BackgroundLuminance(): number | undefined {
    return this.x00240020;
  }

  get x00240020(): number | undefined {
    const value = this.dwResponse['00240020']?.Value;
    return convert(value?.[0], 0x00240020, 'number');
  }

  getBackgroundLuminance(): number {
    const value = this.x00240020;
    if (value === undefined) {
      throw new Error('BackgroundLuminance is undefined');
    }
    return value;
  }

  // Stimulus Color Code Sequence
  get StimulusColorCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240021;
  }

  get x00240021(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240021']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getStimulusColorCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240021;
    if (value === undefined) {
      throw new Error('StimulusColorCodeSequence is undefined');
    }
    return value;
  }

  // Background Illumination Color Code Sequence
  get BackgroundIlluminationColorCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240024;
  }

  get x00240024(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240024']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBackgroundIlluminationColorCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240024;
    if (value === undefined) {
      throw new Error('BackgroundIlluminationColorCodeSequence is undefined');
    }
    return value;
  }

  // Stimulus Area
  get StimulusArea(): number | undefined {
    return this.x00240025;
  }

  get x00240025(): number | undefined {
    const value = this.dwResponse['00240025']?.Value;
    return convert(value?.[0], 0x00240025, 'number');
  }

  getStimulusArea(): number {
    const value = this.x00240025;
    if (value === undefined) {
      throw new Error('StimulusArea is undefined');
    }
    return value;
  }

  // Stimulus Presentation Time
  get StimulusPresentationTime(): number | undefined {
    return this.x00240028;
  }

  get x00240028(): number | undefined {
    const value = this.dwResponse['00240028']?.Value;
    return convert(value?.[0], 0x00240028, 'number');
  }

  getStimulusPresentationTime(): number {
    const value = this.x00240028;
    if (value === undefined) {
      throw new Error('StimulusPresentationTime is undefined');
    }
    return value;
  }

  // Fixation Sequence
  get FixationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240032;
  }

  get x00240032(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240032']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFixationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240032;
    if (value === undefined) {
      throw new Error('FixationSequence is undefined');
    }
    return value;
  }

  // Fixation Monitoring Code Sequence
  get FixationMonitoringCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240033;
  }

  get x00240033(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240033']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFixationMonitoringCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240033;
    if (value === undefined) {
      throw new Error('FixationMonitoringCodeSequence is undefined');
    }
    return value;
  }

  // Visual Field Catch Trial Sequence
  get VisualFieldCatchTrialSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240034;
  }

  get x00240034(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240034']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVisualFieldCatchTrialSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240034;
    if (value === undefined) {
      throw new Error('VisualFieldCatchTrialSequence is undefined');
    }
    return value;
  }

  // Fixation Checked Quantity
  get FixationCheckedQuantity(): number | undefined {
    return this.x00240035;
  }

  get x00240035(): number | undefined {
    const value = this.dwResponse['00240035']?.Value;
    return convert(value?.[0], 0x00240035, 'number');
  }

  getFixationCheckedQuantity(): number {
    const value = this.x00240035;
    if (value === undefined) {
      throw new Error('FixationCheckedQuantity is undefined');
    }
    return value;
  }

  // Patient Not Properly Fixated Quantity
  get PatientNotProperlyFixatedQuantity(): number | undefined {
    return this.x00240036;
  }

  get x00240036(): number | undefined {
    const value = this.dwResponse['00240036']?.Value;
    return convert(value?.[0], 0x00240036, 'number');
  }

  getPatientNotProperlyFixatedQuantity(): number {
    const value = this.x00240036;
    if (value === undefined) {
      throw new Error('PatientNotProperlyFixatedQuantity is undefined');
    }
    return value;
  }

  // Presented Visual Stimuli Data Flag
  get PresentedVisualStimuliDataFlag(): string | undefined {
    return this.x00240037;
  }

  get x00240037(): string | undefined {
    const value = this.dwResponse['00240037']?.Value;
    return convert(value?.[0], 0x00240037, 'string');
  }

  getPresentedVisualStimuliDataFlag(): string {
    const value = this.x00240037;
    if (value === undefined) {
      throw new Error('PresentedVisualStimuliDataFlag is undefined');
    }
    return value;
  }

  // Number of Visual Stimuli
  get NumberOfVisualStimuli(): number | undefined {
    return this.x00240038;
  }

  get x00240038(): number | undefined {
    const value = this.dwResponse['00240038']?.Value;
    return convert(value?.[0], 0x00240038, 'number');
  }

  getNumberOfVisualStimuli(): number {
    const value = this.x00240038;
    if (value === undefined) {
      throw new Error('NumberOfVisualStimuli is undefined');
    }
    return value;
  }

  // Excessive Fixation Losses Data Flag
  get ExcessiveFixationLossesDataFlag(): string | undefined {
    return this.x00240039;
  }

  get x00240039(): string | undefined {
    const value = this.dwResponse['00240039']?.Value;
    return convert(value?.[0], 0x00240039, 'string');
  }

  getExcessiveFixationLossesDataFlag(): string {
    const value = this.x00240039;
    if (value === undefined) {
      throw new Error('ExcessiveFixationLossesDataFlag is undefined');
    }
    return value;
  }

  // Excessive Fixation Losses
  get ExcessiveFixationLosses(): string | undefined {
    return this.x00240040;
  }

  get x00240040(): string | undefined {
    const value = this.dwResponse['00240040']?.Value;
    return convert(value?.[0], 0x00240040, 'string');
  }

  getExcessiveFixationLosses(): string {
    const value = this.x00240040;
    if (value === undefined) {
      throw new Error('ExcessiveFixationLosses is undefined');
    }
    return value;
  }

  // Stimuli Retesting Quantity
  get StimuliRetestingQuantity(): number | undefined {
    return this.x00240042;
  }

  get x00240042(): number | undefined {
    const value = this.dwResponse['00240042']?.Value;
    return convert(value?.[0], 0x00240042, 'number');
  }

  getStimuliRetestingQuantity(): number {
    const value = this.x00240042;
    if (value === undefined) {
      throw new Error('StimuliRetestingQuantity is undefined');
    }
    return value;
  }

  // False Negatives Estimate Flag
  get FalseNegativesEstimateFlag(): string | undefined {
    return this.x00240045;
  }

  get x00240045(): string | undefined {
    const value = this.dwResponse['00240045']?.Value;
    return convert(value?.[0], 0x00240045, 'string');
  }

  getFalseNegativesEstimateFlag(): string {
    const value = this.x00240045;
    if (value === undefined) {
      throw new Error('FalseNegativesEstimateFlag is undefined');
    }
    return value;
  }

  // False Negatives Estimate
  get FalseNegativesEstimate(): number | undefined {
    return this.x00240046;
  }

  get x00240046(): number | undefined {
    const value = this.dwResponse['00240046']?.Value;
    return convert(value?.[0], 0x00240046, 'number');
  }

  getFalseNegativesEstimate(): number {
    const value = this.x00240046;
    if (value === undefined) {
      throw new Error('FalseNegativesEstimate is undefined');
    }
    return value;
  }

  // Negative Catch Trials Quantity
  get NegativeCatchTrialsQuantity(): number | undefined {
    return this.x00240048;
  }

  get x00240048(): number | undefined {
    const value = this.dwResponse['00240048']?.Value;
    return convert(value?.[0], 0x00240048, 'number');
  }

  getNegativeCatchTrialsQuantity(): number {
    const value = this.x00240048;
    if (value === undefined) {
      throw new Error('NegativeCatchTrialsQuantity is undefined');
    }
    return value;
  }

  // False Negatives Quantity
  get FalseNegativesQuantity(): number | undefined {
    return this.x00240050;
  }

  get x00240050(): number | undefined {
    const value = this.dwResponse['00240050']?.Value;
    return convert(value?.[0], 0x00240050, 'number');
  }

  getFalseNegativesQuantity(): number {
    const value = this.x00240050;
    if (value === undefined) {
      throw new Error('FalseNegativesQuantity is undefined');
    }
    return value;
  }

  // Excessive False Negatives Data Flag
  get ExcessiveFalseNegativesDataFlag(): string | undefined {
    return this.x00240051;
  }

  get x00240051(): string | undefined {
    const value = this.dwResponse['00240051']?.Value;
    return convert(value?.[0], 0x00240051, 'string');
  }

  getExcessiveFalseNegativesDataFlag(): string {
    const value = this.x00240051;
    if (value === undefined) {
      throw new Error('ExcessiveFalseNegativesDataFlag is undefined');
    }
    return value;
  }

  // Excessive False Negatives
  get ExcessiveFalseNegatives(): string | undefined {
    return this.x00240052;
  }

  get x00240052(): string | undefined {
    const value = this.dwResponse['00240052']?.Value;
    return convert(value?.[0], 0x00240052, 'string');
  }

  getExcessiveFalseNegatives(): string {
    const value = this.x00240052;
    if (value === undefined) {
      throw new Error('ExcessiveFalseNegatives is undefined');
    }
    return value;
  }

  // False Positives Estimate Flag
  get FalsePositivesEstimateFlag(): string | undefined {
    return this.x00240053;
  }

  get x00240053(): string | undefined {
    const value = this.dwResponse['00240053']?.Value;
    return convert(value?.[0], 0x00240053, 'string');
  }

  getFalsePositivesEstimateFlag(): string {
    const value = this.x00240053;
    if (value === undefined) {
      throw new Error('FalsePositivesEstimateFlag is undefined');
    }
    return value;
  }

  // False Positives Estimate
  get FalsePositivesEstimate(): number | undefined {
    return this.x00240054;
  }

  get x00240054(): number | undefined {
    const value = this.dwResponse['00240054']?.Value;
    return convert(value?.[0], 0x00240054, 'number');
  }

  getFalsePositivesEstimate(): number {
    const value = this.x00240054;
    if (value === undefined) {
      throw new Error('FalsePositivesEstimate is undefined');
    }
    return value;
  }

  // Catch Trials Data Flag
  get CatchTrialsDataFlag(): string | undefined {
    return this.x00240055;
  }

  get x00240055(): string | undefined {
    const value = this.dwResponse['00240055']?.Value;
    return convert(value?.[0], 0x00240055, 'string');
  }

  getCatchTrialsDataFlag(): string {
    const value = this.x00240055;
    if (value === undefined) {
      throw new Error('CatchTrialsDataFlag is undefined');
    }
    return value;
  }

  // Positive Catch Trials Quantity
  get PositiveCatchTrialsQuantity(): number | undefined {
    return this.x00240056;
  }

  get x00240056(): number | undefined {
    const value = this.dwResponse['00240056']?.Value;
    return convert(value?.[0], 0x00240056, 'number');
  }

  getPositiveCatchTrialsQuantity(): number {
    const value = this.x00240056;
    if (value === undefined) {
      throw new Error('PositiveCatchTrialsQuantity is undefined');
    }
    return value;
  }

  // Test Point Normals Data Flag
  get TestPointNormalsDataFlag(): string | undefined {
    return this.x00240057;
  }

  get x00240057(): string | undefined {
    const value = this.dwResponse['00240057']?.Value;
    return convert(value?.[0], 0x00240057, 'string');
  }

  getTestPointNormalsDataFlag(): string {
    const value = this.x00240057;
    if (value === undefined) {
      throw new Error('TestPointNormalsDataFlag is undefined');
    }
    return value;
  }

  // Test Point Normals Sequence
  get TestPointNormalsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240058;
  }

  get x00240058(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240058']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTestPointNormalsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240058;
    if (value === undefined) {
      throw new Error('TestPointNormalsSequence is undefined');
    }
    return value;
  }

  // Global Deviation Probability Normals Flag
  get GlobalDeviationProbabilityNormalsFlag(): string | undefined {
    return this.x00240059;
  }

  get x00240059(): string | undefined {
    const value = this.dwResponse['00240059']?.Value;
    return convert(value?.[0], 0x00240059, 'string');
  }

  getGlobalDeviationProbabilityNormalsFlag(): string {
    const value = this.x00240059;
    if (value === undefined) {
      throw new Error('GlobalDeviationProbabilityNormalsFlag is undefined');
    }
    return value;
  }

  // False Positives Quantity
  get FalsePositivesQuantity(): number | undefined {
    return this.x00240060;
  }

  get x00240060(): number | undefined {
    const value = this.dwResponse['00240060']?.Value;
    return convert(value?.[0], 0x00240060, 'number');
  }

  getFalsePositivesQuantity(): number {
    const value = this.x00240060;
    if (value === undefined) {
      throw new Error('FalsePositivesQuantity is undefined');
    }
    return value;
  }

  // Excessive False Positives Data Flag
  get ExcessiveFalsePositivesDataFlag(): string | undefined {
    return this.x00240061;
  }

  get x00240061(): string | undefined {
    const value = this.dwResponse['00240061']?.Value;
    return convert(value?.[0], 0x00240061, 'string');
  }

  getExcessiveFalsePositivesDataFlag(): string {
    const value = this.x00240061;
    if (value === undefined) {
      throw new Error('ExcessiveFalsePositivesDataFlag is undefined');
    }
    return value;
  }

  // Excessive False Positives
  get ExcessiveFalsePositives(): string | undefined {
    return this.x00240062;
  }

  get x00240062(): string | undefined {
    const value = this.dwResponse['00240062']?.Value;
    return convert(value?.[0], 0x00240062, 'string');
  }

  getExcessiveFalsePositives(): string {
    const value = this.x00240062;
    if (value === undefined) {
      throw new Error('ExcessiveFalsePositives is undefined');
    }
    return value;
  }

  // Visual Field Test Normals Flag
  get VisualFieldTestNormalsFlag(): string | undefined {
    return this.x00240063;
  }

  get x00240063(): string | undefined {
    const value = this.dwResponse['00240063']?.Value;
    return convert(value?.[0], 0x00240063, 'string');
  }

  getVisualFieldTestNormalsFlag(): string {
    const value = this.x00240063;
    if (value === undefined) {
      throw new Error('VisualFieldTestNormalsFlag is undefined');
    }
    return value;
  }

  // Results Normals Sequence
  get ResultsNormalsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240064;
  }

  get x00240064(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240064']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getResultsNormalsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240064;
    if (value === undefined) {
      throw new Error('ResultsNormalsSequence is undefined');
    }
    return value;
  }

  // Age Corrected Sensitivity Deviation Algorithm Sequence
  get AgeCorrectedSensitivityDeviationAlgorithmSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240065;
  }

  get x00240065(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240065']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAgeCorrectedSensitivityDeviationAlgorithmSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240065;
    if (value === undefined) {
      throw new Error('AgeCorrectedSensitivityDeviationAlgorithmSequence is undefined');
    }
    return value;
  }

  // Global Deviation From Normal
  get GlobalDeviationFromNormal(): number | undefined {
    return this.x00240066;
  }

  get x00240066(): number | undefined {
    const value = this.dwResponse['00240066']?.Value;
    return convert(value?.[0], 0x00240066, 'number');
  }

  getGlobalDeviationFromNormal(): number {
    const value = this.x00240066;
    if (value === undefined) {
      throw new Error('GlobalDeviationFromNormal is undefined');
    }
    return value;
  }

  // Generalized Defect Sensitivity Deviation Algorithm Sequence
  get GeneralizedDefectSensitivityDeviationAlgorithmSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240067;
  }

  get x00240067(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240067']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getGeneralizedDefectSensitivityDeviationAlgorithmSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240067;
    if (value === undefined) {
      throw new Error('GeneralizedDefectSensitivityDeviationAlgorithmSequence is undefined');
    }
    return value;
  }

  // Localized Deviation From Normal
  get LocalizedDeviationFromNormal(): number | undefined {
    return this.x00240068;
  }

  get x00240068(): number | undefined {
    const value = this.dwResponse['00240068']?.Value;
    return convert(value?.[0], 0x00240068, 'number');
  }

  getLocalizedDeviationFromNormal(): number {
    const value = this.x00240068;
    if (value === undefined) {
      throw new Error('LocalizedDeviationFromNormal is undefined');
    }
    return value;
  }

  // Patient Reliability Indicator
  get PatientReliabilityIndicator(): string | undefined {
    return this.x00240069;
  }

  get x00240069(): string | undefined {
    const value = this.dwResponse['00240069']?.Value;
    return convert(value?.[0], 0x00240069, 'string');
  }

  getPatientReliabilityIndicator(): string {
    const value = this.x00240069;
    if (value === undefined) {
      throw new Error('PatientReliabilityIndicator is undefined');
    }
    return value;
  }

  // Visual Field Mean Sensitivity
  get VisualFieldMeanSensitivity(): number | undefined {
    return this.x00240070;
  }

  get x00240070(): number | undefined {
    const value = this.dwResponse['00240070']?.Value;
    return convert(value?.[0], 0x00240070, 'number');
  }

  getVisualFieldMeanSensitivity(): number {
    const value = this.x00240070;
    if (value === undefined) {
      throw new Error('VisualFieldMeanSensitivity is undefined');
    }
    return value;
  }

  // Global Deviation Probability
  get GlobalDeviationProbability(): number | undefined {
    return this.x00240071;
  }

  get x00240071(): number | undefined {
    const value = this.dwResponse['00240071']?.Value;
    return convert(value?.[0], 0x00240071, 'number');
  }

  getGlobalDeviationProbability(): number {
    const value = this.x00240071;
    if (value === undefined) {
      throw new Error('GlobalDeviationProbability is undefined');
    }
    return value;
  }

  // Local Deviation Probability Normals Flag
  get LocalDeviationProbabilityNormalsFlag(): string | undefined {
    return this.x00240072;
  }

  get x00240072(): string | undefined {
    const value = this.dwResponse['00240072']?.Value;
    return convert(value?.[0], 0x00240072, 'string');
  }

  getLocalDeviationProbabilityNormalsFlag(): string {
    const value = this.x00240072;
    if (value === undefined) {
      throw new Error('LocalDeviationProbabilityNormalsFlag is undefined');
    }
    return value;
  }

  // Localized Deviation Probability
  get LocalizedDeviationProbability(): number | undefined {
    return this.x00240073;
  }

  get x00240073(): number | undefined {
    const value = this.dwResponse['00240073']?.Value;
    return convert(value?.[0], 0x00240073, 'number');
  }

  getLocalizedDeviationProbability(): number {
    const value = this.x00240073;
    if (value === undefined) {
      throw new Error('LocalizedDeviationProbability is undefined');
    }
    return value;
  }

  // Short Term Fluctuation Calculated
  get ShortTermFluctuationCalculated(): string | undefined {
    return this.x00240074;
  }

  get x00240074(): string | undefined {
    const value = this.dwResponse['00240074']?.Value;
    return convert(value?.[0], 0x00240074, 'string');
  }

  getShortTermFluctuationCalculated(): string {
    const value = this.x00240074;
    if (value === undefined) {
      throw new Error('ShortTermFluctuationCalculated is undefined');
    }
    return value;
  }

  // Short Term Fluctuation
  get ShortTermFluctuation(): number | undefined {
    return this.x00240075;
  }

  get x00240075(): number | undefined {
    const value = this.dwResponse['00240075']?.Value;
    return convert(value?.[0], 0x00240075, 'number');
  }

  getShortTermFluctuation(): number {
    const value = this.x00240075;
    if (value === undefined) {
      throw new Error('ShortTermFluctuation is undefined');
    }
    return value;
  }

  // Short Term Fluctuation Probability Calculated
  get ShortTermFluctuationProbabilityCalculated(): string | undefined {
    return this.x00240076;
  }

  get x00240076(): string | undefined {
    const value = this.dwResponse['00240076']?.Value;
    return convert(value?.[0], 0x00240076, 'string');
  }

  getShortTermFluctuationProbabilityCalculated(): string {
    const value = this.x00240076;
    if (value === undefined) {
      throw new Error('ShortTermFluctuationProbabilityCalculated is undefined');
    }
    return value;
  }

  // Short Term Fluctuation Probability
  get ShortTermFluctuationProbability(): number | undefined {
    return this.x00240077;
  }

  get x00240077(): number | undefined {
    const value = this.dwResponse['00240077']?.Value;
    return convert(value?.[0], 0x00240077, 'number');
  }

  getShortTermFluctuationProbability(): number {
    const value = this.x00240077;
    if (value === undefined) {
      throw new Error('ShortTermFluctuationProbability is undefined');
    }
    return value;
  }

  // Corrected Localized Deviation From Normal Calculated
  get CorrectedLocalizedDeviationFromNormalCalculated(): string | undefined {
    return this.x00240078;
  }

  get x00240078(): string | undefined {
    const value = this.dwResponse['00240078']?.Value;
    return convert(value?.[0], 0x00240078, 'string');
  }

  getCorrectedLocalizedDeviationFromNormalCalculated(): string {
    const value = this.x00240078;
    if (value === undefined) {
      throw new Error('CorrectedLocalizedDeviationFromNormalCalculated is undefined');
    }
    return value;
  }

  // Corrected Localized Deviation From Normal
  get CorrectedLocalizedDeviationFromNormal(): number | undefined {
    return this.x00240079;
  }

  get x00240079(): number | undefined {
    const value = this.dwResponse['00240079']?.Value;
    return convert(value?.[0], 0x00240079, 'number');
  }

  getCorrectedLocalizedDeviationFromNormal(): number {
    const value = this.x00240079;
    if (value === undefined) {
      throw new Error('CorrectedLocalizedDeviationFromNormal is undefined');
    }
    return value;
  }

  // Corrected Localized Deviation From Normal Probability Calculated
  get CorrectedLocalizedDeviationFromNormalProbabilityCalculated(): string | undefined {
    return this.x00240080;
  }

  get x00240080(): string | undefined {
    const value = this.dwResponse['00240080']?.Value;
    return convert(value?.[0], 0x00240080, 'string');
  }

  getCorrectedLocalizedDeviationFromNormalProbabilityCalculated(): string {
    const value = this.x00240080;
    if (value === undefined) {
      throw new Error('CorrectedLocalizedDeviationFromNormalProbabilityCalculated is undefined');
    }
    return value;
  }

  // Corrected Localized Deviation From Normal Probability
  get CorrectedLocalizedDeviationFromNormalProbability(): number | undefined {
    return this.x00240081;
  }

  get x00240081(): number | undefined {
    const value = this.dwResponse['00240081']?.Value;
    return convert(value?.[0], 0x00240081, 'number');
  }

  getCorrectedLocalizedDeviationFromNormalProbability(): number {
    const value = this.x00240081;
    if (value === undefined) {
      throw new Error('CorrectedLocalizedDeviationFromNormalProbability is undefined');
    }
    return value;
  }

  // Global Deviation Probability Sequence
  get GlobalDeviationProbabilitySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240083;
  }

  get x00240083(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240083']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getGlobalDeviationProbabilitySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240083;
    if (value === undefined) {
      throw new Error('GlobalDeviationProbabilitySequence is undefined');
    }
    return value;
  }

  // Localized Deviation Probability Sequence
  get LocalizedDeviationProbabilitySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240085;
  }

  get x00240085(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240085']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getLocalizedDeviationProbabilitySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240085;
    if (value === undefined) {
      throw new Error('LocalizedDeviationProbabilitySequence is undefined');
    }
    return value;
  }

  // Foveal Sensitivity Measured
  get FovealSensitivityMeasured(): string | undefined {
    return this.x00240086;
  }

  get x00240086(): string | undefined {
    const value = this.dwResponse['00240086']?.Value;
    return convert(value?.[0], 0x00240086, 'string');
  }

  getFovealSensitivityMeasured(): string {
    const value = this.x00240086;
    if (value === undefined) {
      throw new Error('FovealSensitivityMeasured is undefined');
    }
    return value;
  }

  // Foveal Sensitivity
  get FovealSensitivity(): number | undefined {
    return this.x00240087;
  }

  get x00240087(): number | undefined {
    const value = this.dwResponse['00240087']?.Value;
    return convert(value?.[0], 0x00240087, 'number');
  }

  getFovealSensitivity(): number {
    const value = this.x00240087;
    if (value === undefined) {
      throw new Error('FovealSensitivity is undefined');
    }
    return value;
  }

  // Visual Field Test Duration
  get VisualFieldTestDuration(): number | undefined {
    return this.x00240088;
  }

  get x00240088(): number | undefined {
    const value = this.dwResponse['00240088']?.Value;
    return convert(value?.[0], 0x00240088, 'number');
  }

  getVisualFieldTestDuration(): number {
    const value = this.x00240088;
    if (value === undefined) {
      throw new Error('VisualFieldTestDuration is undefined');
    }
    return value;
  }

  // Visual Field Test Point Sequence
  get VisualFieldTestPointSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240089;
  }

  get x00240089(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240089']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVisualFieldTestPointSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240089;
    if (value === undefined) {
      throw new Error('VisualFieldTestPointSequence is undefined');
    }
    return value;
  }

  // Visual Field Test Point X-Coordinate
  get VisualFieldTestPointXCoordinate(): number | undefined {
    return this.x00240090;
  }

  get x00240090(): number | undefined {
    const value = this.dwResponse['00240090']?.Value;
    return convert(value?.[0], 0x00240090, 'number');
  }

  getVisualFieldTestPointXCoordinate(): number {
    const value = this.x00240090;
    if (value === undefined) {
      throw new Error('VisualFieldTestPointXCoordinate is undefined');
    }
    return value;
  }

  // Visual Field Test Point Y-Coordinate
  get VisualFieldTestPointYCoordinate(): number | undefined {
    return this.x00240091;
  }

  get x00240091(): number | undefined {
    const value = this.dwResponse['00240091']?.Value;
    return convert(value?.[0], 0x00240091, 'number');
  }

  getVisualFieldTestPointYCoordinate(): number {
    const value = this.x00240091;
    if (value === undefined) {
      throw new Error('VisualFieldTestPointYCoordinate is undefined');
    }
    return value;
  }

  // Age Corrected Sensitivity Deviation Value
  get AgeCorrectedSensitivityDeviationValue(): number | undefined {
    return this.x00240092;
  }

  get x00240092(): number | undefined {
    const value = this.dwResponse['00240092']?.Value;
    return convert(value?.[0], 0x00240092, 'number');
  }

  getAgeCorrectedSensitivityDeviationValue(): number {
    const value = this.x00240092;
    if (value === undefined) {
      throw new Error('AgeCorrectedSensitivityDeviationValue is undefined');
    }
    return value;
  }

  // Stimulus Results
  get StimulusResults(): string | undefined {
    return this.x00240093;
  }

  get x00240093(): string | undefined {
    const value = this.dwResponse['00240093']?.Value;
    return convert(value?.[0], 0x00240093, 'string');
  }

  getStimulusResults(): string {
    const value = this.x00240093;
    if (value === undefined) {
      throw new Error('StimulusResults is undefined');
    }
    return value;
  }

  // Sensitivity Value
  get SensitivityValue(): number | undefined {
    return this.x00240094;
  }

  get x00240094(): number | undefined {
    const value = this.dwResponse['00240094']?.Value;
    return convert(value?.[0], 0x00240094, 'number');
  }

  getSensitivityValue(): number {
    const value = this.x00240094;
    if (value === undefined) {
      throw new Error('SensitivityValue is undefined');
    }
    return value;
  }

  // Retest Stimulus Seen
  get RetestStimulusSeen(): string | undefined {
    return this.x00240095;
  }

  get x00240095(): string | undefined {
    const value = this.dwResponse['00240095']?.Value;
    return convert(value?.[0], 0x00240095, 'string');
  }

  getRetestStimulusSeen(): string {
    const value = this.x00240095;
    if (value === undefined) {
      throw new Error('RetestStimulusSeen is undefined');
    }
    return value;
  }

  // Retest Sensitivity Value
  get RetestSensitivityValue(): number | undefined {
    return this.x00240096;
  }

  get x00240096(): number | undefined {
    const value = this.dwResponse['00240096']?.Value;
    return convert(value?.[0], 0x00240096, 'number');
  }

  getRetestSensitivityValue(): number {
    const value = this.x00240096;
    if (value === undefined) {
      throw new Error('RetestSensitivityValue is undefined');
    }
    return value;
  }

  // Visual Field Test Point Normals Sequence
  get VisualFieldTestPointNormalsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240097;
  }

  get x00240097(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240097']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVisualFieldTestPointNormalsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240097;
    if (value === undefined) {
      throw new Error('VisualFieldTestPointNormalsSequence is undefined');
    }
    return value;
  }

  // Quantified Defect
  get QuantifiedDefect(): number | undefined {
    return this.x00240098;
  }

  get x00240098(): number | undefined {
    const value = this.dwResponse['00240098']?.Value;
    return convert(value?.[0], 0x00240098, 'number');
  }

  getQuantifiedDefect(): number {
    const value = this.x00240098;
    if (value === undefined) {
      throw new Error('QuantifiedDefect is undefined');
    }
    return value;
  }

  // Age Corrected Sensitivity Deviation Probability Value
  get AgeCorrectedSensitivityDeviationProbabilityValue(): number | undefined {
    return this.x00240100;
  }

  get x00240100(): number | undefined {
    const value = this.dwResponse['00240100']?.Value;
    return convert(value?.[0], 0x00240100, 'number');
  }

  getAgeCorrectedSensitivityDeviationProbabilityValue(): number {
    const value = this.x00240100;
    if (value === undefined) {
      throw new Error('AgeCorrectedSensitivityDeviationProbabilityValue is undefined');
    }
    return value;
  }

  // Generalized Defect Corrected Sensitivity Deviation Flag
  get GeneralizedDefectCorrectedSensitivityDeviationFlag(): string | undefined {
    return this.x00240102;
  }

  get x00240102(): string | undefined {
    const value = this.dwResponse['00240102']?.Value;
    return convert(value?.[0], 0x00240102, 'string');
  }

  getGeneralizedDefectCorrectedSensitivityDeviationFlag(): string {
    const value = this.x00240102;
    if (value === undefined) {
      throw new Error('GeneralizedDefectCorrectedSensitivityDeviationFlag is undefined');
    }
    return value;
  }

  // Generalized Defect Corrected Sensitivity Deviation Value
  get GeneralizedDefectCorrectedSensitivityDeviationValue(): number | undefined {
    return this.x00240103;
  }

  get x00240103(): number | undefined {
    const value = this.dwResponse['00240103']?.Value;
    return convert(value?.[0], 0x00240103, 'number');
  }

  getGeneralizedDefectCorrectedSensitivityDeviationValue(): number {
    const value = this.x00240103;
    if (value === undefined) {
      throw new Error('GeneralizedDefectCorrectedSensitivityDeviationValue is undefined');
    }
    return value;
  }

  // Generalized Defect Corrected Sensitivity Deviation Probability Value
  get GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue(): number | undefined {
    return this.x00240104;
  }

  get x00240104(): number | undefined {
    const value = this.dwResponse['00240104']?.Value;
    return convert(value?.[0], 0x00240104, 'number');
  }

  getGeneralizedDefectCorrectedSensitivityDeviationProbabilityValue(): number {
    const value = this.x00240104;
    if (value === undefined) {
      throw new Error('GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue is undefined');
    }
    return value;
  }

  // Minimum Sensitivity Value
  get MinimumSensitivityValue(): number | undefined {
    return this.x00240105;
  }

  get x00240105(): number | undefined {
    const value = this.dwResponse['00240105']?.Value;
    return convert(value?.[0], 0x00240105, 'number');
  }

  getMinimumSensitivityValue(): number {
    const value = this.x00240105;
    if (value === undefined) {
      throw new Error('MinimumSensitivityValue is undefined');
    }
    return value;
  }

  // Blind Spot Localized
  get BlindSpotLocalized(): string | undefined {
    return this.x00240106;
  }

  get x00240106(): string | undefined {
    const value = this.dwResponse['00240106']?.Value;
    return convert(value?.[0], 0x00240106, 'string');
  }

  getBlindSpotLocalized(): string {
    const value = this.x00240106;
    if (value === undefined) {
      throw new Error('BlindSpotLocalized is undefined');
    }
    return value;
  }

  // Blind Spot X-Coordinate
  get BlindSpotXCoordinate(): number | undefined {
    return this.x00240107;
  }

  get x00240107(): number | undefined {
    const value = this.dwResponse['00240107']?.Value;
    return convert(value?.[0], 0x00240107, 'number');
  }

  getBlindSpotXCoordinate(): number {
    const value = this.x00240107;
    if (value === undefined) {
      throw new Error('BlindSpotXCoordinate is undefined');
    }
    return value;
  }

  // Blind Spot Y-Coordinate
  get BlindSpotYCoordinate(): number | undefined {
    return this.x00240108;
  }

  get x00240108(): number | undefined {
    const value = this.dwResponse['00240108']?.Value;
    return convert(value?.[0], 0x00240108, 'number');
  }

  getBlindSpotYCoordinate(): number {
    const value = this.x00240108;
    if (value === undefined) {
      throw new Error('BlindSpotYCoordinate is undefined');
    }
    return value;
  }

  // Visual Acuity Measurement Sequence
  get VisualAcuityMeasurementSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240110;
  }

  get x00240110(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240110']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVisualAcuityMeasurementSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240110;
    if (value === undefined) {
      throw new Error('VisualAcuityMeasurementSequence is undefined');
    }
    return value;
  }

  // Refractive Parameters Used on Patient Sequence
  get RefractiveParametersUsedOnPatientSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240112;
  }

  get x00240112(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240112']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRefractiveParametersUsedOnPatientSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240112;
    if (value === undefined) {
      throw new Error('RefractiveParametersUsedOnPatientSequence is undefined');
    }
    return value;
  }

  // Measurement Laterality
  get MeasurementLaterality(): string | undefined {
    return this.x00240113;
  }

  get x00240113(): string | undefined {
    const value = this.dwResponse['00240113']?.Value;
    return convert(value?.[0], 0x00240113, 'string');
  }

  getMeasurementLaterality(): string {
    const value = this.x00240113;
    if (value === undefined) {
      throw new Error('MeasurementLaterality is undefined');
    }
    return value;
  }

  // Ophthalmic Patient Clinical Information Left Eye Sequence
  get OphthalmicPatientClinicalInformationLeftEyeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240114;
  }

  get x00240114(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240114']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicPatientClinicalInformationLeftEyeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240114;
    if (value === undefined) {
      throw new Error('OphthalmicPatientClinicalInformationLeftEyeSequence is undefined');
    }
    return value;
  }

  // Ophthalmic Patient Clinical Information Right Eye Sequence
  get OphthalmicPatientClinicalInformationRightEyeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240115;
  }

  get x00240115(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240115']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOphthalmicPatientClinicalInformationRightEyeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240115;
    if (value === undefined) {
      throw new Error('OphthalmicPatientClinicalInformationRightEyeSequence is undefined');
    }
    return value;
  }

  // Foveal Point Normative Data Flag
  get FovealPointNormativeDataFlag(): string | undefined {
    return this.x00240117;
  }

  get x00240117(): string | undefined {
    const value = this.dwResponse['00240117']?.Value;
    return convert(value?.[0], 0x00240117, 'string');
  }

  getFovealPointNormativeDataFlag(): string {
    const value = this.x00240117;
    if (value === undefined) {
      throw new Error('FovealPointNormativeDataFlag is undefined');
    }
    return value;
  }

  // Foveal Point Probability Value
  get FovealPointProbabilityValue(): number | undefined {
    return this.x00240118;
  }

  get x00240118(): number | undefined {
    const value = this.dwResponse['00240118']?.Value;
    return convert(value?.[0], 0x00240118, 'number');
  }

  getFovealPointProbabilityValue(): number {
    const value = this.x00240118;
    if (value === undefined) {
      throw new Error('FovealPointProbabilityValue is undefined');
    }
    return value;
  }

  // Screening Baseline Measured
  get ScreeningBaselineMeasured(): string | undefined {
    return this.x00240120;
  }

  get x00240120(): string | undefined {
    const value = this.dwResponse['00240120']?.Value;
    return convert(value?.[0], 0x00240120, 'string');
  }

  getScreeningBaselineMeasured(): string {
    const value = this.x00240120;
    if (value === undefined) {
      throw new Error('ScreeningBaselineMeasured is undefined');
    }
    return value;
  }

  // Screening Baseline Measured Sequence
  get ScreeningBaselineMeasuredSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240122;
  }

  get x00240122(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240122']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getScreeningBaselineMeasuredSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240122;
    if (value === undefined) {
      throw new Error('ScreeningBaselineMeasuredSequence is undefined');
    }
    return value;
  }

  // Screening Baseline Type
  get ScreeningBaselineType(): string | undefined {
    return this.x00240124;
  }

  get x00240124(): string | undefined {
    const value = this.dwResponse['00240124']?.Value;
    return convert(value?.[0], 0x00240124, 'string');
  }

  getScreeningBaselineType(): string {
    const value = this.x00240124;
    if (value === undefined) {
      throw new Error('ScreeningBaselineType is undefined');
    }
    return value;
  }

  // Screening Baseline Value
  get ScreeningBaselineValue(): number | undefined {
    return this.x00240126;
  }

  get x00240126(): number | undefined {
    const value = this.dwResponse['00240126']?.Value;
    return convert(value?.[0], 0x00240126, 'number');
  }

  getScreeningBaselineValue(): number {
    const value = this.x00240126;
    if (value === undefined) {
      throw new Error('ScreeningBaselineValue is undefined');
    }
    return value;
  }

  // Algorithm Source
  get AlgorithmSource(): string | undefined {
    return this.x00240202;
  }

  get x00240202(): string | undefined {
    const value = this.dwResponse['00240202']?.Value;
    return convert(value?.[0], 0x00240202, 'string');
  }

  getAlgorithmSource(): string {
    const value = this.x00240202;
    if (value === undefined) {
      throw new Error('AlgorithmSource is undefined');
    }
    return value;
  }

  // Data Set Name
  get DataSetName(): string | undefined {
    return this.x00240306;
  }

  get x00240306(): string | undefined {
    const value = this.dwResponse['00240306']?.Value;
    return convert(value?.[0], 0x00240306, 'string');
  }

  getDataSetName(): string {
    const value = this.x00240306;
    if (value === undefined) {
      throw new Error('DataSetName is undefined');
    }
    return value;
  }

  // Data Set Version
  get DataSetVersion(): string | undefined {
    return this.x00240307;
  }

  get x00240307(): string | undefined {
    const value = this.dwResponse['00240307']?.Value;
    return convert(value?.[0], 0x00240307, 'string');
  }

  getDataSetVersion(): string {
    const value = this.x00240307;
    if (value === undefined) {
      throw new Error('DataSetVersion is undefined');
    }
    return value;
  }

  // Data Set Source
  get DataSetSource(): string | undefined {
    return this.x00240308;
  }

  get x00240308(): string | undefined {
    const value = this.dwResponse['00240308']?.Value;
    return convert(value?.[0], 0x00240308, 'string');
  }

  getDataSetSource(): string {
    const value = this.x00240308;
    if (value === undefined) {
      throw new Error('DataSetSource is undefined');
    }
    return value;
  }

  // Data Set Description
  get DataSetDescription(): string | undefined {
    return this.x00240309;
  }

  get x00240309(): string | undefined {
    const value = this.dwResponse['00240309']?.Value;
    return convert(value?.[0], 0x00240309, 'string');
  }

  getDataSetDescription(): string {
    const value = this.x00240309;
    if (value === undefined) {
      throw new Error('DataSetDescription is undefined');
    }
    return value;
  }

  // Visual Field Test Reliability Global Index Sequence
  get VisualFieldTestReliabilityGlobalIndexSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240317;
  }

  get x00240317(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240317']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVisualFieldTestReliabilityGlobalIndexSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240317;
    if (value === undefined) {
      throw new Error('VisualFieldTestReliabilityGlobalIndexSequence is undefined');
    }
    return value;
  }

  // Visual Field Global Results Index Sequence
  get VisualFieldGlobalResultsIndexSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240320;
  }

  get x00240320(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240320']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVisualFieldGlobalResultsIndexSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240320;
    if (value === undefined) {
      throw new Error('VisualFieldGlobalResultsIndexSequence is undefined');
    }
    return value;
  }

  // Data Observation Sequence
  get DataObservationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240325;
  }

  get x00240325(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240325']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDataObservationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240325;
    if (value === undefined) {
      throw new Error('DataObservationSequence is undefined');
    }
    return value;
  }

  // Index Normals Flag
  get IndexNormalsFlag(): string | undefined {
    return this.x00240338;
  }

  get x00240338(): string | undefined {
    const value = this.dwResponse['00240338']?.Value;
    return convert(value?.[0], 0x00240338, 'string');
  }

  getIndexNormalsFlag(): string {
    const value = this.x00240338;
    if (value === undefined) {
      throw new Error('IndexNormalsFlag is undefined');
    }
    return value;
  }

  // Index Probability
  get IndexProbability(): number | undefined {
    return this.x00240341;
  }

  get x00240341(): number | undefined {
    const value = this.dwResponse['00240341']?.Value;
    return convert(value?.[0], 0x00240341, 'number');
  }

  getIndexProbability(): number {
    const value = this.x00240341;
    if (value === undefined) {
      throw new Error('IndexProbability is undefined');
    }
    return value;
  }

  // Index Probability Sequence
  get IndexProbabilitySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00240344;
  }

  get x00240344(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00240344']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIndexProbabilitySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00240344;
    if (value === undefined) {
      throw new Error('IndexProbabilitySequence is undefined');
    }
    return value;
  }

  // Samples per Pixel
  get SamplesPerPixel(): number | undefined {
    return this.x00280002;
  }

  get x00280002(): number | undefined {
    const value = this.dwResponse['00280002']?.Value;
    return convert(value?.[0], 0x00280002, 'number');
  }

  getSamplesPerPixel(): number {
    const value = this.x00280002;
    if (value === undefined) {
      throw new Error('SamplesPerPixel is undefined');
    }
    return value;
  }

  // Samples per Pixel Used
  get SamplesPerPixelUsed(): number | undefined {
    return this.x00280003;
  }

  get x00280003(): number | undefined {
    const value = this.dwResponse['00280003']?.Value;
    return convert(value?.[0], 0x00280003, 'number');
  }

  getSamplesPerPixelUsed(): number {
    const value = this.x00280003;
    if (value === undefined) {
      throw new Error('SamplesPerPixelUsed is undefined');
    }
    return value;
  }

  // Photometric Interpretation
  get PhotometricInterpretation(): string | undefined {
    return this.x00280004;
  }

  get x00280004(): string | undefined {
    const value = this.dwResponse['00280004']?.Value;
    return convert(value?.[0], 0x00280004, 'string');
  }

  getPhotometricInterpretation(): string {
    const value = this.x00280004;
    if (value === undefined) {
      throw new Error('PhotometricInterpretation is undefined');
    }
    return value;
  }

  // Image Dimensions
  get ImageDimensions(): number | undefined {
    return this.x00280005;
  }

  get x00280005(): number | undefined {
    const value = this.dwResponse['00280005']?.Value;
    return convert(value?.[0], 0x00280005, 'number');
  }

  getImageDimensions(): number {
    const value = this.x00280005;
    if (value === undefined) {
      throw new Error('ImageDimensions is undefined');
    }
    return value;
  }

  // Planar Configuration
  get PlanarConfiguration(): number | undefined {
    return this.x00280006;
  }

  get x00280006(): number | undefined {
    const value = this.dwResponse['00280006']?.Value;
    return convert(value?.[0], 0x00280006, 'number');
  }

  getPlanarConfiguration(): number {
    const value = this.x00280006;
    if (value === undefined) {
      throw new Error('PlanarConfiguration is undefined');
    }
    return value;
  }

  // Number of Frames
  get NumberOfFrames(): number | undefined {
    return this.x00280008;
  }

  get x00280008(): number | undefined {
    const value = this.dwResponse['00280008']?.Value;
    return convert(value?.[0], 0x00280008, 'number');
  }

  getNumberOfFrames(): number {
    const value = this.x00280008;
    if (value === undefined) {
      throw new Error('NumberOfFrames is undefined');
    }
    return value;
  }

  // Frame Increment Pointer
  get FrameIncrementPointer(): Array<Uint16Array | undefined> | undefined {
    return this.x00280009;
  }

  get x00280009(): Array<Uint16Array | undefined> | undefined {
    const value = this.dwResponse['00280009']?.Value;
    return convert(value, 0x00280009, 'Array<Uint16Array | undefined>');
  }

  getFrameIncrementPointer(): Array<Uint16Array | undefined> {
    const value = this.x00280009;
    if (value === undefined) {
      throw new Error('FrameIncrementPointer is undefined');
    }
    return value;
  }

  // Frame Dimension Pointer
  get FrameDimensionPointer(): Array<Uint16Array | undefined> | undefined {
    return this.x0028000a;
  }

  get x0028000a(): Array<Uint16Array | undefined> | undefined {
    const value = this.dwResponse['0028000A']?.Value;
    return convert(value, 0x0028000a, 'Array<Uint16Array | undefined>');
  }

  getFrameDimensionPointer(): Array<Uint16Array | undefined> {
    const value = this.x0028000a;
    if (value === undefined) {
      throw new Error('FrameDimensionPointer is undefined');
    }
    return value;
  }

  // Rows
  get Rows(): number | undefined {
    return this.x00280010;
  }

  get x00280010(): number | undefined {
    const value = this.dwResponse['00280010']?.Value;
    return convert(value?.[0], 0x00280010, 'number');
  }

  getRows(): number {
    const value = this.x00280010;
    if (value === undefined) {
      throw new Error('Rows is undefined');
    }
    return value;
  }

  // Columns
  get Columns(): number | undefined {
    return this.x00280011;
  }

  get x00280011(): number | undefined {
    const value = this.dwResponse['00280011']?.Value;
    return convert(value?.[0], 0x00280011, 'number');
  }

  getColumns(): number {
    const value = this.x00280011;
    if (value === undefined) {
      throw new Error('Columns is undefined');
    }
    return value;
  }

  // Planes
  get Planes(): number | undefined {
    return this.x00280012;
  }

  get x00280012(): number | undefined {
    const value = this.dwResponse['00280012']?.Value;
    return convert(value?.[0], 0x00280012, 'number');
  }

  getPlanes(): number {
    const value = this.x00280012;
    if (value === undefined) {
      throw new Error('Planes is undefined');
    }
    return value;
  }

  // Ultrasound Color Data Present
  get UltrasoundColorDataPresent(): number | undefined {
    return this.x00280014;
  }

  get x00280014(): number | undefined {
    const value = this.dwResponse['00280014']?.Value;
    return convert(value?.[0], 0x00280014, 'number');
  }

  getUltrasoundColorDataPresent(): number {
    const value = this.x00280014;
    if (value === undefined) {
      throw new Error('UltrasoundColorDataPresent is undefined');
    }
    return value;
  }

  // Pixel Spacing
  get PixelSpacing(): Array<number | undefined> | undefined {
    return this.x00280030;
  }

  get x00280030(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00280030']?.Value;
    return convert(value, 0x00280030, 'Array<number | undefined>');
  }

  getPixelSpacing(): Array<number | undefined> {
    const value = this.x00280030;
    if (value === undefined) {
      throw new Error('PixelSpacing is undefined');
    }
    return value;
  }

  // Zoom Factor
  get ZoomFactor(): Array<number | undefined> | undefined {
    return this.x00280031;
  }

  get x00280031(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00280031']?.Value;
    return convert(value, 0x00280031, 'Array<number | undefined>');
  }

  getZoomFactor(): Array<number | undefined> {
    const value = this.x00280031;
    if (value === undefined) {
      throw new Error('ZoomFactor is undefined');
    }
    return value;
  }

  // Zoom Center
  get ZoomCenter(): Array<number | undefined> | undefined {
    return this.x00280032;
  }

  get x00280032(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00280032']?.Value;
    return convert(value, 0x00280032, 'Array<number | undefined>');
  }

  getZoomCenter(): Array<number | undefined> {
    const value = this.x00280032;
    if (value === undefined) {
      throw new Error('ZoomCenter is undefined');
    }
    return value;
  }

  // Pixel Aspect Ratio
  get PixelAspectRatio(): Array<number | undefined> | undefined {
    return this.x00280034;
  }

  get x00280034(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00280034']?.Value;
    return convert(value, 0x00280034, 'Array<number | undefined>');
  }

  getPixelAspectRatio(): Array<number | undefined> {
    const value = this.x00280034;
    if (value === undefined) {
      throw new Error('PixelAspectRatio is undefined');
    }
    return value;
  }

  // Image Format
  get ImageFormat(): string | undefined {
    return this.x00280040;
  }

  get x00280040(): string | undefined {
    const value = this.dwResponse['00280040']?.Value;
    return convert(value?.[0], 0x00280040, 'string');
  }

  getImageFormat(): string {
    const value = this.x00280040;
    if (value === undefined) {
      throw new Error('ImageFormat is undefined');
    }
    return value;
  }

  // Manipulated Image
  get ManipulatedImage(): Array<string | undefined> | undefined {
    return this.x00280050;
  }

  get x00280050(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00280050']?.Value;
    return convert(value, 0x00280050, 'Array<string | undefined>');
  }

  getManipulatedImage(): Array<string | undefined> {
    const value = this.x00280050;
    if (value === undefined) {
      throw new Error('ManipulatedImage is undefined');
    }
    return value;
  }

  // Corrected Image
  get CorrectedImage(): Array<string | undefined> | undefined {
    return this.x00280051;
  }

  get x00280051(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00280051']?.Value;
    return convert(value, 0x00280051, 'Array<string | undefined>');
  }

  getCorrectedImage(): Array<string | undefined> {
    const value = this.x00280051;
    if (value === undefined) {
      throw new Error('CorrectedImage is undefined');
    }
    return value;
  }

  // Compression Recognition Code
  get CompressionRecognitionCode(): string | undefined {
    return this.x0028005f;
  }

  get x0028005f(): string | undefined {
    const value = this.dwResponse['0028005F']?.Value;
    return convert(value?.[0], 0x0028005f, 'string');
  }

  getCompressionRecognitionCode(): string {
    const value = this.x0028005f;
    if (value === undefined) {
      throw new Error('CompressionRecognitionCode is undefined');
    }
    return value;
  }

  // Compression Code
  get CompressionCode(): string | undefined {
    return this.x00280060;
  }

  get x00280060(): string | undefined {
    const value = this.dwResponse['00280060']?.Value;
    return convert(value?.[0], 0x00280060, 'string');
  }

  getCompressionCode(): string {
    const value = this.x00280060;
    if (value === undefined) {
      throw new Error('CompressionCode is undefined');
    }
    return value;
  }

  // Compression Originator
  get CompressionOriginator(): string | undefined {
    return this.x00280061;
  }

  get x00280061(): string | undefined {
    const value = this.dwResponse['00280061']?.Value;
    return convert(value?.[0], 0x00280061, 'string');
  }

  getCompressionOriginator(): string {
    const value = this.x00280061;
    if (value === undefined) {
      throw new Error('CompressionOriginator is undefined');
    }
    return value;
  }

  // Compression Label
  get CompressionLabel(): string | undefined {
    return this.x00280062;
  }

  get x00280062(): string | undefined {
    const value = this.dwResponse['00280062']?.Value;
    return convert(value?.[0], 0x00280062, 'string');
  }

  getCompressionLabel(): string {
    const value = this.x00280062;
    if (value === undefined) {
      throw new Error('CompressionLabel is undefined');
    }
    return value;
  }

  // Compression Description
  get CompressionDescription(): string | undefined {
    return this.x00280063;
  }

  get x00280063(): string | undefined {
    const value = this.dwResponse['00280063']?.Value;
    return convert(value?.[0], 0x00280063, 'string');
  }

  getCompressionDescription(): string {
    const value = this.x00280063;
    if (value === undefined) {
      throw new Error('CompressionDescription is undefined');
    }
    return value;
  }

  // Compression Sequence
  get CompressionSequence(): Array<string | undefined> | undefined {
    return this.x00280065;
  }

  get x00280065(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00280065']?.Value;
    return convert(value, 0x00280065, 'Array<string | undefined>');
  }

  getCompressionSequence(): Array<string | undefined> {
    const value = this.x00280065;
    if (value === undefined) {
      throw new Error('CompressionSequence is undefined');
    }
    return value;
  }

  // Compression Step Pointers
  get CompressionStepPointers(): Array<Uint16Array | undefined> | undefined {
    return this.x00280066;
  }

  get x00280066(): Array<Uint16Array | undefined> | undefined {
    const value = this.dwResponse['00280066']?.Value;
    return convert(value, 0x00280066, 'Array<Uint16Array | undefined>');
  }

  getCompressionStepPointers(): Array<Uint16Array | undefined> {
    const value = this.x00280066;
    if (value === undefined) {
      throw new Error('CompressionStepPointers is undefined');
    }
    return value;
  }

  // Repeat Interval
  get RepeatInterval(): number | undefined {
    return this.x00280068;
  }

  get x00280068(): number | undefined {
    const value = this.dwResponse['00280068']?.Value;
    return convert(value?.[0], 0x00280068, 'number');
  }

  getRepeatInterval(): number {
    const value = this.x00280068;
    if (value === undefined) {
      throw new Error('RepeatInterval is undefined');
    }
    return value;
  }

  // Bits Grouped
  get BitsGrouped(): number | undefined {
    return this.x00280069;
  }

  get x00280069(): number | undefined {
    const value = this.dwResponse['00280069']?.Value;
    return convert(value?.[0], 0x00280069, 'number');
  }

  getBitsGrouped(): number {
    const value = this.x00280069;
    if (value === undefined) {
      throw new Error('BitsGrouped is undefined');
    }
    return value;
  }

  // Perimeter Table
  get PerimeterTable(): Array<number | undefined> | undefined {
    return this.x00280070;
  }

  get x00280070(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00280070']?.Value;
    return convert(value, 0x00280070, 'Array<number | undefined>');
  }

  getPerimeterTable(): Array<number | undefined> {
    const value = this.x00280070;
    if (value === undefined) {
      throw new Error('PerimeterTable is undefined');
    }
    return value;
  }

  // Perimeter Value
  get PerimeterValue(): number | undefined {
    return this.x00280071;
  }

  get x00280071(): number | undefined {
    const value = this.dwResponse['00280071']?.Value;
    return convert(value?.[0], 0x00280071, 'number');
  }

  getPerimeterValue(): number {
    const value = this.x00280071;
    if (value === undefined) {
      throw new Error('PerimeterValue is undefined');
    }
    return value;
  }

  // Predictor Rows
  get PredictorRows(): number | undefined {
    return this.x00280080;
  }

  get x00280080(): number | undefined {
    const value = this.dwResponse['00280080']?.Value;
    return convert(value?.[0], 0x00280080, 'number');
  }

  getPredictorRows(): number {
    const value = this.x00280080;
    if (value === undefined) {
      throw new Error('PredictorRows is undefined');
    }
    return value;
  }

  // Predictor Columns
  get PredictorColumns(): number | undefined {
    return this.x00280081;
  }

  get x00280081(): number | undefined {
    const value = this.dwResponse['00280081']?.Value;
    return convert(value?.[0], 0x00280081, 'number');
  }

  getPredictorColumns(): number {
    const value = this.x00280081;
    if (value === undefined) {
      throw new Error('PredictorColumns is undefined');
    }
    return value;
  }

  // Predictor Constants
  get PredictorConstants(): Array<number | undefined> | undefined {
    return this.x00280082;
  }

  get x00280082(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00280082']?.Value;
    return convert(value, 0x00280082, 'Array<number | undefined>');
  }

  getPredictorConstants(): Array<number | undefined> {
    const value = this.x00280082;
    if (value === undefined) {
      throw new Error('PredictorConstants is undefined');
    }
    return value;
  }

  // Blocked Pixels
  get BlockedPixels(): string | undefined {
    return this.x00280090;
  }

  get x00280090(): string | undefined {
    const value = this.dwResponse['00280090']?.Value;
    return convert(value?.[0], 0x00280090, 'string');
  }

  getBlockedPixels(): string {
    const value = this.x00280090;
    if (value === undefined) {
      throw new Error('BlockedPixels is undefined');
    }
    return value;
  }

  // Block Rows
  get BlockRows(): number | undefined {
    return this.x00280091;
  }

  get x00280091(): number | undefined {
    const value = this.dwResponse['00280091']?.Value;
    return convert(value?.[0], 0x00280091, 'number');
  }

  getBlockRows(): number {
    const value = this.x00280091;
    if (value === undefined) {
      throw new Error('BlockRows is undefined');
    }
    return value;
  }

  // Block Columns
  get BlockColumns(): number | undefined {
    return this.x00280092;
  }

  get x00280092(): number | undefined {
    const value = this.dwResponse['00280092']?.Value;
    return convert(value?.[0], 0x00280092, 'number');
  }

  getBlockColumns(): number {
    const value = this.x00280092;
    if (value === undefined) {
      throw new Error('BlockColumns is undefined');
    }
    return value;
  }

  // Row Overlap
  get RowOverlap(): number | undefined {
    return this.x00280093;
  }

  get x00280093(): number | undefined {
    const value = this.dwResponse['00280093']?.Value;
    return convert(value?.[0], 0x00280093, 'number');
  }

  getRowOverlap(): number {
    const value = this.x00280093;
    if (value === undefined) {
      throw new Error('RowOverlap is undefined');
    }
    return value;
  }

  // Column Overlap
  get ColumnOverlap(): number | undefined {
    return this.x00280094;
  }

  get x00280094(): number | undefined {
    const value = this.dwResponse['00280094']?.Value;
    return convert(value?.[0], 0x00280094, 'number');
  }

  getColumnOverlap(): number {
    const value = this.x00280094;
    if (value === undefined) {
      throw new Error('ColumnOverlap is undefined');
    }
    return value;
  }

  // Bits Allocated
  get BitsAllocated(): number | undefined {
    return this.x00280100;
  }

  get x00280100(): number | undefined {
    const value = this.dwResponse['00280100']?.Value;
    return convert(value?.[0], 0x00280100, 'number');
  }

  getBitsAllocated(): number {
    const value = this.x00280100;
    if (value === undefined) {
      throw new Error('BitsAllocated is undefined');
    }
    return value;
  }

  // Bits Stored
  get BitsStored(): number | undefined {
    return this.x00280101;
  }

  get x00280101(): number | undefined {
    const value = this.dwResponse['00280101']?.Value;
    return convert(value?.[0], 0x00280101, 'number');
  }

  getBitsStored(): number {
    const value = this.x00280101;
    if (value === undefined) {
      throw new Error('BitsStored is undefined');
    }
    return value;
  }

  // High Bit
  get HighBit(): number | undefined {
    return this.x00280102;
  }

  get x00280102(): number | undefined {
    const value = this.dwResponse['00280102']?.Value;
    return convert(value?.[0], 0x00280102, 'number');
  }

  getHighBit(): number {
    const value = this.x00280102;
    if (value === undefined) {
      throw new Error('HighBit is undefined');
    }
    return value;
  }

  // Pixel Representation
  get PixelRepresentation(): number | undefined {
    return this.x00280103;
  }

  get x00280103(): number | undefined {
    const value = this.dwResponse['00280103']?.Value;
    return convert(value?.[0], 0x00280103, 'number');
  }

  getPixelRepresentation(): number {
    const value = this.x00280103;
    if (value === undefined) {
      throw new Error('PixelRepresentation is undefined');
    }
    return value;
  }

  // Smallest Valid Pixel Value
  get SmallestValidPixelValue(): number | undefined {
    return this.x00280104;
  }

  get x00280104(): number | undefined {
    const value = this.dwResponse['00280104']?.Value;
    return convert(value?.[0], 0x00280104, 'number');
  }

  getSmallestValidPixelValue(): number {
    const value = this.x00280104;
    if (value === undefined) {
      throw new Error('SmallestValidPixelValue is undefined');
    }
    return value;
  }

  // Largest Valid Pixel Value
  get LargestValidPixelValue(): number | undefined {
    return this.x00280105;
  }

  get x00280105(): number | undefined {
    const value = this.dwResponse['00280105']?.Value;
    return convert(value?.[0], 0x00280105, 'number');
  }

  getLargestValidPixelValue(): number {
    const value = this.x00280105;
    if (value === undefined) {
      throw new Error('LargestValidPixelValue is undefined');
    }
    return value;
  }

  // Smallest Image Pixel Value
  get SmallestImagePixelValue(): number | undefined {
    return this.x00280106;
  }

  get x00280106(): number | undefined {
    const value = this.dwResponse['00280106']?.Value;
    return convert(value?.[0], 0x00280106, 'number');
  }

  getSmallestImagePixelValue(): number {
    const value = this.x00280106;
    if (value === undefined) {
      throw new Error('SmallestImagePixelValue is undefined');
    }
    return value;
  }

  // Largest Image Pixel Value
  get LargestImagePixelValue(): number | undefined {
    return this.x00280107;
  }

  get x00280107(): number | undefined {
    const value = this.dwResponse['00280107']?.Value;
    return convert(value?.[0], 0x00280107, 'number');
  }

  getLargestImagePixelValue(): number {
    const value = this.x00280107;
    if (value === undefined) {
      throw new Error('LargestImagePixelValue is undefined');
    }
    return value;
  }

  // Smallest Pixel Value in Series
  get SmallestPixelValueInSeries(): number | undefined {
    return this.x00280108;
  }

  get x00280108(): number | undefined {
    const value = this.dwResponse['00280108']?.Value;
    return convert(value?.[0], 0x00280108, 'number');
  }

  getSmallestPixelValueInSeries(): number {
    const value = this.x00280108;
    if (value === undefined) {
      throw new Error('SmallestPixelValueInSeries is undefined');
    }
    return value;
  }

  // Largest Pixel Value in Series
  get LargestPixelValueInSeries(): number | undefined {
    return this.x00280109;
  }

  get x00280109(): number | undefined {
    const value = this.dwResponse['00280109']?.Value;
    return convert(value?.[0], 0x00280109, 'number');
  }

  getLargestPixelValueInSeries(): number {
    const value = this.x00280109;
    if (value === undefined) {
      throw new Error('LargestPixelValueInSeries is undefined');
    }
    return value;
  }

  // Smallest Image Pixel Value in Plane
  get SmallestImagePixelValueInPlane(): number | undefined {
    return this.x00280110;
  }

  get x00280110(): number | undefined {
    const value = this.dwResponse['00280110']?.Value;
    return convert(value?.[0], 0x00280110, 'number');
  }

  getSmallestImagePixelValueInPlane(): number {
    const value = this.x00280110;
    if (value === undefined) {
      throw new Error('SmallestImagePixelValueInPlane is undefined');
    }
    return value;
  }

  // Largest Image Pixel Value in Plane
  get LargestImagePixelValueInPlane(): number | undefined {
    return this.x00280111;
  }

  get x00280111(): number | undefined {
    const value = this.dwResponse['00280111']?.Value;
    return convert(value?.[0], 0x00280111, 'number');
  }

  getLargestImagePixelValueInPlane(): number {
    const value = this.x00280111;
    if (value === undefined) {
      throw new Error('LargestImagePixelValueInPlane is undefined');
    }
    return value;
  }

  // Pixel Padding Value
  get PixelPaddingValue(): number | undefined {
    return this.x00280120;
  }

  get x00280120(): number | undefined {
    const value = this.dwResponse['00280120']?.Value;
    return convert(value?.[0], 0x00280120, 'number');
  }

  getPixelPaddingValue(): number {
    const value = this.x00280120;
    if (value === undefined) {
      throw new Error('PixelPaddingValue is undefined');
    }
    return value;
  }

  // Pixel Padding Range Limit
  get PixelPaddingRangeLimit(): number | undefined {
    return this.x00280121;
  }

  get x00280121(): number | undefined {
    const value = this.dwResponse['00280121']?.Value;
    return convert(value?.[0], 0x00280121, 'number');
  }

  getPixelPaddingRangeLimit(): number {
    const value = this.x00280121;
    if (value === undefined) {
      throw new Error('PixelPaddingRangeLimit is undefined');
    }
    return value;
  }

  // Image Location
  get ImageLocation(): number | undefined {
    return this.x00280200;
  }

  get x00280200(): number | undefined {
    const value = this.dwResponse['00280200']?.Value;
    return convert(value?.[0], 0x00280200, 'number');
  }

  getImageLocation(): number {
    const value = this.x00280200;
    if (value === undefined) {
      throw new Error('ImageLocation is undefined');
    }
    return value;
  }

  // Quality Control Image
  get QualityControlImage(): string | undefined {
    return this.x00280300;
  }

  get x00280300(): string | undefined {
    const value = this.dwResponse['00280300']?.Value;
    return convert(value?.[0], 0x00280300, 'string');
  }

  getQualityControlImage(): string {
    const value = this.x00280300;
    if (value === undefined) {
      throw new Error('QualityControlImage is undefined');
    }
    return value;
  }

  // Burned In Annotation
  get BurnedInAnnotation(): string | undefined {
    return this.x00280301;
  }

  get x00280301(): string | undefined {
    const value = this.dwResponse['00280301']?.Value;
    return convert(value?.[0], 0x00280301, 'string');
  }

  getBurnedInAnnotation(): string {
    const value = this.x00280301;
    if (value === undefined) {
      throw new Error('BurnedInAnnotation is undefined');
    }
    return value;
  }

  // Recognizable Visual Features
  get RecognizableVisualFeatures(): string | undefined {
    return this.x00280302;
  }

  get x00280302(): string | undefined {
    const value = this.dwResponse['00280302']?.Value;
    return convert(value?.[0], 0x00280302, 'string');
  }

  getRecognizableVisualFeatures(): string {
    const value = this.x00280302;
    if (value === undefined) {
      throw new Error('RecognizableVisualFeatures is undefined');
    }
    return value;
  }

  // Longitudinal Temporal Information Modified
  get LongitudinalTemporalInformationModified(): string | undefined {
    return this.x00280303;
  }

  get x00280303(): string | undefined {
    const value = this.dwResponse['00280303']?.Value;
    return convert(value?.[0], 0x00280303, 'string');
  }

  getLongitudinalTemporalInformationModified(): string {
    const value = this.x00280303;
    if (value === undefined) {
      throw new Error('LongitudinalTemporalInformationModified is undefined');
    }
    return value;
  }

  // Referenced Color Palette Instance UID
  get ReferencedColorPaletteInstanceUID(): string | undefined {
    return this.x00280304;
  }

  get x00280304(): string | undefined {
    const value = this.dwResponse['00280304']?.Value;
    return convert(value?.[0], 0x00280304, 'string');
  }

  getReferencedColorPaletteInstanceUID(): string {
    const value = this.x00280304;
    if (value === undefined) {
      throw new Error('ReferencedColorPaletteInstanceUID is undefined');
    }
    return value;
  }

  // Transform Label
  get TransformLabel(): string | undefined {
    return this.x00280400;
  }

  get x00280400(): string | undefined {
    const value = this.dwResponse['00280400']?.Value;
    return convert(value?.[0], 0x00280400, 'string');
  }

  getTransformLabel(): string {
    const value = this.x00280400;
    if (value === undefined) {
      throw new Error('TransformLabel is undefined');
    }
    return value;
  }

  // Transform Version Number
  get TransformVersionNumber(): string | undefined {
    return this.x00280401;
  }

  get x00280401(): string | undefined {
    const value = this.dwResponse['00280401']?.Value;
    return convert(value?.[0], 0x00280401, 'string');
  }

  getTransformVersionNumber(): string {
    const value = this.x00280401;
    if (value === undefined) {
      throw new Error('TransformVersionNumber is undefined');
    }
    return value;
  }

  // Number of Transform Steps
  get NumberOfTransformSteps(): number | undefined {
    return this.x00280402;
  }

  get x00280402(): number | undefined {
    const value = this.dwResponse['00280402']?.Value;
    return convert(value?.[0], 0x00280402, 'number');
  }

  getNumberOfTransformSteps(): number {
    const value = this.x00280402;
    if (value === undefined) {
      throw new Error('NumberOfTransformSteps is undefined');
    }
    return value;
  }

  // Sequence of Compressed Data
  get SequenceOfCompressedData(): Array<string | undefined> | undefined {
    return this.x00280403;
  }

  get x00280403(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00280403']?.Value;
    return convert(value, 0x00280403, 'Array<string | undefined>');
  }

  getSequenceOfCompressedData(): Array<string | undefined> {
    const value = this.x00280403;
    if (value === undefined) {
      throw new Error('SequenceOfCompressedData is undefined');
    }
    return value;
  }

  // Details of Coefficients
  get DetailsOfCoefficients(): Array<Uint16Array | undefined> | undefined {
    return this.x00280404;
  }

  get x00280404(): Array<Uint16Array | undefined> | undefined {
    const value = this.dwResponse['00280404']?.Value;
    return convert(value, 0x00280404, 'Array<Uint16Array | undefined>');
  }

  getDetailsOfCoefficients(): Array<Uint16Array | undefined> {
    const value = this.x00280404;
    if (value === undefined) {
      throw new Error('DetailsOfCoefficients is undefined');
    }
    return value;
  }

  // Rows For Nth Order Coefficients
  get RowsForNthOrderCoefficients(): number | undefined {
    return this.x002804x0;
  }

  get x002804x0(): number | undefined {
    const value = this.dwResponse['002804X0']?.Value;
    throw new Error('Unsupported field RowsForNthOrderCoefficients (002804x0)');
  }

  getRowsForNthOrderCoefficients(): number {
    const value = this.x002804x0;
    if (value === undefined) {
      throw new Error('RowsForNthOrderCoefficients is undefined');
    }
    return value;
  }

  // Columns For Nth Order Coefficients
  get ColumnsForNthOrderCoefficients(): number | undefined {
    return this.x002804x1;
  }

  get x002804x1(): number | undefined {
    const value = this.dwResponse['002804X1']?.Value;
    throw new Error('Unsupported field ColumnsForNthOrderCoefficients (002804x1)');
  }

  getColumnsForNthOrderCoefficients(): number {
    const value = this.x002804x1;
    if (value === undefined) {
      throw new Error('ColumnsForNthOrderCoefficients is undefined');
    }
    return value;
  }

  // Coefficient Coding
  get CoefficientCoding(): Array<string | undefined> | undefined {
    return this.x002804x2;
  }

  get x002804x2(): Array<string | undefined> | undefined {
    const value = this.dwResponse['002804X2']?.Value;
    throw new Error('Unsupported field CoefficientCoding (002804x2)');
  }

  getCoefficientCoding(): Array<string | undefined> {
    const value = this.x002804x2;
    if (value === undefined) {
      throw new Error('CoefficientCoding is undefined');
    }
    return value;
  }

  // Coefficient Coding Pointers
  get CoefficientCodingPointers(): Array<Uint16Array | undefined> | undefined {
    return this.x002804x3;
  }

  get x002804x3(): Array<Uint16Array | undefined> | undefined {
    const value = this.dwResponse['002804X3']?.Value;
    throw new Error('Unsupported field CoefficientCodingPointers (002804x3)');
  }

  getCoefficientCodingPointers(): Array<Uint16Array | undefined> {
    const value = this.x002804x3;
    if (value === undefined) {
      throw new Error('CoefficientCodingPointers is undefined');
    }
    return value;
  }

  // DCT Label
  get DCTLabel(): string | undefined {
    return this.x00280700;
  }

  get x00280700(): string | undefined {
    const value = this.dwResponse['00280700']?.Value;
    return convert(value?.[0], 0x00280700, 'string');
  }

  getDCTLabel(): string {
    const value = this.x00280700;
    if (value === undefined) {
      throw new Error('DCTLabel is undefined');
    }
    return value;
  }

  // Data Block Description
  get DataBlockDescription(): Array<string | undefined> | undefined {
    return this.x00280701;
  }

  get x00280701(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00280701']?.Value;
    return convert(value, 0x00280701, 'Array<string | undefined>');
  }

  getDataBlockDescription(): Array<string | undefined> {
    const value = this.x00280701;
    if (value === undefined) {
      throw new Error('DataBlockDescription is undefined');
    }
    return value;
  }

  // Data Block
  get DataBlock(): Array<Uint16Array | undefined> | undefined {
    return this.x00280702;
  }

  get x00280702(): Array<Uint16Array | undefined> | undefined {
    const value = this.dwResponse['00280702']?.Value;
    return convert(value, 0x00280702, 'Array<Uint16Array | undefined>');
  }

  getDataBlock(): Array<Uint16Array | undefined> {
    const value = this.x00280702;
    if (value === undefined) {
      throw new Error('DataBlock is undefined');
    }
    return value;
  }

  // Normalization Factor Format
  get NormalizationFactorFormat(): number | undefined {
    return this.x00280710;
  }

  get x00280710(): number | undefined {
    const value = this.dwResponse['00280710']?.Value;
    return convert(value?.[0], 0x00280710, 'number');
  }

  getNormalizationFactorFormat(): number {
    const value = this.x00280710;
    if (value === undefined) {
      throw new Error('NormalizationFactorFormat is undefined');
    }
    return value;
  }

  // Zonal Map Number Format
  get ZonalMapNumberFormat(): number | undefined {
    return this.x00280720;
  }

  get x00280720(): number | undefined {
    const value = this.dwResponse['00280720']?.Value;
    return convert(value?.[0], 0x00280720, 'number');
  }

  getZonalMapNumberFormat(): number {
    const value = this.x00280720;
    if (value === undefined) {
      throw new Error('ZonalMapNumberFormat is undefined');
    }
    return value;
  }

  // Zonal Map Location
  get ZonalMapLocation(): Array<Uint16Array | undefined> | undefined {
    return this.x00280721;
  }

  get x00280721(): Array<Uint16Array | undefined> | undefined {
    const value = this.dwResponse['00280721']?.Value;
    return convert(value, 0x00280721, 'Array<Uint16Array | undefined>');
  }

  getZonalMapLocation(): Array<Uint16Array | undefined> {
    const value = this.x00280721;
    if (value === undefined) {
      throw new Error('ZonalMapLocation is undefined');
    }
    return value;
  }

  // Zonal Map Format
  get ZonalMapFormat(): number | undefined {
    return this.x00280722;
  }

  get x00280722(): number | undefined {
    const value = this.dwResponse['00280722']?.Value;
    return convert(value?.[0], 0x00280722, 'number');
  }

  getZonalMapFormat(): number {
    const value = this.x00280722;
    if (value === undefined) {
      throw new Error('ZonalMapFormat is undefined');
    }
    return value;
  }

  // Adaptive Map Format
  get AdaptiveMapFormat(): number | undefined {
    return this.x00280730;
  }

  get x00280730(): number | undefined {
    const value = this.dwResponse['00280730']?.Value;
    return convert(value?.[0], 0x00280730, 'number');
  }

  getAdaptiveMapFormat(): number {
    const value = this.x00280730;
    if (value === undefined) {
      throw new Error('AdaptiveMapFormat is undefined');
    }
    return value;
  }

  // Code Number Format
  get CodeNumberFormat(): number | undefined {
    return this.x00280740;
  }

  get x00280740(): number | undefined {
    const value = this.dwResponse['00280740']?.Value;
    return convert(value?.[0], 0x00280740, 'number');
  }

  getCodeNumberFormat(): number {
    const value = this.x00280740;
    if (value === undefined) {
      throw new Error('CodeNumberFormat is undefined');
    }
    return value;
  }

  // Code Label
  get CodeLabel(): Array<string | undefined> | undefined {
    return this.x002808x0;
  }

  get x002808x0(): Array<string | undefined> | undefined {
    const value = this.dwResponse['002808X0']?.Value;
    throw new Error('Unsupported field CodeLabel (002808x0)');
  }

  getCodeLabel(): Array<string | undefined> {
    const value = this.x002808x0;
    if (value === undefined) {
      throw new Error('CodeLabel is undefined');
    }
    return value;
  }

  // Number of Tables
  get NumberOfTables(): number | undefined {
    return this.x002808x2;
  }

  get x002808x2(): number | undefined {
    const value = this.dwResponse['002808X2']?.Value;
    throw new Error('Unsupported field NumberOfTables (002808x2)');
  }

  getNumberOfTables(): number {
    const value = this.x002808x2;
    if (value === undefined) {
      throw new Error('NumberOfTables is undefined');
    }
    return value;
  }

  // Code Table Location
  get CodeTableLocation(): Array<Uint16Array | undefined> | undefined {
    return this.x002808x3;
  }

  get x002808x3(): Array<Uint16Array | undefined> | undefined {
    const value = this.dwResponse['002808X3']?.Value;
    throw new Error('Unsupported field CodeTableLocation (002808x3)');
  }

  getCodeTableLocation(): Array<Uint16Array | undefined> {
    const value = this.x002808x3;
    if (value === undefined) {
      throw new Error('CodeTableLocation is undefined');
    }
    return value;
  }

  // Bits For Code Word
  get BitsForCodeWord(): number | undefined {
    return this.x002808x4;
  }

  get x002808x4(): number | undefined {
    const value = this.dwResponse['002808X4']?.Value;
    throw new Error('Unsupported field BitsForCodeWord (002808x4)');
  }

  getBitsForCodeWord(): number {
    const value = this.x002808x4;
    if (value === undefined) {
      throw new Error('BitsForCodeWord is undefined');
    }
    return value;
  }

  // Image Data Location
  get ImageDataLocation(): Array<Uint16Array | undefined> | undefined {
    return this.x002808x8;
  }

  get x002808x8(): Array<Uint16Array | undefined> | undefined {
    const value = this.dwResponse['002808X8']?.Value;
    throw new Error('Unsupported field ImageDataLocation (002808x8)');
  }

  getImageDataLocation(): Array<Uint16Array | undefined> {
    const value = this.x002808x8;
    if (value === undefined) {
      throw new Error('ImageDataLocation is undefined');
    }
    return value;
  }

  // Pixel Spacing Calibration Type
  get PixelSpacingCalibrationType(): string | undefined {
    return this.x00280a02;
  }

  get x00280a02(): string | undefined {
    const value = this.dwResponse['00280A02']?.Value;
    return convert(value?.[0], 0x00280a02, 'string');
  }

  getPixelSpacingCalibrationType(): string {
    const value = this.x00280a02;
    if (value === undefined) {
      throw new Error('PixelSpacingCalibrationType is undefined');
    }
    return value;
  }

  // Pixel Spacing Calibration Description
  get PixelSpacingCalibrationDescription(): string | undefined {
    return this.x00280a04;
  }

  get x00280a04(): string | undefined {
    const value = this.dwResponse['00280A04']?.Value;
    return convert(value?.[0], 0x00280a04, 'string');
  }

  getPixelSpacingCalibrationDescription(): string {
    const value = this.x00280a04;
    if (value === undefined) {
      throw new Error('PixelSpacingCalibrationDescription is undefined');
    }
    return value;
  }

  // Pixel Intensity Relationship
  get PixelIntensityRelationship(): string | undefined {
    return this.x00281040;
  }

  get x00281040(): string | undefined {
    const value = this.dwResponse['00281040']?.Value;
    return convert(value?.[0], 0x00281040, 'string');
  }

  getPixelIntensityRelationship(): string {
    const value = this.x00281040;
    if (value === undefined) {
      throw new Error('PixelIntensityRelationship is undefined');
    }
    return value;
  }

  // Pixel Intensity Relationship Sign
  get PixelIntensityRelationshipSign(): Uint8Array | undefined {
    return this.x00281041;
  }

  get x00281041(): Uint8Array | undefined {
    const value = this.dwResponse['00281041']?.Value;
    return convert(value?.[0], 0x00281041, 'Uint8Array');
  }

  getPixelIntensityRelationshipSign(): Uint8Array {
    const value = this.x00281041;
    if (value === undefined) {
      throw new Error('PixelIntensityRelationshipSign is undefined');
    }
    return value;
  }

  // Window Center
  get WindowCenter(): Array<number | undefined> | undefined {
    return this.x00281050;
  }

  get x00281050(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00281050']?.Value;
    return convert(value, 0x00281050, 'Array<number | undefined>');
  }

  getWindowCenter(): Array<number | undefined> {
    const value = this.x00281050;
    if (value === undefined) {
      throw new Error('WindowCenter is undefined');
    }
    return value;
  }

  // Window Width
  get WindowWidth(): Array<number | undefined> | undefined {
    return this.x00281051;
  }

  get x00281051(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00281051']?.Value;
    return convert(value, 0x00281051, 'Array<number | undefined>');
  }

  getWindowWidth(): Array<number | undefined> {
    const value = this.x00281051;
    if (value === undefined) {
      throw new Error('WindowWidth is undefined');
    }
    return value;
  }

  // Rescale Intercept
  get RescaleIntercept(): number | undefined {
    return this.x00281052;
  }

  get x00281052(): number | undefined {
    const value = this.dwResponse['00281052']?.Value;
    return convert(value?.[0], 0x00281052, 'number');
  }

  getRescaleIntercept(): number {
    const value = this.x00281052;
    if (value === undefined) {
      throw new Error('RescaleIntercept is undefined');
    }
    return value;
  }

  // Rescale Slope
  get RescaleSlope(): number | undefined {
    return this.x00281053;
  }

  get x00281053(): number | undefined {
    const value = this.dwResponse['00281053']?.Value;
    return convert(value?.[0], 0x00281053, 'number');
  }

  getRescaleSlope(): number {
    const value = this.x00281053;
    if (value === undefined) {
      throw new Error('RescaleSlope is undefined');
    }
    return value;
  }

  // Rescale Type
  get RescaleType(): string | undefined {
    return this.x00281054;
  }

  get x00281054(): string | undefined {
    const value = this.dwResponse['00281054']?.Value;
    return convert(value?.[0], 0x00281054, 'string');
  }

  getRescaleType(): string {
    const value = this.x00281054;
    if (value === undefined) {
      throw new Error('RescaleType is undefined');
    }
    return value;
  }

  // Window Center & Width Explanation
  get WindowCenterWidthExplanation(): Array<string | undefined> | undefined {
    return this.x00281055;
  }

  get x00281055(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00281055']?.Value;
    return convert(value, 0x00281055, 'Array<string | undefined>');
  }

  getWindowCenterWidthExplanation(): Array<string | undefined> {
    const value = this.x00281055;
    if (value === undefined) {
      throw new Error('WindowCenterWidthExplanation is undefined');
    }
    return value;
  }

  // VOI LUT Function
  get VOILUTFunction(): string | undefined {
    return this.x00281056;
  }

  get x00281056(): string | undefined {
    const value = this.dwResponse['00281056']?.Value;
    return convert(value?.[0], 0x00281056, 'string');
  }

  getVOILUTFunction(): string {
    const value = this.x00281056;
    if (value === undefined) {
      throw new Error('VOILUTFunction is undefined');
    }
    return value;
  }

  // Gray Scale
  get GrayScale(): string | undefined {
    return this.x00281080;
  }

  get x00281080(): string | undefined {
    const value = this.dwResponse['00281080']?.Value;
    return convert(value?.[0], 0x00281080, 'string');
  }

  getGrayScale(): string {
    const value = this.x00281080;
    if (value === undefined) {
      throw new Error('GrayScale is undefined');
    }
    return value;
  }

  // Recommended Viewing Mode
  get RecommendedViewingMode(): string | undefined {
    return this.x00281090;
  }

  get x00281090(): string | undefined {
    const value = this.dwResponse['00281090']?.Value;
    return convert(value?.[0], 0x00281090, 'string');
  }

  getRecommendedViewingMode(): string {
    const value = this.x00281090;
    if (value === undefined) {
      throw new Error('RecommendedViewingMode is undefined');
    }
    return value;
  }

  // Gray Lookup Table Descriptor
  get GrayLookupTableDescriptor(): Array<number | undefined> | undefined {
    return this.x00281100;
  }

  get x00281100(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00281100']?.Value;
    return convert(value, 0x00281100, 'Array<number | undefined>');
  }

  getGrayLookupTableDescriptor(): Array<number | undefined> {
    const value = this.x00281100;
    if (value === undefined) {
      throw new Error('GrayLookupTableDescriptor is undefined');
    }
    return value;
  }

  // Red Palette Color Lookup Table Descriptor
  get RedPaletteColorLookupTableDescriptor(): Array<number | undefined> | undefined {
    return this.x00281101;
  }

  get x00281101(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00281101']?.Value;
    return convert(value, 0x00281101, 'Array<number | undefined>');
  }

  getRedPaletteColorLookupTableDescriptor(): Array<number | undefined> {
    const value = this.x00281101;
    if (value === undefined) {
      throw new Error('RedPaletteColorLookupTableDescriptor is undefined');
    }
    return value;
  }

  // Green Palette Color Lookup Table Descriptor
  get GreenPaletteColorLookupTableDescriptor(): Array<number | undefined> | undefined {
    return this.x00281102;
  }

  get x00281102(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00281102']?.Value;
    return convert(value, 0x00281102, 'Array<number | undefined>');
  }

  getGreenPaletteColorLookupTableDescriptor(): Array<number | undefined> {
    const value = this.x00281102;
    if (value === undefined) {
      throw new Error('GreenPaletteColorLookupTableDescriptor is undefined');
    }
    return value;
  }

  // Blue Palette Color Lookup Table Descriptor
  get BluePaletteColorLookupTableDescriptor(): Array<number | undefined> | undefined {
    return this.x00281103;
  }

  get x00281103(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00281103']?.Value;
    return convert(value, 0x00281103, 'Array<number | undefined>');
  }

  getBluePaletteColorLookupTableDescriptor(): Array<number | undefined> {
    const value = this.x00281103;
    if (value === undefined) {
      throw new Error('BluePaletteColorLookupTableDescriptor is undefined');
    }
    return value;
  }

  // Alpha Palette Color Lookup Table Descriptor
  get AlphaPaletteColorLookupTableDescriptor(): Array<number | undefined> | undefined {
    return this.x00281104;
  }

  get x00281104(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00281104']?.Value;
    return convert(value, 0x00281104, 'Array<number | undefined>');
  }

  getAlphaPaletteColorLookupTableDescriptor(): Array<number | undefined> {
    const value = this.x00281104;
    if (value === undefined) {
      throw new Error('AlphaPaletteColorLookupTableDescriptor is undefined');
    }
    return value;
  }

  // Large Red Palette Color Lookup Table Descriptor
  get LargeRedPaletteColorLookupTableDescriptor(): Array<number | undefined> | undefined {
    return this.x00281111;
  }

  get x00281111(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00281111']?.Value;
    return convert(value, 0x00281111, 'Array<number | undefined>');
  }

  getLargeRedPaletteColorLookupTableDescriptor(): Array<number | undefined> {
    const value = this.x00281111;
    if (value === undefined) {
      throw new Error('LargeRedPaletteColorLookupTableDescriptor is undefined');
    }
    return value;
  }

  // Large Green Palette Color Lookup Table Descriptor
  get LargeGreenPaletteColorLookupTableDescriptor(): Array<number | undefined> | undefined {
    return this.x00281112;
  }

  get x00281112(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00281112']?.Value;
    return convert(value, 0x00281112, 'Array<number | undefined>');
  }

  getLargeGreenPaletteColorLookupTableDescriptor(): Array<number | undefined> {
    const value = this.x00281112;
    if (value === undefined) {
      throw new Error('LargeGreenPaletteColorLookupTableDescriptor is undefined');
    }
    return value;
  }

  // Large Blue Palette Color Lookup Table Descriptor
  get LargeBluePaletteColorLookupTableDescriptor(): Array<number | undefined> | undefined {
    return this.x00281113;
  }

  get x00281113(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00281113']?.Value;
    return convert(value, 0x00281113, 'Array<number | undefined>');
  }

  getLargeBluePaletteColorLookupTableDescriptor(): Array<number | undefined> {
    const value = this.x00281113;
    if (value === undefined) {
      throw new Error('LargeBluePaletteColorLookupTableDescriptor is undefined');
    }
    return value;
  }

  // Palette Color Lookup Table UID
  get PaletteColorLookupTableUID(): string | undefined {
    return this.x00281199;
  }

  get x00281199(): string | undefined {
    const value = this.dwResponse['00281199']?.Value;
    return convert(value?.[0], 0x00281199, 'string');
  }

  getPaletteColorLookupTableUID(): string {
    const value = this.x00281199;
    if (value === undefined) {
      throw new Error('PaletteColorLookupTableUID is undefined');
    }
    return value;
  }

  // Large Palette Color Lookup Table UID
  get LargePaletteColorLookupTableUID(): string | undefined {
    return this.x00281214;
  }

  get x00281214(): string | undefined {
    const value = this.dwResponse['00281214']?.Value;
    return convert(value?.[0], 0x00281214, 'string');
  }

  getLargePaletteColorLookupTableUID(): string {
    const value = this.x00281214;
    if (value === undefined) {
      throw new Error('LargePaletteColorLookupTableUID is undefined');
    }
    return value;
  }

  // Breast Implant Present
  get BreastImplantPresent(): string | undefined {
    return this.x00281300;
  }

  get x00281300(): string | undefined {
    const value = this.dwResponse['00281300']?.Value;
    return convert(value?.[0], 0x00281300, 'string');
  }

  getBreastImplantPresent(): string {
    const value = this.x00281300;
    if (value === undefined) {
      throw new Error('BreastImplantPresent is undefined');
    }
    return value;
  }

  // Partial View
  get PartialView(): string | undefined {
    return this.x00281350;
  }

  get x00281350(): string | undefined {
    const value = this.dwResponse['00281350']?.Value;
    return convert(value?.[0], 0x00281350, 'string');
  }

  getPartialView(): string {
    const value = this.x00281350;
    if (value === undefined) {
      throw new Error('PartialView is undefined');
    }
    return value;
  }

  // Partial View Code Sequence
  get PartialViewCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00281352;
  }

  get x00281352(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00281352']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPartialViewCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00281352;
    if (value === undefined) {
      throw new Error('PartialViewCodeSequence is undefined');
    }
    return value;
  }

  // Spatial Locations Preserved
  get SpatialLocationsPreserved(): string | undefined {
    return this.x0028135a;
  }

  get x0028135a(): string | undefined {
    const value = this.dwResponse['0028135A']?.Value;
    return convert(value?.[0], 0x0028135a, 'string');
  }

  getSpatialLocationsPreserved(): string {
    const value = this.x0028135a;
    if (value === undefined) {
      throw new Error('SpatialLocationsPreserved is undefined');
    }
    return value;
  }

  // Data Frame Assignment Sequence
  get DataFrameAssignmentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00281401;
  }

  get x00281401(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00281401']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDataFrameAssignmentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00281401;
    if (value === undefined) {
      throw new Error('DataFrameAssignmentSequence is undefined');
    }
    return value;
  }

  // Data Path Assignment
  get DataPathAssignment(): string | undefined {
    return this.x00281402;
  }

  get x00281402(): string | undefined {
    const value = this.dwResponse['00281402']?.Value;
    return convert(value?.[0], 0x00281402, 'string');
  }

  getDataPathAssignment(): string {
    const value = this.x00281402;
    if (value === undefined) {
      throw new Error('DataPathAssignment is undefined');
    }
    return value;
  }

  // Bits Mapped to Color Lookup Table
  get BitsMappedToColorLookupTable(): number | undefined {
    return this.x00281403;
  }

  get x00281403(): number | undefined {
    const value = this.dwResponse['00281403']?.Value;
    return convert(value?.[0], 0x00281403, 'number');
  }

  getBitsMappedToColorLookupTable(): number {
    const value = this.x00281403;
    if (value === undefined) {
      throw new Error('BitsMappedToColorLookupTable is undefined');
    }
    return value;
  }

  // Blending LUT 1 Sequence
  get BlendingLUT1Sequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00281404;
  }

  get x00281404(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00281404']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBlendingLUT1Sequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00281404;
    if (value === undefined) {
      throw new Error('BlendingLUT1Sequence is undefined');
    }
    return value;
  }

  // Blending LUT 1 Transfer Function
  get BlendingLUT1TransferFunction(): string | undefined {
    return this.x00281405;
  }

  get x00281405(): string | undefined {
    const value = this.dwResponse['00281405']?.Value;
    return convert(value?.[0], 0x00281405, 'string');
  }

  getBlendingLUT1TransferFunction(): string {
    const value = this.x00281405;
    if (value === undefined) {
      throw new Error('BlendingLUT1TransferFunction is undefined');
    }
    return value;
  }

  // Blending Weight Constant
  get BlendingWeightConstant(): number | undefined {
    return this.x00281406;
  }

  get x00281406(): number | undefined {
    const value = this.dwResponse['00281406']?.Value;
    return convert(value?.[0], 0x00281406, 'number');
  }

  getBlendingWeightConstant(): number {
    const value = this.x00281406;
    if (value === undefined) {
      throw new Error('BlendingWeightConstant is undefined');
    }
    return value;
  }

  // Blending Lookup Table Descriptor
  get BlendingLookupTableDescriptor(): Array<number | undefined> | undefined {
    return this.x00281407;
  }

  get x00281407(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00281407']?.Value;
    return convert(value, 0x00281407, 'Array<number | undefined>');
  }

  getBlendingLookupTableDescriptor(): Array<number | undefined> {
    const value = this.x00281407;
    if (value === undefined) {
      throw new Error('BlendingLookupTableDescriptor is undefined');
    }
    return value;
  }

  // Enhanced Palette Color Lookup Table Sequence
  get EnhancedPaletteColorLookupTableSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0028140b;
  }

  get x0028140b(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0028140B']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getEnhancedPaletteColorLookupTableSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0028140b;
    if (value === undefined) {
      throw new Error('EnhancedPaletteColorLookupTableSequence is undefined');
    }
    return value;
  }

  // Blending LUT 2 Sequence
  get BlendingLUT2Sequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0028140c;
  }

  get x0028140c(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0028140C']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBlendingLUT2Sequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0028140c;
    if (value === undefined) {
      throw new Error('BlendingLUT2Sequence is undefined');
    }
    return value;
  }

  // Blending LUT 2 Transfer Function
  get BlendingLUT2TransferFunction(): string | undefined {
    return this.x0028140d;
  }

  get x0028140d(): string | undefined {
    const value = this.dwResponse['0028140D']?.Value;
    return convert(value?.[0], 0x0028140d, 'string');
  }

  getBlendingLUT2TransferFunction(): string {
    const value = this.x0028140d;
    if (value === undefined) {
      throw new Error('BlendingLUT2TransferFunction is undefined');
    }
    return value;
  }

  // Data Path ID
  get DataPathID(): string | undefined {
    return this.x0028140e;
  }

  get x0028140e(): string | undefined {
    const value = this.dwResponse['0028140E']?.Value;
    return convert(value?.[0], 0x0028140e, 'string');
  }

  getDataPathID(): string {
    const value = this.x0028140e;
    if (value === undefined) {
      throw new Error('DataPathID is undefined');
    }
    return value;
  }

  // RGB LUT Transfer Function
  get RGBLUTTransferFunction(): string | undefined {
    return this.x0028140f;
  }

  get x0028140f(): string | undefined {
    const value = this.dwResponse['0028140F']?.Value;
    return convert(value?.[0], 0x0028140f, 'string');
  }

  getRGBLUTTransferFunction(): string {
    const value = this.x0028140f;
    if (value === undefined) {
      throw new Error('RGBLUTTransferFunction is undefined');
    }
    return value;
  }

  // Alpha LUT Transfer Function
  get AlphaLUTTransferFunction(): string | undefined {
    return this.x00281410;
  }

  get x00281410(): string | undefined {
    const value = this.dwResponse['00281410']?.Value;
    return convert(value?.[0], 0x00281410, 'string');
  }

  getAlphaLUTTransferFunction(): string {
    const value = this.x00281410;
    if (value === undefined) {
      throw new Error('AlphaLUTTransferFunction is undefined');
    }
    return value;
  }

  // Lossy Image Compression
  get LossyImageCompression(): string | undefined {
    return this.x00282110;
  }

  get x00282110(): string | undefined {
    const value = this.dwResponse['00282110']?.Value;
    return convert(value?.[0], 0x00282110, 'string');
  }

  getLossyImageCompression(): string {
    const value = this.x00282110;
    if (value === undefined) {
      throw new Error('LossyImageCompression is undefined');
    }
    return value;
  }

  // Lossy Image Compression Ratio
  get LossyImageCompressionRatio(): Array<number | undefined> | undefined {
    return this.x00282112;
  }

  get x00282112(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00282112']?.Value;
    return convert(value, 0x00282112, 'Array<number | undefined>');
  }

  getLossyImageCompressionRatio(): Array<number | undefined> {
    const value = this.x00282112;
    if (value === undefined) {
      throw new Error('LossyImageCompressionRatio is undefined');
    }
    return value;
  }

  // Lossy Image Compression Method
  get LossyImageCompressionMethod(): Array<string | undefined> | undefined {
    return this.x00282114;
  }

  get x00282114(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00282114']?.Value;
    return convert(value, 0x00282114, 'Array<string | undefined>');
  }

  getLossyImageCompressionMethod(): Array<string | undefined> {
    const value = this.x00282114;
    if (value === undefined) {
      throw new Error('LossyImageCompressionMethod is undefined');
    }
    return value;
  }

  // Modality LUT Sequence
  get ModalityLUTSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00283000;
  }

  get x00283000(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00283000']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getModalityLUTSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00283000;
    if (value === undefined) {
      throw new Error('ModalityLUTSequence is undefined');
    }
    return value;
  }

  // LUT Descriptor
  get LUTDescriptor(): Array<number | undefined> | undefined {
    return this.x00283002;
  }

  get x00283002(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00283002']?.Value;
    return convert(value, 0x00283002, 'Array<number | undefined>');
  }

  getLUTDescriptor(): Array<number | undefined> {
    const value = this.x00283002;
    if (value === undefined) {
      throw new Error('LUTDescriptor is undefined');
    }
    return value;
  }

  // LUT Explanation
  get LUTExplanation(): string | undefined {
    return this.x00283003;
  }

  get x00283003(): string | undefined {
    const value = this.dwResponse['00283003']?.Value;
    return convert(value?.[0], 0x00283003, 'string');
  }

  getLUTExplanation(): string {
    const value = this.x00283003;
    if (value === undefined) {
      throw new Error('LUTExplanation is undefined');
    }
    return value;
  }

  // Modality LUT Type
  get ModalityLUTType(): string | undefined {
    return this.x00283004;
  }

  get x00283004(): string | undefined {
    const value = this.dwResponse['00283004']?.Value;
    return convert(value?.[0], 0x00283004, 'string');
  }

  getModalityLUTType(): string {
    const value = this.x00283004;
    if (value === undefined) {
      throw new Error('ModalityLUTType is undefined');
    }
    return value;
  }

  // VOI LUT Sequence
  get VOILUTSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00283010;
  }

  get x00283010(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00283010']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVOILUTSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00283010;
    if (value === undefined) {
      throw new Error('VOILUTSequence is undefined');
    }
    return value;
  }

  // Softcopy VOI LUT Sequence
  get SoftcopyVOILUTSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00283110;
  }

  get x00283110(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00283110']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSoftcopyVOILUTSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00283110;
    if (value === undefined) {
      throw new Error('SoftcopyVOILUTSequence is undefined');
    }
    return value;
  }

  // Bi-Plane Acquisition Sequence
  get BiPlaneAcquisitionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00285000;
  }

  get x00285000(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00285000']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBiPlaneAcquisitionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00285000;
    if (value === undefined) {
      throw new Error('BiPlaneAcquisitionSequence is undefined');
    }
    return value;
  }

  // Representative Frame Number
  get RepresentativeFrameNumber(): number | undefined {
    return this.x00286010;
  }

  get x00286010(): number | undefined {
    const value = this.dwResponse['00286010']?.Value;
    return convert(value?.[0], 0x00286010, 'number');
  }

  getRepresentativeFrameNumber(): number {
    const value = this.x00286010;
    if (value === undefined) {
      throw new Error('RepresentativeFrameNumber is undefined');
    }
    return value;
  }

  // Frame Numbers of Interest (FOI)
  get FrameNumbersOfInterest(): Array<number | undefined> | undefined {
    return this.x00286020;
  }

  get x00286020(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00286020']?.Value;
    return convert(value, 0x00286020, 'Array<number | undefined>');
  }

  getFrameNumbersOfInterest(): Array<number | undefined> {
    const value = this.x00286020;
    if (value === undefined) {
      throw new Error('FrameNumbersOfInterest is undefined');
    }
    return value;
  }

  // Frame of Interest Description
  get FrameOfInterestDescription(): Array<string | undefined> | undefined {
    return this.x00286022;
  }

  get x00286022(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00286022']?.Value;
    return convert(value, 0x00286022, 'Array<string | undefined>');
  }

  getFrameOfInterestDescription(): Array<string | undefined> {
    const value = this.x00286022;
    if (value === undefined) {
      throw new Error('FrameOfInterestDescription is undefined');
    }
    return value;
  }

  // Frame of Interest Type
  get FrameOfInterestType(): Array<string | undefined> | undefined {
    return this.x00286023;
  }

  get x00286023(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00286023']?.Value;
    return convert(value, 0x00286023, 'Array<string | undefined>');
  }

  getFrameOfInterestType(): Array<string | undefined> {
    const value = this.x00286023;
    if (value === undefined) {
      throw new Error('FrameOfInterestType is undefined');
    }
    return value;
  }

  // Mask Pointer(s)
  get MaskPointers(): Array<number | undefined> | undefined {
    return this.x00286030;
  }

  get x00286030(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00286030']?.Value;
    return convert(value, 0x00286030, 'Array<number | undefined>');
  }

  getMaskPointers(): Array<number | undefined> {
    const value = this.x00286030;
    if (value === undefined) {
      throw new Error('MaskPointers is undefined');
    }
    return value;
  }

  // R Wave Pointer
  get RWavePointer(): Array<number | undefined> | undefined {
    return this.x00286040;
  }

  get x00286040(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00286040']?.Value;
    return convert(value, 0x00286040, 'Array<number | undefined>');
  }

  getRWavePointer(): Array<number | undefined> {
    const value = this.x00286040;
    if (value === undefined) {
      throw new Error('RWavePointer is undefined');
    }
    return value;
  }

  // Mask Subtraction Sequence
  get MaskSubtractionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00286100;
  }

  get x00286100(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00286100']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMaskSubtractionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00286100;
    if (value === undefined) {
      throw new Error('MaskSubtractionSequence is undefined');
    }
    return value;
  }

  // Mask Operation
  get MaskOperation(): string | undefined {
    return this.x00286101;
  }

  get x00286101(): string | undefined {
    const value = this.dwResponse['00286101']?.Value;
    return convert(value?.[0], 0x00286101, 'string');
  }

  getMaskOperation(): string {
    const value = this.x00286101;
    if (value === undefined) {
      throw new Error('MaskOperation is undefined');
    }
    return value;
  }

  // Applicable Frame Range
  get ApplicableFrameRange(): Array<number | undefined> | undefined {
    return this.x00286102;
  }

  get x00286102(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00286102']?.Value;
    return convert(value, 0x00286102, 'Array<number | undefined>');
  }

  getApplicableFrameRange(): Array<number | undefined> {
    const value = this.x00286102;
    if (value === undefined) {
      throw new Error('ApplicableFrameRange is undefined');
    }
    return value;
  }

  // Mask Frame Numbers
  get MaskFrameNumbers(): Array<number | undefined> | undefined {
    return this.x00286110;
  }

  get x00286110(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00286110']?.Value;
    return convert(value, 0x00286110, 'Array<number | undefined>');
  }

  getMaskFrameNumbers(): Array<number | undefined> {
    const value = this.x00286110;
    if (value === undefined) {
      throw new Error('MaskFrameNumbers is undefined');
    }
    return value;
  }

  // Contrast Frame Averaging
  get ContrastFrameAveraging(): number | undefined {
    return this.x00286112;
  }

  get x00286112(): number | undefined {
    const value = this.dwResponse['00286112']?.Value;
    return convert(value?.[0], 0x00286112, 'number');
  }

  getContrastFrameAveraging(): number {
    const value = this.x00286112;
    if (value === undefined) {
      throw new Error('ContrastFrameAveraging is undefined');
    }
    return value;
  }

  // Mask Sub-pixel Shift
  get MaskSubPixelShift(): Array<number | undefined> | undefined {
    return this.x00286114;
  }

  get x00286114(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00286114']?.Value;
    return convert(value, 0x00286114, 'Array<number | undefined>');
  }

  getMaskSubPixelShift(): Array<number | undefined> {
    const value = this.x00286114;
    if (value === undefined) {
      throw new Error('MaskSubPixelShift is undefined');
    }
    return value;
  }

  // TID Offset
  get TIDOffset(): Uint8Array | undefined {
    return this.x00286120;
  }

  get x00286120(): Uint8Array | undefined {
    const value = this.dwResponse['00286120']?.Value;
    return convert(value?.[0], 0x00286120, 'Uint8Array');
  }

  getTIDOffset(): Uint8Array {
    const value = this.x00286120;
    if (value === undefined) {
      throw new Error('TIDOffset is undefined');
    }
    return value;
  }

  // Equipment Administrator Sequence
  get EquipmentAdministratorSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00287000;
  }

  get x00287000(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00287000']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getEquipmentAdministratorSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00287000;
    if (value === undefined) {
      throw new Error('EquipmentAdministratorSequence is undefined');
    }
    return value;
  }

  // Number of Display Subsystems
  get NumberOfDisplaySubsystems(): number | undefined {
    return this.x00287001;
  }

  get x00287001(): number | undefined {
    const value = this.dwResponse['00287001']?.Value;
    return convert(value?.[0], 0x00287001, 'number');
  }

  getNumberOfDisplaySubsystems(): number {
    const value = this.x00287001;
    if (value === undefined) {
      throw new Error('NumberOfDisplaySubsystems is undefined');
    }
    return value;
  }

  // Current Configuration ID
  get CurrentConfigurationID(): number | undefined {
    return this.x00287002;
  }

  get x00287002(): number | undefined {
    const value = this.dwResponse['00287002']?.Value;
    return convert(value?.[0], 0x00287002, 'number');
  }

  getCurrentConfigurationID(): number {
    const value = this.x00287002;
    if (value === undefined) {
      throw new Error('CurrentConfigurationID is undefined');
    }
    return value;
  }

  // Display Subsystem ID
  get DisplaySubsystemID(): number | undefined {
    return this.x00287003;
  }

  get x00287003(): number | undefined {
    const value = this.dwResponse['00287003']?.Value;
    return convert(value?.[0], 0x00287003, 'number');
  }

  getDisplaySubsystemID(): number {
    const value = this.x00287003;
    if (value === undefined) {
      throw new Error('DisplaySubsystemID is undefined');
    }
    return value;
  }

  // Display Subsystem Name
  get DisplaySubsystemName(): string | undefined {
    return this.x00287004;
  }

  get x00287004(): string | undefined {
    const value = this.dwResponse['00287004']?.Value;
    return convert(value?.[0], 0x00287004, 'string');
  }

  getDisplaySubsystemName(): string {
    const value = this.x00287004;
    if (value === undefined) {
      throw new Error('DisplaySubsystemName is undefined');
    }
    return value;
  }

  // Display Subsystem Description
  get DisplaySubsystemDescription(): string | undefined {
    return this.x00287005;
  }

  get x00287005(): string | undefined {
    const value = this.dwResponse['00287005']?.Value;
    return convert(value?.[0], 0x00287005, 'string');
  }

  getDisplaySubsystemDescription(): string {
    const value = this.x00287005;
    if (value === undefined) {
      throw new Error('DisplaySubsystemDescription is undefined');
    }
    return value;
  }

  // System Status
  get SystemStatus(): string | undefined {
    return this.x00287006;
  }

  get x00287006(): string | undefined {
    const value = this.dwResponse['00287006']?.Value;
    return convert(value?.[0], 0x00287006, 'string');
  }

  getSystemStatus(): string {
    const value = this.x00287006;
    if (value === undefined) {
      throw new Error('SystemStatus is undefined');
    }
    return value;
  }

  // System Status Comment
  get SystemStatusComment(): string | undefined {
    return this.x00287007;
  }

  get x00287007(): string | undefined {
    const value = this.dwResponse['00287007']?.Value;
    return convert(value?.[0], 0x00287007, 'string');
  }

  getSystemStatusComment(): string {
    const value = this.x00287007;
    if (value === undefined) {
      throw new Error('SystemStatusComment is undefined');
    }
    return value;
  }

  // Target Luminance Characteristics Sequence
  get TargetLuminanceCharacteristicsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00287008;
  }

  get x00287008(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00287008']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTargetLuminanceCharacteristicsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00287008;
    if (value === undefined) {
      throw new Error('TargetLuminanceCharacteristicsSequence is undefined');
    }
    return value;
  }

  // Luminance Characteristics ID
  get LuminanceCharacteristicsID(): number | undefined {
    return this.x00287009;
  }

  get x00287009(): number | undefined {
    const value = this.dwResponse['00287009']?.Value;
    return convert(value?.[0], 0x00287009, 'number');
  }

  getLuminanceCharacteristicsID(): number {
    const value = this.x00287009;
    if (value === undefined) {
      throw new Error('LuminanceCharacteristicsID is undefined');
    }
    return value;
  }

  // Display Subsystem Configuration Sequence
  get DisplaySubsystemConfigurationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0028700a;
  }

  get x0028700a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0028700A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDisplaySubsystemConfigurationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0028700a;
    if (value === undefined) {
      throw new Error('DisplaySubsystemConfigurationSequence is undefined');
    }
    return value;
  }

  // Configuration ID
  get ConfigurationID(): number | undefined {
    return this.x0028700b;
  }

  get x0028700b(): number | undefined {
    const value = this.dwResponse['0028700B']?.Value;
    return convert(value?.[0], 0x0028700b, 'number');
  }

  getConfigurationID(): number {
    const value = this.x0028700b;
    if (value === undefined) {
      throw new Error('ConfigurationID is undefined');
    }
    return value;
  }

  // Configuration Name
  get ConfigurationName(): string | undefined {
    return this.x0028700c;
  }

  get x0028700c(): string | undefined {
    const value = this.dwResponse['0028700C']?.Value;
    return convert(value?.[0], 0x0028700c, 'string');
  }

  getConfigurationName(): string {
    const value = this.x0028700c;
    if (value === undefined) {
      throw new Error('ConfigurationName is undefined');
    }
    return value;
  }

  // Configuration Description
  get ConfigurationDescription(): string | undefined {
    return this.x0028700d;
  }

  get x0028700d(): string | undefined {
    const value = this.dwResponse['0028700D']?.Value;
    return convert(value?.[0], 0x0028700d, 'string');
  }

  getConfigurationDescription(): string {
    const value = this.x0028700d;
    if (value === undefined) {
      throw new Error('ConfigurationDescription is undefined');
    }
    return value;
  }

  // Referenced Target Luminance Characteristics ID
  get ReferencedTargetLuminanceCharacteristicsID(): number | undefined {
    return this.x0028700e;
  }

  get x0028700e(): number | undefined {
    const value = this.dwResponse['0028700E']?.Value;
    return convert(value?.[0], 0x0028700e, 'number');
  }

  getReferencedTargetLuminanceCharacteristicsID(): number {
    const value = this.x0028700e;
    if (value === undefined) {
      throw new Error('ReferencedTargetLuminanceCharacteristicsID is undefined');
    }
    return value;
  }

  // QA Results Sequence
  get QAResultsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0028700f;
  }

  get x0028700f(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0028700F']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getQAResultsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0028700f;
    if (value === undefined) {
      throw new Error('QAResultsSequence is undefined');
    }
    return value;
  }

  // Display Subsystem QA Results Sequence
  get DisplaySubsystemQAResultsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00287010;
  }

  get x00287010(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00287010']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDisplaySubsystemQAResultsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00287010;
    if (value === undefined) {
      throw new Error('DisplaySubsystemQAResultsSequence is undefined');
    }
    return value;
  }

  // Configuration QA Results Sequence
  get ConfigurationQAResultsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00287011;
  }

  get x00287011(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00287011']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getConfigurationQAResultsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00287011;
    if (value === undefined) {
      throw new Error('ConfigurationQAResultsSequence is undefined');
    }
    return value;
  }

  // Measurement Equipment Sequence
  get MeasurementEquipmentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00287012;
  }

  get x00287012(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00287012']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMeasurementEquipmentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00287012;
    if (value === undefined) {
      throw new Error('MeasurementEquipmentSequence is undefined');
    }
    return value;
  }

  // Measurement Functions
  get MeasurementFunctions(): Array<string | undefined> | undefined {
    return this.x00287013;
  }

  get x00287013(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00287013']?.Value;
    return convert(value, 0x00287013, 'Array<string | undefined>');
  }

  getMeasurementFunctions(): Array<string | undefined> {
    const value = this.x00287013;
    if (value === undefined) {
      throw new Error('MeasurementFunctions is undefined');
    }
    return value;
  }

  // Measurement Equipment Type
  get MeasurementEquipmentType(): string | undefined {
    return this.x00287014;
  }

  get x00287014(): string | undefined {
    const value = this.dwResponse['00287014']?.Value;
    return convert(value?.[0], 0x00287014, 'string');
  }

  getMeasurementEquipmentType(): string {
    const value = this.x00287014;
    if (value === undefined) {
      throw new Error('MeasurementEquipmentType is undefined');
    }
    return value;
  }

  // Visual Evaluation Result Sequence
  get VisualEvaluationResultSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00287015;
  }

  get x00287015(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00287015']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVisualEvaluationResultSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00287015;
    if (value === undefined) {
      throw new Error('VisualEvaluationResultSequence is undefined');
    }
    return value;
  }

  // Display Calibration Result Sequence
  get DisplayCalibrationResultSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00287016;
  }

  get x00287016(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00287016']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDisplayCalibrationResultSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00287016;
    if (value === undefined) {
      throw new Error('DisplayCalibrationResultSequence is undefined');
    }
    return value;
  }

  // DDL Value
  get DDLValue(): number | undefined {
    return this.x00287017;
  }

  get x00287017(): number | undefined {
    const value = this.dwResponse['00287017']?.Value;
    return convert(value?.[0], 0x00287017, 'number');
  }

  getDDLValue(): number {
    const value = this.x00287017;
    if (value === undefined) {
      throw new Error('DDLValue is undefined');
    }
    return value;
  }

  // CIExy White Point
  get CIExyWhitePoint(): Array<number | undefined> | undefined {
    return this.x00287018;
  }

  get x00287018(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00287018']?.Value;
    return convert(value, 0x00287018, 'Array<number | undefined>');
  }

  getCIExyWhitePoint(): Array<number | undefined> {
    const value = this.x00287018;
    if (value === undefined) {
      throw new Error('CIExyWhitePoint is undefined');
    }
    return value;
  }

  // Display Function Type
  get DisplayFunctionType(): string | undefined {
    return this.x00287019;
  }

  get x00287019(): string | undefined {
    const value = this.dwResponse['00287019']?.Value;
    return convert(value?.[0], 0x00287019, 'string');
  }

  getDisplayFunctionType(): string {
    const value = this.x00287019;
    if (value === undefined) {
      throw new Error('DisplayFunctionType is undefined');
    }
    return value;
  }

  // Gamma Value
  get GammaValue(): number | undefined {
    return this.x0028701a;
  }

  get x0028701a(): number | undefined {
    const value = this.dwResponse['0028701A']?.Value;
    return convert(value?.[0], 0x0028701a, 'number');
  }

  getGammaValue(): number {
    const value = this.x0028701a;
    if (value === undefined) {
      throw new Error('GammaValue is undefined');
    }
    return value;
  }

  // Number of Luminance Points
  get NumberOfLuminancePoints(): number | undefined {
    return this.x0028701b;
  }

  get x0028701b(): number | undefined {
    const value = this.dwResponse['0028701B']?.Value;
    return convert(value?.[0], 0x0028701b, 'number');
  }

  getNumberOfLuminancePoints(): number {
    const value = this.x0028701b;
    if (value === undefined) {
      throw new Error('NumberOfLuminancePoints is undefined');
    }
    return value;
  }

  // Luminance Response Sequence
  get LuminanceResponseSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0028701c;
  }

  get x0028701c(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0028701C']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getLuminanceResponseSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0028701c;
    if (value === undefined) {
      throw new Error('LuminanceResponseSequence is undefined');
    }
    return value;
  }

  // Target Minimum Luminance
  get TargetMinimumLuminance(): number | undefined {
    return this.x0028701d;
  }

  get x0028701d(): number | undefined {
    const value = this.dwResponse['0028701D']?.Value;
    return convert(value?.[0], 0x0028701d, 'number');
  }

  getTargetMinimumLuminance(): number {
    const value = this.x0028701d;
    if (value === undefined) {
      throw new Error('TargetMinimumLuminance is undefined');
    }
    return value;
  }

  // Target Maximum Luminance
  get TargetMaximumLuminance(): number | undefined {
    return this.x0028701e;
  }

  get x0028701e(): number | undefined {
    const value = this.dwResponse['0028701E']?.Value;
    return convert(value?.[0], 0x0028701e, 'number');
  }

  getTargetMaximumLuminance(): number {
    const value = this.x0028701e;
    if (value === undefined) {
      throw new Error('TargetMaximumLuminance is undefined');
    }
    return value;
  }

  // Luminance Value
  get LuminanceValue(): number | undefined {
    return this.x0028701f;
  }

  get x0028701f(): number | undefined {
    const value = this.dwResponse['0028701F']?.Value;
    return convert(value?.[0], 0x0028701f, 'number');
  }

  getLuminanceValue(): number {
    const value = this.x0028701f;
    if (value === undefined) {
      throw new Error('LuminanceValue is undefined');
    }
    return value;
  }

  // Luminance Response Description
  get LuminanceResponseDescription(): string | undefined {
    return this.x00287020;
  }

  get x00287020(): string | undefined {
    const value = this.dwResponse['00287020']?.Value;
    return convert(value?.[0], 0x00287020, 'string');
  }

  getLuminanceResponseDescription(): string {
    const value = this.x00287020;
    if (value === undefined) {
      throw new Error('LuminanceResponseDescription is undefined');
    }
    return value;
  }

  // White Point Flag
  get WhitePointFlag(): string | undefined {
    return this.x00287021;
  }

  get x00287021(): string | undefined {
    const value = this.dwResponse['00287021']?.Value;
    return convert(value?.[0], 0x00287021, 'string');
  }

  getWhitePointFlag(): string {
    const value = this.x00287021;
    if (value === undefined) {
      throw new Error('WhitePointFlag is undefined');
    }
    return value;
  }

  // Display Device Type Code Sequence
  get DisplayDeviceTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00287022;
  }

  get x00287022(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00287022']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDisplayDeviceTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00287022;
    if (value === undefined) {
      throw new Error('DisplayDeviceTypeCodeSequence is undefined');
    }
    return value;
  }

  // Display Subsystem Sequence
  get DisplaySubsystemSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00287023;
  }

  get x00287023(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00287023']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDisplaySubsystemSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00287023;
    if (value === undefined) {
      throw new Error('DisplaySubsystemSequence is undefined');
    }
    return value;
  }

  // Luminance Result Sequence
  get LuminanceResultSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00287024;
  }

  get x00287024(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00287024']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getLuminanceResultSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00287024;
    if (value === undefined) {
      throw new Error('LuminanceResultSequence is undefined');
    }
    return value;
  }

  // Ambient Light Value Source
  get AmbientLightValueSource(): string | undefined {
    return this.x00287025;
  }

  get x00287025(): string | undefined {
    const value = this.dwResponse['00287025']?.Value;
    return convert(value?.[0], 0x00287025, 'string');
  }

  getAmbientLightValueSource(): string {
    const value = this.x00287025;
    if (value === undefined) {
      throw new Error('AmbientLightValueSource is undefined');
    }
    return value;
  }

  // Measured Characteristics
  get MeasuredCharacteristics(): Array<string | undefined> | undefined {
    return this.x00287026;
  }

  get x00287026(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00287026']?.Value;
    return convert(value, 0x00287026, 'Array<string | undefined>');
  }

  getMeasuredCharacteristics(): Array<string | undefined> {
    const value = this.x00287026;
    if (value === undefined) {
      throw new Error('MeasuredCharacteristics is undefined');
    }
    return value;
  }

  // Luminance Uniformity Result Sequence
  get LuminanceUniformityResultSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00287027;
  }

  get x00287027(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00287027']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getLuminanceUniformityResultSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00287027;
    if (value === undefined) {
      throw new Error('LuminanceUniformityResultSequence is undefined');
    }
    return value;
  }

  // Visual Evaluation Test Sequence
  get VisualEvaluationTestSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00287028;
  }

  get x00287028(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00287028']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVisualEvaluationTestSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00287028;
    if (value === undefined) {
      throw new Error('VisualEvaluationTestSequence is undefined');
    }
    return value;
  }

  // Test Result
  get TestResult(): string | undefined {
    return this.x00287029;
  }

  get x00287029(): string | undefined {
    const value = this.dwResponse['00287029']?.Value;
    return convert(value?.[0], 0x00287029, 'string');
  }

  getTestResult(): string {
    const value = this.x00287029;
    if (value === undefined) {
      throw new Error('TestResult is undefined');
    }
    return value;
  }

  // Test Result Comment
  get TestResultComment(): string | undefined {
    return this.x0028702a;
  }

  get x0028702a(): string | undefined {
    const value = this.dwResponse['0028702A']?.Value;
    return convert(value?.[0], 0x0028702a, 'string');
  }

  getTestResultComment(): string {
    const value = this.x0028702a;
    if (value === undefined) {
      throw new Error('TestResultComment is undefined');
    }
    return value;
  }

  // Test Image Validation
  get TestImageValidation(): string | undefined {
    return this.x0028702b;
  }

  get x0028702b(): string | undefined {
    const value = this.dwResponse['0028702B']?.Value;
    return convert(value?.[0], 0x0028702b, 'string');
  }

  getTestImageValidation(): string {
    const value = this.x0028702b;
    if (value === undefined) {
      throw new Error('TestImageValidation is undefined');
    }
    return value;
  }

  // Test Pattern Code Sequence
  get TestPatternCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0028702c;
  }

  get x0028702c(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0028702C']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTestPatternCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0028702c;
    if (value === undefined) {
      throw new Error('TestPatternCodeSequence is undefined');
    }
    return value;
  }

  // Measurement Pattern Code Sequence
  get MeasurementPatternCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0028702d;
  }

  get x0028702d(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0028702D']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMeasurementPatternCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0028702d;
    if (value === undefined) {
      throw new Error('MeasurementPatternCodeSequence is undefined');
    }
    return value;
  }

  // Visual Evaluation Method Code Sequence
  get VisualEvaluationMethodCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0028702e;
  }

  get x0028702e(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0028702E']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVisualEvaluationMethodCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0028702e;
    if (value === undefined) {
      throw new Error('VisualEvaluationMethodCodeSequence is undefined');
    }
    return value;
  }

  // Data Point Rows
  get DataPointRows(): number | undefined {
    return this.x00289001;
  }

  get x00289001(): number | undefined {
    const value = this.dwResponse['00289001']?.Value;
    return convert(value?.[0], 0x00289001, 'number');
  }

  getDataPointRows(): number {
    const value = this.x00289001;
    if (value === undefined) {
      throw new Error('DataPointRows is undefined');
    }
    return value;
  }

  // Data Point Columns
  get DataPointColumns(): number | undefined {
    return this.x00289002;
  }

  get x00289002(): number | undefined {
    const value = this.dwResponse['00289002']?.Value;
    return convert(value?.[0], 0x00289002, 'number');
  }

  getDataPointColumns(): number {
    const value = this.x00289002;
    if (value === undefined) {
      throw new Error('DataPointColumns is undefined');
    }
    return value;
  }

  // Signal Domain Columns
  get SignalDomainColumns(): string | undefined {
    return this.x00289003;
  }

  get x00289003(): string | undefined {
    const value = this.dwResponse['00289003']?.Value;
    return convert(value?.[0], 0x00289003, 'string');
  }

  getSignalDomainColumns(): string {
    const value = this.x00289003;
    if (value === undefined) {
      throw new Error('SignalDomainColumns is undefined');
    }
    return value;
  }

  // Largest Monochrome Pixel Value
  get LargestMonochromePixelValue(): number | undefined {
    return this.x00289099;
  }

  get x00289099(): number | undefined {
    const value = this.dwResponse['00289099']?.Value;
    return convert(value?.[0], 0x00289099, 'number');
  }

  getLargestMonochromePixelValue(): number {
    const value = this.x00289099;
    if (value === undefined) {
      throw new Error('LargestMonochromePixelValue is undefined');
    }
    return value;
  }

  // Data Representation
  get DataRepresentation(): string | undefined {
    return this.x00289108;
  }

  get x00289108(): string | undefined {
    const value = this.dwResponse['00289108']?.Value;
    return convert(value?.[0], 0x00289108, 'string');
  }

  getDataRepresentation(): string {
    const value = this.x00289108;
    if (value === undefined) {
      throw new Error('DataRepresentation is undefined');
    }
    return value;
  }

  // Pixel Measures Sequence
  get PixelMeasuresSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00289110;
  }

  get x00289110(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00289110']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPixelMeasuresSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00289110;
    if (value === undefined) {
      throw new Error('PixelMeasuresSequence is undefined');
    }
    return value;
  }

  // Frame VOI LUT Sequence
  get FrameVOILUTSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00289132;
  }

  get x00289132(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00289132']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFrameVOILUTSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00289132;
    if (value === undefined) {
      throw new Error('FrameVOILUTSequence is undefined');
    }
    return value;
  }

  // Pixel Value Transformation Sequence
  get PixelValueTransformationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00289145;
  }

  get x00289145(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00289145']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPixelValueTransformationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00289145;
    if (value === undefined) {
      throw new Error('PixelValueTransformationSequence is undefined');
    }
    return value;
  }

  // Signal Domain Rows
  get SignalDomainRows(): string | undefined {
    return this.x00289235;
  }

  get x00289235(): string | undefined {
    const value = this.dwResponse['00289235']?.Value;
    return convert(value?.[0], 0x00289235, 'string');
  }

  getSignalDomainRows(): string {
    const value = this.x00289235;
    if (value === undefined) {
      throw new Error('SignalDomainRows is undefined');
    }
    return value;
  }

  // Display Filter Percentage
  get DisplayFilterPercentage(): number | undefined {
    return this.x00289411;
  }

  get x00289411(): number | undefined {
    const value = this.dwResponse['00289411']?.Value;
    return convert(value?.[0], 0x00289411, 'number');
  }

  getDisplayFilterPercentage(): number {
    const value = this.x00289411;
    if (value === undefined) {
      throw new Error('DisplayFilterPercentage is undefined');
    }
    return value;
  }

  // Frame Pixel Shift Sequence
  get FramePixelShiftSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00289415;
  }

  get x00289415(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00289415']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFramePixelShiftSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00289415;
    if (value === undefined) {
      throw new Error('FramePixelShiftSequence is undefined');
    }
    return value;
  }

  // Subtraction Item ID
  get SubtractionItemID(): number | undefined {
    return this.x00289416;
  }

  get x00289416(): number | undefined {
    const value = this.dwResponse['00289416']?.Value;
    return convert(value?.[0], 0x00289416, 'number');
  }

  getSubtractionItemID(): number {
    const value = this.x00289416;
    if (value === undefined) {
      throw new Error('SubtractionItemID is undefined');
    }
    return value;
  }

  // Pixel Intensity Relationship LUT Sequence
  get PixelIntensityRelationshipLUTSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00289422;
  }

  get x00289422(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00289422']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPixelIntensityRelationshipLUTSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00289422;
    if (value === undefined) {
      throw new Error('PixelIntensityRelationshipLUTSequence is undefined');
    }
    return value;
  }

  // Frame Pixel Data Properties Sequence
  get FramePixelDataPropertiesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00289443;
  }

  get x00289443(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00289443']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFramePixelDataPropertiesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00289443;
    if (value === undefined) {
      throw new Error('FramePixelDataPropertiesSequence is undefined');
    }
    return value;
  }

  // Geometrical Properties
  get GeometricalProperties(): string | undefined {
    return this.x00289444;
  }

  get x00289444(): string | undefined {
    const value = this.dwResponse['00289444']?.Value;
    return convert(value?.[0], 0x00289444, 'string');
  }

  getGeometricalProperties(): string {
    const value = this.x00289444;
    if (value === undefined) {
      throw new Error('GeometricalProperties is undefined');
    }
    return value;
  }

  // Geometric Maximum Distortion
  get GeometricMaximumDistortion(): number | undefined {
    return this.x00289445;
  }

  get x00289445(): number | undefined {
    const value = this.dwResponse['00289445']?.Value;
    return convert(value?.[0], 0x00289445, 'number');
  }

  getGeometricMaximumDistortion(): number {
    const value = this.x00289445;
    if (value === undefined) {
      throw new Error('GeometricMaximumDistortion is undefined');
    }
    return value;
  }

  // Image Processing Applied
  get ImageProcessingApplied(): Array<string | undefined> | undefined {
    return this.x00289446;
  }

  get x00289446(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00289446']?.Value;
    return convert(value, 0x00289446, 'Array<string | undefined>');
  }

  getImageProcessingApplied(): Array<string | undefined> {
    const value = this.x00289446;
    if (value === undefined) {
      throw new Error('ImageProcessingApplied is undefined');
    }
    return value;
  }

  // Mask Selection Mode
  get MaskSelectionMode(): string | undefined {
    return this.x00289454;
  }

  get x00289454(): string | undefined {
    const value = this.dwResponse['00289454']?.Value;
    return convert(value?.[0], 0x00289454, 'string');
  }

  getMaskSelectionMode(): string {
    const value = this.x00289454;
    if (value === undefined) {
      throw new Error('MaskSelectionMode is undefined');
    }
    return value;
  }

  // LUT Function
  get LUTFunction(): string | undefined {
    return this.x00289474;
  }

  get x00289474(): string | undefined {
    const value = this.dwResponse['00289474']?.Value;
    return convert(value?.[0], 0x00289474, 'string');
  }

  getLUTFunction(): string {
    const value = this.x00289474;
    if (value === undefined) {
      throw new Error('LUTFunction is undefined');
    }
    return value;
  }

  // Mask Visibility Percentage
  get MaskVisibilityPercentage(): number | undefined {
    return this.x00289478;
  }

  get x00289478(): number | undefined {
    const value = this.dwResponse['00289478']?.Value;
    return convert(value?.[0], 0x00289478, 'number');
  }

  getMaskVisibilityPercentage(): number {
    const value = this.x00289478;
    if (value === undefined) {
      throw new Error('MaskVisibilityPercentage is undefined');
    }
    return value;
  }

  // Pixel Shift Sequence
  get PixelShiftSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00289501;
  }

  get x00289501(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00289501']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPixelShiftSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00289501;
    if (value === undefined) {
      throw new Error('PixelShiftSequence is undefined');
    }
    return value;
  }

  // Region Pixel Shift Sequence
  get RegionPixelShiftSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00289502;
  }

  get x00289502(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00289502']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRegionPixelShiftSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00289502;
    if (value === undefined) {
      throw new Error('RegionPixelShiftSequence is undefined');
    }
    return value;
  }

  // Vertices of the Region
  get VerticesOfTheRegion(): Array<Uint8Array | undefined> | undefined {
    return this.x00289503;
  }

  get x00289503(): Array<Uint8Array | undefined> | undefined {
    const value = this.dwResponse['00289503']?.Value;
    return convert(value, 0x00289503, 'Array<Uint8Array | undefined>');
  }

  getVerticesOfTheRegion(): Array<Uint8Array | undefined> {
    const value = this.x00289503;
    if (value === undefined) {
      throw new Error('VerticesOfTheRegion is undefined');
    }
    return value;
  }

  // Multi-frame Presentation Sequence
  get MultiFramePresentationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00289505;
  }

  get x00289505(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00289505']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMultiFramePresentationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00289505;
    if (value === undefined) {
      throw new Error('MultiFramePresentationSequence is undefined');
    }
    return value;
  }

  // Pixel Shift Frame Range
  get PixelShiftFrameRange(): Array<number | undefined> | undefined {
    return this.x00289506;
  }

  get x00289506(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00289506']?.Value;
    return convert(value, 0x00289506, 'Array<number | undefined>');
  }

  getPixelShiftFrameRange(): Array<number | undefined> {
    const value = this.x00289506;
    if (value === undefined) {
      throw new Error('PixelShiftFrameRange is undefined');
    }
    return value;
  }

  // LUT Frame Range
  get LUTFrameRange(): Array<number | undefined> | undefined {
    return this.x00289507;
  }

  get x00289507(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00289507']?.Value;
    return convert(value, 0x00289507, 'Array<number | undefined>');
  }

  getLUTFrameRange(): Array<number | undefined> {
    const value = this.x00289507;
    if (value === undefined) {
      throw new Error('LUTFrameRange is undefined');
    }
    return value;
  }

  // Image to Equipment Mapping Matrix
  get ImageToEquipmentMappingMatrix(): Array<number | undefined> | undefined {
    return this.x00289520;
  }

  get x00289520(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00289520']?.Value;
    return convert(value, 0x00289520, 'Array<number | undefined>');
  }

  getImageToEquipmentMappingMatrix(): Array<number | undefined> {
    const value = this.x00289520;
    if (value === undefined) {
      throw new Error('ImageToEquipmentMappingMatrix is undefined');
    }
    return value;
  }

  // Equipment Coordinate System Identification
  get EquipmentCoordinateSystemIdentification(): string | undefined {
    return this.x00289537;
  }

  get x00289537(): string | undefined {
    const value = this.dwResponse['00289537']?.Value;
    return convert(value?.[0], 0x00289537, 'string');
  }

  getEquipmentCoordinateSystemIdentification(): string {
    const value = this.x00289537;
    if (value === undefined) {
      throw new Error('EquipmentCoordinateSystemIdentification is undefined');
    }
    return value;
  }

  // Study Status ID
  get StudyStatusID(): string | undefined {
    return this.x0032000a;
  }

  get x0032000a(): string | undefined {
    const value = this.dwResponse['0032000A']?.Value;
    return convert(value?.[0], 0x0032000a, 'string');
  }

  getStudyStatusID(): string {
    const value = this.x0032000a;
    if (value === undefined) {
      throw new Error('StudyStatusID is undefined');
    }
    return value;
  }

  // Study Priority ID
  get StudyPriorityID(): string | undefined {
    return this.x0032000c;
  }

  get x0032000c(): string | undefined {
    const value = this.dwResponse['0032000C']?.Value;
    return convert(value?.[0], 0x0032000c, 'string');
  }

  getStudyPriorityID(): string {
    const value = this.x0032000c;
    if (value === undefined) {
      throw new Error('StudyPriorityID is undefined');
    }
    return value;
  }

  // Study ID Issuer
  get StudyIDIssuer(): string | undefined {
    return this.x00320012;
  }

  get x00320012(): string | undefined {
    const value = this.dwResponse['00320012']?.Value;
    return convert(value?.[0], 0x00320012, 'string');
  }

  getStudyIDIssuer(): string {
    const value = this.x00320012;
    if (value === undefined) {
      throw new Error('StudyIDIssuer is undefined');
    }
    return value;
  }

  // Study Verified Date
  get StudyVerifiedDate(): Date | undefined {
    return this.x00320032;
  }

  get x00320032(): Date | undefined {
    const value = this.dwResponse['00320032']?.Value;
    return convert(value?.[0], 0x00320032, 'Date');
  }

  getStudyVerifiedDate(): Date {
    const value = this.x00320032;
    if (value === undefined) {
      throw new Error('StudyVerifiedDate is undefined');
    }
    return value;
  }

  // Study Verified Time
  get StudyVerifiedTime(): string | undefined {
    return this.x00320033;
  }

  get x00320033(): string | undefined {
    const value = this.dwResponse['00320033']?.Value;
    return convert(value?.[0], 0x00320033, 'string');
  }

  getStudyVerifiedTime(): string {
    const value = this.x00320033;
    if (value === undefined) {
      throw new Error('StudyVerifiedTime is undefined');
    }
    return value;
  }

  // Study Read Date
  get StudyReadDate(): Date | undefined {
    return this.x00320034;
  }

  get x00320034(): Date | undefined {
    const value = this.dwResponse['00320034']?.Value;
    return convert(value?.[0], 0x00320034, 'Date');
  }

  getStudyReadDate(): Date {
    const value = this.x00320034;
    if (value === undefined) {
      throw new Error('StudyReadDate is undefined');
    }
    return value;
  }

  // Study Read Time
  get StudyReadTime(): string | undefined {
    return this.x00320035;
  }

  get x00320035(): string | undefined {
    const value = this.dwResponse['00320035']?.Value;
    return convert(value?.[0], 0x00320035, 'string');
  }

  getStudyReadTime(): string {
    const value = this.x00320035;
    if (value === undefined) {
      throw new Error('StudyReadTime is undefined');
    }
    return value;
  }

  // Scheduled Study Start Date
  get ScheduledStudyStartDate(): Date | undefined {
    return this.x00321000;
  }

  get x00321000(): Date | undefined {
    const value = this.dwResponse['00321000']?.Value;
    return convert(value?.[0], 0x00321000, 'Date');
  }

  getScheduledStudyStartDate(): Date {
    const value = this.x00321000;
    if (value === undefined) {
      throw new Error('ScheduledStudyStartDate is undefined');
    }
    return value;
  }

  // Scheduled Study Start Time
  get ScheduledStudyStartTime(): string | undefined {
    return this.x00321001;
  }

  get x00321001(): string | undefined {
    const value = this.dwResponse['00321001']?.Value;
    return convert(value?.[0], 0x00321001, 'string');
  }

  getScheduledStudyStartTime(): string {
    const value = this.x00321001;
    if (value === undefined) {
      throw new Error('ScheduledStudyStartTime is undefined');
    }
    return value;
  }

  // Scheduled Study Stop Date
  get ScheduledStudyStopDate(): Date | undefined {
    return this.x00321010;
  }

  get x00321010(): Date | undefined {
    const value = this.dwResponse['00321010']?.Value;
    return convert(value?.[0], 0x00321010, 'Date');
  }

  getScheduledStudyStopDate(): Date {
    const value = this.x00321010;
    if (value === undefined) {
      throw new Error('ScheduledStudyStopDate is undefined');
    }
    return value;
  }

  // Scheduled Study Stop Time
  get ScheduledStudyStopTime(): string | undefined {
    return this.x00321011;
  }

  get x00321011(): string | undefined {
    const value = this.dwResponse['00321011']?.Value;
    return convert(value?.[0], 0x00321011, 'string');
  }

  getScheduledStudyStopTime(): string {
    const value = this.x00321011;
    if (value === undefined) {
      throw new Error('ScheduledStudyStopTime is undefined');
    }
    return value;
  }

  // Scheduled Study Location
  get ScheduledStudyLocation(): string | undefined {
    return this.x00321020;
  }

  get x00321020(): string | undefined {
    const value = this.dwResponse['00321020']?.Value;
    return convert(value?.[0], 0x00321020, 'string');
  }

  getScheduledStudyLocation(): string {
    const value = this.x00321020;
    if (value === undefined) {
      throw new Error('ScheduledStudyLocation is undefined');
    }
    return value;
  }

  // Scheduled Study Location AE Title
  get ScheduledStudyLocationAETitle(): Array<string | undefined> | undefined {
    return this.x00321021;
  }

  get x00321021(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00321021']?.Value;
    return convert(value, 0x00321021, 'Array<string | undefined>');
  }

  getScheduledStudyLocationAETitle(): Array<string | undefined> {
    const value = this.x00321021;
    if (value === undefined) {
      throw new Error('ScheduledStudyLocationAETitle is undefined');
    }
    return value;
  }

  // Reason for Study
  get ReasonForStudy(): string | undefined {
    return this.x00321030;
  }

  get x00321030(): string | undefined {
    const value = this.dwResponse['00321030']?.Value;
    return convert(value?.[0], 0x00321030, 'string');
  }

  getReasonForStudy(): string {
    const value = this.x00321030;
    if (value === undefined) {
      throw new Error('ReasonForStudy is undefined');
    }
    return value;
  }

  // Requesting Physician Identification Sequence
  get RequestingPhysicianIdentificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00321031;
  }

  get x00321031(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00321031']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRequestingPhysicianIdentificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00321031;
    if (value === undefined) {
      throw new Error('RequestingPhysicianIdentificationSequence is undefined');
    }
    return value;
  }

  // Requesting Physician
  get RequestingPhysician(): any | undefined {
    return this.x00321032;
  }

  get x00321032(): any | undefined {
    const value = this.dwResponse['00321032']?.Value;
    return convert(value?.[0], 0x00321032, 'any');
  }

  getRequestingPhysician(): any {
    const value = this.x00321032;
    if (value === undefined) {
      throw new Error('RequestingPhysician is undefined');
    }
    return value;
  }

  // Requesting Service
  get RequestingService(): string | undefined {
    return this.x00321033;
  }

  get x00321033(): string | undefined {
    const value = this.dwResponse['00321033']?.Value;
    return convert(value?.[0], 0x00321033, 'string');
  }

  getRequestingService(): string {
    const value = this.x00321033;
    if (value === undefined) {
      throw new Error('RequestingService is undefined');
    }
    return value;
  }

  // Requesting Service Code Sequence
  get RequestingServiceCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00321034;
  }

  get x00321034(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00321034']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRequestingServiceCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00321034;
    if (value === undefined) {
      throw new Error('RequestingServiceCodeSequence is undefined');
    }
    return value;
  }

  // Study Arrival Date
  get StudyArrivalDate(): Date | undefined {
    return this.x00321040;
  }

  get x00321040(): Date | undefined {
    const value = this.dwResponse['00321040']?.Value;
    return convert(value?.[0], 0x00321040, 'Date');
  }

  getStudyArrivalDate(): Date {
    const value = this.x00321040;
    if (value === undefined) {
      throw new Error('StudyArrivalDate is undefined');
    }
    return value;
  }

  // Study Arrival Time
  get StudyArrivalTime(): string | undefined {
    return this.x00321041;
  }

  get x00321041(): string | undefined {
    const value = this.dwResponse['00321041']?.Value;
    return convert(value?.[0], 0x00321041, 'string');
  }

  getStudyArrivalTime(): string {
    const value = this.x00321041;
    if (value === undefined) {
      throw new Error('StudyArrivalTime is undefined');
    }
    return value;
  }

  // Study Completion Date
  get StudyCompletionDate(): Date | undefined {
    return this.x00321050;
  }

  get x00321050(): Date | undefined {
    const value = this.dwResponse['00321050']?.Value;
    return convert(value?.[0], 0x00321050, 'Date');
  }

  getStudyCompletionDate(): Date {
    const value = this.x00321050;
    if (value === undefined) {
      throw new Error('StudyCompletionDate is undefined');
    }
    return value;
  }

  // Study Completion Time
  get StudyCompletionTime(): string | undefined {
    return this.x00321051;
  }

  get x00321051(): string | undefined {
    const value = this.dwResponse['00321051']?.Value;
    return convert(value?.[0], 0x00321051, 'string');
  }

  getStudyCompletionTime(): string {
    const value = this.x00321051;
    if (value === undefined) {
      throw new Error('StudyCompletionTime is undefined');
    }
    return value;
  }

  // Study Component Status ID
  get StudyComponentStatusID(): string | undefined {
    return this.x00321055;
  }

  get x00321055(): string | undefined {
    const value = this.dwResponse['00321055']?.Value;
    return convert(value?.[0], 0x00321055, 'string');
  }

  getStudyComponentStatusID(): string {
    const value = this.x00321055;
    if (value === undefined) {
      throw new Error('StudyComponentStatusID is undefined');
    }
    return value;
  }

  // Requested Procedure Description
  get RequestedProcedureDescription(): string | undefined {
    return this.x00321060;
  }

  get x00321060(): string | undefined {
    const value = this.dwResponse['00321060']?.Value;
    return convert(value?.[0], 0x00321060, 'string');
  }

  getRequestedProcedureDescription(): string {
    const value = this.x00321060;
    if (value === undefined) {
      throw new Error('RequestedProcedureDescription is undefined');
    }
    return value;
  }

  // Requested Procedure Code Sequence
  get RequestedProcedureCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00321064;
  }

  get x00321064(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00321064']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRequestedProcedureCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00321064;
    if (value === undefined) {
      throw new Error('RequestedProcedureCodeSequence is undefined');
    }
    return value;
  }

  // Requested Contrast Agent
  get RequestedContrastAgent(): string | undefined {
    return this.x00321070;
  }

  get x00321070(): string | undefined {
    const value = this.dwResponse['00321070']?.Value;
    return convert(value?.[0], 0x00321070, 'string');
  }

  getRequestedContrastAgent(): string {
    const value = this.x00321070;
    if (value === undefined) {
      throw new Error('RequestedContrastAgent is undefined');
    }
    return value;
  }

  // Referenced Patient Alias Sequence
  get ReferencedPatientAliasSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00380004;
  }

  get x00380004(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00380004']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedPatientAliasSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00380004;
    if (value === undefined) {
      throw new Error('ReferencedPatientAliasSequence is undefined');
    }
    return value;
  }

  // Visit Status ID
  get VisitStatusID(): string | undefined {
    return this.x00380008;
  }

  get x00380008(): string | undefined {
    const value = this.dwResponse['00380008']?.Value;
    return convert(value?.[0], 0x00380008, 'string');
  }

  getVisitStatusID(): string {
    const value = this.x00380008;
    if (value === undefined) {
      throw new Error('VisitStatusID is undefined');
    }
    return value;
  }

  // Admission ID
  get AdmissionID(): string | undefined {
    return this.x00380010;
  }

  get x00380010(): string | undefined {
    const value = this.dwResponse['00380010']?.Value;
    return convert(value?.[0], 0x00380010, 'string');
  }

  getAdmissionID(): string {
    const value = this.x00380010;
    if (value === undefined) {
      throw new Error('AdmissionID is undefined');
    }
    return value;
  }

  // Issuer of Admission ID
  get IssuerOfAdmissionID(): string | undefined {
    return this.x00380011;
  }

  get x00380011(): string | undefined {
    const value = this.dwResponse['00380011']?.Value;
    return convert(value?.[0], 0x00380011, 'string');
  }

  getIssuerOfAdmissionID(): string {
    const value = this.x00380011;
    if (value === undefined) {
      throw new Error('IssuerOfAdmissionID is undefined');
    }
    return value;
  }

  // Issuer of Admission ID Sequence
  get IssuerOfAdmissionIDSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00380014;
  }

  get x00380014(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00380014']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIssuerOfAdmissionIDSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00380014;
    if (value === undefined) {
      throw new Error('IssuerOfAdmissionIDSequence is undefined');
    }
    return value;
  }

  // Route of Admissions
  get RouteOfAdmissions(): string | undefined {
    return this.x00380016;
  }

  get x00380016(): string | undefined {
    const value = this.dwResponse['00380016']?.Value;
    return convert(value?.[0], 0x00380016, 'string');
  }

  getRouteOfAdmissions(): string {
    const value = this.x00380016;
    if (value === undefined) {
      throw new Error('RouteOfAdmissions is undefined');
    }
    return value;
  }

  // Scheduled Admission Date
  get ScheduledAdmissionDate(): Date | undefined {
    return this.x0038001a;
  }

  get x0038001a(): Date | undefined {
    const value = this.dwResponse['0038001A']?.Value;
    return convert(value?.[0], 0x0038001a, 'Date');
  }

  getScheduledAdmissionDate(): Date {
    const value = this.x0038001a;
    if (value === undefined) {
      throw new Error('ScheduledAdmissionDate is undefined');
    }
    return value;
  }

  // Scheduled Admission Time
  get ScheduledAdmissionTime(): string | undefined {
    return this.x0038001b;
  }

  get x0038001b(): string | undefined {
    const value = this.dwResponse['0038001B']?.Value;
    return convert(value?.[0], 0x0038001b, 'string');
  }

  getScheduledAdmissionTime(): string {
    const value = this.x0038001b;
    if (value === undefined) {
      throw new Error('ScheduledAdmissionTime is undefined');
    }
    return value;
  }

  // Scheduled Discharge Date
  get ScheduledDischargeDate(): Date | undefined {
    return this.x0038001c;
  }

  get x0038001c(): Date | undefined {
    const value = this.dwResponse['0038001C']?.Value;
    return convert(value?.[0], 0x0038001c, 'Date');
  }

  getScheduledDischargeDate(): Date {
    const value = this.x0038001c;
    if (value === undefined) {
      throw new Error('ScheduledDischargeDate is undefined');
    }
    return value;
  }

  // Scheduled Discharge Time
  get ScheduledDischargeTime(): string | undefined {
    return this.x0038001d;
  }

  get x0038001d(): string | undefined {
    const value = this.dwResponse['0038001D']?.Value;
    return convert(value?.[0], 0x0038001d, 'string');
  }

  getScheduledDischargeTime(): string {
    const value = this.x0038001d;
    if (value === undefined) {
      throw new Error('ScheduledDischargeTime is undefined');
    }
    return value;
  }

  // Scheduled Patient Institution Residence
  get ScheduledPatientInstitutionResidence(): string | undefined {
    return this.x0038001e;
  }

  get x0038001e(): string | undefined {
    const value = this.dwResponse['0038001E']?.Value;
    return convert(value?.[0], 0x0038001e, 'string');
  }

  getScheduledPatientInstitutionResidence(): string {
    const value = this.x0038001e;
    if (value === undefined) {
      throw new Error('ScheduledPatientInstitutionResidence is undefined');
    }
    return value;
  }

  // Admitting Date
  get AdmittingDate(): Date | undefined {
    return this.x00380020;
  }

  get x00380020(): Date | undefined {
    const value = this.dwResponse['00380020']?.Value;
    return convert(value?.[0], 0x00380020, 'Date');
  }

  getAdmittingDate(): Date {
    const value = this.x00380020;
    if (value === undefined) {
      throw new Error('AdmittingDate is undefined');
    }
    return value;
  }

  // Admitting Time
  get AdmittingTime(): string | undefined {
    return this.x00380021;
  }

  get x00380021(): string | undefined {
    const value = this.dwResponse['00380021']?.Value;
    return convert(value?.[0], 0x00380021, 'string');
  }

  getAdmittingTime(): string {
    const value = this.x00380021;
    if (value === undefined) {
      throw new Error('AdmittingTime is undefined');
    }
    return value;
  }

  // Discharge Date
  get DischargeDate(): Date | undefined {
    return this.x00380030;
  }

  get x00380030(): Date | undefined {
    const value = this.dwResponse['00380030']?.Value;
    return convert(value?.[0], 0x00380030, 'Date');
  }

  getDischargeDate(): Date {
    const value = this.x00380030;
    if (value === undefined) {
      throw new Error('DischargeDate is undefined');
    }
    return value;
  }

  // Discharge Time
  get DischargeTime(): string | undefined {
    return this.x00380032;
  }

  get x00380032(): string | undefined {
    const value = this.dwResponse['00380032']?.Value;
    return convert(value?.[0], 0x00380032, 'string');
  }

  getDischargeTime(): string {
    const value = this.x00380032;
    if (value === undefined) {
      throw new Error('DischargeTime is undefined');
    }
    return value;
  }

  // Discharge Diagnosis Description
  get DischargeDiagnosisDescription(): string | undefined {
    return this.x00380040;
  }

  get x00380040(): string | undefined {
    const value = this.dwResponse['00380040']?.Value;
    return convert(value?.[0], 0x00380040, 'string');
  }

  getDischargeDiagnosisDescription(): string {
    const value = this.x00380040;
    if (value === undefined) {
      throw new Error('DischargeDiagnosisDescription is undefined');
    }
    return value;
  }

  // Discharge Diagnosis Code Sequence
  get DischargeDiagnosisCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00380044;
  }

  get x00380044(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00380044']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDischargeDiagnosisCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00380044;
    if (value === undefined) {
      throw new Error('DischargeDiagnosisCodeSequence is undefined');
    }
    return value;
  }

  // Special Needs
  get SpecialNeeds(): string | undefined {
    return this.x00380050;
  }

  get x00380050(): string | undefined {
    const value = this.dwResponse['00380050']?.Value;
    return convert(value?.[0], 0x00380050, 'string');
  }

  getSpecialNeeds(): string {
    const value = this.x00380050;
    if (value === undefined) {
      throw new Error('SpecialNeeds is undefined');
    }
    return value;
  }

  // Service Episode ID
  get ServiceEpisodeID(): string | undefined {
    return this.x00380060;
  }

  get x00380060(): string | undefined {
    const value = this.dwResponse['00380060']?.Value;
    return convert(value?.[0], 0x00380060, 'string');
  }

  getServiceEpisodeID(): string {
    const value = this.x00380060;
    if (value === undefined) {
      throw new Error('ServiceEpisodeID is undefined');
    }
    return value;
  }

  // Issuer of Service Episode ID
  get IssuerOfServiceEpisodeID(): string | undefined {
    return this.x00380061;
  }

  get x00380061(): string | undefined {
    const value = this.dwResponse['00380061']?.Value;
    return convert(value?.[0], 0x00380061, 'string');
  }

  getIssuerOfServiceEpisodeID(): string {
    const value = this.x00380061;
    if (value === undefined) {
      throw new Error('IssuerOfServiceEpisodeID is undefined');
    }
    return value;
  }

  // Service Episode Description
  get ServiceEpisodeDescription(): string | undefined {
    return this.x00380062;
  }

  get x00380062(): string | undefined {
    const value = this.dwResponse['00380062']?.Value;
    return convert(value?.[0], 0x00380062, 'string');
  }

  getServiceEpisodeDescription(): string {
    const value = this.x00380062;
    if (value === undefined) {
      throw new Error('ServiceEpisodeDescription is undefined');
    }
    return value;
  }

  // Issuer of Service Episode ID Sequence
  get IssuerOfServiceEpisodeIDSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00380064;
  }

  get x00380064(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00380064']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIssuerOfServiceEpisodeIDSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00380064;
    if (value === undefined) {
      throw new Error('IssuerOfServiceEpisodeIDSequence is undefined');
    }
    return value;
  }

  // Pertinent Documents Sequence
  get PertinentDocumentsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00380100;
  }

  get x00380100(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00380100']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPertinentDocumentsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00380100;
    if (value === undefined) {
      throw new Error('PertinentDocumentsSequence is undefined');
    }
    return value;
  }

  // Current Patient Location
  get CurrentPatientLocation(): string | undefined {
    return this.x00380300;
  }

  get x00380300(): string | undefined {
    const value = this.dwResponse['00380300']?.Value;
    return convert(value?.[0], 0x00380300, 'string');
  }

  getCurrentPatientLocation(): string {
    const value = this.x00380300;
    if (value === undefined) {
      throw new Error('CurrentPatientLocation is undefined');
    }
    return value;
  }

  // Patient's Institution Residence
  get PatientInstitutionResidence(): string | undefined {
    return this.x00380400;
  }

  get x00380400(): string | undefined {
    const value = this.dwResponse['00380400']?.Value;
    return convert(value?.[0], 0x00380400, 'string');
  }

  getPatientInstitutionResidence(): string {
    const value = this.x00380400;
    if (value === undefined) {
      throw new Error('PatientInstitutionResidence is undefined');
    }
    return value;
  }

  // Patient State
  get PatientState(): string | undefined {
    return this.x00380500;
  }

  get x00380500(): string | undefined {
    const value = this.dwResponse['00380500']?.Value;
    return convert(value?.[0], 0x00380500, 'string');
  }

  getPatientState(): string {
    const value = this.x00380500;
    if (value === undefined) {
      throw new Error('PatientState is undefined');
    }
    return value;
  }

  // Patient Clinical Trial Participation Sequence
  get PatientClinicalTrialParticipationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00380502;
  }

  get x00380502(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00380502']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPatientClinicalTrialParticipationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00380502;
    if (value === undefined) {
      throw new Error('PatientClinicalTrialParticipationSequence is undefined');
    }
    return value;
  }

  // Waveform Originality
  get WaveformOriginality(): string | undefined {
    return this.x003a0004;
  }

  get x003a0004(): string | undefined {
    const value = this.dwResponse['003A0004']?.Value;
    return convert(value?.[0], 0x003a0004, 'string');
  }

  getWaveformOriginality(): string {
    const value = this.x003a0004;
    if (value === undefined) {
      throw new Error('WaveformOriginality is undefined');
    }
    return value;
  }

  // Number of Waveform Channels
  get NumberOfWaveformChannels(): number | undefined {
    return this.x003a0005;
  }

  get x003a0005(): number | undefined {
    const value = this.dwResponse['003A0005']?.Value;
    return convert(value?.[0], 0x003a0005, 'number');
  }

  getNumberOfWaveformChannels(): number {
    const value = this.x003a0005;
    if (value === undefined) {
      throw new Error('NumberOfWaveformChannels is undefined');
    }
    return value;
  }

  // Number of Waveform Samples
  get NumberOfWaveformSamples(): number | undefined {
    return this.x003a0010;
  }

  get x003a0010(): number | undefined {
    const value = this.dwResponse['003A0010']?.Value;
    return convert(value?.[0], 0x003a0010, 'number');
  }

  getNumberOfWaveformSamples(): number {
    const value = this.x003a0010;
    if (value === undefined) {
      throw new Error('NumberOfWaveformSamples is undefined');
    }
    return value;
  }

  // Sampling Frequency
  get SamplingFrequency(): number | undefined {
    return this.x003a001a;
  }

  get x003a001a(): number | undefined {
    const value = this.dwResponse['003A001A']?.Value;
    return convert(value?.[0], 0x003a001a, 'number');
  }

  getSamplingFrequency(): number {
    const value = this.x003a001a;
    if (value === undefined) {
      throw new Error('SamplingFrequency is undefined');
    }
    return value;
  }

  // Multiplex Group Label
  get MultiplexGroupLabel(): string | undefined {
    return this.x003a0020;
  }

  get x003a0020(): string | undefined {
    const value = this.dwResponse['003A0020']?.Value;
    return convert(value?.[0], 0x003a0020, 'string');
  }

  getMultiplexGroupLabel(): string {
    const value = this.x003a0020;
    if (value === undefined) {
      throw new Error('MultiplexGroupLabel is undefined');
    }
    return value;
  }

  // Channel Definition Sequence
  get ChannelDefinitionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x003a0200;
  }

  get x003a0200(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['003A0200']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getChannelDefinitionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x003a0200;
    if (value === undefined) {
      throw new Error('ChannelDefinitionSequence is undefined');
    }
    return value;
  }

  // Waveform Channel Number
  get WaveformChannelNumber(): number | undefined {
    return this.x003a0202;
  }

  get x003a0202(): number | undefined {
    const value = this.dwResponse['003A0202']?.Value;
    return convert(value?.[0], 0x003a0202, 'number');
  }

  getWaveformChannelNumber(): number {
    const value = this.x003a0202;
    if (value === undefined) {
      throw new Error('WaveformChannelNumber is undefined');
    }
    return value;
  }

  // Channel Label
  get ChannelLabel(): string | undefined {
    return this.x003a0203;
  }

  get x003a0203(): string | undefined {
    const value = this.dwResponse['003A0203']?.Value;
    return convert(value?.[0], 0x003a0203, 'string');
  }

  getChannelLabel(): string {
    const value = this.x003a0203;
    if (value === undefined) {
      throw new Error('ChannelLabel is undefined');
    }
    return value;
  }

  // Channel Status
  get ChannelStatus(): Array<string | undefined> | undefined {
    return this.x003a0205;
  }

  get x003a0205(): Array<string | undefined> | undefined {
    const value = this.dwResponse['003A0205']?.Value;
    return convert(value, 0x003a0205, 'Array<string | undefined>');
  }

  getChannelStatus(): Array<string | undefined> {
    const value = this.x003a0205;
    if (value === undefined) {
      throw new Error('ChannelStatus is undefined');
    }
    return value;
  }

  // Channel Source Sequence
  get ChannelSourceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x003a0208;
  }

  get x003a0208(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['003A0208']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getChannelSourceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x003a0208;
    if (value === undefined) {
      throw new Error('ChannelSourceSequence is undefined');
    }
    return value;
  }

  // Channel Source Modifiers Sequence
  get ChannelSourceModifiersSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x003a0209;
  }

  get x003a0209(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['003A0209']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getChannelSourceModifiersSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x003a0209;
    if (value === undefined) {
      throw new Error('ChannelSourceModifiersSequence is undefined');
    }
    return value;
  }

  // Source Waveform Sequence
  get SourceWaveformSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x003a020a;
  }

  get x003a020a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['003A020A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSourceWaveformSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x003a020a;
    if (value === undefined) {
      throw new Error('SourceWaveformSequence is undefined');
    }
    return value;
  }

  // Channel Derivation Description
  get ChannelDerivationDescription(): string | undefined {
    return this.x003a020c;
  }

  get x003a020c(): string | undefined {
    const value = this.dwResponse['003A020C']?.Value;
    return convert(value?.[0], 0x003a020c, 'string');
  }

  getChannelDerivationDescription(): string {
    const value = this.x003a020c;
    if (value === undefined) {
      throw new Error('ChannelDerivationDescription is undefined');
    }
    return value;
  }

  // Channel Sensitivity
  get ChannelSensitivity(): number | undefined {
    return this.x003a0210;
  }

  get x003a0210(): number | undefined {
    const value = this.dwResponse['003A0210']?.Value;
    return convert(value?.[0], 0x003a0210, 'number');
  }

  getChannelSensitivity(): number {
    const value = this.x003a0210;
    if (value === undefined) {
      throw new Error('ChannelSensitivity is undefined');
    }
    return value;
  }

  // Channel Sensitivity Units Sequence
  get ChannelSensitivityUnitsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x003a0211;
  }

  get x003a0211(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['003A0211']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getChannelSensitivityUnitsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x003a0211;
    if (value === undefined) {
      throw new Error('ChannelSensitivityUnitsSequence is undefined');
    }
    return value;
  }

  // Channel Sensitivity Correction Factor
  get ChannelSensitivityCorrectionFactor(): number | undefined {
    return this.x003a0212;
  }

  get x003a0212(): number | undefined {
    const value = this.dwResponse['003A0212']?.Value;
    return convert(value?.[0], 0x003a0212, 'number');
  }

  getChannelSensitivityCorrectionFactor(): number {
    const value = this.x003a0212;
    if (value === undefined) {
      throw new Error('ChannelSensitivityCorrectionFactor is undefined');
    }
    return value;
  }

  // Channel Baseline
  get ChannelBaseline(): number | undefined {
    return this.x003a0213;
  }

  get x003a0213(): number | undefined {
    const value = this.dwResponse['003A0213']?.Value;
    return convert(value?.[0], 0x003a0213, 'number');
  }

  getChannelBaseline(): number {
    const value = this.x003a0213;
    if (value === undefined) {
      throw new Error('ChannelBaseline is undefined');
    }
    return value;
  }

  // Channel Time Skew
  get ChannelTimeSkew(): number | undefined {
    return this.x003a0214;
  }

  get x003a0214(): number | undefined {
    const value = this.dwResponse['003A0214']?.Value;
    return convert(value?.[0], 0x003a0214, 'number');
  }

  getChannelTimeSkew(): number {
    const value = this.x003a0214;
    if (value === undefined) {
      throw new Error('ChannelTimeSkew is undefined');
    }
    return value;
  }

  // Channel Sample Skew
  get ChannelSampleSkew(): number | undefined {
    return this.x003a0215;
  }

  get x003a0215(): number | undefined {
    const value = this.dwResponse['003A0215']?.Value;
    return convert(value?.[0], 0x003a0215, 'number');
  }

  getChannelSampleSkew(): number {
    const value = this.x003a0215;
    if (value === undefined) {
      throw new Error('ChannelSampleSkew is undefined');
    }
    return value;
  }

  // Channel Offset
  get ChannelOffset(): number | undefined {
    return this.x003a0218;
  }

  get x003a0218(): number | undefined {
    const value = this.dwResponse['003A0218']?.Value;
    return convert(value?.[0], 0x003a0218, 'number');
  }

  getChannelOffset(): number {
    const value = this.x003a0218;
    if (value === undefined) {
      throw new Error('ChannelOffset is undefined');
    }
    return value;
  }

  // Waveform Bits Stored
  get WaveformBitsStored(): number | undefined {
    return this.x003a021a;
  }

  get x003a021a(): number | undefined {
    const value = this.dwResponse['003A021A']?.Value;
    return convert(value?.[0], 0x003a021a, 'number');
  }

  getWaveformBitsStored(): number {
    const value = this.x003a021a;
    if (value === undefined) {
      throw new Error('WaveformBitsStored is undefined');
    }
    return value;
  }

  // Filter Low Frequency
  get FilterLowFrequency(): number | undefined {
    return this.x003a0220;
  }

  get x003a0220(): number | undefined {
    const value = this.dwResponse['003A0220']?.Value;
    return convert(value?.[0], 0x003a0220, 'number');
  }

  getFilterLowFrequency(): number {
    const value = this.x003a0220;
    if (value === undefined) {
      throw new Error('FilterLowFrequency is undefined');
    }
    return value;
  }

  // Filter High Frequency
  get FilterHighFrequency(): number | undefined {
    return this.x003a0221;
  }

  get x003a0221(): number | undefined {
    const value = this.dwResponse['003A0221']?.Value;
    return convert(value?.[0], 0x003a0221, 'number');
  }

  getFilterHighFrequency(): number {
    const value = this.x003a0221;
    if (value === undefined) {
      throw new Error('FilterHighFrequency is undefined');
    }
    return value;
  }

  // Notch Filter Frequency
  get NotchFilterFrequency(): number | undefined {
    return this.x003a0222;
  }

  get x003a0222(): number | undefined {
    const value = this.dwResponse['003A0222']?.Value;
    return convert(value?.[0], 0x003a0222, 'number');
  }

  getNotchFilterFrequency(): number {
    const value = this.x003a0222;
    if (value === undefined) {
      throw new Error('NotchFilterFrequency is undefined');
    }
    return value;
  }

  // Notch Filter Bandwidth
  get NotchFilterBandwidth(): number | undefined {
    return this.x003a0223;
  }

  get x003a0223(): number | undefined {
    const value = this.dwResponse['003A0223']?.Value;
    return convert(value?.[0], 0x003a0223, 'number');
  }

  getNotchFilterBandwidth(): number {
    const value = this.x003a0223;
    if (value === undefined) {
      throw new Error('NotchFilterBandwidth is undefined');
    }
    return value;
  }

  // Waveform Data Display Scale
  get WaveformDataDisplayScale(): number | undefined {
    return this.x003a0230;
  }

  get x003a0230(): number | undefined {
    const value = this.dwResponse['003A0230']?.Value;
    return convert(value?.[0], 0x003a0230, 'number');
  }

  getWaveformDataDisplayScale(): number {
    const value = this.x003a0230;
    if (value === undefined) {
      throw new Error('WaveformDataDisplayScale is undefined');
    }
    return value;
  }

  // Waveform Display Background CIELab Value
  get WaveformDisplayBackgroundCIELabValue(): Array<number | undefined> | undefined {
    return this.x003a0231;
  }

  get x003a0231(): Array<number | undefined> | undefined {
    const value = this.dwResponse['003A0231']?.Value;
    return convert(value, 0x003a0231, 'Array<number | undefined>');
  }

  getWaveformDisplayBackgroundCIELabValue(): Array<number | undefined> {
    const value = this.x003a0231;
    if (value === undefined) {
      throw new Error('WaveformDisplayBackgroundCIELabValue is undefined');
    }
    return value;
  }

  // Waveform Presentation Group Sequence
  get WaveformPresentationGroupSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x003a0240;
  }

  get x003a0240(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['003A0240']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getWaveformPresentationGroupSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x003a0240;
    if (value === undefined) {
      throw new Error('WaveformPresentationGroupSequence is undefined');
    }
    return value;
  }

  // Presentation Group Number
  get PresentationGroupNumber(): number | undefined {
    return this.x003a0241;
  }

  get x003a0241(): number | undefined {
    const value = this.dwResponse['003A0241']?.Value;
    return convert(value?.[0], 0x003a0241, 'number');
  }

  getPresentationGroupNumber(): number {
    const value = this.x003a0241;
    if (value === undefined) {
      throw new Error('PresentationGroupNumber is undefined');
    }
    return value;
  }

  // Channel Display Sequence
  get ChannelDisplaySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x003a0242;
  }

  get x003a0242(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['003A0242']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getChannelDisplaySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x003a0242;
    if (value === undefined) {
      throw new Error('ChannelDisplaySequence is undefined');
    }
    return value;
  }

  // Channel Recommended Display CIELab Value
  get ChannelRecommendedDisplayCIELabValue(): Array<number | undefined> | undefined {
    return this.x003a0244;
  }

  get x003a0244(): Array<number | undefined> | undefined {
    const value = this.dwResponse['003A0244']?.Value;
    return convert(value, 0x003a0244, 'Array<number | undefined>');
  }

  getChannelRecommendedDisplayCIELabValue(): Array<number | undefined> {
    const value = this.x003a0244;
    if (value === undefined) {
      throw new Error('ChannelRecommendedDisplayCIELabValue is undefined');
    }
    return value;
  }

  // Channel Position
  get ChannelPosition(): number | undefined {
    return this.x003a0245;
  }

  get x003a0245(): number | undefined {
    const value = this.dwResponse['003A0245']?.Value;
    return convert(value?.[0], 0x003a0245, 'number');
  }

  getChannelPosition(): number {
    const value = this.x003a0245;
    if (value === undefined) {
      throw new Error('ChannelPosition is undefined');
    }
    return value;
  }

  // Display Shading Flag
  get DisplayShadingFlag(): string | undefined {
    return this.x003a0246;
  }

  get x003a0246(): string | undefined {
    const value = this.dwResponse['003A0246']?.Value;
    return convert(value?.[0], 0x003a0246, 'string');
  }

  getDisplayShadingFlag(): string {
    const value = this.x003a0246;
    if (value === undefined) {
      throw new Error('DisplayShadingFlag is undefined');
    }
    return value;
  }

  // Fractional Channel Display Scale
  get FractionalChannelDisplayScale(): number | undefined {
    return this.x003a0247;
  }

  get x003a0247(): number | undefined {
    const value = this.dwResponse['003A0247']?.Value;
    return convert(value?.[0], 0x003a0247, 'number');
  }

  getFractionalChannelDisplayScale(): number {
    const value = this.x003a0247;
    if (value === undefined) {
      throw new Error('FractionalChannelDisplayScale is undefined');
    }
    return value;
  }

  // Absolute Channel Display Scale
  get AbsoluteChannelDisplayScale(): number | undefined {
    return this.x003a0248;
  }

  get x003a0248(): number | undefined {
    const value = this.dwResponse['003A0248']?.Value;
    return convert(value?.[0], 0x003a0248, 'number');
  }

  getAbsoluteChannelDisplayScale(): number {
    const value = this.x003a0248;
    if (value === undefined) {
      throw new Error('AbsoluteChannelDisplayScale is undefined');
    }
    return value;
  }

  // Multiplexed Audio Channels Description Code Sequence
  get MultiplexedAudioChannelsDescriptionCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x003a0300;
  }

  get x003a0300(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['003A0300']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMultiplexedAudioChannelsDescriptionCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x003a0300;
    if (value === undefined) {
      throw new Error('MultiplexedAudioChannelsDescriptionCodeSequence is undefined');
    }
    return value;
  }

  // Channel Identification Code
  get ChannelIdentificationCode(): number | undefined {
    return this.x003a0301;
  }

  get x003a0301(): number | undefined {
    const value = this.dwResponse['003A0301']?.Value;
    return convert(value?.[0], 0x003a0301, 'number');
  }

  getChannelIdentificationCode(): number {
    const value = this.x003a0301;
    if (value === undefined) {
      throw new Error('ChannelIdentificationCode is undefined');
    }
    return value;
  }

  // Channel Mode
  get ChannelMode(): string | undefined {
    return this.x003a0302;
  }

  get x003a0302(): string | undefined {
    const value = this.dwResponse['003A0302']?.Value;
    return convert(value?.[0], 0x003a0302, 'string');
  }

  getChannelMode(): string {
    const value = this.x003a0302;
    if (value === undefined) {
      throw new Error('ChannelMode is undefined');
    }
    return value;
  }

  // Scheduled Station AE Title
  get ScheduledStationAETitle(): Array<string | undefined> | undefined {
    return this.x00400001;
  }

  get x00400001(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00400001']?.Value;
    return convert(value, 0x00400001, 'Array<string | undefined>');
  }

  getScheduledStationAETitle(): Array<string | undefined> {
    const value = this.x00400001;
    if (value === undefined) {
      throw new Error('ScheduledStationAETitle is undefined');
    }
    return value;
  }

  // Scheduled Procedure Step Start Date
  get ScheduledProcedureStepStartDate(): Date | undefined {
    return this.x00400002;
  }

  get x00400002(): Date | undefined {
    const value = this.dwResponse['00400002']?.Value;
    return convert(value?.[0], 0x00400002, 'Date');
  }

  getScheduledProcedureStepStartDate(): Date {
    const value = this.x00400002;
    if (value === undefined) {
      throw new Error('ScheduledProcedureStepStartDate is undefined');
    }
    return value;
  }

  // Scheduled Procedure Step Start Time
  get ScheduledProcedureStepStartTime(): string | undefined {
    return this.x00400003;
  }

  get x00400003(): string | undefined {
    const value = this.dwResponse['00400003']?.Value;
    return convert(value?.[0], 0x00400003, 'string');
  }

  getScheduledProcedureStepStartTime(): string {
    const value = this.x00400003;
    if (value === undefined) {
      throw new Error('ScheduledProcedureStepStartTime is undefined');
    }
    return value;
  }

  // Scheduled Procedure Step End Date
  get ScheduledProcedureStepEndDate(): Date | undefined {
    return this.x00400004;
  }

  get x00400004(): Date | undefined {
    const value = this.dwResponse['00400004']?.Value;
    return convert(value?.[0], 0x00400004, 'Date');
  }

  getScheduledProcedureStepEndDate(): Date {
    const value = this.x00400004;
    if (value === undefined) {
      throw new Error('ScheduledProcedureStepEndDate is undefined');
    }
    return value;
  }

  // Scheduled Procedure Step End Time
  get ScheduledProcedureStepEndTime(): string | undefined {
    return this.x00400005;
  }

  get x00400005(): string | undefined {
    const value = this.dwResponse['00400005']?.Value;
    return convert(value?.[0], 0x00400005, 'string');
  }

  getScheduledProcedureStepEndTime(): string {
    const value = this.x00400005;
    if (value === undefined) {
      throw new Error('ScheduledProcedureStepEndTime is undefined');
    }
    return value;
  }

  // Scheduled Performing Physician's Name
  get ScheduledPerformingPhysicianName(): any | undefined {
    return this.x00400006;
  }

  get x00400006(): any | undefined {
    const value = this.dwResponse['00400006']?.Value;
    return convert(value?.[0], 0x00400006, 'any');
  }

  getScheduledPerformingPhysicianName(): any {
    const value = this.x00400006;
    if (value === undefined) {
      throw new Error('ScheduledPerformingPhysicianName is undefined');
    }
    return value;
  }

  // Scheduled Procedure Step Description
  get ScheduledProcedureStepDescription(): string | undefined {
    return this.x00400007;
  }

  get x00400007(): string | undefined {
    const value = this.dwResponse['00400007']?.Value;
    return convert(value?.[0], 0x00400007, 'string');
  }

  getScheduledProcedureStepDescription(): string {
    const value = this.x00400007;
    if (value === undefined) {
      throw new Error('ScheduledProcedureStepDescription is undefined');
    }
    return value;
  }

  // Scheduled Protocol Code Sequence
  get ScheduledProtocolCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400008;
  }

  get x00400008(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400008']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getScheduledProtocolCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400008;
    if (value === undefined) {
      throw new Error('ScheduledProtocolCodeSequence is undefined');
    }
    return value;
  }

  // Scheduled Procedure Step ID
  get ScheduledProcedureStepID(): string | undefined {
    return this.x00400009;
  }

  get x00400009(): string | undefined {
    const value = this.dwResponse['00400009']?.Value;
    return convert(value?.[0], 0x00400009, 'string');
  }

  getScheduledProcedureStepID(): string {
    const value = this.x00400009;
    if (value === undefined) {
      throw new Error('ScheduledProcedureStepID is undefined');
    }
    return value;
  }

  // Stage Code Sequence
  get StageCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040000a;
  }

  get x0040000a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040000A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getStageCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040000a;
    if (value === undefined) {
      throw new Error('StageCodeSequence is undefined');
    }
    return value;
  }

  // Scheduled Performing Physician Identification Sequence
  get ScheduledPerformingPhysicianIdentificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040000b;
  }

  get x0040000b(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040000B']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getScheduledPerformingPhysicianIdentificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040000b;
    if (value === undefined) {
      throw new Error('ScheduledPerformingPhysicianIdentificationSequence is undefined');
    }
    return value;
  }

  // Scheduled Station Name
  get ScheduledStationName(): Array<string | undefined> | undefined {
    return this.x00400010;
  }

  get x00400010(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00400010']?.Value;
    return convert(value, 0x00400010, 'Array<string | undefined>');
  }

  getScheduledStationName(): Array<string | undefined> {
    const value = this.x00400010;
    if (value === undefined) {
      throw new Error('ScheduledStationName is undefined');
    }
    return value;
  }

  // Scheduled Procedure Step Location
  get ScheduledProcedureStepLocation(): string | undefined {
    return this.x00400011;
  }

  get x00400011(): string | undefined {
    const value = this.dwResponse['00400011']?.Value;
    return convert(value?.[0], 0x00400011, 'string');
  }

  getScheduledProcedureStepLocation(): string {
    const value = this.x00400011;
    if (value === undefined) {
      throw new Error('ScheduledProcedureStepLocation is undefined');
    }
    return value;
  }

  // Pre-Medication
  get PreMedication(): string | undefined {
    return this.x00400012;
  }

  get x00400012(): string | undefined {
    const value = this.dwResponse['00400012']?.Value;
    return convert(value?.[0], 0x00400012, 'string');
  }

  getPreMedication(): string {
    const value = this.x00400012;
    if (value === undefined) {
      throw new Error('PreMedication is undefined');
    }
    return value;
  }

  // Scheduled Procedure Step Status
  get ScheduledProcedureStepStatus(): string | undefined {
    return this.x00400020;
  }

  get x00400020(): string | undefined {
    const value = this.dwResponse['00400020']?.Value;
    return convert(value?.[0], 0x00400020, 'string');
  }

  getScheduledProcedureStepStatus(): string {
    const value = this.x00400020;
    if (value === undefined) {
      throw new Error('ScheduledProcedureStepStatus is undefined');
    }
    return value;
  }

  // Order Placer Identifier Sequence
  get OrderPlacerIdentifierSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400026;
  }

  get x00400026(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400026']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOrderPlacerIdentifierSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400026;
    if (value === undefined) {
      throw new Error('OrderPlacerIdentifierSequence is undefined');
    }
    return value;
  }

  // Order Filler Identifier Sequence
  get OrderFillerIdentifierSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400027;
  }

  get x00400027(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400027']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOrderFillerIdentifierSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400027;
    if (value === undefined) {
      throw new Error('OrderFillerIdentifierSequence is undefined');
    }
    return value;
  }

  // Universal Entity ID Type
  get UniversalEntityIDType(): string | undefined {
    return this.x00400033;
  }

  get x00400033(): string | undefined {
    const value = this.dwResponse['00400033']?.Value;
    return convert(value?.[0], 0x00400033, 'string');
  }

  getUniversalEntityIDType(): string {
    const value = this.x00400033;
    if (value === undefined) {
      throw new Error('UniversalEntityIDType is undefined');
    }
    return value;
  }

  // Identifier Type Code
  get IdentifierTypeCode(): string | undefined {
    return this.x00400035;
  }

  get x00400035(): string | undefined {
    const value = this.dwResponse['00400035']?.Value;
    return convert(value?.[0], 0x00400035, 'string');
  }

  getIdentifierTypeCode(): string {
    const value = this.x00400035;
    if (value === undefined) {
      throw new Error('IdentifierTypeCode is undefined');
    }
    return value;
  }

  // Assigning Facility Sequence
  get AssigningFacilitySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400036;
  }

  get x00400036(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400036']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAssigningFacilitySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400036;
    if (value === undefined) {
      throw new Error('AssigningFacilitySequence is undefined');
    }
    return value;
  }

  // Assigning Jurisdiction Code Sequence
  get AssigningJurisdictionCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400039;
  }

  get x00400039(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400039']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAssigningJurisdictionCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400039;
    if (value === undefined) {
      throw new Error('AssigningJurisdictionCodeSequence is undefined');
    }
    return value;
  }

  // Assigning Agency or Department Code Sequence
  get AssigningAgencyOrDepartmentCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040003a;
  }

  get x0040003a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040003A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAssigningAgencyOrDepartmentCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040003a;
    if (value === undefined) {
      throw new Error('AssigningAgencyOrDepartmentCodeSequence is undefined');
    }
    return value;
  }

  // Scheduled Procedure Step Sequence
  get ScheduledProcedureStepSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400100;
  }

  get x00400100(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400100']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getScheduledProcedureStepSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400100;
    if (value === undefined) {
      throw new Error('ScheduledProcedureStepSequence is undefined');
    }
    return value;
  }

  // Referenced Non-Image Composite SOP Instance Sequence
  get ReferencedNonImageCompositeSOPInstanceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400220;
  }

  get x00400220(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400220']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedNonImageCompositeSOPInstanceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400220;
    if (value === undefined) {
      throw new Error('ReferencedNonImageCompositeSOPInstanceSequence is undefined');
    }
    return value;
  }

  // Performed Station AE Title
  get PerformedStationAETitle(): string | undefined {
    return this.x00400241;
  }

  get x00400241(): string | undefined {
    const value = this.dwResponse['00400241']?.Value;
    return convert(value?.[0], 0x00400241, 'string');
  }

  getPerformedStationAETitle(): string {
    const value = this.x00400241;
    if (value === undefined) {
      throw new Error('PerformedStationAETitle is undefined');
    }
    return value;
  }

  // Performed Station Name
  get PerformedStationName(): string | undefined {
    return this.x00400242;
  }

  get x00400242(): string | undefined {
    const value = this.dwResponse['00400242']?.Value;
    return convert(value?.[0], 0x00400242, 'string');
  }

  getPerformedStationName(): string {
    const value = this.x00400242;
    if (value === undefined) {
      throw new Error('PerformedStationName is undefined');
    }
    return value;
  }

  // Performed Location
  get PerformedLocation(): string | undefined {
    return this.x00400243;
  }

  get x00400243(): string | undefined {
    const value = this.dwResponse['00400243']?.Value;
    return convert(value?.[0], 0x00400243, 'string');
  }

  getPerformedLocation(): string {
    const value = this.x00400243;
    if (value === undefined) {
      throw new Error('PerformedLocation is undefined');
    }
    return value;
  }

  // Performed Procedure Step Start Date
  get PerformedProcedureStepStartDate(): Date | undefined {
    return this.x00400244;
  }

  get x00400244(): Date | undefined {
    const value = this.dwResponse['00400244']?.Value;
    return convert(value?.[0], 0x00400244, 'Date');
  }

  getPerformedProcedureStepStartDate(): Date {
    const value = this.x00400244;
    if (value === undefined) {
      throw new Error('PerformedProcedureStepStartDate is undefined');
    }
    return value;
  }

  // Performed Procedure Step Start Time
  get PerformedProcedureStepStartTime(): string | undefined {
    return this.x00400245;
  }

  get x00400245(): string | undefined {
    const value = this.dwResponse['00400245']?.Value;
    return convert(value?.[0], 0x00400245, 'string');
  }

  getPerformedProcedureStepStartTime(): string {
    const value = this.x00400245;
    if (value === undefined) {
      throw new Error('PerformedProcedureStepStartTime is undefined');
    }
    return value;
  }

  // Performed Procedure Step End Date
  get PerformedProcedureStepEndDate(): Date | undefined {
    return this.x00400250;
  }

  get x00400250(): Date | undefined {
    const value = this.dwResponse['00400250']?.Value;
    return convert(value?.[0], 0x00400250, 'Date');
  }

  getPerformedProcedureStepEndDate(): Date {
    const value = this.x00400250;
    if (value === undefined) {
      throw new Error('PerformedProcedureStepEndDate is undefined');
    }
    return value;
  }

  // Performed Procedure Step End Time
  get PerformedProcedureStepEndTime(): string | undefined {
    return this.x00400251;
  }

  get x00400251(): string | undefined {
    const value = this.dwResponse['00400251']?.Value;
    return convert(value?.[0], 0x00400251, 'string');
  }

  getPerformedProcedureStepEndTime(): string {
    const value = this.x00400251;
    if (value === undefined) {
      throw new Error('PerformedProcedureStepEndTime is undefined');
    }
    return value;
  }

  // Performed Procedure Step Status
  get PerformedProcedureStepStatus(): string | undefined {
    return this.x00400252;
  }

  get x00400252(): string | undefined {
    const value = this.dwResponse['00400252']?.Value;
    return convert(value?.[0], 0x00400252, 'string');
  }

  getPerformedProcedureStepStatus(): string {
    const value = this.x00400252;
    if (value === undefined) {
      throw new Error('PerformedProcedureStepStatus is undefined');
    }
    return value;
  }

  // Performed Procedure Step ID
  get PerformedProcedureStepID(): string | undefined {
    return this.x00400253;
  }

  get x00400253(): string | undefined {
    const value = this.dwResponse['00400253']?.Value;
    return convert(value?.[0], 0x00400253, 'string');
  }

  getPerformedProcedureStepID(): string {
    const value = this.x00400253;
    if (value === undefined) {
      throw new Error('PerformedProcedureStepID is undefined');
    }
    return value;
  }

  // Performed Procedure Step Description
  get PerformedProcedureStepDescription(): string | undefined {
    return this.x00400254;
  }

  get x00400254(): string | undefined {
    const value = this.dwResponse['00400254']?.Value;
    return convert(value?.[0], 0x00400254, 'string');
  }

  getPerformedProcedureStepDescription(): string {
    const value = this.x00400254;
    if (value === undefined) {
      throw new Error('PerformedProcedureStepDescription is undefined');
    }
    return value;
  }

  // Performed Procedure Type Description
  get PerformedProcedureTypeDescription(): string | undefined {
    return this.x00400255;
  }

  get x00400255(): string | undefined {
    const value = this.dwResponse['00400255']?.Value;
    return convert(value?.[0], 0x00400255, 'string');
  }

  getPerformedProcedureTypeDescription(): string {
    const value = this.x00400255;
    if (value === undefined) {
      throw new Error('PerformedProcedureTypeDescription is undefined');
    }
    return value;
  }

  // Performed Protocol Code Sequence
  get PerformedProtocolCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400260;
  }

  get x00400260(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400260']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPerformedProtocolCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400260;
    if (value === undefined) {
      throw new Error('PerformedProtocolCodeSequence is undefined');
    }
    return value;
  }

  // Performed Protocol Type
  get PerformedProtocolType(): string | undefined {
    return this.x00400261;
  }

  get x00400261(): string | undefined {
    const value = this.dwResponse['00400261']?.Value;
    return convert(value?.[0], 0x00400261, 'string');
  }

  getPerformedProtocolType(): string {
    const value = this.x00400261;
    if (value === undefined) {
      throw new Error('PerformedProtocolType is undefined');
    }
    return value;
  }

  // Scheduled Step Attributes Sequence
  get ScheduledStepAttributesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400270;
  }

  get x00400270(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400270']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getScheduledStepAttributesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400270;
    if (value === undefined) {
      throw new Error('ScheduledStepAttributesSequence is undefined');
    }
    return value;
  }

  // Request Attributes Sequence
  get RequestAttributesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400275;
  }

  get x00400275(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400275']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRequestAttributesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400275;
    if (value === undefined) {
      throw new Error('RequestAttributesSequence is undefined');
    }
    return value;
  }

  // Performed Procedure Step Discontinuation Reason Code Sequence
  get PerformedProcedureStepDiscontinuationReasonCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400281;
  }

  get x00400281(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400281']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPerformedProcedureStepDiscontinuationReasonCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400281;
    if (value === undefined) {
      throw new Error('PerformedProcedureStepDiscontinuationReasonCodeSequence is undefined');
    }
    return value;
  }

  // Quantity Sequence
  get QuantitySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400293;
  }

  get x00400293(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400293']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getQuantitySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400293;
    if (value === undefined) {
      throw new Error('QuantitySequence is undefined');
    }
    return value;
  }

  // Quantity
  get Quantity(): number | undefined {
    return this.x00400294;
  }

  get x00400294(): number | undefined {
    const value = this.dwResponse['00400294']?.Value;
    return convert(value?.[0], 0x00400294, 'number');
  }

  getQuantity(): number {
    const value = this.x00400294;
    if (value === undefined) {
      throw new Error('Quantity is undefined');
    }
    return value;
  }

  // Measuring Units Sequence
  get MeasuringUnitsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400295;
  }

  get x00400295(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400295']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMeasuringUnitsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400295;
    if (value === undefined) {
      throw new Error('MeasuringUnitsSequence is undefined');
    }
    return value;
  }

  // Billing Item Sequence
  get BillingItemSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400296;
  }

  get x00400296(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400296']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBillingItemSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400296;
    if (value === undefined) {
      throw new Error('BillingItemSequence is undefined');
    }
    return value;
  }

  // Total Time of Fluoroscopy
  get TotalTimeOfFluoroscopy(): number | undefined {
    return this.x00400300;
  }

  get x00400300(): number | undefined {
    const value = this.dwResponse['00400300']?.Value;
    return convert(value?.[0], 0x00400300, 'number');
  }

  getTotalTimeOfFluoroscopy(): number {
    const value = this.x00400300;
    if (value === undefined) {
      throw new Error('TotalTimeOfFluoroscopy is undefined');
    }
    return value;
  }

  // Total Number of Exposures
  get TotalNumberOfExposures(): number | undefined {
    return this.x00400301;
  }

  get x00400301(): number | undefined {
    const value = this.dwResponse['00400301']?.Value;
    return convert(value?.[0], 0x00400301, 'number');
  }

  getTotalNumberOfExposures(): number {
    const value = this.x00400301;
    if (value === undefined) {
      throw new Error('TotalNumberOfExposures is undefined');
    }
    return value;
  }

  // Entrance Dose
  get EntranceDose(): number | undefined {
    return this.x00400302;
  }

  get x00400302(): number | undefined {
    const value = this.dwResponse['00400302']?.Value;
    return convert(value?.[0], 0x00400302, 'number');
  }

  getEntranceDose(): number {
    const value = this.x00400302;
    if (value === undefined) {
      throw new Error('EntranceDose is undefined');
    }
    return value;
  }

  // Exposed Area
  get ExposedArea(): Array<number | undefined> | undefined {
    return this.x00400303;
  }

  get x00400303(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00400303']?.Value;
    return convert(value, 0x00400303, 'Array<number | undefined>');
  }

  getExposedArea(): Array<number | undefined> {
    const value = this.x00400303;
    if (value === undefined) {
      throw new Error('ExposedArea is undefined');
    }
    return value;
  }

  // Distance Source to Entrance
  get DistanceSourceToEntrance(): number | undefined {
    return this.x00400306;
  }

  get x00400306(): number | undefined {
    const value = this.dwResponse['00400306']?.Value;
    return convert(value?.[0], 0x00400306, 'number');
  }

  getDistanceSourceToEntrance(): number {
    const value = this.x00400306;
    if (value === undefined) {
      throw new Error('DistanceSourceToEntrance is undefined');
    }
    return value;
  }

  // Distance Source to Support
  get DistanceSourceToSupport(): number | undefined {
    return this.x00400307;
  }

  get x00400307(): number | undefined {
    const value = this.dwResponse['00400307']?.Value;
    return convert(value?.[0], 0x00400307, 'number');
  }

  getDistanceSourceToSupport(): number {
    const value = this.x00400307;
    if (value === undefined) {
      throw new Error('DistanceSourceToSupport is undefined');
    }
    return value;
  }

  // Exposure Dose Sequence
  get ExposureDoseSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040030e;
  }

  get x0040030e(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040030E']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getExposureDoseSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040030e;
    if (value === undefined) {
      throw new Error('ExposureDoseSequence is undefined');
    }
    return value;
  }

  // X-Ray Output
  get XRayOutput(): number | undefined {
    return this.x00400312;
  }

  get x00400312(): number | undefined {
    const value = this.dwResponse['00400312']?.Value;
    return convert(value?.[0], 0x00400312, 'number');
  }

  getXRayOutput(): number {
    const value = this.x00400312;
    if (value === undefined) {
      throw new Error('XRayOutput is undefined');
    }
    return value;
  }

  // Half Value Layer
  get HalfValueLayer(): number | undefined {
    return this.x00400314;
  }

  get x00400314(): number | undefined {
    const value = this.dwResponse['00400314']?.Value;
    return convert(value?.[0], 0x00400314, 'number');
  }

  getHalfValueLayer(): number {
    const value = this.x00400314;
    if (value === undefined) {
      throw new Error('HalfValueLayer is undefined');
    }
    return value;
  }

  // Organ Dose
  get OrganDose(): number | undefined {
    return this.x00400316;
  }

  get x00400316(): number | undefined {
    const value = this.dwResponse['00400316']?.Value;
    return convert(value?.[0], 0x00400316, 'number');
  }

  getOrganDose(): number {
    const value = this.x00400316;
    if (value === undefined) {
      throw new Error('OrganDose is undefined');
    }
    return value;
  }

  // Organ Exposed
  get OrganExposed(): string | undefined {
    return this.x00400318;
  }

  get x00400318(): string | undefined {
    const value = this.dwResponse['00400318']?.Value;
    return convert(value?.[0], 0x00400318, 'string');
  }

  getOrganExposed(): string {
    const value = this.x00400318;
    if (value === undefined) {
      throw new Error('OrganExposed is undefined');
    }
    return value;
  }

  // Billing Procedure Step Sequence
  get BillingProcedureStepSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400320;
  }

  get x00400320(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400320']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBillingProcedureStepSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400320;
    if (value === undefined) {
      throw new Error('BillingProcedureStepSequence is undefined');
    }
    return value;
  }

  // Film Consumption Sequence
  get FilmConsumptionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400321;
  }

  get x00400321(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400321']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFilmConsumptionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400321;
    if (value === undefined) {
      throw new Error('FilmConsumptionSequence is undefined');
    }
    return value;
  }

  // Billing Supplies and Devices Sequence
  get BillingSuppliesAndDevicesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400324;
  }

  get x00400324(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400324']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBillingSuppliesAndDevicesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400324;
    if (value === undefined) {
      throw new Error('BillingSuppliesAndDevicesSequence is undefined');
    }
    return value;
  }

  // Referenced Procedure Step Sequence
  get ReferencedProcedureStepSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400330;
  }

  get x00400330(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400330']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedProcedureStepSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400330;
    if (value === undefined) {
      throw new Error('ReferencedProcedureStepSequence is undefined');
    }
    return value;
  }

  // Performed Series Sequence
  get PerformedSeriesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400340;
  }

  get x00400340(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400340']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPerformedSeriesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400340;
    if (value === undefined) {
      throw new Error('PerformedSeriesSequence is undefined');
    }
    return value;
  }

  // Protocol Context Sequence
  get ProtocolContextSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400440;
  }

  get x00400440(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400440']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getProtocolContextSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400440;
    if (value === undefined) {
      throw new Error('ProtocolContextSequence is undefined');
    }
    return value;
  }

  // Content Item Modifier Sequence
  get ContentItemModifierSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400441;
  }

  get x00400441(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400441']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getContentItemModifierSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400441;
    if (value === undefined) {
      throw new Error('ContentItemModifierSequence is undefined');
    }
    return value;
  }

  // Scheduled Specimen Sequence
  get ScheduledSpecimenSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400500;
  }

  get x00400500(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400500']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getScheduledSpecimenSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400500;
    if (value === undefined) {
      throw new Error('ScheduledSpecimenSequence is undefined');
    }
    return value;
  }

  // Specimen Accession Number
  get SpecimenAccessionNumber(): string | undefined {
    return this.x0040050a;
  }

  get x0040050a(): string | undefined {
    const value = this.dwResponse['0040050A']?.Value;
    return convert(value?.[0], 0x0040050a, 'string');
  }

  getSpecimenAccessionNumber(): string {
    const value = this.x0040050a;
    if (value === undefined) {
      throw new Error('SpecimenAccessionNumber is undefined');
    }
    return value;
  }

  // Container Identifier
  get ContainerIdentifier(): string | undefined {
    return this.x00400512;
  }

  get x00400512(): string | undefined {
    const value = this.dwResponse['00400512']?.Value;
    return convert(value?.[0], 0x00400512, 'string');
  }

  getContainerIdentifier(): string {
    const value = this.x00400512;
    if (value === undefined) {
      throw new Error('ContainerIdentifier is undefined');
    }
    return value;
  }

  // Issuer of the Container Identifier Sequence
  get IssuerOfTheContainerIdentifierSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400513;
  }

  get x00400513(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400513']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIssuerOfTheContainerIdentifierSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400513;
    if (value === undefined) {
      throw new Error('IssuerOfTheContainerIdentifierSequence is undefined');
    }
    return value;
  }

  // Alternate Container Identifier Sequence
  get AlternateContainerIdentifierSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400515;
  }

  get x00400515(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400515']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAlternateContainerIdentifierSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400515;
    if (value === undefined) {
      throw new Error('AlternateContainerIdentifierSequence is undefined');
    }
    return value;
  }

  // Container Type Code Sequence
  get ContainerTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400518;
  }

  get x00400518(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400518']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getContainerTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400518;
    if (value === undefined) {
      throw new Error('ContainerTypeCodeSequence is undefined');
    }
    return value;
  }

  // Container Description
  get ContainerDescription(): string | undefined {
    return this.x0040051a;
  }

  get x0040051a(): string | undefined {
    const value = this.dwResponse['0040051A']?.Value;
    return convert(value?.[0], 0x0040051a, 'string');
  }

  getContainerDescription(): string {
    const value = this.x0040051a;
    if (value === undefined) {
      throw new Error('ContainerDescription is undefined');
    }
    return value;
  }

  // Container Component Sequence
  get ContainerComponentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400520;
  }

  get x00400520(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400520']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getContainerComponentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400520;
    if (value === undefined) {
      throw new Error('ContainerComponentSequence is undefined');
    }
    return value;
  }

  // Specimen Sequence
  get SpecimenSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400550;
  }

  get x00400550(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400550']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSpecimenSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400550;
    if (value === undefined) {
      throw new Error('SpecimenSequence is undefined');
    }
    return value;
  }

  // Specimen Identifier
  get SpecimenIdentifier(): string | undefined {
    return this.x00400551;
  }

  get x00400551(): string | undefined {
    const value = this.dwResponse['00400551']?.Value;
    return convert(value?.[0], 0x00400551, 'string');
  }

  getSpecimenIdentifier(): string {
    const value = this.x00400551;
    if (value === undefined) {
      throw new Error('SpecimenIdentifier is undefined');
    }
    return value;
  }

  // Specimen Description Sequence (Trial)
  get SpecimenDescriptionSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400552;
  }

  get x00400552(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400552']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSpecimenDescriptionSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400552;
    if (value === undefined) {
      throw new Error('SpecimenDescriptionSequenceTrial is undefined');
    }
    return value;
  }

  // Specimen UID
  get SpecimenUID(): string | undefined {
    return this.x00400554;
  }

  get x00400554(): string | undefined {
    const value = this.dwResponse['00400554']?.Value;
    return convert(value?.[0], 0x00400554, 'string');
  }

  getSpecimenUID(): string {
    const value = this.x00400554;
    if (value === undefined) {
      throw new Error('SpecimenUID is undefined');
    }
    return value;
  }

  // Acquisition Context Sequence
  get AcquisitionContextSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400555;
  }

  get x00400555(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400555']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAcquisitionContextSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400555;
    if (value === undefined) {
      throw new Error('AcquisitionContextSequence is undefined');
    }
    return value;
  }

  // Specimen Type Code Sequence
  get SpecimenTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040059a;
  }

  get x0040059a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040059A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSpecimenTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040059a;
    if (value === undefined) {
      throw new Error('SpecimenTypeCodeSequence is undefined');
    }
    return value;
  }

  // Specimen Description Sequence
  get SpecimenDescriptionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400560;
  }

  get x00400560(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400560']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSpecimenDescriptionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400560;
    if (value === undefined) {
      throw new Error('SpecimenDescriptionSequence is undefined');
    }
    return value;
  }

  // Issuer of the Specimen Identifier Sequence
  get IssuerOfTheSpecimenIdentifierSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400562;
  }

  get x00400562(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400562']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIssuerOfTheSpecimenIdentifierSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400562;
    if (value === undefined) {
      throw new Error('IssuerOfTheSpecimenIdentifierSequence is undefined');
    }
    return value;
  }

  // Specimen Short Description
  get SpecimenShortDescription(): string | undefined {
    return this.x00400600;
  }

  get x00400600(): string | undefined {
    const value = this.dwResponse['00400600']?.Value;
    return convert(value?.[0], 0x00400600, 'string');
  }

  getSpecimenShortDescription(): string {
    const value = this.x00400600;
    if (value === undefined) {
      throw new Error('SpecimenShortDescription is undefined');
    }
    return value;
  }

  // Specimen Preparation Sequence
  get SpecimenPreparationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400610;
  }

  get x00400610(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400610']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSpecimenPreparationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400610;
    if (value === undefined) {
      throw new Error('SpecimenPreparationSequence is undefined');
    }
    return value;
  }

  // Specimen Preparation Step Content Item Sequence
  get SpecimenPreparationStepContentItemSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400612;
  }

  get x00400612(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400612']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSpecimenPreparationStepContentItemSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400612;
    if (value === undefined) {
      throw new Error('SpecimenPreparationStepContentItemSequence is undefined');
    }
    return value;
  }

  // Specimen Localization Content Item Sequence
  get SpecimenLocalizationContentItemSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00400620;
  }

  get x00400620(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00400620']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSpecimenLocalizationContentItemSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00400620;
    if (value === undefined) {
      throw new Error('SpecimenLocalizationContentItemSequence is undefined');
    }
    return value;
  }

  // Slide Identifier
  get SlideIdentifier(): string | undefined {
    return this.x004006fa;
  }

  get x004006fa(): string | undefined {
    const value = this.dwResponse['004006FA']?.Value;
    return convert(value?.[0], 0x004006fa, 'string');
  }

  getSlideIdentifier(): string {
    const value = this.x004006fa;
    if (value === undefined) {
      throw new Error('SlideIdentifier is undefined');
    }
    return value;
  }

  // Image Center Point Coordinates Sequence
  get ImageCenterPointCoordinatesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040071a;
  }

  get x0040071a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040071A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getImageCenterPointCoordinatesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040071a;
    if (value === undefined) {
      throw new Error('ImageCenterPointCoordinatesSequence is undefined');
    }
    return value;
  }

  // X Offset in Slide Coordinate System
  get XOffsetInSlideCoordinateSystem(): number | undefined {
    return this.x0040072a;
  }

  get x0040072a(): number | undefined {
    const value = this.dwResponse['0040072A']?.Value;
    return convert(value?.[0], 0x0040072a, 'number');
  }

  getXOffsetInSlideCoordinateSystem(): number {
    const value = this.x0040072a;
    if (value === undefined) {
      throw new Error('XOffsetInSlideCoordinateSystem is undefined');
    }
    return value;
  }

  // Y Offset in Slide Coordinate System
  get YOffsetInSlideCoordinateSystem(): number | undefined {
    return this.x0040073a;
  }

  get x0040073a(): number | undefined {
    const value = this.dwResponse['0040073A']?.Value;
    return convert(value?.[0], 0x0040073a, 'number');
  }

  getYOffsetInSlideCoordinateSystem(): number {
    const value = this.x0040073a;
    if (value === undefined) {
      throw new Error('YOffsetInSlideCoordinateSystem is undefined');
    }
    return value;
  }

  // Z Offset in Slide Coordinate System
  get ZOffsetInSlideCoordinateSystem(): number | undefined {
    return this.x0040074a;
  }

  get x0040074a(): number | undefined {
    const value = this.dwResponse['0040074A']?.Value;
    return convert(value?.[0], 0x0040074a, 'number');
  }

  getZOffsetInSlideCoordinateSystem(): number {
    const value = this.x0040074a;
    if (value === undefined) {
      throw new Error('ZOffsetInSlideCoordinateSystem is undefined');
    }
    return value;
  }

  // Pixel Spacing Sequence
  get PixelSpacingSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x004008d8;
  }

  get x004008d8(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['004008D8']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPixelSpacingSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x004008d8;
    if (value === undefined) {
      throw new Error('PixelSpacingSequence is undefined');
    }
    return value;
  }

  // Coordinate System Axis Code Sequence
  get CoordinateSystemAxisCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x004008da;
  }

  get x004008da(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['004008DA']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCoordinateSystemAxisCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x004008da;
    if (value === undefined) {
      throw new Error('CoordinateSystemAxisCodeSequence is undefined');
    }
    return value;
  }

  // Measurement Units Code Sequence
  get MeasurementUnitsCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x004008ea;
  }

  get x004008ea(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['004008EA']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMeasurementUnitsCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x004008ea;
    if (value === undefined) {
      throw new Error('MeasurementUnitsCodeSequence is undefined');
    }
    return value;
  }

  // Vital Stain Code Sequence (Trial)
  get VitalStainCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x004009f8;
  }

  get x004009f8(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['004009F8']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVitalStainCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x004009f8;
    if (value === undefined) {
      throw new Error('VitalStainCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Requested Procedure ID
  get RequestedProcedureID(): string | undefined {
    return this.x00401001;
  }

  get x00401001(): string | undefined {
    const value = this.dwResponse['00401001']?.Value;
    return convert(value?.[0], 0x00401001, 'string');
  }

  getRequestedProcedureID(): string {
    const value = this.x00401001;
    if (value === undefined) {
      throw new Error('RequestedProcedureID is undefined');
    }
    return value;
  }

  // Reason for the Requested Procedure
  get ReasonForTheRequestedProcedure(): string | undefined {
    return this.x00401002;
  }

  get x00401002(): string | undefined {
    const value = this.dwResponse['00401002']?.Value;
    return convert(value?.[0], 0x00401002, 'string');
  }

  getReasonForTheRequestedProcedure(): string {
    const value = this.x00401002;
    if (value === undefined) {
      throw new Error('ReasonForTheRequestedProcedure is undefined');
    }
    return value;
  }

  // Requested Procedure Priority
  get RequestedProcedurePriority(): string | undefined {
    return this.x00401003;
  }

  get x00401003(): string | undefined {
    const value = this.dwResponse['00401003']?.Value;
    return convert(value?.[0], 0x00401003, 'string');
  }

  getRequestedProcedurePriority(): string {
    const value = this.x00401003;
    if (value === undefined) {
      throw new Error('RequestedProcedurePriority is undefined');
    }
    return value;
  }

  // Patient Transport Arrangements
  get PatientTransportArrangements(): string | undefined {
    return this.x00401004;
  }

  get x00401004(): string | undefined {
    const value = this.dwResponse['00401004']?.Value;
    return convert(value?.[0], 0x00401004, 'string');
  }

  getPatientTransportArrangements(): string {
    const value = this.x00401004;
    if (value === undefined) {
      throw new Error('PatientTransportArrangements is undefined');
    }
    return value;
  }

  // Requested Procedure Location
  get RequestedProcedureLocation(): string | undefined {
    return this.x00401005;
  }

  get x00401005(): string | undefined {
    const value = this.dwResponse['00401005']?.Value;
    return convert(value?.[0], 0x00401005, 'string');
  }

  getRequestedProcedureLocation(): string {
    const value = this.x00401005;
    if (value === undefined) {
      throw new Error('RequestedProcedureLocation is undefined');
    }
    return value;
  }

  // Placer Order Number / Procedure
  get PlacerOrderNumberProcedure(): string | undefined {
    return this.x00401006;
  }

  get x00401006(): string | undefined {
    const value = this.dwResponse['00401006']?.Value;
    return convert(value?.[0], 0x00401006, 'string');
  }

  getPlacerOrderNumberProcedure(): string {
    const value = this.x00401006;
    if (value === undefined) {
      throw new Error('PlacerOrderNumberProcedure is undefined');
    }
    return value;
  }

  // Filler Order Number / Procedure
  get FillerOrderNumberProcedure(): string | undefined {
    return this.x00401007;
  }

  get x00401007(): string | undefined {
    const value = this.dwResponse['00401007']?.Value;
    return convert(value?.[0], 0x00401007, 'string');
  }

  getFillerOrderNumberProcedure(): string {
    const value = this.x00401007;
    if (value === undefined) {
      throw new Error('FillerOrderNumberProcedure is undefined');
    }
    return value;
  }

  // Confidentiality Code
  get ConfidentialityCode(): string | undefined {
    return this.x00401008;
  }

  get x00401008(): string | undefined {
    const value = this.dwResponse['00401008']?.Value;
    return convert(value?.[0], 0x00401008, 'string');
  }

  getConfidentialityCode(): string {
    const value = this.x00401008;
    if (value === undefined) {
      throw new Error('ConfidentialityCode is undefined');
    }
    return value;
  }

  // Reporting Priority
  get ReportingPriority(): string | undefined {
    return this.x00401009;
  }

  get x00401009(): string | undefined {
    const value = this.dwResponse['00401009']?.Value;
    return convert(value?.[0], 0x00401009, 'string');
  }

  getReportingPriority(): string {
    const value = this.x00401009;
    if (value === undefined) {
      throw new Error('ReportingPriority is undefined');
    }
    return value;
  }

  // Reason for Requested Procedure Code Sequence
  get ReasonForRequestedProcedureCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040100a;
  }

  get x0040100a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040100A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReasonForRequestedProcedureCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040100a;
    if (value === undefined) {
      throw new Error('ReasonForRequestedProcedureCodeSequence is undefined');
    }
    return value;
  }

  // Names of Intended Recipients of Results
  get NamesOfIntendedRecipientsOfResults(): Array<any | undefined> | undefined {
    return this.x00401010;
  }

  get x00401010(): Array<any | undefined> | undefined {
    const value = this.dwResponse['00401010']?.Value;
    return convert(value, 0x00401010, 'Array<any | undefined>');
  }

  getNamesOfIntendedRecipientsOfResults(): Array<any | undefined> {
    const value = this.x00401010;
    if (value === undefined) {
      throw new Error('NamesOfIntendedRecipientsOfResults is undefined');
    }
    return value;
  }

  // Intended Recipients of Results Identification Sequence
  get IntendedRecipientsOfResultsIdentificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00401011;
  }

  get x00401011(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00401011']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIntendedRecipientsOfResultsIdentificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00401011;
    if (value === undefined) {
      throw new Error('IntendedRecipientsOfResultsIdentificationSequence is undefined');
    }
    return value;
  }

  // Reason For Performed Procedure Code Sequence
  get ReasonForPerformedProcedureCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00401012;
  }

  get x00401012(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00401012']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReasonForPerformedProcedureCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00401012;
    if (value === undefined) {
      throw new Error('ReasonForPerformedProcedureCodeSequence is undefined');
    }
    return value;
  }

  // Requested Procedure Description (Trial)
  get RequestedProcedureDescriptionTrial(): string | undefined {
    return this.x00401060;
  }

  get x00401060(): string | undefined {
    const value = this.dwResponse['00401060']?.Value;
    return convert(value?.[0], 0x00401060, 'string');
  }

  getRequestedProcedureDescriptionTrial(): string {
    const value = this.x00401060;
    if (value === undefined) {
      throw new Error('RequestedProcedureDescriptionTrial is undefined');
    }
    return value;
  }

  // Person Identification Code Sequence
  get PersonIdentificationCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00401101;
  }

  get x00401101(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00401101']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPersonIdentificationCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00401101;
    if (value === undefined) {
      throw new Error('PersonIdentificationCodeSequence is undefined');
    }
    return value;
  }

  // Person's Telephone Numbers
  get PersonTelephoneNumbers(): Array<string | undefined> | undefined {
    return this.x00401103;
  }

  get x00401103(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00401103']?.Value;
    return convert(value, 0x00401103, 'Array<string | undefined>');
  }

  getPersonTelephoneNumbers(): Array<string | undefined> {
    const value = this.x00401103;
    if (value === undefined) {
      throw new Error('PersonTelephoneNumbers is undefined');
    }
    return value;
  }

  // Reason for the Imaging Service Request
  get ReasonForTheImagingServiceRequest(): string | undefined {
    return this.x00402001;
  }

  get x00402001(): string | undefined {
    const value = this.dwResponse['00402001']?.Value;
    return convert(value?.[0], 0x00402001, 'string');
  }

  getReasonForTheImagingServiceRequest(): string {
    const value = this.x00402001;
    if (value === undefined) {
      throw new Error('ReasonForTheImagingServiceRequest is undefined');
    }
    return value;
  }

  // Issue Date of Imaging Service Request
  get IssueDateOfImagingServiceRequest(): Date | undefined {
    return this.x00402004;
  }

  get x00402004(): Date | undefined {
    const value = this.dwResponse['00402004']?.Value;
    return convert(value?.[0], 0x00402004, 'Date');
  }

  getIssueDateOfImagingServiceRequest(): Date {
    const value = this.x00402004;
    if (value === undefined) {
      throw new Error('IssueDateOfImagingServiceRequest is undefined');
    }
    return value;
  }

  // Issue Time of Imaging Service Request
  get IssueTimeOfImagingServiceRequest(): string | undefined {
    return this.x00402005;
  }

  get x00402005(): string | undefined {
    const value = this.dwResponse['00402005']?.Value;
    return convert(value?.[0], 0x00402005, 'string');
  }

  getIssueTimeOfImagingServiceRequest(): string {
    const value = this.x00402005;
    if (value === undefined) {
      throw new Error('IssueTimeOfImagingServiceRequest is undefined');
    }
    return value;
  }

  // Placer Order Number / Imaging Service Request (Retired)
  get PlacerOrderNumberImagingServiceRequestRetired(): string | undefined {
    return this.x00402006;
  }

  get x00402006(): string | undefined {
    const value = this.dwResponse['00402006']?.Value;
    return convert(value?.[0], 0x00402006, 'string');
  }

  getPlacerOrderNumberImagingServiceRequestRetired(): string {
    const value = this.x00402006;
    if (value === undefined) {
      throw new Error('PlacerOrderNumberImagingServiceRequestRetired is undefined');
    }
    return value;
  }

  // Filler Order Number / Imaging Service Request (Retired)
  get FillerOrderNumberImagingServiceRequestRetired(): string | undefined {
    return this.x00402007;
  }

  get x00402007(): string | undefined {
    const value = this.dwResponse['00402007']?.Value;
    return convert(value?.[0], 0x00402007, 'string');
  }

  getFillerOrderNumberImagingServiceRequestRetired(): string {
    const value = this.x00402007;
    if (value === undefined) {
      throw new Error('FillerOrderNumberImagingServiceRequestRetired is undefined');
    }
    return value;
  }

  // Order Entered By
  get OrderEnteredBy(): any | undefined {
    return this.x00402008;
  }

  get x00402008(): any | undefined {
    const value = this.dwResponse['00402008']?.Value;
    return convert(value?.[0], 0x00402008, 'any');
  }

  getOrderEnteredBy(): any {
    const value = this.x00402008;
    if (value === undefined) {
      throw new Error('OrderEnteredBy is undefined');
    }
    return value;
  }

  // Order Enterer's Location
  get OrderEntererLocation(): string | undefined {
    return this.x00402009;
  }

  get x00402009(): string | undefined {
    const value = this.dwResponse['00402009']?.Value;
    return convert(value?.[0], 0x00402009, 'string');
  }

  getOrderEntererLocation(): string {
    const value = this.x00402009;
    if (value === undefined) {
      throw new Error('OrderEntererLocation is undefined');
    }
    return value;
  }

  // Order Callback Phone Number
  get OrderCallbackPhoneNumber(): string | undefined {
    return this.x00402010;
  }

  get x00402010(): string | undefined {
    const value = this.dwResponse['00402010']?.Value;
    return convert(value?.[0], 0x00402010, 'string');
  }

  getOrderCallbackPhoneNumber(): string {
    const value = this.x00402010;
    if (value === undefined) {
      throw new Error('OrderCallbackPhoneNumber is undefined');
    }
    return value;
  }

  // Placer Order Number / Imaging Service Request
  get PlacerOrderNumberImagingServiceRequest(): string | undefined {
    return this.x00402016;
  }

  get x00402016(): string | undefined {
    const value = this.dwResponse['00402016']?.Value;
    return convert(value?.[0], 0x00402016, 'string');
  }

  getPlacerOrderNumberImagingServiceRequest(): string {
    const value = this.x00402016;
    if (value === undefined) {
      throw new Error('PlacerOrderNumberImagingServiceRequest is undefined');
    }
    return value;
  }

  // Filler Order Number / Imaging Service Request
  get FillerOrderNumberImagingServiceRequest(): string | undefined {
    return this.x00402017;
  }

  get x00402017(): string | undefined {
    const value = this.dwResponse['00402017']?.Value;
    return convert(value?.[0], 0x00402017, 'string');
  }

  getFillerOrderNumberImagingServiceRequest(): string {
    const value = this.x00402017;
    if (value === undefined) {
      throw new Error('FillerOrderNumberImagingServiceRequest is undefined');
    }
    return value;
  }

  // Confidentiality Constraint on Patient Data Description
  get ConfidentialityConstraintOnPatientDataDescription(): string | undefined {
    return this.x00403001;
  }

  get x00403001(): string | undefined {
    const value = this.dwResponse['00403001']?.Value;
    return convert(value?.[0], 0x00403001, 'string');
  }

  getConfidentialityConstraintOnPatientDataDescription(): string {
    const value = this.x00403001;
    if (value === undefined) {
      throw new Error('ConfidentialityConstraintOnPatientDataDescription is undefined');
    }
    return value;
  }

  // General Purpose Scheduled Procedure Step Status
  get GeneralPurposeScheduledProcedureStepStatus(): string | undefined {
    return this.x00404001;
  }

  get x00404001(): string | undefined {
    const value = this.dwResponse['00404001']?.Value;
    return convert(value?.[0], 0x00404001, 'string');
  }

  getGeneralPurposeScheduledProcedureStepStatus(): string {
    const value = this.x00404001;
    if (value === undefined) {
      throw new Error('GeneralPurposeScheduledProcedureStepStatus is undefined');
    }
    return value;
  }

  // General Purpose Performed Procedure Step Status
  get GeneralPurposePerformedProcedureStepStatus(): string | undefined {
    return this.x00404002;
  }

  get x00404002(): string | undefined {
    const value = this.dwResponse['00404002']?.Value;
    return convert(value?.[0], 0x00404002, 'string');
  }

  getGeneralPurposePerformedProcedureStepStatus(): string {
    const value = this.x00404002;
    if (value === undefined) {
      throw new Error('GeneralPurposePerformedProcedureStepStatus is undefined');
    }
    return value;
  }

  // General Purpose Scheduled Procedure Step Priority
  get GeneralPurposeScheduledProcedureStepPriority(): string | undefined {
    return this.x00404003;
  }

  get x00404003(): string | undefined {
    const value = this.dwResponse['00404003']?.Value;
    return convert(value?.[0], 0x00404003, 'string');
  }

  getGeneralPurposeScheduledProcedureStepPriority(): string {
    const value = this.x00404003;
    if (value === undefined) {
      throw new Error('GeneralPurposeScheduledProcedureStepPriority is undefined');
    }
    return value;
  }

  // Scheduled Processing Applications Code Sequence
  get ScheduledProcessingApplicationsCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404004;
  }

  get x00404004(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404004']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getScheduledProcessingApplicationsCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404004;
    if (value === undefined) {
      throw new Error('ScheduledProcessingApplicationsCodeSequence is undefined');
    }
    return value;
  }

  // Scheduled Procedure Step Start DateTime
  get ScheduledProcedureStepStartDateTime(): string | undefined {
    return this.x00404005;
  }

  get x00404005(): string | undefined {
    const value = this.dwResponse['00404005']?.Value;
    return convert(value?.[0], 0x00404005, 'string');
  }

  getScheduledProcedureStepStartDateTime(): string {
    const value = this.x00404005;
    if (value === undefined) {
      throw new Error('ScheduledProcedureStepStartDateTime is undefined');
    }
    return value;
  }

  // Multiple Copies Flag
  get MultipleCopiesFlag(): string | undefined {
    return this.x00404006;
  }

  get x00404006(): string | undefined {
    const value = this.dwResponse['00404006']?.Value;
    return convert(value?.[0], 0x00404006, 'string');
  }

  getMultipleCopiesFlag(): string {
    const value = this.x00404006;
    if (value === undefined) {
      throw new Error('MultipleCopiesFlag is undefined');
    }
    return value;
  }

  // Performed Processing Applications Code Sequence
  get PerformedProcessingApplicationsCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404007;
  }

  get x00404007(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404007']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPerformedProcessingApplicationsCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404007;
    if (value === undefined) {
      throw new Error('PerformedProcessingApplicationsCodeSequence is undefined');
    }
    return value;
  }

  // Human Performer Code Sequence
  get HumanPerformerCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404009;
  }

  get x00404009(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404009']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getHumanPerformerCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404009;
    if (value === undefined) {
      throw new Error('HumanPerformerCodeSequence is undefined');
    }
    return value;
  }

  // Scheduled Procedure Step Modification DateTime
  get ScheduledProcedureStepModificationDateTime(): string | undefined {
    return this.x00404010;
  }

  get x00404010(): string | undefined {
    const value = this.dwResponse['00404010']?.Value;
    return convert(value?.[0], 0x00404010, 'string');
  }

  getScheduledProcedureStepModificationDateTime(): string {
    const value = this.x00404010;
    if (value === undefined) {
      throw new Error('ScheduledProcedureStepModificationDateTime is undefined');
    }
    return value;
  }

  // Expected Completion DateTime
  get ExpectedCompletionDateTime(): string | undefined {
    return this.x00404011;
  }

  get x00404011(): string | undefined {
    const value = this.dwResponse['00404011']?.Value;
    return convert(value?.[0], 0x00404011, 'string');
  }

  getExpectedCompletionDateTime(): string {
    const value = this.x00404011;
    if (value === undefined) {
      throw new Error('ExpectedCompletionDateTime is undefined');
    }
    return value;
  }

  // Resulting General Purpose Performed Procedure Steps Sequence
  get ResultingGeneralPurposePerformedProcedureStepsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404015;
  }

  get x00404015(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404015']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getResultingGeneralPurposePerformedProcedureStepsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404015;
    if (value === undefined) {
      throw new Error('ResultingGeneralPurposePerformedProcedureStepsSequence is undefined');
    }
    return value;
  }

  // Referenced General Purpose Scheduled Procedure Step Sequence
  get ReferencedGeneralPurposeScheduledProcedureStepSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404016;
  }

  get x00404016(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404016']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedGeneralPurposeScheduledProcedureStepSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404016;
    if (value === undefined) {
      throw new Error('ReferencedGeneralPurposeScheduledProcedureStepSequence is undefined');
    }
    return value;
  }

  // Scheduled Workitem Code Sequence
  get ScheduledWorkitemCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404018;
  }

  get x00404018(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404018']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getScheduledWorkitemCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404018;
    if (value === undefined) {
      throw new Error('ScheduledWorkitemCodeSequence is undefined');
    }
    return value;
  }

  // Performed Workitem Code Sequence
  get PerformedWorkitemCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404019;
  }

  get x00404019(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404019']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPerformedWorkitemCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404019;
    if (value === undefined) {
      throw new Error('PerformedWorkitemCodeSequence is undefined');
    }
    return value;
  }

  // Input Availability Flag
  get InputAvailabilityFlag(): string | undefined {
    return this.x00404020;
  }

  get x00404020(): string | undefined {
    const value = this.dwResponse['00404020']?.Value;
    return convert(value?.[0], 0x00404020, 'string');
  }

  getInputAvailabilityFlag(): string {
    const value = this.x00404020;
    if (value === undefined) {
      throw new Error('InputAvailabilityFlag is undefined');
    }
    return value;
  }

  // Input Information Sequence
  get InputInformationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404021;
  }

  get x00404021(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404021']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getInputInformationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404021;
    if (value === undefined) {
      throw new Error('InputInformationSequence is undefined');
    }
    return value;
  }

  // Relevant Information Sequence
  get RelevantInformationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404022;
  }

  get x00404022(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404022']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRelevantInformationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404022;
    if (value === undefined) {
      throw new Error('RelevantInformationSequence is undefined');
    }
    return value;
  }

  // Referenced General Purpose Scheduled Procedure Step Transaction UID
  get ReferencedGeneralPurposeScheduledProcedureStepTransactionUID(): string | undefined {
    return this.x00404023;
  }

  get x00404023(): string | undefined {
    const value = this.dwResponse['00404023']?.Value;
    return convert(value?.[0], 0x00404023, 'string');
  }

  getReferencedGeneralPurposeScheduledProcedureStepTransactionUID(): string {
    const value = this.x00404023;
    if (value === undefined) {
      throw new Error('ReferencedGeneralPurposeScheduledProcedureStepTransactionUID is undefined');
    }
    return value;
  }

  // Scheduled Station Name Code Sequence
  get ScheduledStationNameCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404025;
  }

  get x00404025(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404025']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getScheduledStationNameCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404025;
    if (value === undefined) {
      throw new Error('ScheduledStationNameCodeSequence is undefined');
    }
    return value;
  }

  // Scheduled Station Class Code Sequence
  get ScheduledStationClassCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404026;
  }

  get x00404026(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404026']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getScheduledStationClassCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404026;
    if (value === undefined) {
      throw new Error('ScheduledStationClassCodeSequence is undefined');
    }
    return value;
  }

  // Scheduled Station Geographic Location Code Sequence
  get ScheduledStationGeographicLocationCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404027;
  }

  get x00404027(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404027']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getScheduledStationGeographicLocationCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404027;
    if (value === undefined) {
      throw new Error('ScheduledStationGeographicLocationCodeSequence is undefined');
    }
    return value;
  }

  // Performed Station Name Code Sequence
  get PerformedStationNameCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404028;
  }

  get x00404028(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404028']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPerformedStationNameCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404028;
    if (value === undefined) {
      throw new Error('PerformedStationNameCodeSequence is undefined');
    }
    return value;
  }

  // Performed Station Class Code Sequence
  get PerformedStationClassCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404029;
  }

  get x00404029(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404029']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPerformedStationClassCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404029;
    if (value === undefined) {
      throw new Error('PerformedStationClassCodeSequence is undefined');
    }
    return value;
  }

  // Performed Station Geographic Location Code Sequence
  get PerformedStationGeographicLocationCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404030;
  }

  get x00404030(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404030']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPerformedStationGeographicLocationCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404030;
    if (value === undefined) {
      throw new Error('PerformedStationGeographicLocationCodeSequence is undefined');
    }
    return value;
  }

  // Requested Subsequent Workitem Code Sequence
  get RequestedSubsequentWorkitemCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404031;
  }

  get x00404031(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404031']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRequestedSubsequentWorkitemCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404031;
    if (value === undefined) {
      throw new Error('RequestedSubsequentWorkitemCodeSequence is undefined');
    }
    return value;
  }

  // Non-DICOM Output Code Sequence
  get NonDICOMOutputCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404032;
  }

  get x00404032(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404032']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getNonDICOMOutputCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404032;
    if (value === undefined) {
      throw new Error('NonDICOMOutputCodeSequence is undefined');
    }
    return value;
  }

  // Output Information Sequence
  get OutputInformationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404033;
  }

  get x00404033(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404033']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOutputInformationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404033;
    if (value === undefined) {
      throw new Error('OutputInformationSequence is undefined');
    }
    return value;
  }

  // Scheduled Human Performers Sequence
  get ScheduledHumanPerformersSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404034;
  }

  get x00404034(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404034']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getScheduledHumanPerformersSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404034;
    if (value === undefined) {
      throw new Error('ScheduledHumanPerformersSequence is undefined');
    }
    return value;
  }

  // Actual Human Performers Sequence
  get ActualHumanPerformersSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00404035;
  }

  get x00404035(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00404035']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getActualHumanPerformersSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00404035;
    if (value === undefined) {
      throw new Error('ActualHumanPerformersSequence is undefined');
    }
    return value;
  }

  // Human Performer's Organization
  get HumanPerformerOrganization(): string | undefined {
    return this.x00404036;
  }

  get x00404036(): string | undefined {
    const value = this.dwResponse['00404036']?.Value;
    return convert(value?.[0], 0x00404036, 'string');
  }

  getHumanPerformerOrganization(): string {
    const value = this.x00404036;
    if (value === undefined) {
      throw new Error('HumanPerformerOrganization is undefined');
    }
    return value;
  }

  // Human Performer's Name
  get HumanPerformerName(): any | undefined {
    return this.x00404037;
  }

  get x00404037(): any | undefined {
    const value = this.dwResponse['00404037']?.Value;
    return convert(value?.[0], 0x00404037, 'any');
  }

  getHumanPerformerName(): any {
    const value = this.x00404037;
    if (value === undefined) {
      throw new Error('HumanPerformerName is undefined');
    }
    return value;
  }

  // Raw Data Handling
  get RawDataHandling(): string | undefined {
    return this.x00404040;
  }

  get x00404040(): string | undefined {
    const value = this.dwResponse['00404040']?.Value;
    return convert(value?.[0], 0x00404040, 'string');
  }

  getRawDataHandling(): string {
    const value = this.x00404040;
    if (value === undefined) {
      throw new Error('RawDataHandling is undefined');
    }
    return value;
  }

  // Input Readiness State
  get InputReadinessState(): string | undefined {
    return this.x00404041;
  }

  get x00404041(): string | undefined {
    const value = this.dwResponse['00404041']?.Value;
    return convert(value?.[0], 0x00404041, 'string');
  }

  getInputReadinessState(): string {
    const value = this.x00404041;
    if (value === undefined) {
      throw new Error('InputReadinessState is undefined');
    }
    return value;
  }

  // Performed Procedure Step Start DateTime
  get PerformedProcedureStepStartDateTime(): string | undefined {
    return this.x00404050;
  }

  get x00404050(): string | undefined {
    const value = this.dwResponse['00404050']?.Value;
    return convert(value?.[0], 0x00404050, 'string');
  }

  getPerformedProcedureStepStartDateTime(): string {
    const value = this.x00404050;
    if (value === undefined) {
      throw new Error('PerformedProcedureStepStartDateTime is undefined');
    }
    return value;
  }

  // Performed Procedure Step End DateTime
  get PerformedProcedureStepEndDateTime(): string | undefined {
    return this.x00404051;
  }

  get x00404051(): string | undefined {
    const value = this.dwResponse['00404051']?.Value;
    return convert(value?.[0], 0x00404051, 'string');
  }

  getPerformedProcedureStepEndDateTime(): string {
    const value = this.x00404051;
    if (value === undefined) {
      throw new Error('PerformedProcedureStepEndDateTime is undefined');
    }
    return value;
  }

  // Procedure Step Cancellation DateTime
  get ProcedureStepCancellationDateTime(): string | undefined {
    return this.x00404052;
  }

  get x00404052(): string | undefined {
    const value = this.dwResponse['00404052']?.Value;
    return convert(value?.[0], 0x00404052, 'string');
  }

  getProcedureStepCancellationDateTime(): string {
    const value = this.x00404052;
    if (value === undefined) {
      throw new Error('ProcedureStepCancellationDateTime is undefined');
    }
    return value;
  }

  // Entrance Dose in mGy
  get EntranceDoseInmGy(): number | undefined {
    return this.x00408302;
  }

  get x00408302(): number | undefined {
    const value = this.dwResponse['00408302']?.Value;
    return convert(value?.[0], 0x00408302, 'number');
  }

  getEntranceDoseInmGy(): number {
    const value = this.x00408302;
    if (value === undefined) {
      throw new Error('EntranceDoseInmGy is undefined');
    }
    return value;
  }

  // Referenced Image Real World Value Mapping Sequence
  get ReferencedImageRealWorldValueMappingSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00409094;
  }

  get x00409094(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00409094']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedImageRealWorldValueMappingSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00409094;
    if (value === undefined) {
      throw new Error('ReferencedImageRealWorldValueMappingSequence is undefined');
    }
    return value;
  }

  // Real World Value Mapping Sequence
  get RealWorldValueMappingSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00409096;
  }

  get x00409096(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00409096']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRealWorldValueMappingSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00409096;
    if (value === undefined) {
      throw new Error('RealWorldValueMappingSequence is undefined');
    }
    return value;
  }

  // Pixel Value Mapping Code Sequence
  get PixelValueMappingCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00409098;
  }

  get x00409098(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00409098']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPixelValueMappingCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00409098;
    if (value === undefined) {
      throw new Error('PixelValueMappingCodeSequence is undefined');
    }
    return value;
  }

  // LUT Label
  get LUTLabel(): string | undefined {
    return this.x00409210;
  }

  get x00409210(): string | undefined {
    const value = this.dwResponse['00409210']?.Value;
    return convert(value?.[0], 0x00409210, 'string');
  }

  getLUTLabel(): string {
    const value = this.x00409210;
    if (value === undefined) {
      throw new Error('LUTLabel is undefined');
    }
    return value;
  }

  // Real World Value Last Value Mapped
  get RealWorldValueLastValueMapped(): number | undefined {
    return this.x00409211;
  }

  get x00409211(): number | undefined {
    const value = this.dwResponse['00409211']?.Value;
    return convert(value?.[0], 0x00409211, 'number');
  }

  getRealWorldValueLastValueMapped(): number {
    const value = this.x00409211;
    if (value === undefined) {
      throw new Error('RealWorldValueLastValueMapped is undefined');
    }
    return value;
  }

  // Real World Value LUT Data
  get RealWorldValueLUTData(): Array<number | undefined> | undefined {
    return this.x00409212;
  }

  get x00409212(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00409212']?.Value;
    return convert(value, 0x00409212, 'Array<number | undefined>');
  }

  getRealWorldValueLUTData(): Array<number | undefined> {
    const value = this.x00409212;
    if (value === undefined) {
      throw new Error('RealWorldValueLUTData is undefined');
    }
    return value;
  }

  // Real World Value First Value Mapped
  get RealWorldValueFirstValueMapped(): number | undefined {
    return this.x00409216;
  }

  get x00409216(): number | undefined {
    const value = this.dwResponse['00409216']?.Value;
    return convert(value?.[0], 0x00409216, 'number');
  }

  getRealWorldValueFirstValueMapped(): number {
    const value = this.x00409216;
    if (value === undefined) {
      throw new Error('RealWorldValueFirstValueMapped is undefined');
    }
    return value;
  }

  // Real World Value Intercept
  get RealWorldValueIntercept(): number | undefined {
    return this.x00409224;
  }

  get x00409224(): number | undefined {
    const value = this.dwResponse['00409224']?.Value;
    return convert(value?.[0], 0x00409224, 'number');
  }

  getRealWorldValueIntercept(): number {
    const value = this.x00409224;
    if (value === undefined) {
      throw new Error('RealWorldValueIntercept is undefined');
    }
    return value;
  }

  // Real World Value Slope
  get RealWorldValueSlope(): number | undefined {
    return this.x00409225;
  }

  get x00409225(): number | undefined {
    const value = this.dwResponse['00409225']?.Value;
    return convert(value?.[0], 0x00409225, 'number');
  }

  getRealWorldValueSlope(): number {
    const value = this.x00409225;
    if (value === undefined) {
      throw new Error('RealWorldValueSlope is undefined');
    }
    return value;
  }

  // Findings Flag (Trial)
  get FindingsFlagTrial(): string | undefined {
    return this.x0040a007;
  }

  get x0040a007(): string | undefined {
    const value = this.dwResponse['0040A007']?.Value;
    return convert(value?.[0], 0x0040a007, 'string');
  }

  getFindingsFlagTrial(): string {
    const value = this.x0040a007;
    if (value === undefined) {
      throw new Error('FindingsFlagTrial is undefined');
    }
    return value;
  }

  // Relationship Type
  get RelationshipType(): string | undefined {
    return this.x0040a010;
  }

  get x0040a010(): string | undefined {
    const value = this.dwResponse['0040A010']?.Value;
    return convert(value?.[0], 0x0040a010, 'string');
  }

  getRelationshipType(): string {
    const value = this.x0040a010;
    if (value === undefined) {
      throw new Error('RelationshipType is undefined');
    }
    return value;
  }

  // Findings Sequence (Trial)
  get FindingsSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a020;
  }

  get x0040a020(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A020']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFindingsSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a020;
    if (value === undefined) {
      throw new Error('FindingsSequenceTrial is undefined');
    }
    return value;
  }

  // Findings Group UID (Trial)
  get FindingsGroupUIDTrial(): string | undefined {
    return this.x0040a021;
  }

  get x0040a021(): string | undefined {
    const value = this.dwResponse['0040A021']?.Value;
    return convert(value?.[0], 0x0040a021, 'string');
  }

  getFindingsGroupUIDTrial(): string {
    const value = this.x0040a021;
    if (value === undefined) {
      throw new Error('FindingsGroupUIDTrial is undefined');
    }
    return value;
  }

  // Referenced Findings Group UID (Trial)
  get ReferencedFindingsGroupUIDTrial(): string | undefined {
    return this.x0040a022;
  }

  get x0040a022(): string | undefined {
    const value = this.dwResponse['0040A022']?.Value;
    return convert(value?.[0], 0x0040a022, 'string');
  }

  getReferencedFindingsGroupUIDTrial(): string {
    const value = this.x0040a022;
    if (value === undefined) {
      throw new Error('ReferencedFindingsGroupUIDTrial is undefined');
    }
    return value;
  }

  // Findings Group Recording Date (Trial)
  get FindingsGroupRecordingDateTrial(): Date | undefined {
    return this.x0040a023;
  }

  get x0040a023(): Date | undefined {
    const value = this.dwResponse['0040A023']?.Value;
    return convert(value?.[0], 0x0040a023, 'Date');
  }

  getFindingsGroupRecordingDateTrial(): Date {
    const value = this.x0040a023;
    if (value === undefined) {
      throw new Error('FindingsGroupRecordingDateTrial is undefined');
    }
    return value;
  }

  // Findings Group Recording Time (Trial)
  get FindingsGroupRecordingTimeTrial(): string | undefined {
    return this.x0040a024;
  }

  get x0040a024(): string | undefined {
    const value = this.dwResponse['0040A024']?.Value;
    return convert(value?.[0], 0x0040a024, 'string');
  }

  getFindingsGroupRecordingTimeTrial(): string {
    const value = this.x0040a024;
    if (value === undefined) {
      throw new Error('FindingsGroupRecordingTimeTrial is undefined');
    }
    return value;
  }

  // Findings Source Category Code Sequence (Trial)
  get FindingsSourceCategoryCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a026;
  }

  get x0040a026(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A026']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFindingsSourceCategoryCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a026;
    if (value === undefined) {
      throw new Error('FindingsSourceCategoryCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Verifying Organization
  get VerifyingOrganization(): string | undefined {
    return this.x0040a027;
  }

  get x0040a027(): string | undefined {
    const value = this.dwResponse['0040A027']?.Value;
    return convert(value?.[0], 0x0040a027, 'string');
  }

  getVerifyingOrganization(): string {
    const value = this.x0040a027;
    if (value === undefined) {
      throw new Error('VerifyingOrganization is undefined');
    }
    return value;
  }

  // Documenting Organization Identifier Code Sequence (Trial)
  get DocumentingOrganizationIdentifierCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a028;
  }

  get x0040a028(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A028']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDocumentingOrganizationIdentifierCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a028;
    if (value === undefined) {
      throw new Error('DocumentingOrganizationIdentifierCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Verification DateTime
  get VerificationDateTime(): string | undefined {
    return this.x0040a030;
  }

  get x0040a030(): string | undefined {
    const value = this.dwResponse['0040A030']?.Value;
    return convert(value?.[0], 0x0040a030, 'string');
  }

  getVerificationDateTime(): string {
    const value = this.x0040a030;
    if (value === undefined) {
      throw new Error('VerificationDateTime is undefined');
    }
    return value;
  }

  // Observation DateTime
  get ObservationDateTime(): string | undefined {
    return this.x0040a032;
  }

  get x0040a032(): string | undefined {
    const value = this.dwResponse['0040A032']?.Value;
    return convert(value?.[0], 0x0040a032, 'string');
  }

  getObservationDateTime(): string {
    const value = this.x0040a032;
    if (value === undefined) {
      throw new Error('ObservationDateTime is undefined');
    }
    return value;
  }

  // Value Type
  get ValueType(): string | undefined {
    return this.x0040a040;
  }

  get x0040a040(): string | undefined {
    const value = this.dwResponse['0040A040']?.Value;
    return convert(value?.[0], 0x0040a040, 'string');
  }

  getValueType(): string {
    const value = this.x0040a040;
    if (value === undefined) {
      throw new Error('ValueType is undefined');
    }
    return value;
  }

  // Concept Name Code Sequence
  get ConceptNameCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a043;
  }

  get x0040a043(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A043']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getConceptNameCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a043;
    if (value === undefined) {
      throw new Error('ConceptNameCodeSequence is undefined');
    }
    return value;
  }

  // Measurement Precision Description (Trial)
  get MeasurementPrecisionDescriptionTrial(): string | undefined {
    return this.x0040a047;
  }

  get x0040a047(): string | undefined {
    const value = this.dwResponse['0040A047']?.Value;
    return convert(value?.[0], 0x0040a047, 'string');
  }

  getMeasurementPrecisionDescriptionTrial(): string {
    const value = this.x0040a047;
    if (value === undefined) {
      throw new Error('MeasurementPrecisionDescriptionTrial is undefined');
    }
    return value;
  }

  // Continuity Of Content
  get ContinuityOfContent(): string | undefined {
    return this.x0040a050;
  }

  get x0040a050(): string | undefined {
    const value = this.dwResponse['0040A050']?.Value;
    return convert(value?.[0], 0x0040a050, 'string');
  }

  getContinuityOfContent(): string {
    const value = this.x0040a050;
    if (value === undefined) {
      throw new Error('ContinuityOfContent is undefined');
    }
    return value;
  }

  // Urgency or Priority Alerts (Trial)
  get UrgencyOrPriorityAlertsTrial(): Array<string | undefined> | undefined {
    return this.x0040a057;
  }

  get x0040a057(): Array<string | undefined> | undefined {
    const value = this.dwResponse['0040A057']?.Value;
    return convert(value, 0x0040a057, 'Array<string | undefined>');
  }

  getUrgencyOrPriorityAlertsTrial(): Array<string | undefined> {
    const value = this.x0040a057;
    if (value === undefined) {
      throw new Error('UrgencyOrPriorityAlertsTrial is undefined');
    }
    return value;
  }

  // Sequencing Indicator (Trial)
  get SequencingIndicatorTrial(): string | undefined {
    return this.x0040a060;
  }

  get x0040a060(): string | undefined {
    const value = this.dwResponse['0040A060']?.Value;
    return convert(value?.[0], 0x0040a060, 'string');
  }

  getSequencingIndicatorTrial(): string {
    const value = this.x0040a060;
    if (value === undefined) {
      throw new Error('SequencingIndicatorTrial is undefined');
    }
    return value;
  }

  // Document Identifier Code Sequence (Trial)
  get DocumentIdentifierCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a066;
  }

  get x0040a066(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A066']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDocumentIdentifierCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a066;
    if (value === undefined) {
      throw new Error('DocumentIdentifierCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Document Author (Trial)
  get DocumentAuthorTrial(): any | undefined {
    return this.x0040a067;
  }

  get x0040a067(): any | undefined {
    const value = this.dwResponse['0040A067']?.Value;
    return convert(value?.[0], 0x0040a067, 'any');
  }

  getDocumentAuthorTrial(): any {
    const value = this.x0040a067;
    if (value === undefined) {
      throw new Error('DocumentAuthorTrial is undefined');
    }
    return value;
  }

  // Document Author Identifier Code Sequence (Trial)
  get DocumentAuthorIdentifierCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a068;
  }

  get x0040a068(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A068']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDocumentAuthorIdentifierCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a068;
    if (value === undefined) {
      throw new Error('DocumentAuthorIdentifierCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Identifier Code Sequence (Trial)
  get IdentifierCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a070;
  }

  get x0040a070(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A070']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIdentifierCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a070;
    if (value === undefined) {
      throw new Error('IdentifierCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Verifying Observer Sequence
  get VerifyingObserverSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a073;
  }

  get x0040a073(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A073']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVerifyingObserverSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a073;
    if (value === undefined) {
      throw new Error('VerifyingObserverSequence is undefined');
    }
    return value;
  }

  // Verifying Observer Name
  get VerifyingObserverName(): any | undefined {
    return this.x0040a075;
  }

  get x0040a075(): any | undefined {
    const value = this.dwResponse['0040A075']?.Value;
    return convert(value?.[0], 0x0040a075, 'any');
  }

  getVerifyingObserverName(): any {
    const value = this.x0040a075;
    if (value === undefined) {
      throw new Error('VerifyingObserverName is undefined');
    }
    return value;
  }

  // Documenting Observer Identifier Code Sequence (Trial)
  get DocumentingObserverIdentifierCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a076;
  }

  get x0040a076(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A076']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDocumentingObserverIdentifierCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a076;
    if (value === undefined) {
      throw new Error('DocumentingObserverIdentifierCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Author Observer Sequence
  get AuthorObserverSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a078;
  }

  get x0040a078(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A078']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAuthorObserverSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a078;
    if (value === undefined) {
      throw new Error('AuthorObserverSequence is undefined');
    }
    return value;
  }

  // Participant Sequence
  get ParticipantSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a07a;
  }

  get x0040a07a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A07A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getParticipantSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a07a;
    if (value === undefined) {
      throw new Error('ParticipantSequence is undefined');
    }
    return value;
  }

  // Custodial Organization Sequence
  get CustodialOrganizationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a07c;
  }

  get x0040a07c(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A07C']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCustodialOrganizationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a07c;
    if (value === undefined) {
      throw new Error('CustodialOrganizationSequence is undefined');
    }
    return value;
  }

  // Participation Type
  get ParticipationType(): string | undefined {
    return this.x0040a080;
  }

  get x0040a080(): string | undefined {
    const value = this.dwResponse['0040A080']?.Value;
    return convert(value?.[0], 0x0040a080, 'string');
  }

  getParticipationType(): string {
    const value = this.x0040a080;
    if (value === undefined) {
      throw new Error('ParticipationType is undefined');
    }
    return value;
  }

  // Participation DateTime
  get ParticipationDateTime(): string | undefined {
    return this.x0040a082;
  }

  get x0040a082(): string | undefined {
    const value = this.dwResponse['0040A082']?.Value;
    return convert(value?.[0], 0x0040a082, 'string');
  }

  getParticipationDateTime(): string {
    const value = this.x0040a082;
    if (value === undefined) {
      throw new Error('ParticipationDateTime is undefined');
    }
    return value;
  }

  // Observer Type
  get ObserverType(): string | undefined {
    return this.x0040a084;
  }

  get x0040a084(): string | undefined {
    const value = this.dwResponse['0040A084']?.Value;
    return convert(value?.[0], 0x0040a084, 'string');
  }

  getObserverType(): string {
    const value = this.x0040a084;
    if (value === undefined) {
      throw new Error('ObserverType is undefined');
    }
    return value;
  }

  // Procedure Identifier Code Sequence (Trial)
  get ProcedureIdentifierCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a085;
  }

  get x0040a085(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A085']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getProcedureIdentifierCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a085;
    if (value === undefined) {
      throw new Error('ProcedureIdentifierCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Verifying Observer Identification Code Sequence
  get VerifyingObserverIdentificationCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a088;
  }

  get x0040a088(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A088']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVerifyingObserverIdentificationCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a088;
    if (value === undefined) {
      throw new Error('VerifyingObserverIdentificationCodeSequence is undefined');
    }
    return value;
  }

  // Equivalent CDA Document Sequence
  get EquivalentCDADocumentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a090;
  }

  get x0040a090(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A090']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getEquivalentCDADocumentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a090;
    if (value === undefined) {
      throw new Error('EquivalentCDADocumentSequence is undefined');
    }
    return value;
  }

  // Referenced Waveform Channels
  get ReferencedWaveformChannels(): Array<number | undefined> | undefined {
    return this.x0040a0b0;
  }

  get x0040a0b0(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0040A0B0']?.Value;
    return convert(value, 0x0040a0b0, 'Array<number | undefined>');
  }

  getReferencedWaveformChannels(): Array<number | undefined> {
    const value = this.x0040a0b0;
    if (value === undefined) {
      throw new Error('ReferencedWaveformChannels is undefined');
    }
    return value;
  }

  // Date of Document or Verbal Transaction (Trial)
  get DateOfDocumentOrVerbalTransactionTrial(): Date | undefined {
    return this.x0040a110;
  }

  get x0040a110(): Date | undefined {
    const value = this.dwResponse['0040A110']?.Value;
    return convert(value?.[0], 0x0040a110, 'Date');
  }

  getDateOfDocumentOrVerbalTransactionTrial(): Date {
    const value = this.x0040a110;
    if (value === undefined) {
      throw new Error('DateOfDocumentOrVerbalTransactionTrial is undefined');
    }
    return value;
  }

  // Time of Document Creation or Verbal Transaction (Trial)
  get TimeOfDocumentCreationOrVerbalTransactionTrial(): string | undefined {
    return this.x0040a112;
  }

  get x0040a112(): string | undefined {
    const value = this.dwResponse['0040A112']?.Value;
    return convert(value?.[0], 0x0040a112, 'string');
  }

  getTimeOfDocumentCreationOrVerbalTransactionTrial(): string {
    const value = this.x0040a112;
    if (value === undefined) {
      throw new Error('TimeOfDocumentCreationOrVerbalTransactionTrial is undefined');
    }
    return value;
  }

  // DateTime
  get DateTime(): string | undefined {
    return this.x0040a120;
  }

  get x0040a120(): string | undefined {
    const value = this.dwResponse['0040A120']?.Value;
    return convert(value?.[0], 0x0040a120, 'string');
  }

  getDateTime(): string {
    const value = this.x0040a120;
    if (value === undefined) {
      throw new Error('DateTime is undefined');
    }
    return value;
  }

  // Date
  get Date(): Date | undefined {
    return this.x0040a121;
  }

  get x0040a121(): Date | undefined {
    const value = this.dwResponse['0040A121']?.Value;
    return convert(value?.[0], 0x0040a121, 'Date');
  }

  getDate(): Date {
    const value = this.x0040a121;
    if (value === undefined) {
      throw new Error('Date is undefined');
    }
    return value;
  }

  // Time
  get Time(): string | undefined {
    return this.x0040a122;
  }

  get x0040a122(): string | undefined {
    const value = this.dwResponse['0040A122']?.Value;
    return convert(value?.[0], 0x0040a122, 'string');
  }

  getTime(): string {
    const value = this.x0040a122;
    if (value === undefined) {
      throw new Error('Time is undefined');
    }
    return value;
  }

  // Person Name
  get PersonName(): any | undefined {
    return this.x0040a123;
  }

  get x0040a123(): any | undefined {
    const value = this.dwResponse['0040A123']?.Value;
    return convert(value?.[0], 0x0040a123, 'any');
  }

  getPersonName(): any {
    const value = this.x0040a123;
    if (value === undefined) {
      throw new Error('PersonName is undefined');
    }
    return value;
  }

  // UID
  get UID(): string | undefined {
    return this.x0040a124;
  }

  get x0040a124(): string | undefined {
    const value = this.dwResponse['0040A124']?.Value;
    return convert(value?.[0], 0x0040a124, 'string');
  }

  getUID(): string {
    const value = this.x0040a124;
    if (value === undefined) {
      throw new Error('UID is undefined');
    }
    return value;
  }

  // Report Status ID (Trial)
  get ReportStatusIDTrial(): Array<string | undefined> | undefined {
    return this.x0040a125;
  }

  get x0040a125(): Array<string | undefined> | undefined {
    const value = this.dwResponse['0040A125']?.Value;
    return convert(value, 0x0040a125, 'Array<string | undefined>');
  }

  getReportStatusIDTrial(): Array<string | undefined> {
    const value = this.x0040a125;
    if (value === undefined) {
      throw new Error('ReportStatusIDTrial is undefined');
    }
    return value;
  }

  // Temporal Range Type
  get TemporalRangeType(): string | undefined {
    return this.x0040a130;
  }

  get x0040a130(): string | undefined {
    const value = this.dwResponse['0040A130']?.Value;
    return convert(value?.[0], 0x0040a130, 'string');
  }

  getTemporalRangeType(): string {
    const value = this.x0040a130;
    if (value === undefined) {
      throw new Error('TemporalRangeType is undefined');
    }
    return value;
  }

  // Referenced Sample Positions
  get ReferencedSamplePositions(): Array<number | undefined> | undefined {
    return this.x0040a132;
  }

  get x0040a132(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0040A132']?.Value;
    return convert(value, 0x0040a132, 'Array<number | undefined>');
  }

  getReferencedSamplePositions(): Array<number | undefined> {
    const value = this.x0040a132;
    if (value === undefined) {
      throw new Error('ReferencedSamplePositions is undefined');
    }
    return value;
  }

  // Referenced Frame Numbers
  get ReferencedFrameNumbers(): Array<number | undefined> | undefined {
    return this.x0040a136;
  }

  get x0040a136(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0040A136']?.Value;
    return convert(value, 0x0040a136, 'Array<number | undefined>');
  }

  getReferencedFrameNumbers(): Array<number | undefined> {
    const value = this.x0040a136;
    if (value === undefined) {
      throw new Error('ReferencedFrameNumbers is undefined');
    }
    return value;
  }

  // Referenced Time Offsets
  get ReferencedTimeOffsets(): Array<number | undefined> | undefined {
    return this.x0040a138;
  }

  get x0040a138(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0040A138']?.Value;
    return convert(value, 0x0040a138, 'Array<number | undefined>');
  }

  getReferencedTimeOffsets(): Array<number | undefined> {
    const value = this.x0040a138;
    if (value === undefined) {
      throw new Error('ReferencedTimeOffsets is undefined');
    }
    return value;
  }

  // Referenced DateTime
  get ReferencedDateTime(): Array<string | undefined> | undefined {
    return this.x0040a13a;
  }

  get x0040a13a(): Array<string | undefined> | undefined {
    const value = this.dwResponse['0040A13A']?.Value;
    return convert(value, 0x0040a13a, 'Array<string | undefined>');
  }

  getReferencedDateTime(): Array<string | undefined> {
    const value = this.x0040a13a;
    if (value === undefined) {
      throw new Error('ReferencedDateTime is undefined');
    }
    return value;
  }

  // Floating Point Value
  get FloatingPointValue(): Array<number | undefined> | undefined {
    return this.x0040a161;
  }

  get x0040a161(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0040A161']?.Value;
    return convert(value, 0x0040a161, 'Array<number | undefined>');
  }

  getFloatingPointValue(): Array<number | undefined> {
    const value = this.x0040a161;
    if (value === undefined) {
      throw new Error('FloatingPointValue is undefined');
    }
    return value;
  }

  // Rational Numerator Value
  get RationalNumeratorValue(): Array<number | undefined> | undefined {
    return this.x0040a162;
  }

  get x0040a162(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0040A162']?.Value;
    return convert(value, 0x0040a162, 'Array<number | undefined>');
  }

  getRationalNumeratorValue(): Array<number | undefined> {
    const value = this.x0040a162;
    if (value === undefined) {
      throw new Error('RationalNumeratorValue is undefined');
    }
    return value;
  }

  // Rational Denominator Value
  get RationalDenominatorValue(): Array<number | undefined> | undefined {
    return this.x0040a163;
  }

  get x0040a163(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0040A163']?.Value;
    return convert(value, 0x0040a163, 'Array<number | undefined>');
  }

  getRationalDenominatorValue(): Array<number | undefined> {
    const value = this.x0040a163;
    if (value === undefined) {
      throw new Error('RationalDenominatorValue is undefined');
    }
    return value;
  }

  // Observation Category Code Sequence (Trial)
  get ObservationCategoryCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a167;
  }

  get x0040a167(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A167']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getObservationCategoryCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a167;
    if (value === undefined) {
      throw new Error('ObservationCategoryCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Concept Code Sequence
  get ConceptCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a168;
  }

  get x0040a168(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A168']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getConceptCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a168;
    if (value === undefined) {
      throw new Error('ConceptCodeSequence is undefined');
    }
    return value;
  }

  // Purpose of Reference Code Sequence
  get PurposeOfReferenceCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a170;
  }

  get x0040a170(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A170']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPurposeOfReferenceCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a170;
    if (value === undefined) {
      throw new Error('PurposeOfReferenceCodeSequence is undefined');
    }
    return value;
  }

  // Observation UID
  get ObservationUID(): string | undefined {
    return this.x0040a171;
  }

  get x0040a171(): string | undefined {
    const value = this.dwResponse['0040A171']?.Value;
    return convert(value?.[0], 0x0040a171, 'string');
  }

  getObservationUID(): string {
    const value = this.x0040a171;
    if (value === undefined) {
      throw new Error('ObservationUID is undefined');
    }
    return value;
  }

  // Referenced Observation UID (Trial)
  get ReferencedObservationUIDTrial(): string | undefined {
    return this.x0040a172;
  }

  get x0040a172(): string | undefined {
    const value = this.dwResponse['0040A172']?.Value;
    return convert(value?.[0], 0x0040a172, 'string');
  }

  getReferencedObservationUIDTrial(): string {
    const value = this.x0040a172;
    if (value === undefined) {
      throw new Error('ReferencedObservationUIDTrial is undefined');
    }
    return value;
  }

  // Referenced Observation Class (Trial)
  get ReferencedObservationClassTrial(): string | undefined {
    return this.x0040a173;
  }

  get x0040a173(): string | undefined {
    const value = this.dwResponse['0040A173']?.Value;
    return convert(value?.[0], 0x0040a173, 'string');
  }

  getReferencedObservationClassTrial(): string {
    const value = this.x0040a173;
    if (value === undefined) {
      throw new Error('ReferencedObservationClassTrial is undefined');
    }
    return value;
  }

  // Referenced Object Observation Class (Trial)
  get ReferencedObjectObservationClassTrial(): string | undefined {
    return this.x0040a174;
  }

  get x0040a174(): string | undefined {
    const value = this.dwResponse['0040A174']?.Value;
    return convert(value?.[0], 0x0040a174, 'string');
  }

  getReferencedObjectObservationClassTrial(): string {
    const value = this.x0040a174;
    if (value === undefined) {
      throw new Error('ReferencedObjectObservationClassTrial is undefined');
    }
    return value;
  }

  // Annotation Group Number
  get AnnotationGroupNumber(): number | undefined {
    return this.x0040a180;
  }

  get x0040a180(): number | undefined {
    const value = this.dwResponse['0040A180']?.Value;
    return convert(value?.[0], 0x0040a180, 'number');
  }

  getAnnotationGroupNumber(): number {
    const value = this.x0040a180;
    if (value === undefined) {
      throw new Error('AnnotationGroupNumber is undefined');
    }
    return value;
  }

  // Observation Date (Trial)
  get ObservationDateTrial(): Date | undefined {
    return this.x0040a192;
  }

  get x0040a192(): Date | undefined {
    const value = this.dwResponse['0040A192']?.Value;
    return convert(value?.[0], 0x0040a192, 'Date');
  }

  getObservationDateTrial(): Date {
    const value = this.x0040a192;
    if (value === undefined) {
      throw new Error('ObservationDateTrial is undefined');
    }
    return value;
  }

  // Observation Time (Trial)
  get ObservationTimeTrial(): string | undefined {
    return this.x0040a193;
  }

  get x0040a193(): string | undefined {
    const value = this.dwResponse['0040A193']?.Value;
    return convert(value?.[0], 0x0040a193, 'string');
  }

  getObservationTimeTrial(): string {
    const value = this.x0040a193;
    if (value === undefined) {
      throw new Error('ObservationTimeTrial is undefined');
    }
    return value;
  }

  // Measurement Automation (Trial)
  get MeasurementAutomationTrial(): string | undefined {
    return this.x0040a194;
  }

  get x0040a194(): string | undefined {
    const value = this.dwResponse['0040A194']?.Value;
    return convert(value?.[0], 0x0040a194, 'string');
  }

  getMeasurementAutomationTrial(): string {
    const value = this.x0040a194;
    if (value === undefined) {
      throw new Error('MeasurementAutomationTrial is undefined');
    }
    return value;
  }

  // Modifier Code Sequence
  get ModifierCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a195;
  }

  get x0040a195(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A195']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getModifierCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a195;
    if (value === undefined) {
      throw new Error('ModifierCodeSequence is undefined');
    }
    return value;
  }

  // Coordinates Set Geometric Type (Trial)
  get CoordinatesSetGeometricTypeTrial(): string | undefined {
    return this.x0040a290;
  }

  get x0040a290(): string | undefined {
    const value = this.dwResponse['0040A290']?.Value;
    return convert(value?.[0], 0x0040a290, 'string');
  }

  getCoordinatesSetGeometricTypeTrial(): string {
    const value = this.x0040a290;
    if (value === undefined) {
      throw new Error('CoordinatesSetGeometricTypeTrial is undefined');
    }
    return value;
  }

  // Algorithm Code Sequence (Trial)
  get AlgorithmCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a296;
  }

  get x0040a296(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A296']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAlgorithmCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a296;
    if (value === undefined) {
      throw new Error('AlgorithmCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Pixel Coordinates Set (Trial)
  get PixelCoordinatesSetTrial(): Array<number | undefined> | undefined {
    return this.x0040a29a;
  }

  get x0040a29a(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0040A29A']?.Value;
    return convert(value, 0x0040a29a, 'Array<number | undefined>');
  }

  getPixelCoordinatesSetTrial(): Array<number | undefined> {
    const value = this.x0040a29a;
    if (value === undefined) {
      throw new Error('PixelCoordinatesSetTrial is undefined');
    }
    return value;
  }

  // Measured Value Sequence
  get MeasuredValueSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a300;
  }

  get x0040a300(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A300']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMeasuredValueSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a300;
    if (value === undefined) {
      throw new Error('MeasuredValueSequence is undefined');
    }
    return value;
  }

  // Numeric Value Qualifier Code Sequence
  get NumericValueQualifierCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a301;
  }

  get x0040a301(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A301']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getNumericValueQualifierCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a301;
    if (value === undefined) {
      throw new Error('NumericValueQualifierCodeSequence is undefined');
    }
    return value;
  }

  // Current Observer (Trial)
  get CurrentObserverTrial(): any | undefined {
    return this.x0040a307;
  }

  get x0040a307(): any | undefined {
    const value = this.dwResponse['0040A307']?.Value;
    return convert(value?.[0], 0x0040a307, 'any');
  }

  getCurrentObserverTrial(): any {
    const value = this.x0040a307;
    if (value === undefined) {
      throw new Error('CurrentObserverTrial is undefined');
    }
    return value;
  }

  // Numeric Value
  get NumericValue(): Array<number | undefined> | undefined {
    return this.x0040a30a;
  }

  get x0040a30a(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0040A30A']?.Value;
    return convert(value, 0x0040a30a, 'Array<number | undefined>');
  }

  getNumericValue(): Array<number | undefined> {
    const value = this.x0040a30a;
    if (value === undefined) {
      throw new Error('NumericValue is undefined');
    }
    return value;
  }

  // Referenced Accession Sequence (Trial)
  get ReferencedAccessionSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a313;
  }

  get x0040a313(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A313']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedAccessionSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a313;
    if (value === undefined) {
      throw new Error('ReferencedAccessionSequenceTrial is undefined');
    }
    return value;
  }

  // Procedure Context Sequence (Trial)
  get ProcedureContextSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a340;
  }

  get x0040a340(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A340']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getProcedureContextSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a340;
    if (value === undefined) {
      throw new Error('ProcedureContextSequenceTrial is undefined');
    }
    return value;
  }

  // Verbal Source (Trial)
  get VerbalSourceTrial(): any | undefined {
    return this.x0040a352;
  }

  get x0040a352(): any | undefined {
    const value = this.dwResponse['0040A352']?.Value;
    return convert(value?.[0], 0x0040a352, 'any');
  }

  getVerbalSourceTrial(): any {
    const value = this.x0040a352;
    if (value === undefined) {
      throw new Error('VerbalSourceTrial is undefined');
    }
    return value;
  }

  // Telephone Number (Trial)
  get TelephoneNumberTrial(): string | undefined {
    return this.x0040a354;
  }

  get x0040a354(): string | undefined {
    const value = this.dwResponse['0040A354']?.Value;
    return convert(value?.[0], 0x0040a354, 'string');
  }

  getTelephoneNumberTrial(): string {
    const value = this.x0040a354;
    if (value === undefined) {
      throw new Error('TelephoneNumberTrial is undefined');
    }
    return value;
  }

  // Verbal Source Identifier Code Sequence (Trial)
  get VerbalSourceIdentifierCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a358;
  }

  get x0040a358(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A358']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVerbalSourceIdentifierCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a358;
    if (value === undefined) {
      throw new Error('VerbalSourceIdentifierCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Predecessor Documents Sequence
  get PredecessorDocumentsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a360;
  }

  get x0040a360(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A360']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPredecessorDocumentsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a360;
    if (value === undefined) {
      throw new Error('PredecessorDocumentsSequence is undefined');
    }
    return value;
  }

  // Referenced Request Sequence
  get ReferencedRequestSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a370;
  }

  get x0040a370(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A370']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedRequestSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a370;
    if (value === undefined) {
      throw new Error('ReferencedRequestSequence is undefined');
    }
    return value;
  }

  // Performed Procedure Code Sequence
  get PerformedProcedureCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a372;
  }

  get x0040a372(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A372']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPerformedProcedureCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a372;
    if (value === undefined) {
      throw new Error('PerformedProcedureCodeSequence is undefined');
    }
    return value;
  }

  // Current Requested Procedure Evidence Sequence
  get CurrentRequestedProcedureEvidenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a375;
  }

  get x0040a375(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A375']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCurrentRequestedProcedureEvidenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a375;
    if (value === undefined) {
      throw new Error('CurrentRequestedProcedureEvidenceSequence is undefined');
    }
    return value;
  }

  // Report Detail Sequence (Trial)
  get ReportDetailSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a380;
  }

  get x0040a380(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A380']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReportDetailSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a380;
    if (value === undefined) {
      throw new Error('ReportDetailSequenceTrial is undefined');
    }
    return value;
  }

  // Pertinent Other Evidence Sequence
  get PertinentOtherEvidenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a385;
  }

  get x0040a385(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A385']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPertinentOtherEvidenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a385;
    if (value === undefined) {
      throw new Error('PertinentOtherEvidenceSequence is undefined');
    }
    return value;
  }

  // HL7 Structured Document Reference Sequence
  get HL7StructuredDocumentReferenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a390;
  }

  get x0040a390(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A390']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getHL7StructuredDocumentReferenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a390;
    if (value === undefined) {
      throw new Error('HL7StructuredDocumentReferenceSequence is undefined');
    }
    return value;
  }

  // Observation Subject UID (Trial)
  get ObservationSubjectUIDTrial(): string | undefined {
    return this.x0040a402;
  }

  get x0040a402(): string | undefined {
    const value = this.dwResponse['0040A402']?.Value;
    return convert(value?.[0], 0x0040a402, 'string');
  }

  getObservationSubjectUIDTrial(): string {
    const value = this.x0040a402;
    if (value === undefined) {
      throw new Error('ObservationSubjectUIDTrial is undefined');
    }
    return value;
  }

  // Observation Subject Class (Trial)
  get ObservationSubjectClassTrial(): string | undefined {
    return this.x0040a403;
  }

  get x0040a403(): string | undefined {
    const value = this.dwResponse['0040A403']?.Value;
    return convert(value?.[0], 0x0040a403, 'string');
  }

  getObservationSubjectClassTrial(): string {
    const value = this.x0040a403;
    if (value === undefined) {
      throw new Error('ObservationSubjectClassTrial is undefined');
    }
    return value;
  }

  // Observation Subject Type Code Sequence (Trial)
  get ObservationSubjectTypeCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a404;
  }

  get x0040a404(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A404']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getObservationSubjectTypeCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a404;
    if (value === undefined) {
      throw new Error('ObservationSubjectTypeCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Completion Flag
  get CompletionFlag(): string | undefined {
    return this.x0040a491;
  }

  get x0040a491(): string | undefined {
    const value = this.dwResponse['0040A491']?.Value;
    return convert(value?.[0], 0x0040a491, 'string');
  }

  getCompletionFlag(): string {
    const value = this.x0040a491;
    if (value === undefined) {
      throw new Error('CompletionFlag is undefined');
    }
    return value;
  }

  // Completion Flag Description
  get CompletionFlagDescription(): string | undefined {
    return this.x0040a492;
  }

  get x0040a492(): string | undefined {
    const value = this.dwResponse['0040A492']?.Value;
    return convert(value?.[0], 0x0040a492, 'string');
  }

  getCompletionFlagDescription(): string {
    const value = this.x0040a492;
    if (value === undefined) {
      throw new Error('CompletionFlagDescription is undefined');
    }
    return value;
  }

  // Verification Flag
  get VerificationFlag(): string | undefined {
    return this.x0040a493;
  }

  get x0040a493(): string | undefined {
    const value = this.dwResponse['0040A493']?.Value;
    return convert(value?.[0], 0x0040a493, 'string');
  }

  getVerificationFlag(): string {
    const value = this.x0040a493;
    if (value === undefined) {
      throw new Error('VerificationFlag is undefined');
    }
    return value;
  }

  // Archive Requested
  get ArchiveRequested(): string | undefined {
    return this.x0040a494;
  }

  get x0040a494(): string | undefined {
    const value = this.dwResponse['0040A494']?.Value;
    return convert(value?.[0], 0x0040a494, 'string');
  }

  getArchiveRequested(): string {
    const value = this.x0040a494;
    if (value === undefined) {
      throw new Error('ArchiveRequested is undefined');
    }
    return value;
  }

  // Preliminary Flag
  get PreliminaryFlag(): string | undefined {
    return this.x0040a496;
  }

  get x0040a496(): string | undefined {
    const value = this.dwResponse['0040A496']?.Value;
    return convert(value?.[0], 0x0040a496, 'string');
  }

  getPreliminaryFlag(): string {
    const value = this.x0040a496;
    if (value === undefined) {
      throw new Error('PreliminaryFlag is undefined');
    }
    return value;
  }

  // Content Template Sequence
  get ContentTemplateSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a504;
  }

  get x0040a504(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A504']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getContentTemplateSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a504;
    if (value === undefined) {
      throw new Error('ContentTemplateSequence is undefined');
    }
    return value;
  }

  // Identical Documents Sequence
  get IdenticalDocumentsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a525;
  }

  get x0040a525(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A525']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIdenticalDocumentsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a525;
    if (value === undefined) {
      throw new Error('IdenticalDocumentsSequence is undefined');
    }
    return value;
  }

  // Observation Subject Context Flag (Trial)
  get ObservationSubjectContextFlagTrial(): string | undefined {
    return this.x0040a600;
  }

  get x0040a600(): string | undefined {
    const value = this.dwResponse['0040A600']?.Value;
    return convert(value?.[0], 0x0040a600, 'string');
  }

  getObservationSubjectContextFlagTrial(): string {
    const value = this.x0040a600;
    if (value === undefined) {
      throw new Error('ObservationSubjectContextFlagTrial is undefined');
    }
    return value;
  }

  // Observer Context Flag (Trial)
  get ObserverContextFlagTrial(): string | undefined {
    return this.x0040a601;
  }

  get x0040a601(): string | undefined {
    const value = this.dwResponse['0040A601']?.Value;
    return convert(value?.[0], 0x0040a601, 'string');
  }

  getObserverContextFlagTrial(): string {
    const value = this.x0040a601;
    if (value === undefined) {
      throw new Error('ObserverContextFlagTrial is undefined');
    }
    return value;
  }

  // Procedure Context Flag (Trial)
  get ProcedureContextFlagTrial(): string | undefined {
    return this.x0040a603;
  }

  get x0040a603(): string | undefined {
    const value = this.dwResponse['0040A603']?.Value;
    return convert(value?.[0], 0x0040a603, 'string');
  }

  getProcedureContextFlagTrial(): string {
    const value = this.x0040a603;
    if (value === undefined) {
      throw new Error('ProcedureContextFlagTrial is undefined');
    }
    return value;
  }

  // Content Sequence
  get ContentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a730;
  }

  get x0040a730(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A730']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getContentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a730;
    if (value === undefined) {
      throw new Error('ContentSequence is undefined');
    }
    return value;
  }

  // Relationship Sequence (Trial)
  get RelationshipSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a731;
  }

  get x0040a731(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A731']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRelationshipSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a731;
    if (value === undefined) {
      throw new Error('RelationshipSequenceTrial is undefined');
    }
    return value;
  }

  // Relationship Type Code Sequence (Trial)
  get RelationshipTypeCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a732;
  }

  get x0040a732(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A732']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRelationshipTypeCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a732;
    if (value === undefined) {
      throw new Error('RelationshipTypeCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Language Code Sequence (Trial)
  get LanguageCodeSequenceTrial(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040a744;
  }

  get x0040a744(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040A744']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getLanguageCodeSequenceTrial(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040a744;
    if (value === undefined) {
      throw new Error('LanguageCodeSequenceTrial is undefined');
    }
    return value;
  }

  // Waveform Annotation Sequence
  get WaveformAnnotationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040b020;
  }

  get x0040b020(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040B020']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getWaveformAnnotationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040b020;
    if (value === undefined) {
      throw new Error('WaveformAnnotationSequence is undefined');
    }
    return value;
  }

  // Template Identifier
  get TemplateIdentifier(): string | undefined {
    return this.x0040db00;
  }

  get x0040db00(): string | undefined {
    const value = this.dwResponse['0040DB00']?.Value;
    return convert(value?.[0], 0x0040db00, 'string');
  }

  getTemplateIdentifier(): string {
    const value = this.x0040db00;
    if (value === undefined) {
      throw new Error('TemplateIdentifier is undefined');
    }
    return value;
  }

  // Template Version
  get TemplateVersion(): string | undefined {
    return this.x0040db06;
  }

  get x0040db06(): string | undefined {
    const value = this.dwResponse['0040DB06']?.Value;
    return convert(value?.[0], 0x0040db06, 'string');
  }

  getTemplateVersion(): string {
    const value = this.x0040db06;
    if (value === undefined) {
      throw new Error('TemplateVersion is undefined');
    }
    return value;
  }

  // Template Local Version
  get TemplateLocalVersion(): string | undefined {
    return this.x0040db07;
  }

  get x0040db07(): string | undefined {
    const value = this.dwResponse['0040DB07']?.Value;
    return convert(value?.[0], 0x0040db07, 'string');
  }

  getTemplateLocalVersion(): string {
    const value = this.x0040db07;
    if (value === undefined) {
      throw new Error('TemplateLocalVersion is undefined');
    }
    return value;
  }

  // Template Extension Flag
  get TemplateExtensionFlag(): string | undefined {
    return this.x0040db0b;
  }

  get x0040db0b(): string | undefined {
    const value = this.dwResponse['0040DB0B']?.Value;
    return convert(value?.[0], 0x0040db0b, 'string');
  }

  getTemplateExtensionFlag(): string {
    const value = this.x0040db0b;
    if (value === undefined) {
      throw new Error('TemplateExtensionFlag is undefined');
    }
    return value;
  }

  // Template Extension Organization UID
  get TemplateExtensionOrganizationUID(): string | undefined {
    return this.x0040db0c;
  }

  get x0040db0c(): string | undefined {
    const value = this.dwResponse['0040DB0C']?.Value;
    return convert(value?.[0], 0x0040db0c, 'string');
  }

  getTemplateExtensionOrganizationUID(): string {
    const value = this.x0040db0c;
    if (value === undefined) {
      throw new Error('TemplateExtensionOrganizationUID is undefined');
    }
    return value;
  }

  // Template Extension Creator UID
  get TemplateExtensionCreatorUID(): string | undefined {
    return this.x0040db0d;
  }

  get x0040db0d(): string | undefined {
    const value = this.dwResponse['0040DB0D']?.Value;
    return convert(value?.[0], 0x0040db0d, 'string');
  }

  getTemplateExtensionCreatorUID(): string {
    const value = this.x0040db0d;
    if (value === undefined) {
      throw new Error('TemplateExtensionCreatorUID is undefined');
    }
    return value;
  }

  // Referenced Content Item Identifier
  get ReferencedContentItemIdentifier(): Array<number | undefined> | undefined {
    return this.x0040db73;
  }

  get x0040db73(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0040DB73']?.Value;
    return convert(value, 0x0040db73, 'Array<number | undefined>');
  }

  getReferencedContentItemIdentifier(): Array<number | undefined> {
    const value = this.x0040db73;
    if (value === undefined) {
      throw new Error('ReferencedContentItemIdentifier is undefined');
    }
    return value;
  }

  // HL7 Document Effective Time
  get HL7DocumentEffectiveTime(): string | undefined {
    return this.x0040e004;
  }

  get x0040e004(): string | undefined {
    const value = this.dwResponse['0040E004']?.Value;
    return convert(value?.[0], 0x0040e004, 'string');
  }

  getHL7DocumentEffectiveTime(): string {
    const value = this.x0040e004;
    if (value === undefined) {
      throw new Error('HL7DocumentEffectiveTime is undefined');
    }
    return value;
  }

  // HL7 Document Type Code Sequence
  get HL7DocumentTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040e006;
  }

  get x0040e006(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040E006']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getHL7DocumentTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040e006;
    if (value === undefined) {
      throw new Error('HL7DocumentTypeCodeSequence is undefined');
    }
    return value;
  }

  // Document Class Code Sequence
  get DocumentClassCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040e008;
  }

  get x0040e008(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040E008']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDocumentClassCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040e008;
    if (value === undefined) {
      throw new Error('DocumentClassCodeSequence is undefined');
    }
    return value;
  }

  // Retrieve Location UID
  get RetrieveLocationUID(): string | undefined {
    return this.x0040e011;
  }

  get x0040e011(): string | undefined {
    const value = this.dwResponse['0040E011']?.Value;
    return convert(value?.[0], 0x0040e011, 'string');
  }

  getRetrieveLocationUID(): string {
    const value = this.x0040e011;
    if (value === undefined) {
      throw new Error('RetrieveLocationUID is undefined');
    }
    return value;
  }

  // Type of Instances
  get TypeOfInstances(): string | undefined {
    return this.x0040e020;
  }

  get x0040e020(): string | undefined {
    const value = this.dwResponse['0040E020']?.Value;
    return convert(value?.[0], 0x0040e020, 'string');
  }

  getTypeOfInstances(): string {
    const value = this.x0040e020;
    if (value === undefined) {
      throw new Error('TypeOfInstances is undefined');
    }
    return value;
  }

  // DICOM Retrieval Sequence
  get DICOMRetrievalSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040e021;
  }

  get x0040e021(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040E021']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDICOMRetrievalSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040e021;
    if (value === undefined) {
      throw new Error('DICOMRetrievalSequence is undefined');
    }
    return value;
  }

  // DICOM Media Retrieval Sequence
  get DICOMMediaRetrievalSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040e022;
  }

  get x0040e022(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040E022']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDICOMMediaRetrievalSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040e022;
    if (value === undefined) {
      throw new Error('DICOMMediaRetrievalSequence is undefined');
    }
    return value;
  }

  // WADO Retrieval Sequence
  get WADORetrievalSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040e023;
  }

  get x0040e023(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040E023']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getWADORetrievalSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040e023;
    if (value === undefined) {
      throw new Error('WADORetrievalSequence is undefined');
    }
    return value;
  }

  // XDS Retrieval Sequence
  get XDSRetrievalSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0040e024;
  }

  get x0040e024(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0040E024']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getXDSRetrievalSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0040e024;
    if (value === undefined) {
      throw new Error('XDSRetrievalSequence is undefined');
    }
    return value;
  }

  // Repository Unique ID
  get RepositoryUniqueID(): string | undefined {
    return this.x0040e030;
  }

  get x0040e030(): string | undefined {
    const value = this.dwResponse['0040E030']?.Value;
    return convert(value?.[0], 0x0040e030, 'string');
  }

  getRepositoryUniqueID(): string {
    const value = this.x0040e030;
    if (value === undefined) {
      throw new Error('RepositoryUniqueID is undefined');
    }
    return value;
  }

  // Home Community ID
  get HomeCommunityID(): string | undefined {
    return this.x0040e031;
  }

  get x0040e031(): string | undefined {
    const value = this.dwResponse['0040E031']?.Value;
    return convert(value?.[0], 0x0040e031, 'string');
  }

  getHomeCommunityID(): string {
    const value = this.x0040e031;
    if (value === undefined) {
      throw new Error('HomeCommunityID is undefined');
    }
    return value;
  }

  // MIME Type of Encapsulated Document
  get MIMETypeOfEncapsulatedDocument(): string | undefined {
    return this.x00420012;
  }

  get x00420012(): string | undefined {
    const value = this.dwResponse['00420012']?.Value;
    return convert(value?.[0], 0x00420012, 'string');
  }

  getMIMETypeOfEncapsulatedDocument(): string {
    const value = this.x00420012;
    if (value === undefined) {
      throw new Error('MIMETypeOfEncapsulatedDocument is undefined');
    }
    return value;
  }

  // Source Instance Sequence
  get SourceInstanceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00420013;
  }

  get x00420013(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00420013']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSourceInstanceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00420013;
    if (value === undefined) {
      throw new Error('SourceInstanceSequence is undefined');
    }
    return value;
  }

  // List of MIME Types
  get ListOfMIMETypes(): Array<string | undefined> | undefined {
    return this.x00420014;
  }

  get x00420014(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00420014']?.Value;
    return convert(value, 0x00420014, 'Array<string | undefined>');
  }

  getListOfMIMETypes(): Array<string | undefined> {
    const value = this.x00420014;
    if (value === undefined) {
      throw new Error('ListOfMIMETypes is undefined');
    }
    return value;
  }

  // Substance Administration Approval
  get SubstanceAdministrationApproval(): string | undefined {
    return this.x00440002;
  }

  get x00440002(): string | undefined {
    const value = this.dwResponse['00440002']?.Value;
    return convert(value?.[0], 0x00440002, 'string');
  }

  getSubstanceAdministrationApproval(): string {
    const value = this.x00440002;
    if (value === undefined) {
      throw new Error('SubstanceAdministrationApproval is undefined');
    }
    return value;
  }

  // Approval Status DateTime
  get ApprovalStatusDateTime(): string | undefined {
    return this.x00440004;
  }

  get x00440004(): string | undefined {
    const value = this.dwResponse['00440004']?.Value;
    return convert(value?.[0], 0x00440004, 'string');
  }

  getApprovalStatusDateTime(): string {
    const value = this.x00440004;
    if (value === undefined) {
      throw new Error('ApprovalStatusDateTime is undefined');
    }
    return value;
  }

  // Product Type Code Sequence
  get ProductTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00440007;
  }

  get x00440007(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00440007']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getProductTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00440007;
    if (value === undefined) {
      throw new Error('ProductTypeCodeSequence is undefined');
    }
    return value;
  }

  // Product Name
  get ProductName(): Array<string | undefined> | undefined {
    return this.x00440008;
  }

  get x00440008(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00440008']?.Value;
    return convert(value, 0x00440008, 'Array<string | undefined>');
  }

  getProductName(): Array<string | undefined> {
    const value = this.x00440008;
    if (value === undefined) {
      throw new Error('ProductName is undefined');
    }
    return value;
  }

  // Product Lot Identifier
  get ProductLotIdentifier(): string | undefined {
    return this.x0044000a;
  }

  get x0044000a(): string | undefined {
    const value = this.dwResponse['0044000A']?.Value;
    return convert(value?.[0], 0x0044000a, 'string');
  }

  getProductLotIdentifier(): string {
    const value = this.x0044000a;
    if (value === undefined) {
      throw new Error('ProductLotIdentifier is undefined');
    }
    return value;
  }

  // Product Expiration DateTime
  get ProductExpirationDateTime(): string | undefined {
    return this.x0044000b;
  }

  get x0044000b(): string | undefined {
    const value = this.dwResponse['0044000B']?.Value;
    return convert(value?.[0], 0x0044000b, 'string');
  }

  getProductExpirationDateTime(): string {
    const value = this.x0044000b;
    if (value === undefined) {
      throw new Error('ProductExpirationDateTime is undefined');
    }
    return value;
  }

  // Substance Administration DateTime
  get SubstanceAdministrationDateTime(): string | undefined {
    return this.x00440010;
  }

  get x00440010(): string | undefined {
    const value = this.dwResponse['00440010']?.Value;
    return convert(value?.[0], 0x00440010, 'string');
  }

  getSubstanceAdministrationDateTime(): string {
    const value = this.x00440010;
    if (value === undefined) {
      throw new Error('SubstanceAdministrationDateTime is undefined');
    }
    return value;
  }

  // Substance Administration Notes
  get SubstanceAdministrationNotes(): string | undefined {
    return this.x00440011;
  }

  get x00440011(): string | undefined {
    const value = this.dwResponse['00440011']?.Value;
    return convert(value?.[0], 0x00440011, 'string');
  }

  getSubstanceAdministrationNotes(): string {
    const value = this.x00440011;
    if (value === undefined) {
      throw new Error('SubstanceAdministrationNotes is undefined');
    }
    return value;
  }

  // Substance Administration Device ID
  get SubstanceAdministrationDeviceID(): string | undefined {
    return this.x00440012;
  }

  get x00440012(): string | undefined {
    const value = this.dwResponse['00440012']?.Value;
    return convert(value?.[0], 0x00440012, 'string');
  }

  getSubstanceAdministrationDeviceID(): string {
    const value = this.x00440012;
    if (value === undefined) {
      throw new Error('SubstanceAdministrationDeviceID is undefined');
    }
    return value;
  }

  // Product Parameter Sequence
  get ProductParameterSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00440013;
  }

  get x00440013(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00440013']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getProductParameterSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00440013;
    if (value === undefined) {
      throw new Error('ProductParameterSequence is undefined');
    }
    return value;
  }

  // Substance Administration Parameter Sequence
  get SubstanceAdministrationParameterSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00440019;
  }

  get x00440019(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00440019']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSubstanceAdministrationParameterSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00440019;
    if (value === undefined) {
      throw new Error('SubstanceAdministrationParameterSequence is undefined');
    }
    return value;
  }

  // Lens Description
  get LensDescription(): string | undefined {
    return this.x00460012;
  }

  get x00460012(): string | undefined {
    const value = this.dwResponse['00460012']?.Value;
    return convert(value?.[0], 0x00460012, 'string');
  }

  getLensDescription(): string {
    const value = this.x00460012;
    if (value === undefined) {
      throw new Error('LensDescription is undefined');
    }
    return value;
  }

  // Right Lens Sequence
  get RightLensSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460014;
  }

  get x00460014(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460014']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRightLensSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460014;
    if (value === undefined) {
      throw new Error('RightLensSequence is undefined');
    }
    return value;
  }

  // Left Lens Sequence
  get LeftLensSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460015;
  }

  get x00460015(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460015']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getLeftLensSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460015;
    if (value === undefined) {
      throw new Error('LeftLensSequence is undefined');
    }
    return value;
  }

  // Unspecified Laterality Lens Sequence
  get UnspecifiedLateralityLensSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460016;
  }

  get x00460016(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460016']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getUnspecifiedLateralityLensSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460016;
    if (value === undefined) {
      throw new Error('UnspecifiedLateralityLensSequence is undefined');
    }
    return value;
  }

  // Cylinder Sequence
  get CylinderSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460018;
  }

  get x00460018(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460018']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCylinderSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460018;
    if (value === undefined) {
      throw new Error('CylinderSequence is undefined');
    }
    return value;
  }

  // Prism Sequence
  get PrismSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460028;
  }

  get x00460028(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460028']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPrismSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460028;
    if (value === undefined) {
      throw new Error('PrismSequence is undefined');
    }
    return value;
  }

  // Horizontal Prism Power
  get HorizontalPrismPower(): number | undefined {
    return this.x00460030;
  }

  get x00460030(): number | undefined {
    const value = this.dwResponse['00460030']?.Value;
    return convert(value?.[0], 0x00460030, 'number');
  }

  getHorizontalPrismPower(): number {
    const value = this.x00460030;
    if (value === undefined) {
      throw new Error('HorizontalPrismPower is undefined');
    }
    return value;
  }

  // Horizontal Prism Base
  get HorizontalPrismBase(): string | undefined {
    return this.x00460032;
  }

  get x00460032(): string | undefined {
    const value = this.dwResponse['00460032']?.Value;
    return convert(value?.[0], 0x00460032, 'string');
  }

  getHorizontalPrismBase(): string {
    const value = this.x00460032;
    if (value === undefined) {
      throw new Error('HorizontalPrismBase is undefined');
    }
    return value;
  }

  // Vertical Prism Power
  get VerticalPrismPower(): number | undefined {
    return this.x00460034;
  }

  get x00460034(): number | undefined {
    const value = this.dwResponse['00460034']?.Value;
    return convert(value?.[0], 0x00460034, 'number');
  }

  getVerticalPrismPower(): number {
    const value = this.x00460034;
    if (value === undefined) {
      throw new Error('VerticalPrismPower is undefined');
    }
    return value;
  }

  // Vertical Prism Base
  get VerticalPrismBase(): string | undefined {
    return this.x00460036;
  }

  get x00460036(): string | undefined {
    const value = this.dwResponse['00460036']?.Value;
    return convert(value?.[0], 0x00460036, 'string');
  }

  getVerticalPrismBase(): string {
    const value = this.x00460036;
    if (value === undefined) {
      throw new Error('VerticalPrismBase is undefined');
    }
    return value;
  }

  // Lens Segment Type
  get LensSegmentType(): string | undefined {
    return this.x00460038;
  }

  get x00460038(): string | undefined {
    const value = this.dwResponse['00460038']?.Value;
    return convert(value?.[0], 0x00460038, 'string');
  }

  getLensSegmentType(): string {
    const value = this.x00460038;
    if (value === undefined) {
      throw new Error('LensSegmentType is undefined');
    }
    return value;
  }

  // Optical Transmittance
  get OpticalTransmittance(): number | undefined {
    return this.x00460040;
  }

  get x00460040(): number | undefined {
    const value = this.dwResponse['00460040']?.Value;
    return convert(value?.[0], 0x00460040, 'number');
  }

  getOpticalTransmittance(): number {
    const value = this.x00460040;
    if (value === undefined) {
      throw new Error('OpticalTransmittance is undefined');
    }
    return value;
  }

  // Channel Width
  get ChannelWidth(): number | undefined {
    return this.x00460042;
  }

  get x00460042(): number | undefined {
    const value = this.dwResponse['00460042']?.Value;
    return convert(value?.[0], 0x00460042, 'number');
  }

  getChannelWidth(): number {
    const value = this.x00460042;
    if (value === undefined) {
      throw new Error('ChannelWidth is undefined');
    }
    return value;
  }

  // Pupil Size
  get PupilSize(): number | undefined {
    return this.x00460044;
  }

  get x00460044(): number | undefined {
    const value = this.dwResponse['00460044']?.Value;
    return convert(value?.[0], 0x00460044, 'number');
  }

  getPupilSize(): number {
    const value = this.x00460044;
    if (value === undefined) {
      throw new Error('PupilSize is undefined');
    }
    return value;
  }

  // Corneal Size
  get CornealSize(): number | undefined {
    return this.x00460046;
  }

  get x00460046(): number | undefined {
    const value = this.dwResponse['00460046']?.Value;
    return convert(value?.[0], 0x00460046, 'number');
  }

  getCornealSize(): number {
    const value = this.x00460046;
    if (value === undefined) {
      throw new Error('CornealSize is undefined');
    }
    return value;
  }

  // Autorefraction Right Eye Sequence
  get AutorefractionRightEyeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460050;
  }

  get x00460050(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460050']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAutorefractionRightEyeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460050;
    if (value === undefined) {
      throw new Error('AutorefractionRightEyeSequence is undefined');
    }
    return value;
  }

  // Autorefraction Left Eye Sequence
  get AutorefractionLeftEyeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460052;
  }

  get x00460052(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460052']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAutorefractionLeftEyeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460052;
    if (value === undefined) {
      throw new Error('AutorefractionLeftEyeSequence is undefined');
    }
    return value;
  }

  // Distance Pupillary Distance
  get DistancePupillaryDistance(): number | undefined {
    return this.x00460060;
  }

  get x00460060(): number | undefined {
    const value = this.dwResponse['00460060']?.Value;
    return convert(value?.[0], 0x00460060, 'number');
  }

  getDistancePupillaryDistance(): number {
    const value = this.x00460060;
    if (value === undefined) {
      throw new Error('DistancePupillaryDistance is undefined');
    }
    return value;
  }

  // Near Pupillary Distance
  get NearPupillaryDistance(): number | undefined {
    return this.x00460062;
  }

  get x00460062(): number | undefined {
    const value = this.dwResponse['00460062']?.Value;
    return convert(value?.[0], 0x00460062, 'number');
  }

  getNearPupillaryDistance(): number {
    const value = this.x00460062;
    if (value === undefined) {
      throw new Error('NearPupillaryDistance is undefined');
    }
    return value;
  }

  // Intermediate Pupillary Distance
  get IntermediatePupillaryDistance(): number | undefined {
    return this.x00460063;
  }

  get x00460063(): number | undefined {
    const value = this.dwResponse['00460063']?.Value;
    return convert(value?.[0], 0x00460063, 'number');
  }

  getIntermediatePupillaryDistance(): number {
    const value = this.x00460063;
    if (value === undefined) {
      throw new Error('IntermediatePupillaryDistance is undefined');
    }
    return value;
  }

  // Other Pupillary Distance
  get OtherPupillaryDistance(): number | undefined {
    return this.x00460064;
  }

  get x00460064(): number | undefined {
    const value = this.dwResponse['00460064']?.Value;
    return convert(value?.[0], 0x00460064, 'number');
  }

  getOtherPupillaryDistance(): number {
    const value = this.x00460064;
    if (value === undefined) {
      throw new Error('OtherPupillaryDistance is undefined');
    }
    return value;
  }

  // Keratometry Right Eye Sequence
  get KeratometryRightEyeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460070;
  }

  get x00460070(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460070']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getKeratometryRightEyeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460070;
    if (value === undefined) {
      throw new Error('KeratometryRightEyeSequence is undefined');
    }
    return value;
  }

  // Keratometry Left Eye Sequence
  get KeratometryLeftEyeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460071;
  }

  get x00460071(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460071']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getKeratometryLeftEyeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460071;
    if (value === undefined) {
      throw new Error('KeratometryLeftEyeSequence is undefined');
    }
    return value;
  }

  // Steep Keratometric Axis Sequence
  get SteepKeratometricAxisSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460074;
  }

  get x00460074(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460074']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSteepKeratometricAxisSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460074;
    if (value === undefined) {
      throw new Error('SteepKeratometricAxisSequence is undefined');
    }
    return value;
  }

  // Radius of Curvature
  get RadiusOfCurvature(): number | undefined {
    return this.x00460075;
  }

  get x00460075(): number | undefined {
    const value = this.dwResponse['00460075']?.Value;
    return convert(value?.[0], 0x00460075, 'number');
  }

  getRadiusOfCurvature(): number {
    const value = this.x00460075;
    if (value === undefined) {
      throw new Error('RadiusOfCurvature is undefined');
    }
    return value;
  }

  // Keratometric Power
  get KeratometricPower(): number | undefined {
    return this.x00460076;
  }

  get x00460076(): number | undefined {
    const value = this.dwResponse['00460076']?.Value;
    return convert(value?.[0], 0x00460076, 'number');
  }

  getKeratometricPower(): number {
    const value = this.x00460076;
    if (value === undefined) {
      throw new Error('KeratometricPower is undefined');
    }
    return value;
  }

  // Keratometric Axis
  get KeratometricAxis(): number | undefined {
    return this.x00460077;
  }

  get x00460077(): number | undefined {
    const value = this.dwResponse['00460077']?.Value;
    return convert(value?.[0], 0x00460077, 'number');
  }

  getKeratometricAxis(): number {
    const value = this.x00460077;
    if (value === undefined) {
      throw new Error('KeratometricAxis is undefined');
    }
    return value;
  }

  // Flat Keratometric Axis Sequence
  get FlatKeratometricAxisSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460080;
  }

  get x00460080(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460080']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFlatKeratometricAxisSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460080;
    if (value === undefined) {
      throw new Error('FlatKeratometricAxisSequence is undefined');
    }
    return value;
  }

  // Background Color
  get BackgroundColor(): string | undefined {
    return this.x00460092;
  }

  get x00460092(): string | undefined {
    const value = this.dwResponse['00460092']?.Value;
    return convert(value?.[0], 0x00460092, 'string');
  }

  getBackgroundColor(): string {
    const value = this.x00460092;
    if (value === undefined) {
      throw new Error('BackgroundColor is undefined');
    }
    return value;
  }

  // Optotype
  get Optotype(): string | undefined {
    return this.x00460094;
  }

  get x00460094(): string | undefined {
    const value = this.dwResponse['00460094']?.Value;
    return convert(value?.[0], 0x00460094, 'string');
  }

  getOptotype(): string {
    const value = this.x00460094;
    if (value === undefined) {
      throw new Error('Optotype is undefined');
    }
    return value;
  }

  // Optotype Presentation
  get OptotypePresentation(): string | undefined {
    return this.x00460095;
  }

  get x00460095(): string | undefined {
    const value = this.dwResponse['00460095']?.Value;
    return convert(value?.[0], 0x00460095, 'string');
  }

  getOptotypePresentation(): string {
    const value = this.x00460095;
    if (value === undefined) {
      throw new Error('OptotypePresentation is undefined');
    }
    return value;
  }

  // Subjective Refraction Right Eye Sequence
  get SubjectiveRefractionRightEyeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460097;
  }

  get x00460097(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460097']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSubjectiveRefractionRightEyeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460097;
    if (value === undefined) {
      throw new Error('SubjectiveRefractionRightEyeSequence is undefined');
    }
    return value;
  }

  // Subjective Refraction Left Eye Sequence
  get SubjectiveRefractionLeftEyeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460098;
  }

  get x00460098(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460098']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSubjectiveRefractionLeftEyeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460098;
    if (value === undefined) {
      throw new Error('SubjectiveRefractionLeftEyeSequence is undefined');
    }
    return value;
  }

  // Add Near Sequence
  get AddNearSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460100;
  }

  get x00460100(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460100']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAddNearSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460100;
    if (value === undefined) {
      throw new Error('AddNearSequence is undefined');
    }
    return value;
  }

  // Add Intermediate Sequence
  get AddIntermediateSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460101;
  }

  get x00460101(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460101']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAddIntermediateSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460101;
    if (value === undefined) {
      throw new Error('AddIntermediateSequence is undefined');
    }
    return value;
  }

  // Add Other Sequence
  get AddOtherSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460102;
  }

  get x00460102(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460102']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAddOtherSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460102;
    if (value === undefined) {
      throw new Error('AddOtherSequence is undefined');
    }
    return value;
  }

  // Add Power
  get AddPower(): number | undefined {
    return this.x00460104;
  }

  get x00460104(): number | undefined {
    const value = this.dwResponse['00460104']?.Value;
    return convert(value?.[0], 0x00460104, 'number');
  }

  getAddPower(): number {
    const value = this.x00460104;
    if (value === undefined) {
      throw new Error('AddPower is undefined');
    }
    return value;
  }

  // Viewing Distance
  get ViewingDistance(): number | undefined {
    return this.x00460106;
  }

  get x00460106(): number | undefined {
    const value = this.dwResponse['00460106']?.Value;
    return convert(value?.[0], 0x00460106, 'number');
  }

  getViewingDistance(): number {
    const value = this.x00460106;
    if (value === undefined) {
      throw new Error('ViewingDistance is undefined');
    }
    return value;
  }

  // Visual Acuity Type Code Sequence
  get VisualAcuityTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460121;
  }

  get x00460121(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460121']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVisualAcuityTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460121;
    if (value === undefined) {
      throw new Error('VisualAcuityTypeCodeSequence is undefined');
    }
    return value;
  }

  // Visual Acuity Right Eye Sequence
  get VisualAcuityRightEyeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460122;
  }

  get x00460122(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460122']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVisualAcuityRightEyeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460122;
    if (value === undefined) {
      throw new Error('VisualAcuityRightEyeSequence is undefined');
    }
    return value;
  }

  // Visual Acuity Left Eye Sequence
  get VisualAcuityLeftEyeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460123;
  }

  get x00460123(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460123']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVisualAcuityLeftEyeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460123;
    if (value === undefined) {
      throw new Error('VisualAcuityLeftEyeSequence is undefined');
    }
    return value;
  }

  // Visual Acuity Both Eyes Open Sequence
  get VisualAcuityBothEyesOpenSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460124;
  }

  get x00460124(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460124']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getVisualAcuityBothEyesOpenSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460124;
    if (value === undefined) {
      throw new Error('VisualAcuityBothEyesOpenSequence is undefined');
    }
    return value;
  }

  // Viewing Distance Type
  get ViewingDistanceType(): string | undefined {
    return this.x00460125;
  }

  get x00460125(): string | undefined {
    const value = this.dwResponse['00460125']?.Value;
    return convert(value?.[0], 0x00460125, 'string');
  }

  getViewingDistanceType(): string {
    const value = this.x00460125;
    if (value === undefined) {
      throw new Error('ViewingDistanceType is undefined');
    }
    return value;
  }

  // Visual Acuity Modifiers
  get VisualAcuityModifiers(): Array<Uint8Array | undefined> | undefined {
    return this.x00460135;
  }

  get x00460135(): Array<Uint8Array | undefined> | undefined {
    const value = this.dwResponse['00460135']?.Value;
    return convert(value, 0x00460135, 'Array<Uint8Array | undefined>');
  }

  getVisualAcuityModifiers(): Array<Uint8Array | undefined> {
    const value = this.x00460135;
    if (value === undefined) {
      throw new Error('VisualAcuityModifiers is undefined');
    }
    return value;
  }

  // Decimal Visual Acuity
  get DecimalVisualAcuity(): number | undefined {
    return this.x00460137;
  }

  get x00460137(): number | undefined {
    const value = this.dwResponse['00460137']?.Value;
    return convert(value?.[0], 0x00460137, 'number');
  }

  getDecimalVisualAcuity(): number {
    const value = this.x00460137;
    if (value === undefined) {
      throw new Error('DecimalVisualAcuity is undefined');
    }
    return value;
  }

  // Optotype Detailed Definition
  get OptotypeDetailedDefinition(): string | undefined {
    return this.x00460139;
  }

  get x00460139(): string | undefined {
    const value = this.dwResponse['00460139']?.Value;
    return convert(value?.[0], 0x00460139, 'string');
  }

  getOptotypeDetailedDefinition(): string {
    const value = this.x00460139;
    if (value === undefined) {
      throw new Error('OptotypeDetailedDefinition is undefined');
    }
    return value;
  }

  // Referenced Refractive Measurements Sequence
  get ReferencedRefractiveMeasurementsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460145;
  }

  get x00460145(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460145']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedRefractiveMeasurementsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460145;
    if (value === undefined) {
      throw new Error('ReferencedRefractiveMeasurementsSequence is undefined');
    }
    return value;
  }

  // Sphere Power
  get SpherePower(): number | undefined {
    return this.x00460146;
  }

  get x00460146(): number | undefined {
    const value = this.dwResponse['00460146']?.Value;
    return convert(value?.[0], 0x00460146, 'number');
  }

  getSpherePower(): number {
    const value = this.x00460146;
    if (value === undefined) {
      throw new Error('SpherePower is undefined');
    }
    return value;
  }

  // Cylinder Power
  get CylinderPower(): number | undefined {
    return this.x00460147;
  }

  get x00460147(): number | undefined {
    const value = this.dwResponse['00460147']?.Value;
    return convert(value?.[0], 0x00460147, 'number');
  }

  getCylinderPower(): number {
    const value = this.x00460147;
    if (value === undefined) {
      throw new Error('CylinderPower is undefined');
    }
    return value;
  }

  // Corneal Topography Surface
  get CornealTopographySurface(): string | undefined {
    return this.x00460201;
  }

  get x00460201(): string | undefined {
    const value = this.dwResponse['00460201']?.Value;
    return convert(value?.[0], 0x00460201, 'string');
  }

  getCornealTopographySurface(): string {
    const value = this.x00460201;
    if (value === undefined) {
      throw new Error('CornealTopographySurface is undefined');
    }
    return value;
  }

  // Corneal Vertex Location
  get CornealVertexLocation(): Array<number | undefined> | undefined {
    return this.x00460202;
  }

  get x00460202(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00460202']?.Value;
    return convert(value, 0x00460202, 'Array<number | undefined>');
  }

  getCornealVertexLocation(): Array<number | undefined> {
    const value = this.x00460202;
    if (value === undefined) {
      throw new Error('CornealVertexLocation is undefined');
    }
    return value;
  }

  // Pupil Centroid X-Coordinate
  get PupilCentroidXCoordinate(): number | undefined {
    return this.x00460203;
  }

  get x00460203(): number | undefined {
    const value = this.dwResponse['00460203']?.Value;
    return convert(value?.[0], 0x00460203, 'number');
  }

  getPupilCentroidXCoordinate(): number {
    const value = this.x00460203;
    if (value === undefined) {
      throw new Error('PupilCentroidXCoordinate is undefined');
    }
    return value;
  }

  // Pupil Centroid Y-Coordinate
  get PupilCentroidYCoordinate(): number | undefined {
    return this.x00460204;
  }

  get x00460204(): number | undefined {
    const value = this.dwResponse['00460204']?.Value;
    return convert(value?.[0], 0x00460204, 'number');
  }

  getPupilCentroidYCoordinate(): number {
    const value = this.x00460204;
    if (value === undefined) {
      throw new Error('PupilCentroidYCoordinate is undefined');
    }
    return value;
  }

  // Equivalent Pupil Radius
  get EquivalentPupilRadius(): number | undefined {
    return this.x00460205;
  }

  get x00460205(): number | undefined {
    const value = this.dwResponse['00460205']?.Value;
    return convert(value?.[0], 0x00460205, 'number');
  }

  getEquivalentPupilRadius(): number {
    const value = this.x00460205;
    if (value === undefined) {
      throw new Error('EquivalentPupilRadius is undefined');
    }
    return value;
  }

  // Corneal Topography Map Type Code Sequence
  get CornealTopographyMapTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460207;
  }

  get x00460207(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460207']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCornealTopographyMapTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460207;
    if (value === undefined) {
      throw new Error('CornealTopographyMapTypeCodeSequence is undefined');
    }
    return value;
  }

  // Vertices of the Outline of Pupil
  get VerticesOfTheOutlineOfPupil(): Array<number | undefined> | undefined {
    return this.x00460208;
  }

  get x00460208(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00460208']?.Value;
    return convert(value, 0x00460208, 'Array<number | undefined>');
  }

  getVerticesOfTheOutlineOfPupil(): Array<number | undefined> {
    const value = this.x00460208;
    if (value === undefined) {
      throw new Error('VerticesOfTheOutlineOfPupil is undefined');
    }
    return value;
  }

  // Corneal Topography Mapping Normals Sequence
  get CornealTopographyMappingNormalsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460210;
  }

  get x00460210(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460210']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCornealTopographyMappingNormalsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460210;
    if (value === undefined) {
      throw new Error('CornealTopographyMappingNormalsSequence is undefined');
    }
    return value;
  }

  // Maximum Corneal Curvature Sequence
  get MaximumCornealCurvatureSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460211;
  }

  get x00460211(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460211']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMaximumCornealCurvatureSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460211;
    if (value === undefined) {
      throw new Error('MaximumCornealCurvatureSequence is undefined');
    }
    return value;
  }

  // Maximum Corneal Curvature
  get MaximumCornealCurvature(): number | undefined {
    return this.x00460212;
  }

  get x00460212(): number | undefined {
    const value = this.dwResponse['00460212']?.Value;
    return convert(value?.[0], 0x00460212, 'number');
  }

  getMaximumCornealCurvature(): number {
    const value = this.x00460212;
    if (value === undefined) {
      throw new Error('MaximumCornealCurvature is undefined');
    }
    return value;
  }

  // Maximum Corneal Curvature Location
  get MaximumCornealCurvatureLocation(): Array<number | undefined> | undefined {
    return this.x00460213;
  }

  get x00460213(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00460213']?.Value;
    return convert(value, 0x00460213, 'Array<number | undefined>');
  }

  getMaximumCornealCurvatureLocation(): Array<number | undefined> {
    const value = this.x00460213;
    if (value === undefined) {
      throw new Error('MaximumCornealCurvatureLocation is undefined');
    }
    return value;
  }

  // Minimum Keratometric Sequence
  get MinimumKeratometricSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460215;
  }

  get x00460215(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460215']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMinimumKeratometricSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460215;
    if (value === undefined) {
      throw new Error('MinimumKeratometricSequence is undefined');
    }
    return value;
  }

  // Simulated Keratometric Cylinder Sequence
  get SimulatedKeratometricCylinderSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460218;
  }

  get x00460218(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460218']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSimulatedKeratometricCylinderSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460218;
    if (value === undefined) {
      throw new Error('SimulatedKeratometricCylinderSequence is undefined');
    }
    return value;
  }

  // Average Corneal Power
  get AverageCornealPower(): number | undefined {
    return this.x00460220;
  }

  get x00460220(): number | undefined {
    const value = this.dwResponse['00460220']?.Value;
    return convert(value?.[0], 0x00460220, 'number');
  }

  getAverageCornealPower(): number {
    const value = this.x00460220;
    if (value === undefined) {
      throw new Error('AverageCornealPower is undefined');
    }
    return value;
  }

  // Corneal I-S Value
  get CornealISValue(): number | undefined {
    return this.x00460224;
  }

  get x00460224(): number | undefined {
    const value = this.dwResponse['00460224']?.Value;
    return convert(value?.[0], 0x00460224, 'number');
  }

  getCornealISValue(): number {
    const value = this.x00460224;
    if (value === undefined) {
      throw new Error('CornealISValue is undefined');
    }
    return value;
  }

  // Analyzed Area
  get AnalyzedArea(): number | undefined {
    return this.x00460227;
  }

  get x00460227(): number | undefined {
    const value = this.dwResponse['00460227']?.Value;
    return convert(value?.[0], 0x00460227, 'number');
  }

  getAnalyzedArea(): number {
    const value = this.x00460227;
    if (value === undefined) {
      throw new Error('AnalyzedArea is undefined');
    }
    return value;
  }

  // Surface Regularity Index
  get SurfaceRegularityIndex(): number | undefined {
    return this.x00460230;
  }

  get x00460230(): number | undefined {
    const value = this.dwResponse['00460230']?.Value;
    return convert(value?.[0], 0x00460230, 'number');
  }

  getSurfaceRegularityIndex(): number {
    const value = this.x00460230;
    if (value === undefined) {
      throw new Error('SurfaceRegularityIndex is undefined');
    }
    return value;
  }

  // Surface Asymmetry Index
  get SurfaceAsymmetryIndex(): number | undefined {
    return this.x00460232;
  }

  get x00460232(): number | undefined {
    const value = this.dwResponse['00460232']?.Value;
    return convert(value?.[0], 0x00460232, 'number');
  }

  getSurfaceAsymmetryIndex(): number {
    const value = this.x00460232;
    if (value === undefined) {
      throw new Error('SurfaceAsymmetryIndex is undefined');
    }
    return value;
  }

  // Corneal Eccentricity Index
  get CornealEccentricityIndex(): number | undefined {
    return this.x00460234;
  }

  get x00460234(): number | undefined {
    const value = this.dwResponse['00460234']?.Value;
    return convert(value?.[0], 0x00460234, 'number');
  }

  getCornealEccentricityIndex(): number {
    const value = this.x00460234;
    if (value === undefined) {
      throw new Error('CornealEccentricityIndex is undefined');
    }
    return value;
  }

  // Keratoconus Prediction Index
  get KeratoconusPredictionIndex(): number | undefined {
    return this.x00460236;
  }

  get x00460236(): number | undefined {
    const value = this.dwResponse['00460236']?.Value;
    return convert(value?.[0], 0x00460236, 'number');
  }

  getKeratoconusPredictionIndex(): number {
    const value = this.x00460236;
    if (value === undefined) {
      throw new Error('KeratoconusPredictionIndex is undefined');
    }
    return value;
  }

  // Decimal Potential Visual Acuity
  get DecimalPotentialVisualAcuity(): number | undefined {
    return this.x00460238;
  }

  get x00460238(): number | undefined {
    const value = this.dwResponse['00460238']?.Value;
    return convert(value?.[0], 0x00460238, 'number');
  }

  getDecimalPotentialVisualAcuity(): number {
    const value = this.x00460238;
    if (value === undefined) {
      throw new Error('DecimalPotentialVisualAcuity is undefined');
    }
    return value;
  }

  // Corneal Topography Map Quality Evaluation
  get CornealTopographyMapQualityEvaluation(): string | undefined {
    return this.x00460242;
  }

  get x00460242(): string | undefined {
    const value = this.dwResponse['00460242']?.Value;
    return convert(value?.[0], 0x00460242, 'string');
  }

  getCornealTopographyMapQualityEvaluation(): string {
    const value = this.x00460242;
    if (value === undefined) {
      throw new Error('CornealTopographyMapQualityEvaluation is undefined');
    }
    return value;
  }

  // Source Image Corneal Processed Data Sequence
  get SourceImageCornealProcessedDataSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00460244;
  }

  get x00460244(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00460244']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSourceImageCornealProcessedDataSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00460244;
    if (value === undefined) {
      throw new Error('SourceImageCornealProcessedDataSequence is undefined');
    }
    return value;
  }

  // Corneal Point Location
  get CornealPointLocation(): Array<number | undefined> | undefined {
    return this.x00460247;
  }

  get x00460247(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00460247']?.Value;
    return convert(value, 0x00460247, 'Array<number | undefined>');
  }

  getCornealPointLocation(): Array<number | undefined> {
    const value = this.x00460247;
    if (value === undefined) {
      throw new Error('CornealPointLocation is undefined');
    }
    return value;
  }

  // Corneal Point Estimated
  get CornealPointEstimated(): string | undefined {
    return this.x00460248;
  }

  get x00460248(): string | undefined {
    const value = this.dwResponse['00460248']?.Value;
    return convert(value?.[0], 0x00460248, 'string');
  }

  getCornealPointEstimated(): string {
    const value = this.x00460248;
    if (value === undefined) {
      throw new Error('CornealPointEstimated is undefined');
    }
    return value;
  }

  // Axial Power
  get AxialPower(): number | undefined {
    return this.x00460249;
  }

  get x00460249(): number | undefined {
    const value = this.dwResponse['00460249']?.Value;
    return convert(value?.[0], 0x00460249, 'number');
  }

  getAxialPower(): number {
    const value = this.x00460249;
    if (value === undefined) {
      throw new Error('AxialPower is undefined');
    }
    return value;
  }

  // Tangential Power
  get TangentialPower(): number | undefined {
    return this.x00460250;
  }

  get x00460250(): number | undefined {
    const value = this.dwResponse['00460250']?.Value;
    return convert(value?.[0], 0x00460250, 'number');
  }

  getTangentialPower(): number {
    const value = this.x00460250;
    if (value === undefined) {
      throw new Error('TangentialPower is undefined');
    }
    return value;
  }

  // Refractive Power
  get RefractivePower(): number | undefined {
    return this.x00460251;
  }

  get x00460251(): number | undefined {
    const value = this.dwResponse['00460251']?.Value;
    return convert(value?.[0], 0x00460251, 'number');
  }

  getRefractivePower(): number {
    const value = this.x00460251;
    if (value === undefined) {
      throw new Error('RefractivePower is undefined');
    }
    return value;
  }

  // Relative Elevation
  get RelativeElevation(): number | undefined {
    return this.x00460252;
  }

  get x00460252(): number | undefined {
    const value = this.dwResponse['00460252']?.Value;
    return convert(value?.[0], 0x00460252, 'number');
  }

  getRelativeElevation(): number {
    const value = this.x00460252;
    if (value === undefined) {
      throw new Error('RelativeElevation is undefined');
    }
    return value;
  }

  // Corneal Wavefront
  get CornealWavefront(): number | undefined {
    return this.x00460253;
  }

  get x00460253(): number | undefined {
    const value = this.dwResponse['00460253']?.Value;
    return convert(value?.[0], 0x00460253, 'number');
  }

  getCornealWavefront(): number {
    const value = this.x00460253;
    if (value === undefined) {
      throw new Error('CornealWavefront is undefined');
    }
    return value;
  }

  // Imaged Volume Width
  get ImagedVolumeWidth(): number | undefined {
    return this.x00480001;
  }

  get x00480001(): number | undefined {
    const value = this.dwResponse['00480001']?.Value;
    return convert(value?.[0], 0x00480001, 'number');
  }

  getImagedVolumeWidth(): number {
    const value = this.x00480001;
    if (value === undefined) {
      throw new Error('ImagedVolumeWidth is undefined');
    }
    return value;
  }

  // Imaged Volume Height
  get ImagedVolumeHeight(): number | undefined {
    return this.x00480002;
  }

  get x00480002(): number | undefined {
    const value = this.dwResponse['00480002']?.Value;
    return convert(value?.[0], 0x00480002, 'number');
  }

  getImagedVolumeHeight(): number {
    const value = this.x00480002;
    if (value === undefined) {
      throw new Error('ImagedVolumeHeight is undefined');
    }
    return value;
  }

  // Imaged Volume Depth
  get ImagedVolumeDepth(): number | undefined {
    return this.x00480003;
  }

  get x00480003(): number | undefined {
    const value = this.dwResponse['00480003']?.Value;
    return convert(value?.[0], 0x00480003, 'number');
  }

  getImagedVolumeDepth(): number {
    const value = this.x00480003;
    if (value === undefined) {
      throw new Error('ImagedVolumeDepth is undefined');
    }
    return value;
  }

  // Total Pixel Matrix Columns
  get TotalPixelMatrixColumns(): number | undefined {
    return this.x00480006;
  }

  get x00480006(): number | undefined {
    const value = this.dwResponse['00480006']?.Value;
    return convert(value?.[0], 0x00480006, 'number');
  }

  getTotalPixelMatrixColumns(): number {
    const value = this.x00480006;
    if (value === undefined) {
      throw new Error('TotalPixelMatrixColumns is undefined');
    }
    return value;
  }

  // Total Pixel Matrix Rows
  get TotalPixelMatrixRows(): number | undefined {
    return this.x00480007;
  }

  get x00480007(): number | undefined {
    const value = this.dwResponse['00480007']?.Value;
    return convert(value?.[0], 0x00480007, 'number');
  }

  getTotalPixelMatrixRows(): number {
    const value = this.x00480007;
    if (value === undefined) {
      throw new Error('TotalPixelMatrixRows is undefined');
    }
    return value;
  }

  // Total Pixel Matrix Origin Sequence
  get TotalPixelMatrixOriginSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00480008;
  }

  get x00480008(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00480008']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTotalPixelMatrixOriginSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00480008;
    if (value === undefined) {
      throw new Error('TotalPixelMatrixOriginSequence is undefined');
    }
    return value;
  }

  // Specimen Label in Image
  get SpecimenLabelInImage(): string | undefined {
    return this.x00480010;
  }

  get x00480010(): string | undefined {
    const value = this.dwResponse['00480010']?.Value;
    return convert(value?.[0], 0x00480010, 'string');
  }

  getSpecimenLabelInImage(): string {
    const value = this.x00480010;
    if (value === undefined) {
      throw new Error('SpecimenLabelInImage is undefined');
    }
    return value;
  }

  // Focus Method
  get FocusMethod(): string | undefined {
    return this.x00480011;
  }

  get x00480011(): string | undefined {
    const value = this.dwResponse['00480011']?.Value;
    return convert(value?.[0], 0x00480011, 'string');
  }

  getFocusMethod(): string {
    const value = this.x00480011;
    if (value === undefined) {
      throw new Error('FocusMethod is undefined');
    }
    return value;
  }

  // Extended Depth of Field
  get ExtendedDepthOfField(): string | undefined {
    return this.x00480012;
  }

  get x00480012(): string | undefined {
    const value = this.dwResponse['00480012']?.Value;
    return convert(value?.[0], 0x00480012, 'string');
  }

  getExtendedDepthOfField(): string {
    const value = this.x00480012;
    if (value === undefined) {
      throw new Error('ExtendedDepthOfField is undefined');
    }
    return value;
  }

  // Number of Focal Planes
  get NumberOfFocalPlanes(): number | undefined {
    return this.x00480013;
  }

  get x00480013(): number | undefined {
    const value = this.dwResponse['00480013']?.Value;
    return convert(value?.[0], 0x00480013, 'number');
  }

  getNumberOfFocalPlanes(): number {
    const value = this.x00480013;
    if (value === undefined) {
      throw new Error('NumberOfFocalPlanes is undefined');
    }
    return value;
  }

  // Distance Between Focal Planes
  get DistanceBetweenFocalPlanes(): number | undefined {
    return this.x00480014;
  }

  get x00480014(): number | undefined {
    const value = this.dwResponse['00480014']?.Value;
    return convert(value?.[0], 0x00480014, 'number');
  }

  getDistanceBetweenFocalPlanes(): number {
    const value = this.x00480014;
    if (value === undefined) {
      throw new Error('DistanceBetweenFocalPlanes is undefined');
    }
    return value;
  }

  // Recommended Absent Pixel CIELab Value
  get RecommendedAbsentPixelCIELabValue(): Array<number | undefined> | undefined {
    return this.x00480015;
  }

  get x00480015(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00480015']?.Value;
    return convert(value, 0x00480015, 'Array<number | undefined>');
  }

  getRecommendedAbsentPixelCIELabValue(): Array<number | undefined> {
    const value = this.x00480015;
    if (value === undefined) {
      throw new Error('RecommendedAbsentPixelCIELabValue is undefined');
    }
    return value;
  }

  // Illuminator Type Code Sequence
  get IlluminatorTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00480100;
  }

  get x00480100(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00480100']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIlluminatorTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00480100;
    if (value === undefined) {
      throw new Error('IlluminatorTypeCodeSequence is undefined');
    }
    return value;
  }

  // Image Orientation (Slide)
  get ImageOrientationSlide(): Array<number | undefined> | undefined {
    return this.x00480102;
  }

  get x00480102(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00480102']?.Value;
    return convert(value, 0x00480102, 'Array<number | undefined>');
  }

  getImageOrientationSlide(): Array<number | undefined> {
    const value = this.x00480102;
    if (value === undefined) {
      throw new Error('ImageOrientationSlide is undefined');
    }
    return value;
  }

  // Optical Path Sequence
  get OpticalPathSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00480105;
  }

  get x00480105(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00480105']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOpticalPathSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00480105;
    if (value === undefined) {
      throw new Error('OpticalPathSequence is undefined');
    }
    return value;
  }

  // Optical Path Identifier
  get OpticalPathIdentifier(): string | undefined {
    return this.x00480106;
  }

  get x00480106(): string | undefined {
    const value = this.dwResponse['00480106']?.Value;
    return convert(value?.[0], 0x00480106, 'string');
  }

  getOpticalPathIdentifier(): string {
    const value = this.x00480106;
    if (value === undefined) {
      throw new Error('OpticalPathIdentifier is undefined');
    }
    return value;
  }

  // Illumination Color Code Sequence
  get IlluminationColorCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00480108;
  }

  get x00480108(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00480108']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIlluminationColorCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00480108;
    if (value === undefined) {
      throw new Error('IlluminationColorCodeSequence is undefined');
    }
    return value;
  }

  // Specimen Reference Sequence
  get SpecimenReferenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00480110;
  }

  get x00480110(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00480110']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSpecimenReferenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00480110;
    if (value === undefined) {
      throw new Error('SpecimenReferenceSequence is undefined');
    }
    return value;
  }

  // Condenser Lens Power
  get CondenserLensPower(): number | undefined {
    return this.x00480111;
  }

  get x00480111(): number | undefined {
    const value = this.dwResponse['00480111']?.Value;
    return convert(value?.[0], 0x00480111, 'number');
  }

  getCondenserLensPower(): number {
    const value = this.x00480111;
    if (value === undefined) {
      throw new Error('CondenserLensPower is undefined');
    }
    return value;
  }

  // Objective Lens Power
  get ObjectiveLensPower(): number | undefined {
    return this.x00480112;
  }

  get x00480112(): number | undefined {
    const value = this.dwResponse['00480112']?.Value;
    return convert(value?.[0], 0x00480112, 'number');
  }

  getObjectiveLensPower(): number {
    const value = this.x00480112;
    if (value === undefined) {
      throw new Error('ObjectiveLensPower is undefined');
    }
    return value;
  }

  // Objective Lens Numerical Aperture
  get ObjectiveLensNumericalAperture(): number | undefined {
    return this.x00480113;
  }

  get x00480113(): number | undefined {
    const value = this.dwResponse['00480113']?.Value;
    return convert(value?.[0], 0x00480113, 'number');
  }

  getObjectiveLensNumericalAperture(): number {
    const value = this.x00480113;
    if (value === undefined) {
      throw new Error('ObjectiveLensNumericalAperture is undefined');
    }
    return value;
  }

  // Palette Color Lookup Table Sequence
  get PaletteColorLookupTableSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00480120;
  }

  get x00480120(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00480120']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPaletteColorLookupTableSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00480120;
    if (value === undefined) {
      throw new Error('PaletteColorLookupTableSequence is undefined');
    }
    return value;
  }

  // Referenced Image Navigation Sequence
  get ReferencedImageNavigationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00480200;
  }

  get x00480200(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00480200']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedImageNavigationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00480200;
    if (value === undefined) {
      throw new Error('ReferencedImageNavigationSequence is undefined');
    }
    return value;
  }

  // Top Left Hand Corner of Localizer Area
  get TopLeftHandCornerOfLocalizerArea(): Array<number | undefined> | undefined {
    return this.x00480201;
  }

  get x00480201(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00480201']?.Value;
    return convert(value, 0x00480201, 'Array<number | undefined>');
  }

  getTopLeftHandCornerOfLocalizerArea(): Array<number | undefined> {
    const value = this.x00480201;
    if (value === undefined) {
      throw new Error('TopLeftHandCornerOfLocalizerArea is undefined');
    }
    return value;
  }

  // Bottom Right Hand Corner of Localizer Area
  get BottomRightHandCornerOfLocalizerArea(): Array<number | undefined> | undefined {
    return this.x00480202;
  }

  get x00480202(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00480202']?.Value;
    return convert(value, 0x00480202, 'Array<number | undefined>');
  }

  getBottomRightHandCornerOfLocalizerArea(): Array<number | undefined> {
    const value = this.x00480202;
    if (value === undefined) {
      throw new Error('BottomRightHandCornerOfLocalizerArea is undefined');
    }
    return value;
  }

  // Optical Path Identification Sequence
  get OpticalPathIdentificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00480207;
  }

  get x00480207(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00480207']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOpticalPathIdentificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00480207;
    if (value === undefined) {
      throw new Error('OpticalPathIdentificationSequence is undefined');
    }
    return value;
  }

  // Plane Position (Slide) Sequence
  get PlanePositionSlideSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0048021a;
  }

  get x0048021a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0048021A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPlanePositionSlideSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0048021a;
    if (value === undefined) {
      throw new Error('PlanePositionSlideSequence is undefined');
    }
    return value;
  }

  // Column Position In Total Image Pixel Matrix
  get ColumnPositionInTotalImagePixelMatrix(): number | undefined {
    return this.x0048021e;
  }

  get x0048021e(): number | undefined {
    const value = this.dwResponse['0048021E']?.Value;
    return convert(value?.[0], 0x0048021e, 'number');
  }

  getColumnPositionInTotalImagePixelMatrix(): number {
    const value = this.x0048021e;
    if (value === undefined) {
      throw new Error('ColumnPositionInTotalImagePixelMatrix is undefined');
    }
    return value;
  }

  // Row Position In Total Image Pixel Matrix
  get RowPositionInTotalImagePixelMatrix(): number | undefined {
    return this.x0048021f;
  }

  get x0048021f(): number | undefined {
    const value = this.dwResponse['0048021F']?.Value;
    return convert(value?.[0], 0x0048021f, 'number');
  }

  getRowPositionInTotalImagePixelMatrix(): number {
    const value = this.x0048021f;
    if (value === undefined) {
      throw new Error('RowPositionInTotalImagePixelMatrix is undefined');
    }
    return value;
  }

  // Pixel Origin Interpretation
  get PixelOriginInterpretation(): string | undefined {
    return this.x00480301;
  }

  get x00480301(): string | undefined {
    const value = this.dwResponse['00480301']?.Value;
    return convert(value?.[0], 0x00480301, 'string');
  }

  getPixelOriginInterpretation(): string {
    const value = this.x00480301;
    if (value === undefined) {
      throw new Error('PixelOriginInterpretation is undefined');
    }
    return value;
  }

  // Calibration Image
  get CalibrationImage(): string | undefined {
    return this.x00500004;
  }

  get x00500004(): string | undefined {
    const value = this.dwResponse['00500004']?.Value;
    return convert(value?.[0], 0x00500004, 'string');
  }

  getCalibrationImage(): string {
    const value = this.x00500004;
    if (value === undefined) {
      throw new Error('CalibrationImage is undefined');
    }
    return value;
  }

  // Device Sequence
  get DeviceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00500010;
  }

  get x00500010(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00500010']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDeviceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00500010;
    if (value === undefined) {
      throw new Error('DeviceSequence is undefined');
    }
    return value;
  }

  // Container Component Type Code Sequence
  get ContainerComponentTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00500012;
  }

  get x00500012(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00500012']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getContainerComponentTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00500012;
    if (value === undefined) {
      throw new Error('ContainerComponentTypeCodeSequence is undefined');
    }
    return value;
  }

  // Container Component Thickness
  get ContainerComponentThickness(): number | undefined {
    return this.x00500013;
  }

  get x00500013(): number | undefined {
    const value = this.dwResponse['00500013']?.Value;
    return convert(value?.[0], 0x00500013, 'number');
  }

  getContainerComponentThickness(): number {
    const value = this.x00500013;
    if (value === undefined) {
      throw new Error('ContainerComponentThickness is undefined');
    }
    return value;
  }

  // Device Length
  get DeviceLength(): number | undefined {
    return this.x00500014;
  }

  get x00500014(): number | undefined {
    const value = this.dwResponse['00500014']?.Value;
    return convert(value?.[0], 0x00500014, 'number');
  }

  getDeviceLength(): number {
    const value = this.x00500014;
    if (value === undefined) {
      throw new Error('DeviceLength is undefined');
    }
    return value;
  }

  // Container Component Width
  get ContainerComponentWidth(): number | undefined {
    return this.x00500015;
  }

  get x00500015(): number | undefined {
    const value = this.dwResponse['00500015']?.Value;
    return convert(value?.[0], 0x00500015, 'number');
  }

  getContainerComponentWidth(): number {
    const value = this.x00500015;
    if (value === undefined) {
      throw new Error('ContainerComponentWidth is undefined');
    }
    return value;
  }

  // Device Diameter
  get DeviceDiameter(): number | undefined {
    return this.x00500016;
  }

  get x00500016(): number | undefined {
    const value = this.dwResponse['00500016']?.Value;
    return convert(value?.[0], 0x00500016, 'number');
  }

  getDeviceDiameter(): number {
    const value = this.x00500016;
    if (value === undefined) {
      throw new Error('DeviceDiameter is undefined');
    }
    return value;
  }

  // Device Diameter Units
  get DeviceDiameterUnits(): string | undefined {
    return this.x00500017;
  }

  get x00500017(): string | undefined {
    const value = this.dwResponse['00500017']?.Value;
    return convert(value?.[0], 0x00500017, 'string');
  }

  getDeviceDiameterUnits(): string {
    const value = this.x00500017;
    if (value === undefined) {
      throw new Error('DeviceDiameterUnits is undefined');
    }
    return value;
  }

  // Device Volume
  get DeviceVolume(): number | undefined {
    return this.x00500018;
  }

  get x00500018(): number | undefined {
    const value = this.dwResponse['00500018']?.Value;
    return convert(value?.[0], 0x00500018, 'number');
  }

  getDeviceVolume(): number {
    const value = this.x00500018;
    if (value === undefined) {
      throw new Error('DeviceVolume is undefined');
    }
    return value;
  }

  // Inter-Marker Distance
  get InterMarkerDistance(): number | undefined {
    return this.x00500019;
  }

  get x00500019(): number | undefined {
    const value = this.dwResponse['00500019']?.Value;
    return convert(value?.[0], 0x00500019, 'number');
  }

  getInterMarkerDistance(): number {
    const value = this.x00500019;
    if (value === undefined) {
      throw new Error('InterMarkerDistance is undefined');
    }
    return value;
  }

  // Container Component Material
  get ContainerComponentMaterial(): string | undefined {
    return this.x0050001a;
  }

  get x0050001a(): string | undefined {
    const value = this.dwResponse['0050001A']?.Value;
    return convert(value?.[0], 0x0050001a, 'string');
  }

  getContainerComponentMaterial(): string {
    const value = this.x0050001a;
    if (value === undefined) {
      throw new Error('ContainerComponentMaterial is undefined');
    }
    return value;
  }

  // Container Component ID
  get ContainerComponentID(): string | undefined {
    return this.x0050001b;
  }

  get x0050001b(): string | undefined {
    const value = this.dwResponse['0050001B']?.Value;
    return convert(value?.[0], 0x0050001b, 'string');
  }

  getContainerComponentID(): string {
    const value = this.x0050001b;
    if (value === undefined) {
      throw new Error('ContainerComponentID is undefined');
    }
    return value;
  }

  // Container Component Length
  get ContainerComponentLength(): number | undefined {
    return this.x0050001c;
  }

  get x0050001c(): number | undefined {
    const value = this.dwResponse['0050001C']?.Value;
    return convert(value?.[0], 0x0050001c, 'number');
  }

  getContainerComponentLength(): number {
    const value = this.x0050001c;
    if (value === undefined) {
      throw new Error('ContainerComponentLength is undefined');
    }
    return value;
  }

  // Container Component Diameter
  get ContainerComponentDiameter(): number | undefined {
    return this.x0050001d;
  }

  get x0050001d(): number | undefined {
    const value = this.dwResponse['0050001D']?.Value;
    return convert(value?.[0], 0x0050001d, 'number');
  }

  getContainerComponentDiameter(): number {
    const value = this.x0050001d;
    if (value === undefined) {
      throw new Error('ContainerComponentDiameter is undefined');
    }
    return value;
  }

  // Container Component Description
  get ContainerComponentDescription(): string | undefined {
    return this.x0050001e;
  }

  get x0050001e(): string | undefined {
    const value = this.dwResponse['0050001E']?.Value;
    return convert(value?.[0], 0x0050001e, 'string');
  }

  getContainerComponentDescription(): string {
    const value = this.x0050001e;
    if (value === undefined) {
      throw new Error('ContainerComponentDescription is undefined');
    }
    return value;
  }

  // Device Description
  get DeviceDescription(): string | undefined {
    return this.x00500020;
  }

  get x00500020(): string | undefined {
    const value = this.dwResponse['00500020']?.Value;
    return convert(value?.[0], 0x00500020, 'string');
  }

  getDeviceDescription(): string {
    const value = this.x00500020;
    if (value === undefined) {
      throw new Error('DeviceDescription is undefined');
    }
    return value;
  }

  // Contrast/Bolus Ingredient Percent by Volume
  get ContrastBolusIngredientPercentByVolume(): number | undefined {
    return this.x00520001;
  }

  get x00520001(): number | undefined {
    const value = this.dwResponse['00520001']?.Value;
    return convert(value?.[0], 0x00520001, 'number');
  }

  getContrastBolusIngredientPercentByVolume(): number {
    const value = this.x00520001;
    if (value === undefined) {
      throw new Error('ContrastBolusIngredientPercentByVolume is undefined');
    }
    return value;
  }

  // OCT Focal Distance
  get OCTFocalDistance(): number | undefined {
    return this.x00520002;
  }

  get x00520002(): number | undefined {
    const value = this.dwResponse['00520002']?.Value;
    return convert(value?.[0], 0x00520002, 'number');
  }

  getOCTFocalDistance(): number {
    const value = this.x00520002;
    if (value === undefined) {
      throw new Error('OCTFocalDistance is undefined');
    }
    return value;
  }

  // Beam Spot Size
  get BeamSpotSize(): number | undefined {
    return this.x00520003;
  }

  get x00520003(): number | undefined {
    const value = this.dwResponse['00520003']?.Value;
    return convert(value?.[0], 0x00520003, 'number');
  }

  getBeamSpotSize(): number {
    const value = this.x00520003;
    if (value === undefined) {
      throw new Error('BeamSpotSize is undefined');
    }
    return value;
  }

  // Effective Refractive Index
  get EffectiveRefractiveIndex(): number | undefined {
    return this.x00520004;
  }

  get x00520004(): number | undefined {
    const value = this.dwResponse['00520004']?.Value;
    return convert(value?.[0], 0x00520004, 'number');
  }

  getEffectiveRefractiveIndex(): number {
    const value = this.x00520004;
    if (value === undefined) {
      throw new Error('EffectiveRefractiveIndex is undefined');
    }
    return value;
  }

  // OCT Acquisition Domain
  get OCTAcquisitionDomain(): string | undefined {
    return this.x00520006;
  }

  get x00520006(): string | undefined {
    const value = this.dwResponse['00520006']?.Value;
    return convert(value?.[0], 0x00520006, 'string');
  }

  getOCTAcquisitionDomain(): string {
    const value = this.x00520006;
    if (value === undefined) {
      throw new Error('OCTAcquisitionDomain is undefined');
    }
    return value;
  }

  // OCT Optical Center Wavelength
  get OCTOpticalCenterWavelength(): number | undefined {
    return this.x00520007;
  }

  get x00520007(): number | undefined {
    const value = this.dwResponse['00520007']?.Value;
    return convert(value?.[0], 0x00520007, 'number');
  }

  getOCTOpticalCenterWavelength(): number {
    const value = this.x00520007;
    if (value === undefined) {
      throw new Error('OCTOpticalCenterWavelength is undefined');
    }
    return value;
  }

  // Axial Resolution
  get AxialResolution(): number | undefined {
    return this.x00520008;
  }

  get x00520008(): number | undefined {
    const value = this.dwResponse['00520008']?.Value;
    return convert(value?.[0], 0x00520008, 'number');
  }

  getAxialResolution(): number {
    const value = this.x00520008;
    if (value === undefined) {
      throw new Error('AxialResolution is undefined');
    }
    return value;
  }

  // Ranging Depth
  get RangingDepth(): number | undefined {
    return this.x00520009;
  }

  get x00520009(): number | undefined {
    const value = this.dwResponse['00520009']?.Value;
    return convert(value?.[0], 0x00520009, 'number');
  }

  getRangingDepth(): number {
    const value = this.x00520009;
    if (value === undefined) {
      throw new Error('RangingDepth is undefined');
    }
    return value;
  }

  // A-line Rate
  get ALineRate(): number | undefined {
    return this.x00520011;
  }

  get x00520011(): number | undefined {
    const value = this.dwResponse['00520011']?.Value;
    return convert(value?.[0], 0x00520011, 'number');
  }

  getALineRate(): number {
    const value = this.x00520011;
    if (value === undefined) {
      throw new Error('ALineRate is undefined');
    }
    return value;
  }

  // A-lines Per Frame
  get ALinesPerFrame(): number | undefined {
    return this.x00520012;
  }

  get x00520012(): number | undefined {
    const value = this.dwResponse['00520012']?.Value;
    return convert(value?.[0], 0x00520012, 'number');
  }

  getALinesPerFrame(): number {
    const value = this.x00520012;
    if (value === undefined) {
      throw new Error('ALinesPerFrame is undefined');
    }
    return value;
  }

  // Catheter Rotational Rate
  get CatheterRotationalRate(): number | undefined {
    return this.x00520013;
  }

  get x00520013(): number | undefined {
    const value = this.dwResponse['00520013']?.Value;
    return convert(value?.[0], 0x00520013, 'number');
  }

  getCatheterRotationalRate(): number {
    const value = this.x00520013;
    if (value === undefined) {
      throw new Error('CatheterRotationalRate is undefined');
    }
    return value;
  }

  // A-line Pixel Spacing
  get ALinePixelSpacing(): number | undefined {
    return this.x00520014;
  }

  get x00520014(): number | undefined {
    const value = this.dwResponse['00520014']?.Value;
    return convert(value?.[0], 0x00520014, 'number');
  }

  getALinePixelSpacing(): number {
    const value = this.x00520014;
    if (value === undefined) {
      throw new Error('ALinePixelSpacing is undefined');
    }
    return value;
  }

  // Mode of Percutaneous Access Sequence
  get ModeOfPercutaneousAccessSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00520016;
  }

  get x00520016(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00520016']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getModeOfPercutaneousAccessSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00520016;
    if (value === undefined) {
      throw new Error('ModeOfPercutaneousAccessSequence is undefined');
    }
    return value;
  }

  // Intravascular OCT Frame Type Sequence
  get IntravascularOCTFrameTypeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00520025;
  }

  get x00520025(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00520025']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIntravascularOCTFrameTypeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00520025;
    if (value === undefined) {
      throw new Error('IntravascularOCTFrameTypeSequence is undefined');
    }
    return value;
  }

  // OCT Z Offset Applied
  get OCTZOffsetApplied(): string | undefined {
    return this.x00520026;
  }

  get x00520026(): string | undefined {
    const value = this.dwResponse['00520026']?.Value;
    return convert(value?.[0], 0x00520026, 'string');
  }

  getOCTZOffsetApplied(): string {
    const value = this.x00520026;
    if (value === undefined) {
      throw new Error('OCTZOffsetApplied is undefined');
    }
    return value;
  }

  // Intravascular Frame Content Sequence
  get IntravascularFrameContentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00520027;
  }

  get x00520027(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00520027']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIntravascularFrameContentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00520027;
    if (value === undefined) {
      throw new Error('IntravascularFrameContentSequence is undefined');
    }
    return value;
  }

  // Intravascular Longitudinal Distance
  get IntravascularLongitudinalDistance(): number | undefined {
    return this.x00520028;
  }

  get x00520028(): number | undefined {
    const value = this.dwResponse['00520028']?.Value;
    return convert(value?.[0], 0x00520028, 'number');
  }

  getIntravascularLongitudinalDistance(): number {
    const value = this.x00520028;
    if (value === undefined) {
      throw new Error('IntravascularLongitudinalDistance is undefined');
    }
    return value;
  }

  // Intravascular OCT Frame Content Sequence
  get IntravascularOCTFrameContentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00520029;
  }

  get x00520029(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00520029']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIntravascularOCTFrameContentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00520029;
    if (value === undefined) {
      throw new Error('IntravascularOCTFrameContentSequence is undefined');
    }
    return value;
  }

  // OCT Z Offset Correction
  get OCTZOffsetCorrection(): Uint8Array | undefined {
    return this.x00520030;
  }

  get x00520030(): Uint8Array | undefined {
    const value = this.dwResponse['00520030']?.Value;
    return convert(value?.[0], 0x00520030, 'Uint8Array');
  }

  getOCTZOffsetCorrection(): Uint8Array {
    const value = this.x00520030;
    if (value === undefined) {
      throw new Error('OCTZOffsetCorrection is undefined');
    }
    return value;
  }

  // Catheter Direction of Rotation
  get CatheterDirectionOfRotation(): string | undefined {
    return this.x00520031;
  }

  get x00520031(): string | undefined {
    const value = this.dwResponse['00520031']?.Value;
    return convert(value?.[0], 0x00520031, 'string');
  }

  getCatheterDirectionOfRotation(): string {
    const value = this.x00520031;
    if (value === undefined) {
      throw new Error('CatheterDirectionOfRotation is undefined');
    }
    return value;
  }

  // Seam Line Location
  get SeamLineLocation(): number | undefined {
    return this.x00520033;
  }

  get x00520033(): number | undefined {
    const value = this.dwResponse['00520033']?.Value;
    return convert(value?.[0], 0x00520033, 'number');
  }

  getSeamLineLocation(): number {
    const value = this.x00520033;
    if (value === undefined) {
      throw new Error('SeamLineLocation is undefined');
    }
    return value;
  }

  // First A-line Location
  get FirstALineLocation(): number | undefined {
    return this.x00520034;
  }

  get x00520034(): number | undefined {
    const value = this.dwResponse['00520034']?.Value;
    return convert(value?.[0], 0x00520034, 'number');
  }

  getFirstALineLocation(): number {
    const value = this.x00520034;
    if (value === undefined) {
      throw new Error('FirstALineLocation is undefined');
    }
    return value;
  }

  // Seam Line Index
  get SeamLineIndex(): number | undefined {
    return this.x00520036;
  }

  get x00520036(): number | undefined {
    const value = this.dwResponse['00520036']?.Value;
    return convert(value?.[0], 0x00520036, 'number');
  }

  getSeamLineIndex(): number {
    const value = this.x00520036;
    if (value === undefined) {
      throw new Error('SeamLineIndex is undefined');
    }
    return value;
  }

  // Number of Padded A-lines
  get NumberOfPaddedALines(): number | undefined {
    return this.x00520038;
  }

  get x00520038(): number | undefined {
    const value = this.dwResponse['00520038']?.Value;
    return convert(value?.[0], 0x00520038, 'number');
  }

  getNumberOfPaddedALines(): number {
    const value = this.x00520038;
    if (value === undefined) {
      throw new Error('NumberOfPaddedALines is undefined');
    }
    return value;
  }

  // Interpolation Type
  get InterpolationType(): string | undefined {
    return this.x00520039;
  }

  get x00520039(): string | undefined {
    const value = this.dwResponse['00520039']?.Value;
    return convert(value?.[0], 0x00520039, 'string');
  }

  getInterpolationType(): string {
    const value = this.x00520039;
    if (value === undefined) {
      throw new Error('InterpolationType is undefined');
    }
    return value;
  }

  // Refractive Index Applied
  get RefractiveIndexApplied(): string | undefined {
    return this.x0052003a;
  }

  get x0052003a(): string | undefined {
    const value = this.dwResponse['0052003A']?.Value;
    return convert(value?.[0], 0x0052003a, 'string');
  }

  getRefractiveIndexApplied(): string {
    const value = this.x0052003a;
    if (value === undefined) {
      throw new Error('RefractiveIndexApplied is undefined');
    }
    return value;
  }

  // Energy Window Vector
  get EnergyWindowVector(): Array<number | undefined> | undefined {
    return this.x00540010;
  }

  get x00540010(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00540010']?.Value;
    return convert(value, 0x00540010, 'Array<number | undefined>');
  }

  getEnergyWindowVector(): Array<number | undefined> {
    const value = this.x00540010;
    if (value === undefined) {
      throw new Error('EnergyWindowVector is undefined');
    }
    return value;
  }

  // Number of Energy Windows
  get NumberOfEnergyWindows(): number | undefined {
    return this.x00540011;
  }

  get x00540011(): number | undefined {
    const value = this.dwResponse['00540011']?.Value;
    return convert(value?.[0], 0x00540011, 'number');
  }

  getNumberOfEnergyWindows(): number {
    const value = this.x00540011;
    if (value === undefined) {
      throw new Error('NumberOfEnergyWindows is undefined');
    }
    return value;
  }

  // Energy Window Information Sequence
  get EnergyWindowInformationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00540012;
  }

  get x00540012(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00540012']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getEnergyWindowInformationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00540012;
    if (value === undefined) {
      throw new Error('EnergyWindowInformationSequence is undefined');
    }
    return value;
  }

  // Energy Window Range Sequence
  get EnergyWindowRangeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00540013;
  }

  get x00540013(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00540013']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getEnergyWindowRangeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00540013;
    if (value === undefined) {
      throw new Error('EnergyWindowRangeSequence is undefined');
    }
    return value;
  }

  // Energy Window Lower Limit
  get EnergyWindowLowerLimit(): number | undefined {
    return this.x00540014;
  }

  get x00540014(): number | undefined {
    const value = this.dwResponse['00540014']?.Value;
    return convert(value?.[0], 0x00540014, 'number');
  }

  getEnergyWindowLowerLimit(): number {
    const value = this.x00540014;
    if (value === undefined) {
      throw new Error('EnergyWindowLowerLimit is undefined');
    }
    return value;
  }

  // Energy Window Upper Limit
  get EnergyWindowUpperLimit(): number | undefined {
    return this.x00540015;
  }

  get x00540015(): number | undefined {
    const value = this.dwResponse['00540015']?.Value;
    return convert(value?.[0], 0x00540015, 'number');
  }

  getEnergyWindowUpperLimit(): number {
    const value = this.x00540015;
    if (value === undefined) {
      throw new Error('EnergyWindowUpperLimit is undefined');
    }
    return value;
  }

  // Radiopharmaceutical Information Sequence
  get RadiopharmaceuticalInformationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00540016;
  }

  get x00540016(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00540016']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRadiopharmaceuticalInformationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00540016;
    if (value === undefined) {
      throw new Error('RadiopharmaceuticalInformationSequence is undefined');
    }
    return value;
  }

  // Residual Syringe Counts
  get ResidualSyringeCounts(): number | undefined {
    return this.x00540017;
  }

  get x00540017(): number | undefined {
    const value = this.dwResponse['00540017']?.Value;
    return convert(value?.[0], 0x00540017, 'number');
  }

  getResidualSyringeCounts(): number {
    const value = this.x00540017;
    if (value === undefined) {
      throw new Error('ResidualSyringeCounts is undefined');
    }
    return value;
  }

  // Energy Window Name
  get EnergyWindowName(): string | undefined {
    return this.x00540018;
  }

  get x00540018(): string | undefined {
    const value = this.dwResponse['00540018']?.Value;
    return convert(value?.[0], 0x00540018, 'string');
  }

  getEnergyWindowName(): string {
    const value = this.x00540018;
    if (value === undefined) {
      throw new Error('EnergyWindowName is undefined');
    }
    return value;
  }

  // Detector Vector
  get DetectorVector(): Array<number | undefined> | undefined {
    return this.x00540020;
  }

  get x00540020(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00540020']?.Value;
    return convert(value, 0x00540020, 'Array<number | undefined>');
  }

  getDetectorVector(): Array<number | undefined> {
    const value = this.x00540020;
    if (value === undefined) {
      throw new Error('DetectorVector is undefined');
    }
    return value;
  }

  // Number of Detectors
  get NumberOfDetectors(): number | undefined {
    return this.x00540021;
  }

  get x00540021(): number | undefined {
    const value = this.dwResponse['00540021']?.Value;
    return convert(value?.[0], 0x00540021, 'number');
  }

  getNumberOfDetectors(): number {
    const value = this.x00540021;
    if (value === undefined) {
      throw new Error('NumberOfDetectors is undefined');
    }
    return value;
  }

  // Detector Information Sequence
  get DetectorInformationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00540022;
  }

  get x00540022(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00540022']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDetectorInformationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00540022;
    if (value === undefined) {
      throw new Error('DetectorInformationSequence is undefined');
    }
    return value;
  }

  // Phase Vector
  get PhaseVector(): Array<number | undefined> | undefined {
    return this.x00540030;
  }

  get x00540030(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00540030']?.Value;
    return convert(value, 0x00540030, 'Array<number | undefined>');
  }

  getPhaseVector(): Array<number | undefined> {
    const value = this.x00540030;
    if (value === undefined) {
      throw new Error('PhaseVector is undefined');
    }
    return value;
  }

  // Number of Phases
  get NumberOfPhases(): number | undefined {
    return this.x00540031;
  }

  get x00540031(): number | undefined {
    const value = this.dwResponse['00540031']?.Value;
    return convert(value?.[0], 0x00540031, 'number');
  }

  getNumberOfPhases(): number {
    const value = this.x00540031;
    if (value === undefined) {
      throw new Error('NumberOfPhases is undefined');
    }
    return value;
  }

  // Phase Information Sequence
  get PhaseInformationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00540032;
  }

  get x00540032(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00540032']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPhaseInformationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00540032;
    if (value === undefined) {
      throw new Error('PhaseInformationSequence is undefined');
    }
    return value;
  }

  // Number of Frames in Phase
  get NumberOfFramesInPhase(): number | undefined {
    return this.x00540033;
  }

  get x00540033(): number | undefined {
    const value = this.dwResponse['00540033']?.Value;
    return convert(value?.[0], 0x00540033, 'number');
  }

  getNumberOfFramesInPhase(): number {
    const value = this.x00540033;
    if (value === undefined) {
      throw new Error('NumberOfFramesInPhase is undefined');
    }
    return value;
  }

  // Phase Delay
  get PhaseDelay(): number | undefined {
    return this.x00540036;
  }

  get x00540036(): number | undefined {
    const value = this.dwResponse['00540036']?.Value;
    return convert(value?.[0], 0x00540036, 'number');
  }

  getPhaseDelay(): number {
    const value = this.x00540036;
    if (value === undefined) {
      throw new Error('PhaseDelay is undefined');
    }
    return value;
  }

  // Pause Between Frames
  get PauseBetweenFrames(): number | undefined {
    return this.x00540038;
  }

  get x00540038(): number | undefined {
    const value = this.dwResponse['00540038']?.Value;
    return convert(value?.[0], 0x00540038, 'number');
  }

  getPauseBetweenFrames(): number {
    const value = this.x00540038;
    if (value === undefined) {
      throw new Error('PauseBetweenFrames is undefined');
    }
    return value;
  }

  // Phase Description
  get PhaseDescription(): string | undefined {
    return this.x00540039;
  }

  get x00540039(): string | undefined {
    const value = this.dwResponse['00540039']?.Value;
    return convert(value?.[0], 0x00540039, 'string');
  }

  getPhaseDescription(): string {
    const value = this.x00540039;
    if (value === undefined) {
      throw new Error('PhaseDescription is undefined');
    }
    return value;
  }

  // Rotation Vector
  get RotationVector(): Array<number | undefined> | undefined {
    return this.x00540050;
  }

  get x00540050(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00540050']?.Value;
    return convert(value, 0x00540050, 'Array<number | undefined>');
  }

  getRotationVector(): Array<number | undefined> {
    const value = this.x00540050;
    if (value === undefined) {
      throw new Error('RotationVector is undefined');
    }
    return value;
  }

  // Number of Rotations
  get NumberOfRotations(): number | undefined {
    return this.x00540051;
  }

  get x00540051(): number | undefined {
    const value = this.dwResponse['00540051']?.Value;
    return convert(value?.[0], 0x00540051, 'number');
  }

  getNumberOfRotations(): number {
    const value = this.x00540051;
    if (value === undefined) {
      throw new Error('NumberOfRotations is undefined');
    }
    return value;
  }

  // Rotation Information Sequence
  get RotationInformationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00540052;
  }

  get x00540052(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00540052']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRotationInformationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00540052;
    if (value === undefined) {
      throw new Error('RotationInformationSequence is undefined');
    }
    return value;
  }

  // Number of Frames in Rotation
  get NumberOfFramesInRotation(): number | undefined {
    return this.x00540053;
  }

  get x00540053(): number | undefined {
    const value = this.dwResponse['00540053']?.Value;
    return convert(value?.[0], 0x00540053, 'number');
  }

  getNumberOfFramesInRotation(): number {
    const value = this.x00540053;
    if (value === undefined) {
      throw new Error('NumberOfFramesInRotation is undefined');
    }
    return value;
  }

  // R-R Interval Vector
  get RRIntervalVector(): Array<number | undefined> | undefined {
    return this.x00540060;
  }

  get x00540060(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00540060']?.Value;
    return convert(value, 0x00540060, 'Array<number | undefined>');
  }

  getRRIntervalVector(): Array<number | undefined> {
    const value = this.x00540060;
    if (value === undefined) {
      throw new Error('RRIntervalVector is undefined');
    }
    return value;
  }

  // Number of R-R Intervals
  get NumberOfRRIntervals(): number | undefined {
    return this.x00540061;
  }

  get x00540061(): number | undefined {
    const value = this.dwResponse['00540061']?.Value;
    return convert(value?.[0], 0x00540061, 'number');
  }

  getNumberOfRRIntervals(): number {
    const value = this.x00540061;
    if (value === undefined) {
      throw new Error('NumberOfRRIntervals is undefined');
    }
    return value;
  }

  // Gated Information Sequence
  get GatedInformationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00540062;
  }

  get x00540062(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00540062']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getGatedInformationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00540062;
    if (value === undefined) {
      throw new Error('GatedInformationSequence is undefined');
    }
    return value;
  }

  // Data Information Sequence
  get DataInformationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00540063;
  }

  get x00540063(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00540063']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDataInformationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00540063;
    if (value === undefined) {
      throw new Error('DataInformationSequence is undefined');
    }
    return value;
  }

  // Time Slot Vector
  get TimeSlotVector(): Array<number | undefined> | undefined {
    return this.x00540070;
  }

  get x00540070(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00540070']?.Value;
    return convert(value, 0x00540070, 'Array<number | undefined>');
  }

  getTimeSlotVector(): Array<number | undefined> {
    const value = this.x00540070;
    if (value === undefined) {
      throw new Error('TimeSlotVector is undefined');
    }
    return value;
  }

  // Number of Time Slots
  get NumberOfTimeSlots(): number | undefined {
    return this.x00540071;
  }

  get x00540071(): number | undefined {
    const value = this.dwResponse['00540071']?.Value;
    return convert(value?.[0], 0x00540071, 'number');
  }

  getNumberOfTimeSlots(): number {
    const value = this.x00540071;
    if (value === undefined) {
      throw new Error('NumberOfTimeSlots is undefined');
    }
    return value;
  }

  // Time Slot Information Sequence
  get TimeSlotInformationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00540072;
  }

  get x00540072(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00540072']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTimeSlotInformationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00540072;
    if (value === undefined) {
      throw new Error('TimeSlotInformationSequence is undefined');
    }
    return value;
  }

  // Time Slot Time
  get TimeSlotTime(): number | undefined {
    return this.x00540073;
  }

  get x00540073(): number | undefined {
    const value = this.dwResponse['00540073']?.Value;
    return convert(value?.[0], 0x00540073, 'number');
  }

  getTimeSlotTime(): number {
    const value = this.x00540073;
    if (value === undefined) {
      throw new Error('TimeSlotTime is undefined');
    }
    return value;
  }

  // Slice Vector
  get SliceVector(): Array<number | undefined> | undefined {
    return this.x00540080;
  }

  get x00540080(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00540080']?.Value;
    return convert(value, 0x00540080, 'Array<number | undefined>');
  }

  getSliceVector(): Array<number | undefined> {
    const value = this.x00540080;
    if (value === undefined) {
      throw new Error('SliceVector is undefined');
    }
    return value;
  }

  // Number of Slices
  get NumberOfSlices(): number | undefined {
    return this.x00540081;
  }

  get x00540081(): number | undefined {
    const value = this.dwResponse['00540081']?.Value;
    return convert(value?.[0], 0x00540081, 'number');
  }

  getNumberOfSlices(): number {
    const value = this.x00540081;
    if (value === undefined) {
      throw new Error('NumberOfSlices is undefined');
    }
    return value;
  }

  // Angular View Vector
  get AngularViewVector(): Array<number | undefined> | undefined {
    return this.x00540090;
  }

  get x00540090(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00540090']?.Value;
    return convert(value, 0x00540090, 'Array<number | undefined>');
  }

  getAngularViewVector(): Array<number | undefined> {
    const value = this.x00540090;
    if (value === undefined) {
      throw new Error('AngularViewVector is undefined');
    }
    return value;
  }

  // Time Slice Vector
  get TimeSliceVector(): Array<number | undefined> | undefined {
    return this.x00540100;
  }

  get x00540100(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00540100']?.Value;
    return convert(value, 0x00540100, 'Array<number | undefined>');
  }

  getTimeSliceVector(): Array<number | undefined> {
    const value = this.x00540100;
    if (value === undefined) {
      throw new Error('TimeSliceVector is undefined');
    }
    return value;
  }

  // Number of Time Slices
  get NumberOfTimeSlices(): number | undefined {
    return this.x00540101;
  }

  get x00540101(): number | undefined {
    const value = this.dwResponse['00540101']?.Value;
    return convert(value?.[0], 0x00540101, 'number');
  }

  getNumberOfTimeSlices(): number {
    const value = this.x00540101;
    if (value === undefined) {
      throw new Error('NumberOfTimeSlices is undefined');
    }
    return value;
  }

  // Start Angle
  get StartAngle(): number | undefined {
    return this.x00540200;
  }

  get x00540200(): number | undefined {
    const value = this.dwResponse['00540200']?.Value;
    return convert(value?.[0], 0x00540200, 'number');
  }

  getStartAngle(): number {
    const value = this.x00540200;
    if (value === undefined) {
      throw new Error('StartAngle is undefined');
    }
    return value;
  }

  // Type of Detector Motion
  get TypeOfDetectorMotion(): string | undefined {
    return this.x00540202;
  }

  get x00540202(): string | undefined {
    const value = this.dwResponse['00540202']?.Value;
    return convert(value?.[0], 0x00540202, 'string');
  }

  getTypeOfDetectorMotion(): string {
    const value = this.x00540202;
    if (value === undefined) {
      throw new Error('TypeOfDetectorMotion is undefined');
    }
    return value;
  }

  // Trigger Vector
  get TriggerVector(): Array<number | undefined> | undefined {
    return this.x00540210;
  }

  get x00540210(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00540210']?.Value;
    return convert(value, 0x00540210, 'Array<number | undefined>');
  }

  getTriggerVector(): Array<number | undefined> {
    const value = this.x00540210;
    if (value === undefined) {
      throw new Error('TriggerVector is undefined');
    }
    return value;
  }

  // Number of Triggers in Phase
  get NumberOfTriggersInPhase(): number | undefined {
    return this.x00540211;
  }

  get x00540211(): number | undefined {
    const value = this.dwResponse['00540211']?.Value;
    return convert(value?.[0], 0x00540211, 'number');
  }

  getNumberOfTriggersInPhase(): number {
    const value = this.x00540211;
    if (value === undefined) {
      throw new Error('NumberOfTriggersInPhase is undefined');
    }
    return value;
  }

  // View Code Sequence
  get ViewCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00540220;
  }

  get x00540220(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00540220']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getViewCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00540220;
    if (value === undefined) {
      throw new Error('ViewCodeSequence is undefined');
    }
    return value;
  }

  // View Modifier Code Sequence
  get ViewModifierCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00540222;
  }

  get x00540222(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00540222']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getViewModifierCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00540222;
    if (value === undefined) {
      throw new Error('ViewModifierCodeSequence is undefined');
    }
    return value;
  }

  // Radionuclide Code Sequence
  get RadionuclideCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00540300;
  }

  get x00540300(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00540300']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRadionuclideCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00540300;
    if (value === undefined) {
      throw new Error('RadionuclideCodeSequence is undefined');
    }
    return value;
  }

  // Administration Route Code Sequence
  get AdministrationRouteCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00540302;
  }

  get x00540302(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00540302']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAdministrationRouteCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00540302;
    if (value === undefined) {
      throw new Error('AdministrationRouteCodeSequence is undefined');
    }
    return value;
  }

  // Radiopharmaceutical Code Sequence
  get RadiopharmaceuticalCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00540304;
  }

  get x00540304(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00540304']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRadiopharmaceuticalCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00540304;
    if (value === undefined) {
      throw new Error('RadiopharmaceuticalCodeSequence is undefined');
    }
    return value;
  }

  // Calibration Data Sequence
  get CalibrationDataSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00540306;
  }

  get x00540306(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00540306']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCalibrationDataSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00540306;
    if (value === undefined) {
      throw new Error('CalibrationDataSequence is undefined');
    }
    return value;
  }

  // Energy Window Number
  get EnergyWindowNumber(): number | undefined {
    return this.x00540308;
  }

  get x00540308(): number | undefined {
    const value = this.dwResponse['00540308']?.Value;
    return convert(value?.[0], 0x00540308, 'number');
  }

  getEnergyWindowNumber(): number {
    const value = this.x00540308;
    if (value === undefined) {
      throw new Error('EnergyWindowNumber is undefined');
    }
    return value;
  }

  // Image ID
  get ImageID(): string | undefined {
    return this.x00540400;
  }

  get x00540400(): string | undefined {
    const value = this.dwResponse['00540400']?.Value;
    return convert(value?.[0], 0x00540400, 'string');
  }

  getImageID(): string {
    const value = this.x00540400;
    if (value === undefined) {
      throw new Error('ImageID is undefined');
    }
    return value;
  }

  // Patient Orientation Code Sequence
  get PatientOrientationCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00540410;
  }

  get x00540410(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00540410']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPatientOrientationCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00540410;
    if (value === undefined) {
      throw new Error('PatientOrientationCodeSequence is undefined');
    }
    return value;
  }

  // Patient Orientation Modifier Code Sequence
  get PatientOrientationModifierCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00540412;
  }

  get x00540412(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00540412']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPatientOrientationModifierCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00540412;
    if (value === undefined) {
      throw new Error('PatientOrientationModifierCodeSequence is undefined');
    }
    return value;
  }

  // Patient Gantry Relationship Code Sequence
  get PatientGantryRelationshipCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00540414;
  }

  get x00540414(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00540414']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPatientGantryRelationshipCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00540414;
    if (value === undefined) {
      throw new Error('PatientGantryRelationshipCodeSequence is undefined');
    }
    return value;
  }

  // Slice Progression Direction
  get SliceProgressionDirection(): string | undefined {
    return this.x00540500;
  }

  get x00540500(): string | undefined {
    const value = this.dwResponse['00540500']?.Value;
    return convert(value?.[0], 0x00540500, 'string');
  }

  getSliceProgressionDirection(): string {
    const value = this.x00540500;
    if (value === undefined) {
      throw new Error('SliceProgressionDirection is undefined');
    }
    return value;
  }

  // Scan Progression Direction
  get ScanProgressionDirection(): string | undefined {
    return this.x00540501;
  }

  get x00540501(): string | undefined {
    const value = this.dwResponse['00540501']?.Value;
    return convert(value?.[0], 0x00540501, 'string');
  }

  getScanProgressionDirection(): string {
    const value = this.x00540501;
    if (value === undefined) {
      throw new Error('ScanProgressionDirection is undefined');
    }
    return value;
  }

  // Series Type
  get SeriesType(): Array<string | undefined> | undefined {
    return this.x00541000;
  }

  get x00541000(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00541000']?.Value;
    return convert(value, 0x00541000, 'Array<string | undefined>');
  }

  getSeriesType(): Array<string | undefined> {
    const value = this.x00541000;
    if (value === undefined) {
      throw new Error('SeriesType is undefined');
    }
    return value;
  }

  // Units
  get Units(): string | undefined {
    return this.x00541001;
  }

  get x00541001(): string | undefined {
    const value = this.dwResponse['00541001']?.Value;
    return convert(value?.[0], 0x00541001, 'string');
  }

  getUnits(): string {
    const value = this.x00541001;
    if (value === undefined) {
      throw new Error('Units is undefined');
    }
    return value;
  }

  // Counts Source
  get CountsSource(): string | undefined {
    return this.x00541002;
  }

  get x00541002(): string | undefined {
    const value = this.dwResponse['00541002']?.Value;
    return convert(value?.[0], 0x00541002, 'string');
  }

  getCountsSource(): string {
    const value = this.x00541002;
    if (value === undefined) {
      throw new Error('CountsSource is undefined');
    }
    return value;
  }

  // Reprojection Method
  get ReprojectionMethod(): string | undefined {
    return this.x00541004;
  }

  get x00541004(): string | undefined {
    const value = this.dwResponse['00541004']?.Value;
    return convert(value?.[0], 0x00541004, 'string');
  }

  getReprojectionMethod(): string {
    const value = this.x00541004;
    if (value === undefined) {
      throw new Error('ReprojectionMethod is undefined');
    }
    return value;
  }

  // SUV Type
  get SUVType(): string | undefined {
    return this.x00541006;
  }

  get x00541006(): string | undefined {
    const value = this.dwResponse['00541006']?.Value;
    return convert(value?.[0], 0x00541006, 'string');
  }

  getSUVType(): string {
    const value = this.x00541006;
    if (value === undefined) {
      throw new Error('SUVType is undefined');
    }
    return value;
  }

  // Randoms Correction Method
  get RandomsCorrectionMethod(): string | undefined {
    return this.x00541100;
  }

  get x00541100(): string | undefined {
    const value = this.dwResponse['00541100']?.Value;
    return convert(value?.[0], 0x00541100, 'string');
  }

  getRandomsCorrectionMethod(): string {
    const value = this.x00541100;
    if (value === undefined) {
      throw new Error('RandomsCorrectionMethod is undefined');
    }
    return value;
  }

  // Attenuation Correction Method
  get AttenuationCorrectionMethod(): string | undefined {
    return this.x00541101;
  }

  get x00541101(): string | undefined {
    const value = this.dwResponse['00541101']?.Value;
    return convert(value?.[0], 0x00541101, 'string');
  }

  getAttenuationCorrectionMethod(): string {
    const value = this.x00541101;
    if (value === undefined) {
      throw new Error('AttenuationCorrectionMethod is undefined');
    }
    return value;
  }

  // Decay Correction
  get DecayCorrection(): string | undefined {
    return this.x00541102;
  }

  get x00541102(): string | undefined {
    const value = this.dwResponse['00541102']?.Value;
    return convert(value?.[0], 0x00541102, 'string');
  }

  getDecayCorrection(): string {
    const value = this.x00541102;
    if (value === undefined) {
      throw new Error('DecayCorrection is undefined');
    }
    return value;
  }

  // Reconstruction Method
  get ReconstructionMethod(): string | undefined {
    return this.x00541103;
  }

  get x00541103(): string | undefined {
    const value = this.dwResponse['00541103']?.Value;
    return convert(value?.[0], 0x00541103, 'string');
  }

  getReconstructionMethod(): string {
    const value = this.x00541103;
    if (value === undefined) {
      throw new Error('ReconstructionMethod is undefined');
    }
    return value;
  }

  // Detector Lines of Response Used
  get DetectorLinesOfResponseUsed(): string | undefined {
    return this.x00541104;
  }

  get x00541104(): string | undefined {
    const value = this.dwResponse['00541104']?.Value;
    return convert(value?.[0], 0x00541104, 'string');
  }

  getDetectorLinesOfResponseUsed(): string {
    const value = this.x00541104;
    if (value === undefined) {
      throw new Error('DetectorLinesOfResponseUsed is undefined');
    }
    return value;
  }

  // Scatter Correction Method
  get ScatterCorrectionMethod(): string | undefined {
    return this.x00541105;
  }

  get x00541105(): string | undefined {
    const value = this.dwResponse['00541105']?.Value;
    return convert(value?.[0], 0x00541105, 'string');
  }

  getScatterCorrectionMethod(): string {
    const value = this.x00541105;
    if (value === undefined) {
      throw new Error('ScatterCorrectionMethod is undefined');
    }
    return value;
  }

  // Axial Acceptance
  get AxialAcceptance(): number | undefined {
    return this.x00541200;
  }

  get x00541200(): number | undefined {
    const value = this.dwResponse['00541200']?.Value;
    return convert(value?.[0], 0x00541200, 'number');
  }

  getAxialAcceptance(): number {
    const value = this.x00541200;
    if (value === undefined) {
      throw new Error('AxialAcceptance is undefined');
    }
    return value;
  }

  // Axial Mash
  get AxialMash(): Array<number | undefined> | undefined {
    return this.x00541201;
  }

  get x00541201(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00541201']?.Value;
    return convert(value, 0x00541201, 'Array<number | undefined>');
  }

  getAxialMash(): Array<number | undefined> {
    const value = this.x00541201;
    if (value === undefined) {
      throw new Error('AxialMash is undefined');
    }
    return value;
  }

  // Transverse Mash
  get TransverseMash(): number | undefined {
    return this.x00541202;
  }

  get x00541202(): number | undefined {
    const value = this.dwResponse['00541202']?.Value;
    return convert(value?.[0], 0x00541202, 'number');
  }

  getTransverseMash(): number {
    const value = this.x00541202;
    if (value === undefined) {
      throw new Error('TransverseMash is undefined');
    }
    return value;
  }

  // Detector Element Size
  get DetectorElementSize(): Array<number | undefined> | undefined {
    return this.x00541203;
  }

  get x00541203(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00541203']?.Value;
    return convert(value, 0x00541203, 'Array<number | undefined>');
  }

  getDetectorElementSize(): Array<number | undefined> {
    const value = this.x00541203;
    if (value === undefined) {
      throw new Error('DetectorElementSize is undefined');
    }
    return value;
  }

  // Coincidence Window Width
  get CoincidenceWindowWidth(): number | undefined {
    return this.x00541210;
  }

  get x00541210(): number | undefined {
    const value = this.dwResponse['00541210']?.Value;
    return convert(value?.[0], 0x00541210, 'number');
  }

  getCoincidenceWindowWidth(): number {
    const value = this.x00541210;
    if (value === undefined) {
      throw new Error('CoincidenceWindowWidth is undefined');
    }
    return value;
  }

  // Secondary Counts Type
  get SecondaryCountsType(): Array<string | undefined> | undefined {
    return this.x00541220;
  }

  get x00541220(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00541220']?.Value;
    return convert(value, 0x00541220, 'Array<string | undefined>');
  }

  getSecondaryCountsType(): Array<string | undefined> {
    const value = this.x00541220;
    if (value === undefined) {
      throw new Error('SecondaryCountsType is undefined');
    }
    return value;
  }

  // Frame Reference Time
  get FrameReferenceTime(): number | undefined {
    return this.x00541300;
  }

  get x00541300(): number | undefined {
    const value = this.dwResponse['00541300']?.Value;
    return convert(value?.[0], 0x00541300, 'number');
  }

  getFrameReferenceTime(): number {
    const value = this.x00541300;
    if (value === undefined) {
      throw new Error('FrameReferenceTime is undefined');
    }
    return value;
  }

  // Primary (Prompts) Counts Accumulated
  get PrimaryPromptsCountsAccumulated(): number | undefined {
    return this.x00541310;
  }

  get x00541310(): number | undefined {
    const value = this.dwResponse['00541310']?.Value;
    return convert(value?.[0], 0x00541310, 'number');
  }

  getPrimaryPromptsCountsAccumulated(): number {
    const value = this.x00541310;
    if (value === undefined) {
      throw new Error('PrimaryPromptsCountsAccumulated is undefined');
    }
    return value;
  }

  // Secondary Counts Accumulated
  get SecondaryCountsAccumulated(): Array<number | undefined> | undefined {
    return this.x00541311;
  }

  get x00541311(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00541311']?.Value;
    return convert(value, 0x00541311, 'Array<number | undefined>');
  }

  getSecondaryCountsAccumulated(): Array<number | undefined> {
    const value = this.x00541311;
    if (value === undefined) {
      throw new Error('SecondaryCountsAccumulated is undefined');
    }
    return value;
  }

  // Slice Sensitivity Factor
  get SliceSensitivityFactor(): number | undefined {
    return this.x00541320;
  }

  get x00541320(): number | undefined {
    const value = this.dwResponse['00541320']?.Value;
    return convert(value?.[0], 0x00541320, 'number');
  }

  getSliceSensitivityFactor(): number {
    const value = this.x00541320;
    if (value === undefined) {
      throw new Error('SliceSensitivityFactor is undefined');
    }
    return value;
  }

  // Decay Factor
  get DecayFactor(): number | undefined {
    return this.x00541321;
  }

  get x00541321(): number | undefined {
    const value = this.dwResponse['00541321']?.Value;
    return convert(value?.[0], 0x00541321, 'number');
  }

  getDecayFactor(): number {
    const value = this.x00541321;
    if (value === undefined) {
      throw new Error('DecayFactor is undefined');
    }
    return value;
  }

  // Dose Calibration Factor
  get DoseCalibrationFactor(): number | undefined {
    return this.x00541322;
  }

  get x00541322(): number | undefined {
    const value = this.dwResponse['00541322']?.Value;
    return convert(value?.[0], 0x00541322, 'number');
  }

  getDoseCalibrationFactor(): number {
    const value = this.x00541322;
    if (value === undefined) {
      throw new Error('DoseCalibrationFactor is undefined');
    }
    return value;
  }

  // Scatter Fraction Factor
  get ScatterFractionFactor(): number | undefined {
    return this.x00541323;
  }

  get x00541323(): number | undefined {
    const value = this.dwResponse['00541323']?.Value;
    return convert(value?.[0], 0x00541323, 'number');
  }

  getScatterFractionFactor(): number {
    const value = this.x00541323;
    if (value === undefined) {
      throw new Error('ScatterFractionFactor is undefined');
    }
    return value;
  }

  // Dead Time Factor
  get DeadTimeFactor(): number | undefined {
    return this.x00541324;
  }

  get x00541324(): number | undefined {
    const value = this.dwResponse['00541324']?.Value;
    return convert(value?.[0], 0x00541324, 'number');
  }

  getDeadTimeFactor(): number {
    const value = this.x00541324;
    if (value === undefined) {
      throw new Error('DeadTimeFactor is undefined');
    }
    return value;
  }

  // Image Index
  get ImageIndex(): number | undefined {
    return this.x00541330;
  }

  get x00541330(): number | undefined {
    const value = this.dwResponse['00541330']?.Value;
    return convert(value?.[0], 0x00541330, 'number');
  }

  getImageIndex(): number {
    const value = this.x00541330;
    if (value === undefined) {
      throw new Error('ImageIndex is undefined');
    }
    return value;
  }

  // Counts Included
  get CountsIncluded(): Array<string | undefined> | undefined {
    return this.x00541400;
  }

  get x00541400(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00541400']?.Value;
    return convert(value, 0x00541400, 'Array<string | undefined>');
  }

  getCountsIncluded(): Array<string | undefined> {
    const value = this.x00541400;
    if (value === undefined) {
      throw new Error('CountsIncluded is undefined');
    }
    return value;
  }

  // Dead Time Correction Flag
  get DeadTimeCorrectionFlag(): string | undefined {
    return this.x00541401;
  }

  get x00541401(): string | undefined {
    const value = this.dwResponse['00541401']?.Value;
    return convert(value?.[0], 0x00541401, 'string');
  }

  getDeadTimeCorrectionFlag(): string {
    const value = this.x00541401;
    if (value === undefined) {
      throw new Error('DeadTimeCorrectionFlag is undefined');
    }
    return value;
  }

  // Histogram Sequence
  get HistogramSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00603000;
  }

  get x00603000(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00603000']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getHistogramSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00603000;
    if (value === undefined) {
      throw new Error('HistogramSequence is undefined');
    }
    return value;
  }

  // Histogram Number of Bins
  get HistogramNumberOfBins(): number | undefined {
    return this.x00603002;
  }

  get x00603002(): number | undefined {
    const value = this.dwResponse['00603002']?.Value;
    return convert(value?.[0], 0x00603002, 'number');
  }

  getHistogramNumberOfBins(): number {
    const value = this.x00603002;
    if (value === undefined) {
      throw new Error('HistogramNumberOfBins is undefined');
    }
    return value;
  }

  // Histogram First Bin Value
  get HistogramFirstBinValue(): number | undefined {
    return this.x00603004;
  }

  get x00603004(): number | undefined {
    const value = this.dwResponse['00603004']?.Value;
    return convert(value?.[0], 0x00603004, 'number');
  }

  getHistogramFirstBinValue(): number {
    const value = this.x00603004;
    if (value === undefined) {
      throw new Error('HistogramFirstBinValue is undefined');
    }
    return value;
  }

  // Histogram Last Bin Value
  get HistogramLastBinValue(): number | undefined {
    return this.x00603006;
  }

  get x00603006(): number | undefined {
    const value = this.dwResponse['00603006']?.Value;
    return convert(value?.[0], 0x00603006, 'number');
  }

  getHistogramLastBinValue(): number {
    const value = this.x00603006;
    if (value === undefined) {
      throw new Error('HistogramLastBinValue is undefined');
    }
    return value;
  }

  // Histogram Bin Width
  get HistogramBinWidth(): number | undefined {
    return this.x00603008;
  }

  get x00603008(): number | undefined {
    const value = this.dwResponse['00603008']?.Value;
    return convert(value?.[0], 0x00603008, 'number');
  }

  getHistogramBinWidth(): number {
    const value = this.x00603008;
    if (value === undefined) {
      throw new Error('HistogramBinWidth is undefined');
    }
    return value;
  }

  // Histogram Explanation
  get HistogramExplanation(): string | undefined {
    return this.x00603010;
  }

  get x00603010(): string | undefined {
    const value = this.dwResponse['00603010']?.Value;
    return convert(value?.[0], 0x00603010, 'string');
  }

  getHistogramExplanation(): string {
    const value = this.x00603010;
    if (value === undefined) {
      throw new Error('HistogramExplanation is undefined');
    }
    return value;
  }

  // Histogram Data
  get HistogramData(): Array<number | undefined> | undefined {
    return this.x00603020;
  }

  get x00603020(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00603020']?.Value;
    return convert(value, 0x00603020, 'Array<number | undefined>');
  }

  getHistogramData(): Array<number | undefined> {
    const value = this.x00603020;
    if (value === undefined) {
      throw new Error('HistogramData is undefined');
    }
    return value;
  }

  // Segmentation Type
  get SegmentationType(): string | undefined {
    return this.x00620001;
  }

  get x00620001(): string | undefined {
    const value = this.dwResponse['00620001']?.Value;
    return convert(value?.[0], 0x00620001, 'string');
  }

  getSegmentationType(): string {
    const value = this.x00620001;
    if (value === undefined) {
      throw new Error('SegmentationType is undefined');
    }
    return value;
  }

  // Segment Sequence
  get SegmentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00620002;
  }

  get x00620002(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00620002']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSegmentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00620002;
    if (value === undefined) {
      throw new Error('SegmentSequence is undefined');
    }
    return value;
  }

  // Segmented Property Category Code Sequence
  get SegmentedPropertyCategoryCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00620003;
  }

  get x00620003(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00620003']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSegmentedPropertyCategoryCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00620003;
    if (value === undefined) {
      throw new Error('SegmentedPropertyCategoryCodeSequence is undefined');
    }
    return value;
  }

  // Segment Number
  get SegmentNumber(): number | undefined {
    return this.x00620004;
  }

  get x00620004(): number | undefined {
    const value = this.dwResponse['00620004']?.Value;
    return convert(value?.[0], 0x00620004, 'number');
  }

  getSegmentNumber(): number {
    const value = this.x00620004;
    if (value === undefined) {
      throw new Error('SegmentNumber is undefined');
    }
    return value;
  }

  // Segment Label
  get SegmentLabel(): string | undefined {
    return this.x00620005;
  }

  get x00620005(): string | undefined {
    const value = this.dwResponse['00620005']?.Value;
    return convert(value?.[0], 0x00620005, 'string');
  }

  getSegmentLabel(): string {
    const value = this.x00620005;
    if (value === undefined) {
      throw new Error('SegmentLabel is undefined');
    }
    return value;
  }

  // Segment Algorithm Type
  get SegmentAlgorithmType(): string | undefined {
    return this.x00620008;
  }

  get x00620008(): string | undefined {
    const value = this.dwResponse['00620008']?.Value;
    return convert(value?.[0], 0x00620008, 'string');
  }

  getSegmentAlgorithmType(): string {
    const value = this.x00620008;
    if (value === undefined) {
      throw new Error('SegmentAlgorithmType is undefined');
    }
    return value;
  }

  // Segment Algorithm Name
  get SegmentAlgorithmName(): string | undefined {
    return this.x00620009;
  }

  get x00620009(): string | undefined {
    const value = this.dwResponse['00620009']?.Value;
    return convert(value?.[0], 0x00620009, 'string');
  }

  getSegmentAlgorithmName(): string {
    const value = this.x00620009;
    if (value === undefined) {
      throw new Error('SegmentAlgorithmName is undefined');
    }
    return value;
  }

  // Segment Identification Sequence
  get SegmentIdentificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0062000a;
  }

  get x0062000a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0062000A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSegmentIdentificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0062000a;
    if (value === undefined) {
      throw new Error('SegmentIdentificationSequence is undefined');
    }
    return value;
  }

  // Referenced Segment Number
  get ReferencedSegmentNumber(): Array<number | undefined> | undefined {
    return this.x0062000b;
  }

  get x0062000b(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0062000B']?.Value;
    return convert(value, 0x0062000b, 'Array<number | undefined>');
  }

  getReferencedSegmentNumber(): Array<number | undefined> {
    const value = this.x0062000b;
    if (value === undefined) {
      throw new Error('ReferencedSegmentNumber is undefined');
    }
    return value;
  }

  // Recommended Display Grayscale Value
  get RecommendedDisplayGrayscaleValue(): number | undefined {
    return this.x0062000c;
  }

  get x0062000c(): number | undefined {
    const value = this.dwResponse['0062000C']?.Value;
    return convert(value?.[0], 0x0062000c, 'number');
  }

  getRecommendedDisplayGrayscaleValue(): number {
    const value = this.x0062000c;
    if (value === undefined) {
      throw new Error('RecommendedDisplayGrayscaleValue is undefined');
    }
    return value;
  }

  // Recommended Display CIELab Value
  get RecommendedDisplayCIELabValue(): Array<number | undefined> | undefined {
    return this.x0062000d;
  }

  get x0062000d(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0062000D']?.Value;
    return convert(value, 0x0062000d, 'Array<number | undefined>');
  }

  getRecommendedDisplayCIELabValue(): Array<number | undefined> {
    const value = this.x0062000d;
    if (value === undefined) {
      throw new Error('RecommendedDisplayCIELabValue is undefined');
    }
    return value;
  }

  // Maximum Fractional Value
  get MaximumFractionalValue(): number | undefined {
    return this.x0062000e;
  }

  get x0062000e(): number | undefined {
    const value = this.dwResponse['0062000E']?.Value;
    return convert(value?.[0], 0x0062000e, 'number');
  }

  getMaximumFractionalValue(): number {
    const value = this.x0062000e;
    if (value === undefined) {
      throw new Error('MaximumFractionalValue is undefined');
    }
    return value;
  }

  // Segmented Property Type Code Sequence
  get SegmentedPropertyTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0062000f;
  }

  get x0062000f(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0062000F']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSegmentedPropertyTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0062000f;
    if (value === undefined) {
      throw new Error('SegmentedPropertyTypeCodeSequence is undefined');
    }
    return value;
  }

  // Segmentation Fractional Type
  get SegmentationFractionalType(): string | undefined {
    return this.x00620010;
  }

  get x00620010(): string | undefined {
    const value = this.dwResponse['00620010']?.Value;
    return convert(value?.[0], 0x00620010, 'string');
  }

  getSegmentationFractionalType(): string {
    const value = this.x00620010;
    if (value === undefined) {
      throw new Error('SegmentationFractionalType is undefined');
    }
    return value;
  }

  // Segmented Property Type Modifier Code Sequence
  get SegmentedPropertyTypeModifierCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00620011;
  }

  get x00620011(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00620011']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSegmentedPropertyTypeModifierCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00620011;
    if (value === undefined) {
      throw new Error('SegmentedPropertyTypeModifierCodeSequence is undefined');
    }
    return value;
  }

  // Used Segments Sequence
  get UsedSegmentsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00620012;
  }

  get x00620012(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00620012']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getUsedSegmentsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00620012;
    if (value === undefined) {
      throw new Error('UsedSegmentsSequence is undefined');
    }
    return value;
  }

  // Deformable Registration Sequence
  get DeformableRegistrationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00640002;
  }

  get x00640002(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00640002']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDeformableRegistrationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00640002;
    if (value === undefined) {
      throw new Error('DeformableRegistrationSequence is undefined');
    }
    return value;
  }

  // Source Frame of Reference UID
  get SourceFrameOfReferenceUID(): string | undefined {
    return this.x00640003;
  }

  get x00640003(): string | undefined {
    const value = this.dwResponse['00640003']?.Value;
    return convert(value?.[0], 0x00640003, 'string');
  }

  getSourceFrameOfReferenceUID(): string {
    const value = this.x00640003;
    if (value === undefined) {
      throw new Error('SourceFrameOfReferenceUID is undefined');
    }
    return value;
  }

  // Deformable Registration Grid Sequence
  get DeformableRegistrationGridSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00640005;
  }

  get x00640005(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00640005']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDeformableRegistrationGridSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00640005;
    if (value === undefined) {
      throw new Error('DeformableRegistrationGridSequence is undefined');
    }
    return value;
  }

  // Grid Dimensions
  get GridDimensions(): Array<number | undefined> | undefined {
    return this.x00640007;
  }

  get x00640007(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00640007']?.Value;
    return convert(value, 0x00640007, 'Array<number | undefined>');
  }

  getGridDimensions(): Array<number | undefined> {
    const value = this.x00640007;
    if (value === undefined) {
      throw new Error('GridDimensions is undefined');
    }
    return value;
  }

  // Grid Resolution
  get GridResolution(): Array<number | undefined> | undefined {
    return this.x00640008;
  }

  get x00640008(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00640008']?.Value;
    return convert(value, 0x00640008, 'Array<number | undefined>');
  }

  getGridResolution(): Array<number | undefined> {
    const value = this.x00640008;
    if (value === undefined) {
      throw new Error('GridResolution is undefined');
    }
    return value;
  }

  // Pre Deformation Matrix Registration Sequence
  get PreDeformationMatrixRegistrationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0064000f;
  }

  get x0064000f(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0064000F']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPreDeformationMatrixRegistrationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0064000f;
    if (value === undefined) {
      throw new Error('PreDeformationMatrixRegistrationSequence is undefined');
    }
    return value;
  }

  // Post Deformation Matrix Registration Sequence
  get PostDeformationMatrixRegistrationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00640010;
  }

  get x00640010(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00640010']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPostDeformationMatrixRegistrationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00640010;
    if (value === undefined) {
      throw new Error('PostDeformationMatrixRegistrationSequence is undefined');
    }
    return value;
  }

  // Number of Surfaces
  get NumberOfSurfaces(): number | undefined {
    return this.x00660001;
  }

  get x00660001(): number | undefined {
    const value = this.dwResponse['00660001']?.Value;
    return convert(value?.[0], 0x00660001, 'number');
  }

  getNumberOfSurfaces(): number {
    const value = this.x00660001;
    if (value === undefined) {
      throw new Error('NumberOfSurfaces is undefined');
    }
    return value;
  }

  // Surface Sequence
  get SurfaceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00660002;
  }

  get x00660002(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00660002']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSurfaceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00660002;
    if (value === undefined) {
      throw new Error('SurfaceSequence is undefined');
    }
    return value;
  }

  // Surface Number
  get SurfaceNumber(): number | undefined {
    return this.x00660003;
  }

  get x00660003(): number | undefined {
    const value = this.dwResponse['00660003']?.Value;
    return convert(value?.[0], 0x00660003, 'number');
  }

  getSurfaceNumber(): number {
    const value = this.x00660003;
    if (value === undefined) {
      throw new Error('SurfaceNumber is undefined');
    }
    return value;
  }

  // Surface Processing
  get SurfaceProcessing(): string | undefined {
    return this.x00660009;
  }

  get x00660009(): string | undefined {
    const value = this.dwResponse['00660009']?.Value;
    return convert(value?.[0], 0x00660009, 'string');
  }

  getSurfaceProcessing(): string {
    const value = this.x00660009;
    if (value === undefined) {
      throw new Error('SurfaceProcessing is undefined');
    }
    return value;
  }

  // Surface Processing Ratio
  get SurfaceProcessingRatio(): number | undefined {
    return this.x0066000a;
  }

  get x0066000a(): number | undefined {
    const value = this.dwResponse['0066000A']?.Value;
    return convert(value?.[0], 0x0066000a, 'number');
  }

  getSurfaceProcessingRatio(): number {
    const value = this.x0066000a;
    if (value === undefined) {
      throw new Error('SurfaceProcessingRatio is undefined');
    }
    return value;
  }

  // Surface Processing Description
  get SurfaceProcessingDescription(): string | undefined {
    return this.x0066000b;
  }

  get x0066000b(): string | undefined {
    const value = this.dwResponse['0066000B']?.Value;
    return convert(value?.[0], 0x0066000b, 'string');
  }

  getSurfaceProcessingDescription(): string {
    const value = this.x0066000b;
    if (value === undefined) {
      throw new Error('SurfaceProcessingDescription is undefined');
    }
    return value;
  }

  // Recommended Presentation Opacity
  get RecommendedPresentationOpacity(): number | undefined {
    return this.x0066000c;
  }

  get x0066000c(): number | undefined {
    const value = this.dwResponse['0066000C']?.Value;
    return convert(value?.[0], 0x0066000c, 'number');
  }

  getRecommendedPresentationOpacity(): number {
    const value = this.x0066000c;
    if (value === undefined) {
      throw new Error('RecommendedPresentationOpacity is undefined');
    }
    return value;
  }

  // Recommended Presentation Type
  get RecommendedPresentationType(): string | undefined {
    return this.x0066000d;
  }

  get x0066000d(): string | undefined {
    const value = this.dwResponse['0066000D']?.Value;
    return convert(value?.[0], 0x0066000d, 'string');
  }

  getRecommendedPresentationType(): string {
    const value = this.x0066000d;
    if (value === undefined) {
      throw new Error('RecommendedPresentationType is undefined');
    }
    return value;
  }

  // Finite Volume
  get FiniteVolume(): string | undefined {
    return this.x0066000e;
  }

  get x0066000e(): string | undefined {
    const value = this.dwResponse['0066000E']?.Value;
    return convert(value?.[0], 0x0066000e, 'string');
  }

  getFiniteVolume(): string {
    const value = this.x0066000e;
    if (value === undefined) {
      throw new Error('FiniteVolume is undefined');
    }
    return value;
  }

  // Manifold
  get Manifold(): string | undefined {
    return this.x00660010;
  }

  get x00660010(): string | undefined {
    const value = this.dwResponse['00660010']?.Value;
    return convert(value?.[0], 0x00660010, 'string');
  }

  getManifold(): string {
    const value = this.x00660010;
    if (value === undefined) {
      throw new Error('Manifold is undefined');
    }
    return value;
  }

  // Surface Points Sequence
  get SurfacePointsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00660011;
  }

  get x00660011(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00660011']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSurfacePointsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00660011;
    if (value === undefined) {
      throw new Error('SurfacePointsSequence is undefined');
    }
    return value;
  }

  // Surface Points Normals Sequence
  get SurfacePointsNormalsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00660012;
  }

  get x00660012(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00660012']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSurfacePointsNormalsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00660012;
    if (value === undefined) {
      throw new Error('SurfacePointsNormalsSequence is undefined');
    }
    return value;
  }

  // Surface Mesh Primitives Sequence
  get SurfaceMeshPrimitivesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00660013;
  }

  get x00660013(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00660013']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSurfaceMeshPrimitivesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00660013;
    if (value === undefined) {
      throw new Error('SurfaceMeshPrimitivesSequence is undefined');
    }
    return value;
  }

  // Number of Surface Points
  get NumberOfSurfacePoints(): number | undefined {
    return this.x00660015;
  }

  get x00660015(): number | undefined {
    const value = this.dwResponse['00660015']?.Value;
    return convert(value?.[0], 0x00660015, 'number');
  }

  getNumberOfSurfacePoints(): number {
    const value = this.x00660015;
    if (value === undefined) {
      throw new Error('NumberOfSurfacePoints is undefined');
    }
    return value;
  }

  // Point Position Accuracy
  get PointPositionAccuracy(): Array<number | undefined> | undefined {
    return this.x00660017;
  }

  get x00660017(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00660017']?.Value;
    return convert(value, 0x00660017, 'Array<number | undefined>');
  }

  getPointPositionAccuracy(): Array<number | undefined> {
    const value = this.x00660017;
    if (value === undefined) {
      throw new Error('PointPositionAccuracy is undefined');
    }
    return value;
  }

  // Mean Point Distance
  get MeanPointDistance(): number | undefined {
    return this.x00660018;
  }

  get x00660018(): number | undefined {
    const value = this.dwResponse['00660018']?.Value;
    return convert(value?.[0], 0x00660018, 'number');
  }

  getMeanPointDistance(): number {
    const value = this.x00660018;
    if (value === undefined) {
      throw new Error('MeanPointDistance is undefined');
    }
    return value;
  }

  // Maximum Point Distance
  get MaximumPointDistance(): number | undefined {
    return this.x00660019;
  }

  get x00660019(): number | undefined {
    const value = this.dwResponse['00660019']?.Value;
    return convert(value?.[0], 0x00660019, 'number');
  }

  getMaximumPointDistance(): number {
    const value = this.x00660019;
    if (value === undefined) {
      throw new Error('MaximumPointDistance is undefined');
    }
    return value;
  }

  // Points Bounding Box Coordinates
  get PointsBoundingBoxCoordinates(): Array<number | undefined> | undefined {
    return this.x0066001a;
  }

  get x0066001a(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0066001A']?.Value;
    return convert(value, 0x0066001a, 'Array<number | undefined>');
  }

  getPointsBoundingBoxCoordinates(): Array<number | undefined> {
    const value = this.x0066001a;
    if (value === undefined) {
      throw new Error('PointsBoundingBoxCoordinates is undefined');
    }
    return value;
  }

  // Axis of Rotation
  get AxisOfRotation(): Array<number | undefined> | undefined {
    return this.x0066001b;
  }

  get x0066001b(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0066001B']?.Value;
    return convert(value, 0x0066001b, 'Array<number | undefined>');
  }

  getAxisOfRotation(): Array<number | undefined> {
    const value = this.x0066001b;
    if (value === undefined) {
      throw new Error('AxisOfRotation is undefined');
    }
    return value;
  }

  // Center of Rotation
  get CenterOfRotation(): Array<number | undefined> | undefined {
    return this.x0066001c;
  }

  get x0066001c(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0066001C']?.Value;
    return convert(value, 0x0066001c, 'Array<number | undefined>');
  }

  getCenterOfRotation(): Array<number | undefined> {
    const value = this.x0066001c;
    if (value === undefined) {
      throw new Error('CenterOfRotation is undefined');
    }
    return value;
  }

  // Number of Vectors
  get NumberOfVectors(): number | undefined {
    return this.x0066001e;
  }

  get x0066001e(): number | undefined {
    const value = this.dwResponse['0066001E']?.Value;
    return convert(value?.[0], 0x0066001e, 'number');
  }

  getNumberOfVectors(): number {
    const value = this.x0066001e;
    if (value === undefined) {
      throw new Error('NumberOfVectors is undefined');
    }
    return value;
  }

  // Vector Dimensionality
  get VectorDimensionality(): number | undefined {
    return this.x0066001f;
  }

  get x0066001f(): number | undefined {
    const value = this.dwResponse['0066001F']?.Value;
    return convert(value?.[0], 0x0066001f, 'number');
  }

  getVectorDimensionality(): number {
    const value = this.x0066001f;
    if (value === undefined) {
      throw new Error('VectorDimensionality is undefined');
    }
    return value;
  }

  // Vector Accuracy
  get VectorAccuracy(): Array<number | undefined> | undefined {
    return this.x00660020;
  }

  get x00660020(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00660020']?.Value;
    return convert(value, 0x00660020, 'Array<number | undefined>');
  }

  getVectorAccuracy(): Array<number | undefined> {
    const value = this.x00660020;
    if (value === undefined) {
      throw new Error('VectorAccuracy is undefined');
    }
    return value;
  }

  // Triangle Strip Sequence
  get TriangleStripSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00660026;
  }

  get x00660026(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00660026']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTriangleStripSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00660026;
    if (value === undefined) {
      throw new Error('TriangleStripSequence is undefined');
    }
    return value;
  }

  // Triangle Fan Sequence
  get TriangleFanSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00660027;
  }

  get x00660027(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00660027']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTriangleFanSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00660027;
    if (value === undefined) {
      throw new Error('TriangleFanSequence is undefined');
    }
    return value;
  }

  // Line Sequence
  get LineSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00660028;
  }

  get x00660028(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00660028']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getLineSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00660028;
    if (value === undefined) {
      throw new Error('LineSequence is undefined');
    }
    return value;
  }

  // Surface Count
  get SurfaceCount(): number | undefined {
    return this.x0066002a;
  }

  get x0066002a(): number | undefined {
    const value = this.dwResponse['0066002A']?.Value;
    return convert(value?.[0], 0x0066002a, 'number');
  }

  getSurfaceCount(): number {
    const value = this.x0066002a;
    if (value === undefined) {
      throw new Error('SurfaceCount is undefined');
    }
    return value;
  }

  // Referenced Surface Sequence
  get ReferencedSurfaceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0066002b;
  }

  get x0066002b(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0066002B']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedSurfaceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0066002b;
    if (value === undefined) {
      throw new Error('ReferencedSurfaceSequence is undefined');
    }
    return value;
  }

  // Referenced Surface Number
  get ReferencedSurfaceNumber(): number | undefined {
    return this.x0066002c;
  }

  get x0066002c(): number | undefined {
    const value = this.dwResponse['0066002C']?.Value;
    return convert(value?.[0], 0x0066002c, 'number');
  }

  getReferencedSurfaceNumber(): number {
    const value = this.x0066002c;
    if (value === undefined) {
      throw new Error('ReferencedSurfaceNumber is undefined');
    }
    return value;
  }

  // Segment Surface Generation Algorithm Identification Sequence
  get SegmentSurfaceGenerationAlgorithmIdentificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0066002d;
  }

  get x0066002d(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0066002D']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSegmentSurfaceGenerationAlgorithmIdentificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0066002d;
    if (value === undefined) {
      throw new Error('SegmentSurfaceGenerationAlgorithmIdentificationSequence is undefined');
    }
    return value;
  }

  // Segment Surface Source Instance Sequence
  get SegmentSurfaceSourceInstanceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0066002e;
  }

  get x0066002e(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0066002E']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSegmentSurfaceSourceInstanceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0066002e;
    if (value === undefined) {
      throw new Error('SegmentSurfaceSourceInstanceSequence is undefined');
    }
    return value;
  }

  // Algorithm Family Code Sequence
  get AlgorithmFamilyCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0066002f;
  }

  get x0066002f(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0066002F']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAlgorithmFamilyCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0066002f;
    if (value === undefined) {
      throw new Error('AlgorithmFamilyCodeSequence is undefined');
    }
    return value;
  }

  // Algorithm Name Code Sequence
  get AlgorithmNameCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00660030;
  }

  get x00660030(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00660030']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAlgorithmNameCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00660030;
    if (value === undefined) {
      throw new Error('AlgorithmNameCodeSequence is undefined');
    }
    return value;
  }

  // Algorithm Version
  get AlgorithmVersion(): string | undefined {
    return this.x00660031;
  }

  get x00660031(): string | undefined {
    const value = this.dwResponse['00660031']?.Value;
    return convert(value?.[0], 0x00660031, 'string');
  }

  getAlgorithmVersion(): string {
    const value = this.x00660031;
    if (value === undefined) {
      throw new Error('AlgorithmVersion is undefined');
    }
    return value;
  }

  // Facet Sequence
  get FacetSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00660034;
  }

  get x00660034(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00660034']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFacetSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00660034;
    if (value === undefined) {
      throw new Error('FacetSequence is undefined');
    }
    return value;
  }

  // Surface Processing Algorithm Identification Sequence
  get SurfaceProcessingAlgorithmIdentificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00660035;
  }

  get x00660035(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00660035']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSurfaceProcessingAlgorithmIdentificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00660035;
    if (value === undefined) {
      throw new Error('SurfaceProcessingAlgorithmIdentificationSequence is undefined');
    }
    return value;
  }

  // Algorithm Name
  get AlgorithmName(): string | undefined {
    return this.x00660036;
  }

  get x00660036(): string | undefined {
    const value = this.dwResponse['00660036']?.Value;
    return convert(value?.[0], 0x00660036, 'string');
  }

  getAlgorithmName(): string {
    const value = this.x00660036;
    if (value === undefined) {
      throw new Error('AlgorithmName is undefined');
    }
    return value;
  }

  // Recommended Point Radius
  get RecommendedPointRadius(): number | undefined {
    return this.x00660037;
  }

  get x00660037(): number | undefined {
    const value = this.dwResponse['00660037']?.Value;
    return convert(value?.[0], 0x00660037, 'number');
  }

  getRecommendedPointRadius(): number {
    const value = this.x00660037;
    if (value === undefined) {
      throw new Error('RecommendedPointRadius is undefined');
    }
    return value;
  }

  // Recommended Line Thickness
  get RecommendedLineThickness(): number | undefined {
    return this.x00660038;
  }

  get x00660038(): number | undefined {
    const value = this.dwResponse['00660038']?.Value;
    return convert(value?.[0], 0x00660038, 'number');
  }

  getRecommendedLineThickness(): number {
    const value = this.x00660038;
    if (value === undefined) {
      throw new Error('RecommendedLineThickness is undefined');
    }
    return value;
  }

  // Implant Size
  get ImplantSize(): string | undefined {
    return this.x00686210;
  }

  get x00686210(): string | undefined {
    const value = this.dwResponse['00686210']?.Value;
    return convert(value?.[0], 0x00686210, 'string');
  }

  getImplantSize(): string {
    const value = this.x00686210;
    if (value === undefined) {
      throw new Error('ImplantSize is undefined');
    }
    return value;
  }

  // Implant Template Version
  get ImplantTemplateVersion(): string | undefined {
    return this.x00686221;
  }

  get x00686221(): string | undefined {
    const value = this.dwResponse['00686221']?.Value;
    return convert(value?.[0], 0x00686221, 'string');
  }

  getImplantTemplateVersion(): string {
    const value = this.x00686221;
    if (value === undefined) {
      throw new Error('ImplantTemplateVersion is undefined');
    }
    return value;
  }

  // Replaced Implant Template Sequence
  get ReplacedImplantTemplateSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00686222;
  }

  get x00686222(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00686222']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReplacedImplantTemplateSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00686222;
    if (value === undefined) {
      throw new Error('ReplacedImplantTemplateSequence is undefined');
    }
    return value;
  }

  // Implant Type
  get ImplantType(): string | undefined {
    return this.x00686223;
  }

  get x00686223(): string | undefined {
    const value = this.dwResponse['00686223']?.Value;
    return convert(value?.[0], 0x00686223, 'string');
  }

  getImplantType(): string {
    const value = this.x00686223;
    if (value === undefined) {
      throw new Error('ImplantType is undefined');
    }
    return value;
  }

  // Derivation Implant Template Sequence
  get DerivationImplantTemplateSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00686224;
  }

  get x00686224(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00686224']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDerivationImplantTemplateSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00686224;
    if (value === undefined) {
      throw new Error('DerivationImplantTemplateSequence is undefined');
    }
    return value;
  }

  // Original Implant Template Sequence
  get OriginalImplantTemplateSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00686225;
  }

  get x00686225(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00686225']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOriginalImplantTemplateSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00686225;
    if (value === undefined) {
      throw new Error('OriginalImplantTemplateSequence is undefined');
    }
    return value;
  }

  // Effective DateTime
  get EffectiveDateTime(): string | undefined {
    return this.x00686226;
  }

  get x00686226(): string | undefined {
    const value = this.dwResponse['00686226']?.Value;
    return convert(value?.[0], 0x00686226, 'string');
  }

  getEffectiveDateTime(): string {
    const value = this.x00686226;
    if (value === undefined) {
      throw new Error('EffectiveDateTime is undefined');
    }
    return value;
  }

  // Implant Target Anatomy Sequence
  get ImplantTargetAnatomySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00686230;
  }

  get x00686230(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00686230']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getImplantTargetAnatomySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00686230;
    if (value === undefined) {
      throw new Error('ImplantTargetAnatomySequence is undefined');
    }
    return value;
  }

  // Information From Manufacturer Sequence
  get InformationFromManufacturerSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00686260;
  }

  get x00686260(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00686260']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getInformationFromManufacturerSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00686260;
    if (value === undefined) {
      throw new Error('InformationFromManufacturerSequence is undefined');
    }
    return value;
  }

  // Notification From Manufacturer Sequence
  get NotificationFromManufacturerSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00686265;
  }

  get x00686265(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00686265']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getNotificationFromManufacturerSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00686265;
    if (value === undefined) {
      throw new Error('NotificationFromManufacturerSequence is undefined');
    }
    return value;
  }

  // Information Issue DateTime
  get InformationIssueDateTime(): string | undefined {
    return this.x00686270;
  }

  get x00686270(): string | undefined {
    const value = this.dwResponse['00686270']?.Value;
    return convert(value?.[0], 0x00686270, 'string');
  }

  getInformationIssueDateTime(): string {
    const value = this.x00686270;
    if (value === undefined) {
      throw new Error('InformationIssueDateTime is undefined');
    }
    return value;
  }

  // Implant Regulatory Disapproval Code Sequence
  get ImplantRegulatoryDisapprovalCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x006862a0;
  }

  get x006862a0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['006862A0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getImplantRegulatoryDisapprovalCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x006862a0;
    if (value === undefined) {
      throw new Error('ImplantRegulatoryDisapprovalCodeSequence is undefined');
    }
    return value;
  }

  // Overall Template Spatial Tolerance
  get OverallTemplateSpatialTolerance(): number | undefined {
    return this.x006862a5;
  }

  get x006862a5(): number | undefined {
    const value = this.dwResponse['006862A5']?.Value;
    return convert(value?.[0], 0x006862a5, 'number');
  }

  getOverallTemplateSpatialTolerance(): number {
    const value = this.x006862a5;
    if (value === undefined) {
      throw new Error('OverallTemplateSpatialTolerance is undefined');
    }
    return value;
  }

  // HPGL Document Sequence
  get HPGLDocumentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x006862c0;
  }

  get x006862c0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['006862C0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getHPGLDocumentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x006862c0;
    if (value === undefined) {
      throw new Error('HPGLDocumentSequence is undefined');
    }
    return value;
  }

  // HPGL Document ID
  get HPGLDocumentID(): number | undefined {
    return this.x006862d0;
  }

  get x006862d0(): number | undefined {
    const value = this.dwResponse['006862D0']?.Value;
    return convert(value?.[0], 0x006862d0, 'number');
  }

  getHPGLDocumentID(): number {
    const value = this.x006862d0;
    if (value === undefined) {
      throw new Error('HPGLDocumentID is undefined');
    }
    return value;
  }

  // HPGL Document Label
  get HPGLDocumentLabel(): string | undefined {
    return this.x006862d5;
  }

  get x006862d5(): string | undefined {
    const value = this.dwResponse['006862D5']?.Value;
    return convert(value?.[0], 0x006862d5, 'string');
  }

  getHPGLDocumentLabel(): string {
    const value = this.x006862d5;
    if (value === undefined) {
      throw new Error('HPGLDocumentLabel is undefined');
    }
    return value;
  }

  // View Orientation Code Sequence
  get ViewOrientationCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x006862e0;
  }

  get x006862e0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['006862E0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getViewOrientationCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x006862e0;
    if (value === undefined) {
      throw new Error('ViewOrientationCodeSequence is undefined');
    }
    return value;
  }

  // View Orientation Modifier
  get ViewOrientationModifier(): Array<number | undefined> | undefined {
    return this.x006862f0;
  }

  get x006862f0(): Array<number | undefined> | undefined {
    const value = this.dwResponse['006862F0']?.Value;
    return convert(value, 0x006862f0, 'Array<number | undefined>');
  }

  getViewOrientationModifier(): Array<number | undefined> {
    const value = this.x006862f0;
    if (value === undefined) {
      throw new Error('ViewOrientationModifier is undefined');
    }
    return value;
  }

  // HPGL Document Scaling
  get HPGLDocumentScaling(): number | undefined {
    return this.x006862f2;
  }

  get x006862f2(): number | undefined {
    const value = this.dwResponse['006862F2']?.Value;
    return convert(value?.[0], 0x006862f2, 'number');
  }

  getHPGLDocumentScaling(): number {
    const value = this.x006862f2;
    if (value === undefined) {
      throw new Error('HPGLDocumentScaling is undefined');
    }
    return value;
  }

  // HPGL Contour Pen Number
  get HPGLContourPenNumber(): number | undefined {
    return this.x00686310;
  }

  get x00686310(): number | undefined {
    const value = this.dwResponse['00686310']?.Value;
    return convert(value?.[0], 0x00686310, 'number');
  }

  getHPGLContourPenNumber(): number {
    const value = this.x00686310;
    if (value === undefined) {
      throw new Error('HPGLContourPenNumber is undefined');
    }
    return value;
  }

  // HPGL Pen Sequence
  get HPGLPenSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00686320;
  }

  get x00686320(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00686320']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getHPGLPenSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00686320;
    if (value === undefined) {
      throw new Error('HPGLPenSequence is undefined');
    }
    return value;
  }

  // HPGL Pen Number
  get HPGLPenNumber(): number | undefined {
    return this.x00686330;
  }

  get x00686330(): number | undefined {
    const value = this.dwResponse['00686330']?.Value;
    return convert(value?.[0], 0x00686330, 'number');
  }

  getHPGLPenNumber(): number {
    const value = this.x00686330;
    if (value === undefined) {
      throw new Error('HPGLPenNumber is undefined');
    }
    return value;
  }

  // HPGL Pen Label
  get HPGLPenLabel(): string | undefined {
    return this.x00686340;
  }

  get x00686340(): string | undefined {
    const value = this.dwResponse['00686340']?.Value;
    return convert(value?.[0], 0x00686340, 'string');
  }

  getHPGLPenLabel(): string {
    const value = this.x00686340;
    if (value === undefined) {
      throw new Error('HPGLPenLabel is undefined');
    }
    return value;
  }

  // Recommended Rotation Point
  get RecommendedRotationPoint(): Array<number | undefined> | undefined {
    return this.x00686346;
  }

  get x00686346(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00686346']?.Value;
    return convert(value, 0x00686346, 'Array<number | undefined>');
  }

  getRecommendedRotationPoint(): Array<number | undefined> {
    const value = this.x00686346;
    if (value === undefined) {
      throw new Error('RecommendedRotationPoint is undefined');
    }
    return value;
  }

  // Bounding Rectangle
  get BoundingRectangle(): Array<number | undefined> | undefined {
    return this.x00686347;
  }

  get x00686347(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00686347']?.Value;
    return convert(value, 0x00686347, 'Array<number | undefined>');
  }

  getBoundingRectangle(): Array<number | undefined> {
    const value = this.x00686347;
    if (value === undefined) {
      throw new Error('BoundingRectangle is undefined');
    }
    return value;
  }

  // Implant Template 3D Model Surface Number
  get ImplantTemplate3DModelSurfaceNumber(): Array<number | undefined> | undefined {
    return this.x00686350;
  }

  get x00686350(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00686350']?.Value;
    return convert(value, 0x00686350, 'Array<number | undefined>');
  }

  getImplantTemplate3DModelSurfaceNumber(): Array<number | undefined> {
    const value = this.x00686350;
    if (value === undefined) {
      throw new Error('ImplantTemplate3DModelSurfaceNumber is undefined');
    }
    return value;
  }

  // Surface Model Description Sequence
  get SurfaceModelDescriptionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00686360;
  }

  get x00686360(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00686360']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSurfaceModelDescriptionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00686360;
    if (value === undefined) {
      throw new Error('SurfaceModelDescriptionSequence is undefined');
    }
    return value;
  }

  // Surface Model Label
  get SurfaceModelLabel(): string | undefined {
    return this.x00686380;
  }

  get x00686380(): string | undefined {
    const value = this.dwResponse['00686380']?.Value;
    return convert(value?.[0], 0x00686380, 'string');
  }

  getSurfaceModelLabel(): string {
    const value = this.x00686380;
    if (value === undefined) {
      throw new Error('SurfaceModelLabel is undefined');
    }
    return value;
  }

  // Surface Model Scaling Factor
  get SurfaceModelScalingFactor(): number | undefined {
    return this.x00686390;
  }

  get x00686390(): number | undefined {
    const value = this.dwResponse['00686390']?.Value;
    return convert(value?.[0], 0x00686390, 'number');
  }

  getSurfaceModelScalingFactor(): number {
    const value = this.x00686390;
    if (value === undefined) {
      throw new Error('SurfaceModelScalingFactor is undefined');
    }
    return value;
  }

  // Materials Code Sequence
  get MaterialsCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x006863a0;
  }

  get x006863a0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['006863A0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMaterialsCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x006863a0;
    if (value === undefined) {
      throw new Error('MaterialsCodeSequence is undefined');
    }
    return value;
  }

  // Coating Materials Code Sequence
  get CoatingMaterialsCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x006863a4;
  }

  get x006863a4(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['006863A4']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCoatingMaterialsCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x006863a4;
    if (value === undefined) {
      throw new Error('CoatingMaterialsCodeSequence is undefined');
    }
    return value;
  }

  // Implant Type Code Sequence
  get ImplantTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x006863a8;
  }

  get x006863a8(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['006863A8']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getImplantTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x006863a8;
    if (value === undefined) {
      throw new Error('ImplantTypeCodeSequence is undefined');
    }
    return value;
  }

  // Fixation Method Code Sequence
  get FixationMethodCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x006863ac;
  }

  get x006863ac(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['006863AC']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFixationMethodCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x006863ac;
    if (value === undefined) {
      throw new Error('FixationMethodCodeSequence is undefined');
    }
    return value;
  }

  // Mating Feature Sets Sequence
  get MatingFeatureSetsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x006863b0;
  }

  get x006863b0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['006863B0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMatingFeatureSetsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x006863b0;
    if (value === undefined) {
      throw new Error('MatingFeatureSetsSequence is undefined');
    }
    return value;
  }

  // Mating Feature Set ID
  get MatingFeatureSetID(): number | undefined {
    return this.x006863c0;
  }

  get x006863c0(): number | undefined {
    const value = this.dwResponse['006863C0']?.Value;
    return convert(value?.[0], 0x006863c0, 'number');
  }

  getMatingFeatureSetID(): number {
    const value = this.x006863c0;
    if (value === undefined) {
      throw new Error('MatingFeatureSetID is undefined');
    }
    return value;
  }

  // Mating Feature Set Label
  get MatingFeatureSetLabel(): string | undefined {
    return this.x006863d0;
  }

  get x006863d0(): string | undefined {
    const value = this.dwResponse['006863D0']?.Value;
    return convert(value?.[0], 0x006863d0, 'string');
  }

  getMatingFeatureSetLabel(): string {
    const value = this.x006863d0;
    if (value === undefined) {
      throw new Error('MatingFeatureSetLabel is undefined');
    }
    return value;
  }

  // Mating Feature Sequence
  get MatingFeatureSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x006863e0;
  }

  get x006863e0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['006863E0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMatingFeatureSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x006863e0;
    if (value === undefined) {
      throw new Error('MatingFeatureSequence is undefined');
    }
    return value;
  }

  // Mating Feature ID
  get MatingFeatureID(): number | undefined {
    return this.x006863f0;
  }

  get x006863f0(): number | undefined {
    const value = this.dwResponse['006863F0']?.Value;
    return convert(value?.[0], 0x006863f0, 'number');
  }

  getMatingFeatureID(): number {
    const value = this.x006863f0;
    if (value === undefined) {
      throw new Error('MatingFeatureID is undefined');
    }
    return value;
  }

  // Mating Feature Degree of Freedom Sequence
  get MatingFeatureDegreeOfFreedomSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00686400;
  }

  get x00686400(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00686400']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMatingFeatureDegreeOfFreedomSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00686400;
    if (value === undefined) {
      throw new Error('MatingFeatureDegreeOfFreedomSequence is undefined');
    }
    return value;
  }

  // Degree of Freedom ID
  get DegreeOfFreedomID(): number | undefined {
    return this.x00686410;
  }

  get x00686410(): number | undefined {
    const value = this.dwResponse['00686410']?.Value;
    return convert(value?.[0], 0x00686410, 'number');
  }

  getDegreeOfFreedomID(): number {
    const value = this.x00686410;
    if (value === undefined) {
      throw new Error('DegreeOfFreedomID is undefined');
    }
    return value;
  }

  // Degree of Freedom Type
  get DegreeOfFreedomType(): string | undefined {
    return this.x00686420;
  }

  get x00686420(): string | undefined {
    const value = this.dwResponse['00686420']?.Value;
    return convert(value?.[0], 0x00686420, 'string');
  }

  getDegreeOfFreedomType(): string {
    const value = this.x00686420;
    if (value === undefined) {
      throw new Error('DegreeOfFreedomType is undefined');
    }
    return value;
  }

  // 2D Mating Feature Coordinates Sequence
  get TwoDMatingFeatureCoordinatesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00686430;
  }

  get x00686430(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00686430']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTwoDMatingFeatureCoordinatesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00686430;
    if (value === undefined) {
      throw new Error('TwoDMatingFeatureCoordinatesSequence is undefined');
    }
    return value;
  }

  // Referenced HPGL Document ID
  get ReferencedHPGLDocumentID(): number | undefined {
    return this.x00686440;
  }

  get x00686440(): number | undefined {
    const value = this.dwResponse['00686440']?.Value;
    return convert(value?.[0], 0x00686440, 'number');
  }

  getReferencedHPGLDocumentID(): number {
    const value = this.x00686440;
    if (value === undefined) {
      throw new Error('ReferencedHPGLDocumentID is undefined');
    }
    return value;
  }

  // 2D Mating Point
  get TwoDMatingPoint(): Array<number | undefined> | undefined {
    return this.x00686450;
  }

  get x00686450(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00686450']?.Value;
    return convert(value, 0x00686450, 'Array<number | undefined>');
  }

  getTwoDMatingPoint(): Array<number | undefined> {
    const value = this.x00686450;
    if (value === undefined) {
      throw new Error('TwoDMatingPoint is undefined');
    }
    return value;
  }

  // 2D Mating Axes
  get TwoDMatingAxes(): Array<number | undefined> | undefined {
    return this.x00686460;
  }

  get x00686460(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00686460']?.Value;
    return convert(value, 0x00686460, 'Array<number | undefined>');
  }

  getTwoDMatingAxes(): Array<number | undefined> {
    const value = this.x00686460;
    if (value === undefined) {
      throw new Error('TwoDMatingAxes is undefined');
    }
    return value;
  }

  // 2D Degree of Freedom Sequence
  get TwoDDegreeOfFreedomSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00686470;
  }

  get x00686470(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00686470']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTwoDDegreeOfFreedomSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00686470;
    if (value === undefined) {
      throw new Error('TwoDDegreeOfFreedomSequence is undefined');
    }
    return value;
  }

  // 3D Degree of Freedom Axis
  get ThreeDDegreeOfFreedomAxis(): Array<number | undefined> | undefined {
    return this.x00686490;
  }

  get x00686490(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00686490']?.Value;
    return convert(value, 0x00686490, 'Array<number | undefined>');
  }

  getThreeDDegreeOfFreedomAxis(): Array<number | undefined> {
    const value = this.x00686490;
    if (value === undefined) {
      throw new Error('ThreeDDegreeOfFreedomAxis is undefined');
    }
    return value;
  }

  // Range of Freedom
  get RangeOfFreedom(): Array<number | undefined> | undefined {
    return this.x006864a0;
  }

  get x006864a0(): Array<number | undefined> | undefined {
    const value = this.dwResponse['006864A0']?.Value;
    return convert(value, 0x006864a0, 'Array<number | undefined>');
  }

  getRangeOfFreedom(): Array<number | undefined> {
    const value = this.x006864a0;
    if (value === undefined) {
      throw new Error('RangeOfFreedom is undefined');
    }
    return value;
  }

  // 3D Mating Point
  get ThreeDMatingPoint(): Array<number | undefined> | undefined {
    return this.x006864c0;
  }

  get x006864c0(): Array<number | undefined> | undefined {
    const value = this.dwResponse['006864C0']?.Value;
    return convert(value, 0x006864c0, 'Array<number | undefined>');
  }

  getThreeDMatingPoint(): Array<number | undefined> {
    const value = this.x006864c0;
    if (value === undefined) {
      throw new Error('ThreeDMatingPoint is undefined');
    }
    return value;
  }

  // 3D Mating Axes
  get ThreeDMatingAxes(): Array<number | undefined> | undefined {
    return this.x006864d0;
  }

  get x006864d0(): Array<number | undefined> | undefined {
    const value = this.dwResponse['006864D0']?.Value;
    return convert(value, 0x006864d0, 'Array<number | undefined>');
  }

  getThreeDMatingAxes(): Array<number | undefined> {
    const value = this.x006864d0;
    if (value === undefined) {
      throw new Error('ThreeDMatingAxes is undefined');
    }
    return value;
  }

  // 2D Degree of Freedom Axis
  get TwoDDegreeOfFreedomAxis(): Array<number | undefined> | undefined {
    return this.x006864f0;
  }

  get x006864f0(): Array<number | undefined> | undefined {
    const value = this.dwResponse['006864F0']?.Value;
    return convert(value, 0x006864f0, 'Array<number | undefined>');
  }

  getTwoDDegreeOfFreedomAxis(): Array<number | undefined> {
    const value = this.x006864f0;
    if (value === undefined) {
      throw new Error('TwoDDegreeOfFreedomAxis is undefined');
    }
    return value;
  }

  // Planning Landmark Point Sequence
  get PlanningLandmarkPointSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00686500;
  }

  get x00686500(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00686500']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPlanningLandmarkPointSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00686500;
    if (value === undefined) {
      throw new Error('PlanningLandmarkPointSequence is undefined');
    }
    return value;
  }

  // Planning Landmark Line Sequence
  get PlanningLandmarkLineSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00686510;
  }

  get x00686510(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00686510']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPlanningLandmarkLineSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00686510;
    if (value === undefined) {
      throw new Error('PlanningLandmarkLineSequence is undefined');
    }
    return value;
  }

  // Planning Landmark Plane Sequence
  get PlanningLandmarkPlaneSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00686520;
  }

  get x00686520(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00686520']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPlanningLandmarkPlaneSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00686520;
    if (value === undefined) {
      throw new Error('PlanningLandmarkPlaneSequence is undefined');
    }
    return value;
  }

  // Planning Landmark ID
  get PlanningLandmarkID(): number | undefined {
    return this.x00686530;
  }

  get x00686530(): number | undefined {
    const value = this.dwResponse['00686530']?.Value;
    return convert(value?.[0], 0x00686530, 'number');
  }

  getPlanningLandmarkID(): number {
    const value = this.x00686530;
    if (value === undefined) {
      throw new Error('PlanningLandmarkID is undefined');
    }
    return value;
  }

  // Planning Landmark Description
  get PlanningLandmarkDescription(): string | undefined {
    return this.x00686540;
  }

  get x00686540(): string | undefined {
    const value = this.dwResponse['00686540']?.Value;
    return convert(value?.[0], 0x00686540, 'string');
  }

  getPlanningLandmarkDescription(): string {
    const value = this.x00686540;
    if (value === undefined) {
      throw new Error('PlanningLandmarkDescription is undefined');
    }
    return value;
  }

  // Planning Landmark Identification Code Sequence
  get PlanningLandmarkIdentificationCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00686545;
  }

  get x00686545(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00686545']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPlanningLandmarkIdentificationCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00686545;
    if (value === undefined) {
      throw new Error('PlanningLandmarkIdentificationCodeSequence is undefined');
    }
    return value;
  }

  // 2D Point Coordinates Sequence
  get TwoDPointCoordinatesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00686550;
  }

  get x00686550(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00686550']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTwoDPointCoordinatesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00686550;
    if (value === undefined) {
      throw new Error('TwoDPointCoordinatesSequence is undefined');
    }
    return value;
  }

  // 2D Point Coordinates
  get TwoDPointCoordinates(): Array<number | undefined> | undefined {
    return this.x00686560;
  }

  get x00686560(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00686560']?.Value;
    return convert(value, 0x00686560, 'Array<number | undefined>');
  }

  getTwoDPointCoordinates(): Array<number | undefined> {
    const value = this.x00686560;
    if (value === undefined) {
      throw new Error('TwoDPointCoordinates is undefined');
    }
    return value;
  }

  // 3D Point Coordinates
  get ThreeDPointCoordinates(): Array<number | undefined> | undefined {
    return this.x00686590;
  }

  get x00686590(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00686590']?.Value;
    return convert(value, 0x00686590, 'Array<number | undefined>');
  }

  getThreeDPointCoordinates(): Array<number | undefined> {
    const value = this.x00686590;
    if (value === undefined) {
      throw new Error('ThreeDPointCoordinates is undefined');
    }
    return value;
  }

  // 2D Line Coordinates Sequence
  get TwoDLineCoordinatesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x006865a0;
  }

  get x006865a0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['006865A0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTwoDLineCoordinatesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x006865a0;
    if (value === undefined) {
      throw new Error('TwoDLineCoordinatesSequence is undefined');
    }
    return value;
  }

  // 2D Line Coordinates
  get TwoDLineCoordinates(): Array<number | undefined> | undefined {
    return this.x006865b0;
  }

  get x006865b0(): Array<number | undefined> | undefined {
    const value = this.dwResponse['006865B0']?.Value;
    return convert(value, 0x006865b0, 'Array<number | undefined>');
  }

  getTwoDLineCoordinates(): Array<number | undefined> {
    const value = this.x006865b0;
    if (value === undefined) {
      throw new Error('TwoDLineCoordinates is undefined');
    }
    return value;
  }

  // 3D Line Coordinates
  get ThreeDLineCoordinates(): Array<number | undefined> | undefined {
    return this.x006865d0;
  }

  get x006865d0(): Array<number | undefined> | undefined {
    const value = this.dwResponse['006865D0']?.Value;
    return convert(value, 0x006865d0, 'Array<number | undefined>');
  }

  getThreeDLineCoordinates(): Array<number | undefined> {
    const value = this.x006865d0;
    if (value === undefined) {
      throw new Error('ThreeDLineCoordinates is undefined');
    }
    return value;
  }

  // 2D Plane Coordinates Sequence
  get TwoDPlaneCoordinatesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x006865e0;
  }

  get x006865e0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['006865E0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTwoDPlaneCoordinatesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x006865e0;
    if (value === undefined) {
      throw new Error('TwoDPlaneCoordinatesSequence is undefined');
    }
    return value;
  }

  // 2D Plane Intersection
  get TwoDPlaneIntersection(): Array<number | undefined> | undefined {
    return this.x006865f0;
  }

  get x006865f0(): Array<number | undefined> | undefined {
    const value = this.dwResponse['006865F0']?.Value;
    return convert(value, 0x006865f0, 'Array<number | undefined>');
  }

  getTwoDPlaneIntersection(): Array<number | undefined> {
    const value = this.x006865f0;
    if (value === undefined) {
      throw new Error('TwoDPlaneIntersection is undefined');
    }
    return value;
  }

  // 3D Plane Origin
  get ThreeDPlaneOrigin(): Array<number | undefined> | undefined {
    return this.x00686610;
  }

  get x00686610(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00686610']?.Value;
    return convert(value, 0x00686610, 'Array<number | undefined>');
  }

  getThreeDPlaneOrigin(): Array<number | undefined> {
    const value = this.x00686610;
    if (value === undefined) {
      throw new Error('ThreeDPlaneOrigin is undefined');
    }
    return value;
  }

  // 3D Plane Normal
  get ThreeDPlaneNormal(): Array<number | undefined> | undefined {
    return this.x00686620;
  }

  get x00686620(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00686620']?.Value;
    return convert(value, 0x00686620, 'Array<number | undefined>');
  }

  getThreeDPlaneNormal(): Array<number | undefined> {
    const value = this.x00686620;
    if (value === undefined) {
      throw new Error('ThreeDPlaneNormal is undefined');
    }
    return value;
  }

  // Graphic Annotation Sequence
  get GraphicAnnotationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700001;
  }

  get x00700001(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700001']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getGraphicAnnotationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700001;
    if (value === undefined) {
      throw new Error('GraphicAnnotationSequence is undefined');
    }
    return value;
  }

  // Graphic Layer
  get GraphicLayer(): string | undefined {
    return this.x00700002;
  }

  get x00700002(): string | undefined {
    const value = this.dwResponse['00700002']?.Value;
    return convert(value?.[0], 0x00700002, 'string');
  }

  getGraphicLayer(): string {
    const value = this.x00700002;
    if (value === undefined) {
      throw new Error('GraphicLayer is undefined');
    }
    return value;
  }

  // Bounding Box Annotation Units
  get BoundingBoxAnnotationUnits(): string | undefined {
    return this.x00700003;
  }

  get x00700003(): string | undefined {
    const value = this.dwResponse['00700003']?.Value;
    return convert(value?.[0], 0x00700003, 'string');
  }

  getBoundingBoxAnnotationUnits(): string {
    const value = this.x00700003;
    if (value === undefined) {
      throw new Error('BoundingBoxAnnotationUnits is undefined');
    }
    return value;
  }

  // Anchor Point Annotation Units
  get AnchorPointAnnotationUnits(): string | undefined {
    return this.x00700004;
  }

  get x00700004(): string | undefined {
    const value = this.dwResponse['00700004']?.Value;
    return convert(value?.[0], 0x00700004, 'string');
  }

  getAnchorPointAnnotationUnits(): string {
    const value = this.x00700004;
    if (value === undefined) {
      throw new Error('AnchorPointAnnotationUnits is undefined');
    }
    return value;
  }

  // Graphic Annotation Units
  get GraphicAnnotationUnits(): string | undefined {
    return this.x00700005;
  }

  get x00700005(): string | undefined {
    const value = this.dwResponse['00700005']?.Value;
    return convert(value?.[0], 0x00700005, 'string');
  }

  getGraphicAnnotationUnits(): string {
    const value = this.x00700005;
    if (value === undefined) {
      throw new Error('GraphicAnnotationUnits is undefined');
    }
    return value;
  }

  // Text Object Sequence
  get TextObjectSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700008;
  }

  get x00700008(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700008']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTextObjectSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700008;
    if (value === undefined) {
      throw new Error('TextObjectSequence is undefined');
    }
    return value;
  }

  // Graphic Object Sequence
  get GraphicObjectSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700009;
  }

  get x00700009(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700009']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getGraphicObjectSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700009;
    if (value === undefined) {
      throw new Error('GraphicObjectSequence is undefined');
    }
    return value;
  }

  // Bounding Box Top Left Hand Corner
  get BoundingBoxTopLeftHandCorner(): Array<number | undefined> | undefined {
    return this.x00700010;
  }

  get x00700010(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00700010']?.Value;
    return convert(value, 0x00700010, 'Array<number | undefined>');
  }

  getBoundingBoxTopLeftHandCorner(): Array<number | undefined> {
    const value = this.x00700010;
    if (value === undefined) {
      throw new Error('BoundingBoxTopLeftHandCorner is undefined');
    }
    return value;
  }

  // Bounding Box Bottom Right Hand Corner
  get BoundingBoxBottomRightHandCorner(): Array<number | undefined> | undefined {
    return this.x00700011;
  }

  get x00700011(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00700011']?.Value;
    return convert(value, 0x00700011, 'Array<number | undefined>');
  }

  getBoundingBoxBottomRightHandCorner(): Array<number | undefined> {
    const value = this.x00700011;
    if (value === undefined) {
      throw new Error('BoundingBoxBottomRightHandCorner is undefined');
    }
    return value;
  }

  // Bounding Box Text Horizontal Justification
  get BoundingBoxTextHorizontalJustification(): string | undefined {
    return this.x00700012;
  }

  get x00700012(): string | undefined {
    const value = this.dwResponse['00700012']?.Value;
    return convert(value?.[0], 0x00700012, 'string');
  }

  getBoundingBoxTextHorizontalJustification(): string {
    const value = this.x00700012;
    if (value === undefined) {
      throw new Error('BoundingBoxTextHorizontalJustification is undefined');
    }
    return value;
  }

  // Anchor Point
  get AnchorPoint(): Array<number | undefined> | undefined {
    return this.x00700014;
  }

  get x00700014(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00700014']?.Value;
    return convert(value, 0x00700014, 'Array<number | undefined>');
  }

  getAnchorPoint(): Array<number | undefined> {
    const value = this.x00700014;
    if (value === undefined) {
      throw new Error('AnchorPoint is undefined');
    }
    return value;
  }

  // Anchor Point Visibility
  get AnchorPointVisibility(): string | undefined {
    return this.x00700015;
  }

  get x00700015(): string | undefined {
    const value = this.dwResponse['00700015']?.Value;
    return convert(value?.[0], 0x00700015, 'string');
  }

  getAnchorPointVisibility(): string {
    const value = this.x00700015;
    if (value === undefined) {
      throw new Error('AnchorPointVisibility is undefined');
    }
    return value;
  }

  // Graphic Dimensions
  get GraphicDimensions(): number | undefined {
    return this.x00700020;
  }

  get x00700020(): number | undefined {
    const value = this.dwResponse['00700020']?.Value;
    return convert(value?.[0], 0x00700020, 'number');
  }

  getGraphicDimensions(): number {
    const value = this.x00700020;
    if (value === undefined) {
      throw new Error('GraphicDimensions is undefined');
    }
    return value;
  }

  // Number of Graphic Points
  get NumberOfGraphicPoints(): number | undefined {
    return this.x00700021;
  }

  get x00700021(): number | undefined {
    const value = this.dwResponse['00700021']?.Value;
    return convert(value?.[0], 0x00700021, 'number');
  }

  getNumberOfGraphicPoints(): number {
    const value = this.x00700021;
    if (value === undefined) {
      throw new Error('NumberOfGraphicPoints is undefined');
    }
    return value;
  }

  // Graphic Data
  get GraphicData(): Array<number | undefined> | undefined {
    return this.x00700022;
  }

  get x00700022(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00700022']?.Value;
    return convert(value, 0x00700022, 'Array<number | undefined>');
  }

  getGraphicData(): Array<number | undefined> {
    const value = this.x00700022;
    if (value === undefined) {
      throw new Error('GraphicData is undefined');
    }
    return value;
  }

  // Graphic Type
  get GraphicType(): string | undefined {
    return this.x00700023;
  }

  get x00700023(): string | undefined {
    const value = this.dwResponse['00700023']?.Value;
    return convert(value?.[0], 0x00700023, 'string');
  }

  getGraphicType(): string {
    const value = this.x00700023;
    if (value === undefined) {
      throw new Error('GraphicType is undefined');
    }
    return value;
  }

  // Graphic Filled
  get GraphicFilled(): string | undefined {
    return this.x00700024;
  }

  get x00700024(): string | undefined {
    const value = this.dwResponse['00700024']?.Value;
    return convert(value?.[0], 0x00700024, 'string');
  }

  getGraphicFilled(): string {
    const value = this.x00700024;
    if (value === undefined) {
      throw new Error('GraphicFilled is undefined');
    }
    return value;
  }

  // Image Rotation (Retired)
  get ImageRotationRetired(): number | undefined {
    return this.x00700040;
  }

  get x00700040(): number | undefined {
    const value = this.dwResponse['00700040']?.Value;
    return convert(value?.[0], 0x00700040, 'number');
  }

  getImageRotationRetired(): number {
    const value = this.x00700040;
    if (value === undefined) {
      throw new Error('ImageRotationRetired is undefined');
    }
    return value;
  }

  // Image Horizontal Flip
  get ImageHorizontalFlip(): string | undefined {
    return this.x00700041;
  }

  get x00700041(): string | undefined {
    const value = this.dwResponse['00700041']?.Value;
    return convert(value?.[0], 0x00700041, 'string');
  }

  getImageHorizontalFlip(): string {
    const value = this.x00700041;
    if (value === undefined) {
      throw new Error('ImageHorizontalFlip is undefined');
    }
    return value;
  }

  // Image Rotation
  get ImageRotation(): number | undefined {
    return this.x00700042;
  }

  get x00700042(): number | undefined {
    const value = this.dwResponse['00700042']?.Value;
    return convert(value?.[0], 0x00700042, 'number');
  }

  getImageRotation(): number {
    const value = this.x00700042;
    if (value === undefined) {
      throw new Error('ImageRotation is undefined');
    }
    return value;
  }

  // Displayed Area Top Left Hand Corner (Trial)
  get DisplayedAreaTopLeftHandCornerTrial(): Array<number | undefined> | undefined {
    return this.x00700050;
  }

  get x00700050(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00700050']?.Value;
    return convert(value, 0x00700050, 'Array<number | undefined>');
  }

  getDisplayedAreaTopLeftHandCornerTrial(): Array<number | undefined> {
    const value = this.x00700050;
    if (value === undefined) {
      throw new Error('DisplayedAreaTopLeftHandCornerTrial is undefined');
    }
    return value;
  }

  // Displayed Area Bottom Right Hand Corner (Trial)
  get DisplayedAreaBottomRightHandCornerTrial(): Array<number | undefined> | undefined {
    return this.x00700051;
  }

  get x00700051(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00700051']?.Value;
    return convert(value, 0x00700051, 'Array<number | undefined>');
  }

  getDisplayedAreaBottomRightHandCornerTrial(): Array<number | undefined> {
    const value = this.x00700051;
    if (value === undefined) {
      throw new Error('DisplayedAreaBottomRightHandCornerTrial is undefined');
    }
    return value;
  }

  // Displayed Area Top Left Hand Corner
  get DisplayedAreaTopLeftHandCorner(): Array<number | undefined> | undefined {
    return this.x00700052;
  }

  get x00700052(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00700052']?.Value;
    return convert(value, 0x00700052, 'Array<number | undefined>');
  }

  getDisplayedAreaTopLeftHandCorner(): Array<number | undefined> {
    const value = this.x00700052;
    if (value === undefined) {
      throw new Error('DisplayedAreaTopLeftHandCorner is undefined');
    }
    return value;
  }

  // Displayed Area Bottom Right Hand Corner
  get DisplayedAreaBottomRightHandCorner(): Array<number | undefined> | undefined {
    return this.x00700053;
  }

  get x00700053(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00700053']?.Value;
    return convert(value, 0x00700053, 'Array<number | undefined>');
  }

  getDisplayedAreaBottomRightHandCorner(): Array<number | undefined> {
    const value = this.x00700053;
    if (value === undefined) {
      throw new Error('DisplayedAreaBottomRightHandCorner is undefined');
    }
    return value;
  }

  // Displayed Area Selection Sequence
  get DisplayedAreaSelectionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0070005a;
  }

  get x0070005a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0070005A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDisplayedAreaSelectionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0070005a;
    if (value === undefined) {
      throw new Error('DisplayedAreaSelectionSequence is undefined');
    }
    return value;
  }

  // Graphic Layer Sequence
  get GraphicLayerSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700060;
  }

  get x00700060(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700060']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getGraphicLayerSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700060;
    if (value === undefined) {
      throw new Error('GraphicLayerSequence is undefined');
    }
    return value;
  }

  // Graphic Layer Order
  get GraphicLayerOrder(): number | undefined {
    return this.x00700062;
  }

  get x00700062(): number | undefined {
    const value = this.dwResponse['00700062']?.Value;
    return convert(value?.[0], 0x00700062, 'number');
  }

  getGraphicLayerOrder(): number {
    const value = this.x00700062;
    if (value === undefined) {
      throw new Error('GraphicLayerOrder is undefined');
    }
    return value;
  }

  // Graphic Layer Recommended Display Grayscale Value
  get GraphicLayerRecommendedDisplayGrayscaleValue(): number | undefined {
    return this.x00700066;
  }

  get x00700066(): number | undefined {
    const value = this.dwResponse['00700066']?.Value;
    return convert(value?.[0], 0x00700066, 'number');
  }

  getGraphicLayerRecommendedDisplayGrayscaleValue(): number {
    const value = this.x00700066;
    if (value === undefined) {
      throw new Error('GraphicLayerRecommendedDisplayGrayscaleValue is undefined');
    }
    return value;
  }

  // Graphic Layer Recommended Display RGB Value
  get GraphicLayerRecommendedDisplayRGBValue(): Array<number | undefined> | undefined {
    return this.x00700067;
  }

  get x00700067(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00700067']?.Value;
    return convert(value, 0x00700067, 'Array<number | undefined>');
  }

  getGraphicLayerRecommendedDisplayRGBValue(): Array<number | undefined> {
    const value = this.x00700067;
    if (value === undefined) {
      throw new Error('GraphicLayerRecommendedDisplayRGBValue is undefined');
    }
    return value;
  }

  // Graphic Layer Description
  get GraphicLayerDescription(): string | undefined {
    return this.x00700068;
  }

  get x00700068(): string | undefined {
    const value = this.dwResponse['00700068']?.Value;
    return convert(value?.[0], 0x00700068, 'string');
  }

  getGraphicLayerDescription(): string {
    const value = this.x00700068;
    if (value === undefined) {
      throw new Error('GraphicLayerDescription is undefined');
    }
    return value;
  }

  // Content Label
  get ContentLabel(): string | undefined {
    return this.x00700080;
  }

  get x00700080(): string | undefined {
    const value = this.dwResponse['00700080']?.Value;
    return convert(value?.[0], 0x00700080, 'string');
  }

  getContentLabel(): string {
    const value = this.x00700080;
    if (value === undefined) {
      throw new Error('ContentLabel is undefined');
    }
    return value;
  }

  // Content Description
  get ContentDescription(): string | undefined {
    return this.x00700081;
  }

  get x00700081(): string | undefined {
    const value = this.dwResponse['00700081']?.Value;
    return convert(value?.[0], 0x00700081, 'string');
  }

  getContentDescription(): string {
    const value = this.x00700081;
    if (value === undefined) {
      throw new Error('ContentDescription is undefined');
    }
    return value;
  }

  // Presentation Creation Date
  get PresentationCreationDate(): Date | undefined {
    return this.x00700082;
  }

  get x00700082(): Date | undefined {
    const value = this.dwResponse['00700082']?.Value;
    return convert(value?.[0], 0x00700082, 'Date');
  }

  getPresentationCreationDate(): Date {
    const value = this.x00700082;
    if (value === undefined) {
      throw new Error('PresentationCreationDate is undefined');
    }
    return value;
  }

  // Presentation Creation Time
  get PresentationCreationTime(): string | undefined {
    return this.x00700083;
  }

  get x00700083(): string | undefined {
    const value = this.dwResponse['00700083']?.Value;
    return convert(value?.[0], 0x00700083, 'string');
  }

  getPresentationCreationTime(): string {
    const value = this.x00700083;
    if (value === undefined) {
      throw new Error('PresentationCreationTime is undefined');
    }
    return value;
  }

  // Content Creator's Name
  get ContentCreatorName(): any | undefined {
    return this.x00700084;
  }

  get x00700084(): any | undefined {
    const value = this.dwResponse['00700084']?.Value;
    return convert(value?.[0], 0x00700084, 'any');
  }

  getContentCreatorName(): any {
    const value = this.x00700084;
    if (value === undefined) {
      throw new Error('ContentCreatorName is undefined');
    }
    return value;
  }

  // Content Creator's Identification Code Sequence
  get ContentCreatorIdentificationCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700086;
  }

  get x00700086(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700086']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getContentCreatorIdentificationCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700086;
    if (value === undefined) {
      throw new Error('ContentCreatorIdentificationCodeSequence is undefined');
    }
    return value;
  }

  // Alternate Content Description Sequence
  get AlternateContentDescriptionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700087;
  }

  get x00700087(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700087']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAlternateContentDescriptionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700087;
    if (value === undefined) {
      throw new Error('AlternateContentDescriptionSequence is undefined');
    }
    return value;
  }

  // Presentation Size Mode
  get PresentationSizeMode(): string | undefined {
    return this.x00700100;
  }

  get x00700100(): string | undefined {
    const value = this.dwResponse['00700100']?.Value;
    return convert(value?.[0], 0x00700100, 'string');
  }

  getPresentationSizeMode(): string {
    const value = this.x00700100;
    if (value === undefined) {
      throw new Error('PresentationSizeMode is undefined');
    }
    return value;
  }

  // Presentation Pixel Spacing
  get PresentationPixelSpacing(): Array<number | undefined> | undefined {
    return this.x00700101;
  }

  get x00700101(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00700101']?.Value;
    return convert(value, 0x00700101, 'Array<number | undefined>');
  }

  getPresentationPixelSpacing(): Array<number | undefined> {
    const value = this.x00700101;
    if (value === undefined) {
      throw new Error('PresentationPixelSpacing is undefined');
    }
    return value;
  }

  // Presentation Pixel Aspect Ratio
  get PresentationPixelAspectRatio(): Array<number | undefined> | undefined {
    return this.x00700102;
  }

  get x00700102(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00700102']?.Value;
    return convert(value, 0x00700102, 'Array<number | undefined>');
  }

  getPresentationPixelAspectRatio(): Array<number | undefined> {
    const value = this.x00700102;
    if (value === undefined) {
      throw new Error('PresentationPixelAspectRatio is undefined');
    }
    return value;
  }

  // Presentation Pixel Magnification Ratio
  get PresentationPixelMagnificationRatio(): number | undefined {
    return this.x00700103;
  }

  get x00700103(): number | undefined {
    const value = this.dwResponse['00700103']?.Value;
    return convert(value?.[0], 0x00700103, 'number');
  }

  getPresentationPixelMagnificationRatio(): number {
    const value = this.x00700103;
    if (value === undefined) {
      throw new Error('PresentationPixelMagnificationRatio is undefined');
    }
    return value;
  }

  // Graphic Group Label
  get GraphicGroupLabel(): string | undefined {
    return this.x00700207;
  }

  get x00700207(): string | undefined {
    const value = this.dwResponse['00700207']?.Value;
    return convert(value?.[0], 0x00700207, 'string');
  }

  getGraphicGroupLabel(): string {
    const value = this.x00700207;
    if (value === undefined) {
      throw new Error('GraphicGroupLabel is undefined');
    }
    return value;
  }

  // Compound Graphic Sequence
  get CompoundGraphicSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700209;
  }

  get x00700209(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700209']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCompoundGraphicSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700209;
    if (value === undefined) {
      throw new Error('CompoundGraphicSequence is undefined');
    }
    return value;
  }

  // Compound Graphic Instance ID
  get CompoundGraphicInstanceID(): number | undefined {
    return this.x00700226;
  }

  get x00700226(): number | undefined {
    const value = this.dwResponse['00700226']?.Value;
    return convert(value?.[0], 0x00700226, 'number');
  }

  getCompoundGraphicInstanceID(): number {
    const value = this.x00700226;
    if (value === undefined) {
      throw new Error('CompoundGraphicInstanceID is undefined');
    }
    return value;
  }

  // Font Name
  get FontName(): string | undefined {
    return this.x00700227;
  }

  get x00700227(): string | undefined {
    const value = this.dwResponse['00700227']?.Value;
    return convert(value?.[0], 0x00700227, 'string');
  }

  getFontName(): string {
    const value = this.x00700227;
    if (value === undefined) {
      throw new Error('FontName is undefined');
    }
    return value;
  }

  // Font Name Type
  get FontNameType(): string | undefined {
    return this.x00700228;
  }

  get x00700228(): string | undefined {
    const value = this.dwResponse['00700228']?.Value;
    return convert(value?.[0], 0x00700228, 'string');
  }

  getFontNameType(): string {
    const value = this.x00700228;
    if (value === undefined) {
      throw new Error('FontNameType is undefined');
    }
    return value;
  }

  // CSS Font Name
  get CSSFontName(): string | undefined {
    return this.x00700229;
  }

  get x00700229(): string | undefined {
    const value = this.dwResponse['00700229']?.Value;
    return convert(value?.[0], 0x00700229, 'string');
  }

  getCSSFontName(): string {
    const value = this.x00700229;
    if (value === undefined) {
      throw new Error('CSSFontName is undefined');
    }
    return value;
  }

  // Rotation Angle
  get RotationAngle(): number | undefined {
    return this.x00700230;
  }

  get x00700230(): number | undefined {
    const value = this.dwResponse['00700230']?.Value;
    return convert(value?.[0], 0x00700230, 'number');
  }

  getRotationAngle(): number {
    const value = this.x00700230;
    if (value === undefined) {
      throw new Error('RotationAngle is undefined');
    }
    return value;
  }

  // Text Style Sequence
  get TextStyleSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700231;
  }

  get x00700231(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700231']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTextStyleSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700231;
    if (value === undefined) {
      throw new Error('TextStyleSequence is undefined');
    }
    return value;
  }

  // Line Style Sequence
  get LineStyleSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700232;
  }

  get x00700232(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700232']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getLineStyleSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700232;
    if (value === undefined) {
      throw new Error('LineStyleSequence is undefined');
    }
    return value;
  }

  // Fill Style Sequence
  get FillStyleSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700233;
  }

  get x00700233(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700233']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFillStyleSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700233;
    if (value === undefined) {
      throw new Error('FillStyleSequence is undefined');
    }
    return value;
  }

  // Graphic Group Sequence
  get GraphicGroupSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700234;
  }

  get x00700234(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700234']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getGraphicGroupSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700234;
    if (value === undefined) {
      throw new Error('GraphicGroupSequence is undefined');
    }
    return value;
  }

  // Text Color CIELab Value
  get TextColorCIELabValue(): Array<number | undefined> | undefined {
    return this.x00700241;
  }

  get x00700241(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00700241']?.Value;
    return convert(value, 0x00700241, 'Array<number | undefined>');
  }

  getTextColorCIELabValue(): Array<number | undefined> {
    const value = this.x00700241;
    if (value === undefined) {
      throw new Error('TextColorCIELabValue is undefined');
    }
    return value;
  }

  // Horizontal Alignment
  get HorizontalAlignment(): string | undefined {
    return this.x00700242;
  }

  get x00700242(): string | undefined {
    const value = this.dwResponse['00700242']?.Value;
    return convert(value?.[0], 0x00700242, 'string');
  }

  getHorizontalAlignment(): string {
    const value = this.x00700242;
    if (value === undefined) {
      throw new Error('HorizontalAlignment is undefined');
    }
    return value;
  }

  // Vertical Alignment
  get VerticalAlignment(): string | undefined {
    return this.x00700243;
  }

  get x00700243(): string | undefined {
    const value = this.dwResponse['00700243']?.Value;
    return convert(value?.[0], 0x00700243, 'string');
  }

  getVerticalAlignment(): string {
    const value = this.x00700243;
    if (value === undefined) {
      throw new Error('VerticalAlignment is undefined');
    }
    return value;
  }

  // Shadow Style
  get ShadowStyle(): string | undefined {
    return this.x00700244;
  }

  get x00700244(): string | undefined {
    const value = this.dwResponse['00700244']?.Value;
    return convert(value?.[0], 0x00700244, 'string');
  }

  getShadowStyle(): string {
    const value = this.x00700244;
    if (value === undefined) {
      throw new Error('ShadowStyle is undefined');
    }
    return value;
  }

  // Shadow Offset X
  get ShadowOffsetX(): number | undefined {
    return this.x00700245;
  }

  get x00700245(): number | undefined {
    const value = this.dwResponse['00700245']?.Value;
    return convert(value?.[0], 0x00700245, 'number');
  }

  getShadowOffsetX(): number {
    const value = this.x00700245;
    if (value === undefined) {
      throw new Error('ShadowOffsetX is undefined');
    }
    return value;
  }

  // Shadow Offset Y
  get ShadowOffsetY(): number | undefined {
    return this.x00700246;
  }

  get x00700246(): number | undefined {
    const value = this.dwResponse['00700246']?.Value;
    return convert(value?.[0], 0x00700246, 'number');
  }

  getShadowOffsetY(): number {
    const value = this.x00700246;
    if (value === undefined) {
      throw new Error('ShadowOffsetY is undefined');
    }
    return value;
  }

  // Shadow Color CIELab Value
  get ShadowColorCIELabValue(): Array<number | undefined> | undefined {
    return this.x00700247;
  }

  get x00700247(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00700247']?.Value;
    return convert(value, 0x00700247, 'Array<number | undefined>');
  }

  getShadowColorCIELabValue(): Array<number | undefined> {
    const value = this.x00700247;
    if (value === undefined) {
      throw new Error('ShadowColorCIELabValue is undefined');
    }
    return value;
  }

  // Underlined
  get Underlined(): string | undefined {
    return this.x00700248;
  }

  get x00700248(): string | undefined {
    const value = this.dwResponse['00700248']?.Value;
    return convert(value?.[0], 0x00700248, 'string');
  }

  getUnderlined(): string {
    const value = this.x00700248;
    if (value === undefined) {
      throw new Error('Underlined is undefined');
    }
    return value;
  }

  // Bold
  get Bold(): string | undefined {
    return this.x00700249;
  }

  get x00700249(): string | undefined {
    const value = this.dwResponse['00700249']?.Value;
    return convert(value?.[0], 0x00700249, 'string');
  }

  getBold(): string {
    const value = this.x00700249;
    if (value === undefined) {
      throw new Error('Bold is undefined');
    }
    return value;
  }

  // Italic
  get Italic(): string | undefined {
    return this.x00700250;
  }

  get x00700250(): string | undefined {
    const value = this.dwResponse['00700250']?.Value;
    return convert(value?.[0], 0x00700250, 'string');
  }

  getItalic(): string {
    const value = this.x00700250;
    if (value === undefined) {
      throw new Error('Italic is undefined');
    }
    return value;
  }

  // Pattern On Color CIELab Value
  get PatternOnColorCIELabValue(): Array<number | undefined> | undefined {
    return this.x00700251;
  }

  get x00700251(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00700251']?.Value;
    return convert(value, 0x00700251, 'Array<number | undefined>');
  }

  getPatternOnColorCIELabValue(): Array<number | undefined> {
    const value = this.x00700251;
    if (value === undefined) {
      throw new Error('PatternOnColorCIELabValue is undefined');
    }
    return value;
  }

  // Pattern Off Color CIELab Value
  get PatternOffColorCIELabValue(): Array<number | undefined> | undefined {
    return this.x00700252;
  }

  get x00700252(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00700252']?.Value;
    return convert(value, 0x00700252, 'Array<number | undefined>');
  }

  getPatternOffColorCIELabValue(): Array<number | undefined> {
    const value = this.x00700252;
    if (value === undefined) {
      throw new Error('PatternOffColorCIELabValue is undefined');
    }
    return value;
  }

  // Line Thickness
  get LineThickness(): number | undefined {
    return this.x00700253;
  }

  get x00700253(): number | undefined {
    const value = this.dwResponse['00700253']?.Value;
    return convert(value?.[0], 0x00700253, 'number');
  }

  getLineThickness(): number {
    const value = this.x00700253;
    if (value === undefined) {
      throw new Error('LineThickness is undefined');
    }
    return value;
  }

  // Line Dashing Style
  get LineDashingStyle(): string | undefined {
    return this.x00700254;
  }

  get x00700254(): string | undefined {
    const value = this.dwResponse['00700254']?.Value;
    return convert(value?.[0], 0x00700254, 'string');
  }

  getLineDashingStyle(): string {
    const value = this.x00700254;
    if (value === undefined) {
      throw new Error('LineDashingStyle is undefined');
    }
    return value;
  }

  // Line Pattern
  get LinePattern(): number | undefined {
    return this.x00700255;
  }

  get x00700255(): number | undefined {
    const value = this.dwResponse['00700255']?.Value;
    return convert(value?.[0], 0x00700255, 'number');
  }

  getLinePattern(): number {
    const value = this.x00700255;
    if (value === undefined) {
      throw new Error('LinePattern is undefined');
    }
    return value;
  }

  // Fill Mode
  get FillMode(): string | undefined {
    return this.x00700257;
  }

  get x00700257(): string | undefined {
    const value = this.dwResponse['00700257']?.Value;
    return convert(value?.[0], 0x00700257, 'string');
  }

  getFillMode(): string {
    const value = this.x00700257;
    if (value === undefined) {
      throw new Error('FillMode is undefined');
    }
    return value;
  }

  // Shadow Opacity
  get ShadowOpacity(): number | undefined {
    return this.x00700258;
  }

  get x00700258(): number | undefined {
    const value = this.dwResponse['00700258']?.Value;
    return convert(value?.[0], 0x00700258, 'number');
  }

  getShadowOpacity(): number {
    const value = this.x00700258;
    if (value === undefined) {
      throw new Error('ShadowOpacity is undefined');
    }
    return value;
  }

  // Gap Length
  get GapLength(): number | undefined {
    return this.x00700261;
  }

  get x00700261(): number | undefined {
    const value = this.dwResponse['00700261']?.Value;
    return convert(value?.[0], 0x00700261, 'number');
  }

  getGapLength(): number {
    const value = this.x00700261;
    if (value === undefined) {
      throw new Error('GapLength is undefined');
    }
    return value;
  }

  // Diameter of Visibility
  get DiameterOfVisibility(): number | undefined {
    return this.x00700262;
  }

  get x00700262(): number | undefined {
    const value = this.dwResponse['00700262']?.Value;
    return convert(value?.[0], 0x00700262, 'number');
  }

  getDiameterOfVisibility(): number {
    const value = this.x00700262;
    if (value === undefined) {
      throw new Error('DiameterOfVisibility is undefined');
    }
    return value;
  }

  // Rotation Point
  get RotationPoint(): Array<number | undefined> | undefined {
    return this.x00700273;
  }

  get x00700273(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00700273']?.Value;
    return convert(value, 0x00700273, 'Array<number | undefined>');
  }

  getRotationPoint(): Array<number | undefined> {
    const value = this.x00700273;
    if (value === undefined) {
      throw new Error('RotationPoint is undefined');
    }
    return value;
  }

  // Tick Alignment
  get TickAlignment(): string | undefined {
    return this.x00700274;
  }

  get x00700274(): string | undefined {
    const value = this.dwResponse['00700274']?.Value;
    return convert(value?.[0], 0x00700274, 'string');
  }

  getTickAlignment(): string {
    const value = this.x00700274;
    if (value === undefined) {
      throw new Error('TickAlignment is undefined');
    }
    return value;
  }

  // Show Tick Label
  get ShowTickLabel(): string | undefined {
    return this.x00700278;
  }

  get x00700278(): string | undefined {
    const value = this.dwResponse['00700278']?.Value;
    return convert(value?.[0], 0x00700278, 'string');
  }

  getShowTickLabel(): string {
    const value = this.x00700278;
    if (value === undefined) {
      throw new Error('ShowTickLabel is undefined');
    }
    return value;
  }

  // Tick Label Alignment
  get TickLabelAlignment(): string | undefined {
    return this.x00700279;
  }

  get x00700279(): string | undefined {
    const value = this.dwResponse['00700279']?.Value;
    return convert(value?.[0], 0x00700279, 'string');
  }

  getTickLabelAlignment(): string {
    const value = this.x00700279;
    if (value === undefined) {
      throw new Error('TickLabelAlignment is undefined');
    }
    return value;
  }

  // Compound Graphic Units
  get CompoundGraphicUnits(): string | undefined {
    return this.x00700282;
  }

  get x00700282(): string | undefined {
    const value = this.dwResponse['00700282']?.Value;
    return convert(value?.[0], 0x00700282, 'string');
  }

  getCompoundGraphicUnits(): string {
    const value = this.x00700282;
    if (value === undefined) {
      throw new Error('CompoundGraphicUnits is undefined');
    }
    return value;
  }

  // Pattern On Opacity
  get PatternOnOpacity(): number | undefined {
    return this.x00700284;
  }

  get x00700284(): number | undefined {
    const value = this.dwResponse['00700284']?.Value;
    return convert(value?.[0], 0x00700284, 'number');
  }

  getPatternOnOpacity(): number {
    const value = this.x00700284;
    if (value === undefined) {
      throw new Error('PatternOnOpacity is undefined');
    }
    return value;
  }

  // Pattern Off Opacity
  get PatternOffOpacity(): number | undefined {
    return this.x00700285;
  }

  get x00700285(): number | undefined {
    const value = this.dwResponse['00700285']?.Value;
    return convert(value?.[0], 0x00700285, 'number');
  }

  getPatternOffOpacity(): number {
    const value = this.x00700285;
    if (value === undefined) {
      throw new Error('PatternOffOpacity is undefined');
    }
    return value;
  }

  // Major Ticks Sequence
  get MajorTicksSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700287;
  }

  get x00700287(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700287']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMajorTicksSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700287;
    if (value === undefined) {
      throw new Error('MajorTicksSequence is undefined');
    }
    return value;
  }

  // Tick Position
  get TickPosition(): number | undefined {
    return this.x00700288;
  }

  get x00700288(): number | undefined {
    const value = this.dwResponse['00700288']?.Value;
    return convert(value?.[0], 0x00700288, 'number');
  }

  getTickPosition(): number {
    const value = this.x00700288;
    if (value === undefined) {
      throw new Error('TickPosition is undefined');
    }
    return value;
  }

  // Tick Label
  get TickLabel(): string | undefined {
    return this.x00700289;
  }

  get x00700289(): string | undefined {
    const value = this.dwResponse['00700289']?.Value;
    return convert(value?.[0], 0x00700289, 'string');
  }

  getTickLabel(): string {
    const value = this.x00700289;
    if (value === undefined) {
      throw new Error('TickLabel is undefined');
    }
    return value;
  }

  // Compound Graphic Type
  get CompoundGraphicType(): string | undefined {
    return this.x00700294;
  }

  get x00700294(): string | undefined {
    const value = this.dwResponse['00700294']?.Value;
    return convert(value?.[0], 0x00700294, 'string');
  }

  getCompoundGraphicType(): string {
    const value = this.x00700294;
    if (value === undefined) {
      throw new Error('CompoundGraphicType is undefined');
    }
    return value;
  }

  // Graphic Group ID
  get GraphicGroupID(): number | undefined {
    return this.x00700295;
  }

  get x00700295(): number | undefined {
    const value = this.dwResponse['00700295']?.Value;
    return convert(value?.[0], 0x00700295, 'number');
  }

  getGraphicGroupID(): number {
    const value = this.x00700295;
    if (value === undefined) {
      throw new Error('GraphicGroupID is undefined');
    }
    return value;
  }

  // Shape Type
  get ShapeType(): string | undefined {
    return this.x00700306;
  }

  get x00700306(): string | undefined {
    const value = this.dwResponse['00700306']?.Value;
    return convert(value?.[0], 0x00700306, 'string');
  }

  getShapeType(): string {
    const value = this.x00700306;
    if (value === undefined) {
      throw new Error('ShapeType is undefined');
    }
    return value;
  }

  // Registration Sequence
  get RegistrationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700308;
  }

  get x00700308(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700308']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRegistrationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700308;
    if (value === undefined) {
      throw new Error('RegistrationSequence is undefined');
    }
    return value;
  }

  // Matrix Registration Sequence
  get MatrixRegistrationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700309;
  }

  get x00700309(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700309']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMatrixRegistrationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700309;
    if (value === undefined) {
      throw new Error('MatrixRegistrationSequence is undefined');
    }
    return value;
  }

  // Matrix Sequence
  get MatrixSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0070030a;
  }

  get x0070030a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0070030A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMatrixSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0070030a;
    if (value === undefined) {
      throw new Error('MatrixSequence is undefined');
    }
    return value;
  }

  // Frame of Reference Transformation Matrix Type
  get FrameOfReferenceTransformationMatrixType(): string | undefined {
    return this.x0070030c;
  }

  get x0070030c(): string | undefined {
    const value = this.dwResponse['0070030C']?.Value;
    return convert(value?.[0], 0x0070030c, 'string');
  }

  getFrameOfReferenceTransformationMatrixType(): string {
    const value = this.x0070030c;
    if (value === undefined) {
      throw new Error('FrameOfReferenceTransformationMatrixType is undefined');
    }
    return value;
  }

  // Registration Type Code Sequence
  get RegistrationTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0070030d;
  }

  get x0070030d(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0070030D']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRegistrationTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0070030d;
    if (value === undefined) {
      throw new Error('RegistrationTypeCodeSequence is undefined');
    }
    return value;
  }

  // Fiducial Identifier
  get FiducialIdentifier(): string | undefined {
    return this.x00700310;
  }

  get x00700310(): string | undefined {
    const value = this.dwResponse['00700310']?.Value;
    return convert(value?.[0], 0x00700310, 'string');
  }

  getFiducialIdentifier(): string {
    const value = this.x00700310;
    if (value === undefined) {
      throw new Error('FiducialIdentifier is undefined');
    }
    return value;
  }

  // Fiducial Identifier Code Sequence
  get FiducialIdentifierCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700311;
  }

  get x00700311(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700311']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFiducialIdentifierCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700311;
    if (value === undefined) {
      throw new Error('FiducialIdentifierCodeSequence is undefined');
    }
    return value;
  }

  // Contour Uncertainty Radius
  get ContourUncertaintyRadius(): number | undefined {
    return this.x00700312;
  }

  get x00700312(): number | undefined {
    const value = this.dwResponse['00700312']?.Value;
    return convert(value?.[0], 0x00700312, 'number');
  }

  getContourUncertaintyRadius(): number {
    const value = this.x00700312;
    if (value === undefined) {
      throw new Error('ContourUncertaintyRadius is undefined');
    }
    return value;
  }

  // Used Fiducials Sequence
  get UsedFiducialsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700314;
  }

  get x00700314(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700314']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getUsedFiducialsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700314;
    if (value === undefined) {
      throw new Error('UsedFiducialsSequence is undefined');
    }
    return value;
  }

  // Graphic Coordinates Data Sequence
  get GraphicCoordinatesDataSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700318;
  }

  get x00700318(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700318']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getGraphicCoordinatesDataSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700318;
    if (value === undefined) {
      throw new Error('GraphicCoordinatesDataSequence is undefined');
    }
    return value;
  }

  // Fiducial UID
  get FiducialUID(): string | undefined {
    return this.x0070031a;
  }

  get x0070031a(): string | undefined {
    const value = this.dwResponse['0070031A']?.Value;
    return convert(value?.[0], 0x0070031a, 'string');
  }

  getFiducialUID(): string {
    const value = this.x0070031a;
    if (value === undefined) {
      throw new Error('FiducialUID is undefined');
    }
    return value;
  }

  // Fiducial Set Sequence
  get FiducialSetSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0070031c;
  }

  get x0070031c(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0070031C']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFiducialSetSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0070031c;
    if (value === undefined) {
      throw new Error('FiducialSetSequence is undefined');
    }
    return value;
  }

  // Fiducial Sequence
  get FiducialSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0070031e;
  }

  get x0070031e(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0070031E']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFiducialSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0070031e;
    if (value === undefined) {
      throw new Error('FiducialSequence is undefined');
    }
    return value;
  }

  // Graphic Layer Recommended Display CIELab Value
  get GraphicLayerRecommendedDisplayCIELabValue(): Array<number | undefined> | undefined {
    return this.x00700401;
  }

  get x00700401(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00700401']?.Value;
    return convert(value, 0x00700401, 'Array<number | undefined>');
  }

  getGraphicLayerRecommendedDisplayCIELabValue(): Array<number | undefined> {
    const value = this.x00700401;
    if (value === undefined) {
      throw new Error('GraphicLayerRecommendedDisplayCIELabValue is undefined');
    }
    return value;
  }

  // Blending Sequence
  get BlendingSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700402;
  }

  get x00700402(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700402']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBlendingSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700402;
    if (value === undefined) {
      throw new Error('BlendingSequence is undefined');
    }
    return value;
  }

  // Relative Opacity
  get RelativeOpacity(): number | undefined {
    return this.x00700403;
  }

  get x00700403(): number | undefined {
    const value = this.dwResponse['00700403']?.Value;
    return convert(value?.[0], 0x00700403, 'number');
  }

  getRelativeOpacity(): number {
    const value = this.x00700403;
    if (value === undefined) {
      throw new Error('RelativeOpacity is undefined');
    }
    return value;
  }

  // Referenced Spatial Registration Sequence
  get ReferencedSpatialRegistrationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00700404;
  }

  get x00700404(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00700404']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedSpatialRegistrationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00700404;
    if (value === undefined) {
      throw new Error('ReferencedSpatialRegistrationSequence is undefined');
    }
    return value;
  }

  // Blending Position
  get BlendingPosition(): string | undefined {
    return this.x00700405;
  }

  get x00700405(): string | undefined {
    const value = this.dwResponse['00700405']?.Value;
    return convert(value?.[0], 0x00700405, 'string');
  }

  getBlendingPosition(): string {
    const value = this.x00700405;
    if (value === undefined) {
      throw new Error('BlendingPosition is undefined');
    }
    return value;
  }

  // Hanging Protocol Name
  get HangingProtocolName(): string | undefined {
    return this.x00720002;
  }

  get x00720002(): string | undefined {
    const value = this.dwResponse['00720002']?.Value;
    return convert(value?.[0], 0x00720002, 'string');
  }

  getHangingProtocolName(): string {
    const value = this.x00720002;
    if (value === undefined) {
      throw new Error('HangingProtocolName is undefined');
    }
    return value;
  }

  // Hanging Protocol Description
  get HangingProtocolDescription(): string | undefined {
    return this.x00720004;
  }

  get x00720004(): string | undefined {
    const value = this.dwResponse['00720004']?.Value;
    return convert(value?.[0], 0x00720004, 'string');
  }

  getHangingProtocolDescription(): string {
    const value = this.x00720004;
    if (value === undefined) {
      throw new Error('HangingProtocolDescription is undefined');
    }
    return value;
  }

  // Hanging Protocol Level
  get HangingProtocolLevel(): string | undefined {
    return this.x00720006;
  }

  get x00720006(): string | undefined {
    const value = this.dwResponse['00720006']?.Value;
    return convert(value?.[0], 0x00720006, 'string');
  }

  getHangingProtocolLevel(): string {
    const value = this.x00720006;
    if (value === undefined) {
      throw new Error('HangingProtocolLevel is undefined');
    }
    return value;
  }

  // Hanging Protocol Creator
  get HangingProtocolCreator(): string | undefined {
    return this.x00720008;
  }

  get x00720008(): string | undefined {
    const value = this.dwResponse['00720008']?.Value;
    return convert(value?.[0], 0x00720008, 'string');
  }

  getHangingProtocolCreator(): string {
    const value = this.x00720008;
    if (value === undefined) {
      throw new Error('HangingProtocolCreator is undefined');
    }
    return value;
  }

  // Hanging Protocol Creation DateTime
  get HangingProtocolCreationDateTime(): string | undefined {
    return this.x0072000a;
  }

  get x0072000a(): string | undefined {
    const value = this.dwResponse['0072000A']?.Value;
    return convert(value?.[0], 0x0072000a, 'string');
  }

  getHangingProtocolCreationDateTime(): string {
    const value = this.x0072000a;
    if (value === undefined) {
      throw new Error('HangingProtocolCreationDateTime is undefined');
    }
    return value;
  }

  // Hanging Protocol Definition Sequence
  get HangingProtocolDefinitionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0072000c;
  }

  get x0072000c(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0072000C']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getHangingProtocolDefinitionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0072000c;
    if (value === undefined) {
      throw new Error('HangingProtocolDefinitionSequence is undefined');
    }
    return value;
  }

  // Hanging Protocol User Identification Code Sequence
  get HangingProtocolUserIdentificationCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0072000e;
  }

  get x0072000e(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0072000E']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getHangingProtocolUserIdentificationCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0072000e;
    if (value === undefined) {
      throw new Error('HangingProtocolUserIdentificationCodeSequence is undefined');
    }
    return value;
  }

  // Hanging Protocol User Group Name
  get HangingProtocolUserGroupName(): string | undefined {
    return this.x00720010;
  }

  get x00720010(): string | undefined {
    const value = this.dwResponse['00720010']?.Value;
    return convert(value?.[0], 0x00720010, 'string');
  }

  getHangingProtocolUserGroupName(): string {
    const value = this.x00720010;
    if (value === undefined) {
      throw new Error('HangingProtocolUserGroupName is undefined');
    }
    return value;
  }

  // Source Hanging Protocol Sequence
  get SourceHangingProtocolSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00720012;
  }

  get x00720012(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00720012']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSourceHangingProtocolSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00720012;
    if (value === undefined) {
      throw new Error('SourceHangingProtocolSequence is undefined');
    }
    return value;
  }

  // Number of Priors Referenced
  get NumberOfPriorsReferenced(): number | undefined {
    return this.x00720014;
  }

  get x00720014(): number | undefined {
    const value = this.dwResponse['00720014']?.Value;
    return convert(value?.[0], 0x00720014, 'number');
  }

  getNumberOfPriorsReferenced(): number {
    const value = this.x00720014;
    if (value === undefined) {
      throw new Error('NumberOfPriorsReferenced is undefined');
    }
    return value;
  }

  // Image Sets Sequence
  get ImageSetsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00720020;
  }

  get x00720020(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00720020']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getImageSetsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00720020;
    if (value === undefined) {
      throw new Error('ImageSetsSequence is undefined');
    }
    return value;
  }

  // Image Set Selector Sequence
  get ImageSetSelectorSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00720022;
  }

  get x00720022(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00720022']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getImageSetSelectorSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00720022;
    if (value === undefined) {
      throw new Error('ImageSetSelectorSequence is undefined');
    }
    return value;
  }

  // Image Set Selector Usage Flag
  get ImageSetSelectorUsageFlag(): string | undefined {
    return this.x00720024;
  }

  get x00720024(): string | undefined {
    const value = this.dwResponse['00720024']?.Value;
    return convert(value?.[0], 0x00720024, 'string');
  }

  getImageSetSelectorUsageFlag(): string {
    const value = this.x00720024;
    if (value === undefined) {
      throw new Error('ImageSetSelectorUsageFlag is undefined');
    }
    return value;
  }

  // Selector Attribute
  get SelectorAttribute(): Uint16Array | undefined {
    return this.x00720026;
  }

  get x00720026(): Uint16Array | undefined {
    const value = this.dwResponse['00720026']?.Value;
    return convert(value?.[0], 0x00720026, 'Uint16Array');
  }

  getSelectorAttribute(): Uint16Array {
    const value = this.x00720026;
    if (value === undefined) {
      throw new Error('SelectorAttribute is undefined');
    }
    return value;
  }

  // Selector Value Number
  get SelectorValueNumber(): number | undefined {
    return this.x00720028;
  }

  get x00720028(): number | undefined {
    const value = this.dwResponse['00720028']?.Value;
    return convert(value?.[0], 0x00720028, 'number');
  }

  getSelectorValueNumber(): number {
    const value = this.x00720028;
    if (value === undefined) {
      throw new Error('SelectorValueNumber is undefined');
    }
    return value;
  }

  // Time Based Image Sets Sequence
  get TimeBasedImageSetsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00720030;
  }

  get x00720030(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00720030']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTimeBasedImageSetsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00720030;
    if (value === undefined) {
      throw new Error('TimeBasedImageSetsSequence is undefined');
    }
    return value;
  }

  // Image Set Number
  get ImageSetNumber(): number | undefined {
    return this.x00720032;
  }

  get x00720032(): number | undefined {
    const value = this.dwResponse['00720032']?.Value;
    return convert(value?.[0], 0x00720032, 'number');
  }

  getImageSetNumber(): number {
    const value = this.x00720032;
    if (value === undefined) {
      throw new Error('ImageSetNumber is undefined');
    }
    return value;
  }

  // Image Set Selector Category
  get ImageSetSelectorCategory(): string | undefined {
    return this.x00720034;
  }

  get x00720034(): string | undefined {
    const value = this.dwResponse['00720034']?.Value;
    return convert(value?.[0], 0x00720034, 'string');
  }

  getImageSetSelectorCategory(): string {
    const value = this.x00720034;
    if (value === undefined) {
      throw new Error('ImageSetSelectorCategory is undefined');
    }
    return value;
  }

  // Relative Time
  get RelativeTime(): Array<number | undefined> | undefined {
    return this.x00720038;
  }

  get x00720038(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00720038']?.Value;
    return convert(value, 0x00720038, 'Array<number | undefined>');
  }

  getRelativeTime(): Array<number | undefined> {
    const value = this.x00720038;
    if (value === undefined) {
      throw new Error('RelativeTime is undefined');
    }
    return value;
  }

  // Relative Time Units
  get RelativeTimeUnits(): string | undefined {
    return this.x0072003a;
  }

  get x0072003a(): string | undefined {
    const value = this.dwResponse['0072003A']?.Value;
    return convert(value?.[0], 0x0072003a, 'string');
  }

  getRelativeTimeUnits(): string {
    const value = this.x0072003a;
    if (value === undefined) {
      throw new Error('RelativeTimeUnits is undefined');
    }
    return value;
  }

  // Abstract Prior Value
  get AbstractPriorValue(): Array<Uint8Array | undefined> | undefined {
    return this.x0072003c;
  }

  get x0072003c(): Array<Uint8Array | undefined> | undefined {
    const value = this.dwResponse['0072003C']?.Value;
    return convert(value, 0x0072003c, 'Array<Uint8Array | undefined>');
  }

  getAbstractPriorValue(): Array<Uint8Array | undefined> {
    const value = this.x0072003c;
    if (value === undefined) {
      throw new Error('AbstractPriorValue is undefined');
    }
    return value;
  }

  // Abstract Prior Code Sequence
  get AbstractPriorCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0072003e;
  }

  get x0072003e(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0072003E']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAbstractPriorCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0072003e;
    if (value === undefined) {
      throw new Error('AbstractPriorCodeSequence is undefined');
    }
    return value;
  }

  // Image Set Label
  get ImageSetLabel(): string | undefined {
    return this.x00720040;
  }

  get x00720040(): string | undefined {
    const value = this.dwResponse['00720040']?.Value;
    return convert(value?.[0], 0x00720040, 'string');
  }

  getImageSetLabel(): string {
    const value = this.x00720040;
    if (value === undefined) {
      throw new Error('ImageSetLabel is undefined');
    }
    return value;
  }

  // Selector Attribute VR
  get SelectorAttributeVR(): string | undefined {
    return this.x00720050;
  }

  get x00720050(): string | undefined {
    const value = this.dwResponse['00720050']?.Value;
    return convert(value?.[0], 0x00720050, 'string');
  }

  getSelectorAttributeVR(): string {
    const value = this.x00720050;
    if (value === undefined) {
      throw new Error('SelectorAttributeVR is undefined');
    }
    return value;
  }

  // Selector Sequence Pointer
  get SelectorSequencePointer(): Array<Uint16Array | undefined> | undefined {
    return this.x00720052;
  }

  get x00720052(): Array<Uint16Array | undefined> | undefined {
    const value = this.dwResponse['00720052']?.Value;
    return convert(value, 0x00720052, 'Array<Uint16Array | undefined>');
  }

  getSelectorSequencePointer(): Array<Uint16Array | undefined> {
    const value = this.x00720052;
    if (value === undefined) {
      throw new Error('SelectorSequencePointer is undefined');
    }
    return value;
  }

  // Selector Sequence Pointer Private Creator
  get SelectorSequencePointerPrivateCreator(): Array<string | undefined> | undefined {
    return this.x00720054;
  }

  get x00720054(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00720054']?.Value;
    return convert(value, 0x00720054, 'Array<string | undefined>');
  }

  getSelectorSequencePointerPrivateCreator(): Array<string | undefined> {
    const value = this.x00720054;
    if (value === undefined) {
      throw new Error('SelectorSequencePointerPrivateCreator is undefined');
    }
    return value;
  }

  // Selector Attribute Private Creator
  get SelectorAttributePrivateCreator(): string | undefined {
    return this.x00720056;
  }

  get x00720056(): string | undefined {
    const value = this.dwResponse['00720056']?.Value;
    return convert(value?.[0], 0x00720056, 'string');
  }

  getSelectorAttributePrivateCreator(): string {
    const value = this.x00720056;
    if (value === undefined) {
      throw new Error('SelectorAttributePrivateCreator is undefined');
    }
    return value;
  }

  // Selector AT Value
  get SelectorATValue(): Array<Uint16Array | undefined> | undefined {
    return this.x00720060;
  }

  get x00720060(): Array<Uint16Array | undefined> | undefined {
    const value = this.dwResponse['00720060']?.Value;
    return convert(value, 0x00720060, 'Array<Uint16Array | undefined>');
  }

  getSelectorATValue(): Array<Uint16Array | undefined> {
    const value = this.x00720060;
    if (value === undefined) {
      throw new Error('SelectorATValue is undefined');
    }
    return value;
  }

  // Selector CS Value
  get SelectorCSValue(): Array<string | undefined> | undefined {
    return this.x00720062;
  }

  get x00720062(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00720062']?.Value;
    return convert(value, 0x00720062, 'Array<string | undefined>');
  }

  getSelectorCSValue(): Array<string | undefined> {
    const value = this.x00720062;
    if (value === undefined) {
      throw new Error('SelectorCSValue is undefined');
    }
    return value;
  }

  // Selector IS Value
  get SelectorISValue(): Array<number | undefined> | undefined {
    return this.x00720064;
  }

  get x00720064(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00720064']?.Value;
    return convert(value, 0x00720064, 'Array<number | undefined>');
  }

  getSelectorISValue(): Array<number | undefined> {
    const value = this.x00720064;
    if (value === undefined) {
      throw new Error('SelectorISValue is undefined');
    }
    return value;
  }

  // Selector LO Value
  get SelectorLOValue(): Array<string | undefined> | undefined {
    return this.x00720066;
  }

  get x00720066(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00720066']?.Value;
    return convert(value, 0x00720066, 'Array<string | undefined>');
  }

  getSelectorLOValue(): Array<string | undefined> {
    const value = this.x00720066;
    if (value === undefined) {
      throw new Error('SelectorLOValue is undefined');
    }
    return value;
  }

  // Selector PN Value
  get SelectorPNValue(): Array<any | undefined> | undefined {
    return this.x0072006a;
  }

  get x0072006a(): Array<any | undefined> | undefined {
    const value = this.dwResponse['0072006A']?.Value;
    return convert(value, 0x0072006a, 'Array<any | undefined>');
  }

  getSelectorPNValue(): Array<any | undefined> {
    const value = this.x0072006a;
    if (value === undefined) {
      throw new Error('SelectorPNValue is undefined');
    }
    return value;
  }

  // Selector SH Value
  get SelectorSHValue(): Array<string | undefined> | undefined {
    return this.x0072006c;
  }

  get x0072006c(): Array<string | undefined> | undefined {
    const value = this.dwResponse['0072006C']?.Value;
    return convert(value, 0x0072006c, 'Array<string | undefined>');
  }

  getSelectorSHValue(): Array<string | undefined> {
    const value = this.x0072006c;
    if (value === undefined) {
      throw new Error('SelectorSHValue is undefined');
    }
    return value;
  }

  // Selector DS Value
  get SelectorDSValue(): Array<number | undefined> | undefined {
    return this.x00720072;
  }

  get x00720072(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00720072']?.Value;
    return convert(value, 0x00720072, 'Array<number | undefined>');
  }

  getSelectorDSValue(): Array<number | undefined> {
    const value = this.x00720072;
    if (value === undefined) {
      throw new Error('SelectorDSValue is undefined');
    }
    return value;
  }

  // Selector FD Value
  get SelectorFDValue(): Array<number | undefined> | undefined {
    return this.x00720074;
  }

  get x00720074(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00720074']?.Value;
    return convert(value, 0x00720074, 'Array<number | undefined>');
  }

  getSelectorFDValue(): Array<number | undefined> {
    const value = this.x00720074;
    if (value === undefined) {
      throw new Error('SelectorFDValue is undefined');
    }
    return value;
  }

  // Selector FL Value
  get SelectorFLValue(): Array<number | undefined> | undefined {
    return this.x00720076;
  }

  get x00720076(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00720076']?.Value;
    return convert(value, 0x00720076, 'Array<number | undefined>');
  }

  getSelectorFLValue(): Array<number | undefined> {
    const value = this.x00720076;
    if (value === undefined) {
      throw new Error('SelectorFLValue is undefined');
    }
    return value;
  }

  // Selector UL Value
  get SelectorULValue(): Array<number | undefined> | undefined {
    return this.x00720078;
  }

  get x00720078(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00720078']?.Value;
    return convert(value, 0x00720078, 'Array<number | undefined>');
  }

  getSelectorULValue(): Array<number | undefined> {
    const value = this.x00720078;
    if (value === undefined) {
      throw new Error('SelectorULValue is undefined');
    }
    return value;
  }

  // Selector US Value
  get SelectorUSValue(): Array<number | undefined> | undefined {
    return this.x0072007a;
  }

  get x0072007a(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0072007A']?.Value;
    return convert(value, 0x0072007a, 'Array<number | undefined>');
  }

  getSelectorUSValue(): Array<number | undefined> {
    const value = this.x0072007a;
    if (value === undefined) {
      throw new Error('SelectorUSValue is undefined');
    }
    return value;
  }

  // Selector SL Value
  get SelectorSLValue(): Array<number | undefined> | undefined {
    return this.x0072007c;
  }

  get x0072007c(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0072007C']?.Value;
    return convert(value, 0x0072007c, 'Array<number | undefined>');
  }

  getSelectorSLValue(): Array<number | undefined> {
    const value = this.x0072007c;
    if (value === undefined) {
      throw new Error('SelectorSLValue is undefined');
    }
    return value;
  }

  // Selector SS Value
  get SelectorSSValue(): Array<Uint8Array | undefined> | undefined {
    return this.x0072007e;
  }

  get x0072007e(): Array<Uint8Array | undefined> | undefined {
    const value = this.dwResponse['0072007E']?.Value;
    return convert(value, 0x0072007e, 'Array<Uint8Array | undefined>');
  }

  getSelectorSSValue(): Array<Uint8Array | undefined> {
    const value = this.x0072007e;
    if (value === undefined) {
      throw new Error('SelectorSSValue is undefined');
    }
    return value;
  }

  // Selector Code Sequence Value
  get SelectorCodeSequenceValue(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00720080;
  }

  get x00720080(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00720080']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSelectorCodeSequenceValue(): Array<Partial<Dataset> | undefined> {
    const value = this.x00720080;
    if (value === undefined) {
      throw new Error('SelectorCodeSequenceValue is undefined');
    }
    return value;
  }

  // Number of Screens
  get NumberOfScreens(): number | undefined {
    return this.x00720100;
  }

  get x00720100(): number | undefined {
    const value = this.dwResponse['00720100']?.Value;
    return convert(value?.[0], 0x00720100, 'number');
  }

  getNumberOfScreens(): number {
    const value = this.x00720100;
    if (value === undefined) {
      throw new Error('NumberOfScreens is undefined');
    }
    return value;
  }

  // Nominal Screen Definition Sequence
  get NominalScreenDefinitionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00720102;
  }

  get x00720102(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00720102']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getNominalScreenDefinitionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00720102;
    if (value === undefined) {
      throw new Error('NominalScreenDefinitionSequence is undefined');
    }
    return value;
  }

  // Number of Vertical Pixels
  get NumberOfVerticalPixels(): number | undefined {
    return this.x00720104;
  }

  get x00720104(): number | undefined {
    const value = this.dwResponse['00720104']?.Value;
    return convert(value?.[0], 0x00720104, 'number');
  }

  getNumberOfVerticalPixels(): number {
    const value = this.x00720104;
    if (value === undefined) {
      throw new Error('NumberOfVerticalPixels is undefined');
    }
    return value;
  }

  // Number of Horizontal Pixels
  get NumberOfHorizontalPixels(): number | undefined {
    return this.x00720106;
  }

  get x00720106(): number | undefined {
    const value = this.dwResponse['00720106']?.Value;
    return convert(value?.[0], 0x00720106, 'number');
  }

  getNumberOfHorizontalPixels(): number {
    const value = this.x00720106;
    if (value === undefined) {
      throw new Error('NumberOfHorizontalPixels is undefined');
    }
    return value;
  }

  // Display Environment Spatial Position
  get DisplayEnvironmentSpatialPosition(): Array<number | undefined> | undefined {
    return this.x00720108;
  }

  get x00720108(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00720108']?.Value;
    return convert(value, 0x00720108, 'Array<number | undefined>');
  }

  getDisplayEnvironmentSpatialPosition(): Array<number | undefined> {
    const value = this.x00720108;
    if (value === undefined) {
      throw new Error('DisplayEnvironmentSpatialPosition is undefined');
    }
    return value;
  }

  // Screen Minimum Grayscale Bit Depth
  get ScreenMinimumGrayscaleBitDepth(): number | undefined {
    return this.x0072010a;
  }

  get x0072010a(): number | undefined {
    const value = this.dwResponse['0072010A']?.Value;
    return convert(value?.[0], 0x0072010a, 'number');
  }

  getScreenMinimumGrayscaleBitDepth(): number {
    const value = this.x0072010a;
    if (value === undefined) {
      throw new Error('ScreenMinimumGrayscaleBitDepth is undefined');
    }
    return value;
  }

  // Screen Minimum Color Bit Depth
  get ScreenMinimumColorBitDepth(): number | undefined {
    return this.x0072010c;
  }

  get x0072010c(): number | undefined {
    const value = this.dwResponse['0072010C']?.Value;
    return convert(value?.[0], 0x0072010c, 'number');
  }

  getScreenMinimumColorBitDepth(): number {
    const value = this.x0072010c;
    if (value === undefined) {
      throw new Error('ScreenMinimumColorBitDepth is undefined');
    }
    return value;
  }

  // Application Maximum Repaint Time
  get ApplicationMaximumRepaintTime(): number | undefined {
    return this.x0072010e;
  }

  get x0072010e(): number | undefined {
    const value = this.dwResponse['0072010E']?.Value;
    return convert(value?.[0], 0x0072010e, 'number');
  }

  getApplicationMaximumRepaintTime(): number {
    const value = this.x0072010e;
    if (value === undefined) {
      throw new Error('ApplicationMaximumRepaintTime is undefined');
    }
    return value;
  }

  // Display Sets Sequence
  get DisplaySetsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00720200;
  }

  get x00720200(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00720200']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDisplaySetsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00720200;
    if (value === undefined) {
      throw new Error('DisplaySetsSequence is undefined');
    }
    return value;
  }

  // Display Set Number
  get DisplaySetNumber(): number | undefined {
    return this.x00720202;
  }

  get x00720202(): number | undefined {
    const value = this.dwResponse['00720202']?.Value;
    return convert(value?.[0], 0x00720202, 'number');
  }

  getDisplaySetNumber(): number {
    const value = this.x00720202;
    if (value === undefined) {
      throw new Error('DisplaySetNumber is undefined');
    }
    return value;
  }

  // Display Set Label
  get DisplaySetLabel(): string | undefined {
    return this.x00720203;
  }

  get x00720203(): string | undefined {
    const value = this.dwResponse['00720203']?.Value;
    return convert(value?.[0], 0x00720203, 'string');
  }

  getDisplaySetLabel(): string {
    const value = this.x00720203;
    if (value === undefined) {
      throw new Error('DisplaySetLabel is undefined');
    }
    return value;
  }

  // Display Set Presentation Group
  get DisplaySetPresentationGroup(): number | undefined {
    return this.x00720204;
  }

  get x00720204(): number | undefined {
    const value = this.dwResponse['00720204']?.Value;
    return convert(value?.[0], 0x00720204, 'number');
  }

  getDisplaySetPresentationGroup(): number {
    const value = this.x00720204;
    if (value === undefined) {
      throw new Error('DisplaySetPresentationGroup is undefined');
    }
    return value;
  }

  // Display Set Presentation Group Description
  get DisplaySetPresentationGroupDescription(): string | undefined {
    return this.x00720206;
  }

  get x00720206(): string | undefined {
    const value = this.dwResponse['00720206']?.Value;
    return convert(value?.[0], 0x00720206, 'string');
  }

  getDisplaySetPresentationGroupDescription(): string {
    const value = this.x00720206;
    if (value === undefined) {
      throw new Error('DisplaySetPresentationGroupDescription is undefined');
    }
    return value;
  }

  // Partial Data Display Handling
  get PartialDataDisplayHandling(): string | undefined {
    return this.x00720208;
  }

  get x00720208(): string | undefined {
    const value = this.dwResponse['00720208']?.Value;
    return convert(value?.[0], 0x00720208, 'string');
  }

  getPartialDataDisplayHandling(): string {
    const value = this.x00720208;
    if (value === undefined) {
      throw new Error('PartialDataDisplayHandling is undefined');
    }
    return value;
  }

  // Synchronized Scrolling Sequence
  get SynchronizedScrollingSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00720210;
  }

  get x00720210(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00720210']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSynchronizedScrollingSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00720210;
    if (value === undefined) {
      throw new Error('SynchronizedScrollingSequence is undefined');
    }
    return value;
  }

  // Display Set Scrolling Group
  get DisplaySetScrollingGroup(): Array<number | undefined> | undefined {
    return this.x00720212;
  }

  get x00720212(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00720212']?.Value;
    return convert(value, 0x00720212, 'Array<number | undefined>');
  }

  getDisplaySetScrollingGroup(): Array<number | undefined> {
    const value = this.x00720212;
    if (value === undefined) {
      throw new Error('DisplaySetScrollingGroup is undefined');
    }
    return value;
  }

  // Navigation Indicator Sequence
  get NavigationIndicatorSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00720214;
  }

  get x00720214(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00720214']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getNavigationIndicatorSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00720214;
    if (value === undefined) {
      throw new Error('NavigationIndicatorSequence is undefined');
    }
    return value;
  }

  // Navigation Display Set
  get NavigationDisplaySet(): number | undefined {
    return this.x00720216;
  }

  get x00720216(): number | undefined {
    const value = this.dwResponse['00720216']?.Value;
    return convert(value?.[0], 0x00720216, 'number');
  }

  getNavigationDisplaySet(): number {
    const value = this.x00720216;
    if (value === undefined) {
      throw new Error('NavigationDisplaySet is undefined');
    }
    return value;
  }

  // Reference Display Sets
  get ReferenceDisplaySets(): Array<number | undefined> | undefined {
    return this.x00720218;
  }

  get x00720218(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00720218']?.Value;
    return convert(value, 0x00720218, 'Array<number | undefined>');
  }

  getReferenceDisplaySets(): Array<number | undefined> {
    const value = this.x00720218;
    if (value === undefined) {
      throw new Error('ReferenceDisplaySets is undefined');
    }
    return value;
  }

  // Image Boxes Sequence
  get ImageBoxesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00720300;
  }

  get x00720300(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00720300']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getImageBoxesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00720300;
    if (value === undefined) {
      throw new Error('ImageBoxesSequence is undefined');
    }
    return value;
  }

  // Image Box Number
  get ImageBoxNumber(): number | undefined {
    return this.x00720302;
  }

  get x00720302(): number | undefined {
    const value = this.dwResponse['00720302']?.Value;
    return convert(value?.[0], 0x00720302, 'number');
  }

  getImageBoxNumber(): number {
    const value = this.x00720302;
    if (value === undefined) {
      throw new Error('ImageBoxNumber is undefined');
    }
    return value;
  }

  // Image Box Layout Type
  get ImageBoxLayoutType(): string | undefined {
    return this.x00720304;
  }

  get x00720304(): string | undefined {
    const value = this.dwResponse['00720304']?.Value;
    return convert(value?.[0], 0x00720304, 'string');
  }

  getImageBoxLayoutType(): string {
    const value = this.x00720304;
    if (value === undefined) {
      throw new Error('ImageBoxLayoutType is undefined');
    }
    return value;
  }

  // Image Box Tile Horizontal Dimension
  get ImageBoxTileHorizontalDimension(): number | undefined {
    return this.x00720306;
  }

  get x00720306(): number | undefined {
    const value = this.dwResponse['00720306']?.Value;
    return convert(value?.[0], 0x00720306, 'number');
  }

  getImageBoxTileHorizontalDimension(): number {
    const value = this.x00720306;
    if (value === undefined) {
      throw new Error('ImageBoxTileHorizontalDimension is undefined');
    }
    return value;
  }

  // Image Box Tile Vertical Dimension
  get ImageBoxTileVerticalDimension(): number | undefined {
    return this.x00720308;
  }

  get x00720308(): number | undefined {
    const value = this.dwResponse['00720308']?.Value;
    return convert(value?.[0], 0x00720308, 'number');
  }

  getImageBoxTileVerticalDimension(): number {
    const value = this.x00720308;
    if (value === undefined) {
      throw new Error('ImageBoxTileVerticalDimension is undefined');
    }
    return value;
  }

  // Image Box Scroll Direction
  get ImageBoxScrollDirection(): string | undefined {
    return this.x00720310;
  }

  get x00720310(): string | undefined {
    const value = this.dwResponse['00720310']?.Value;
    return convert(value?.[0], 0x00720310, 'string');
  }

  getImageBoxScrollDirection(): string {
    const value = this.x00720310;
    if (value === undefined) {
      throw new Error('ImageBoxScrollDirection is undefined');
    }
    return value;
  }

  // Image Box Small Scroll Type
  get ImageBoxSmallScrollType(): string | undefined {
    return this.x00720312;
  }

  get x00720312(): string | undefined {
    const value = this.dwResponse['00720312']?.Value;
    return convert(value?.[0], 0x00720312, 'string');
  }

  getImageBoxSmallScrollType(): string {
    const value = this.x00720312;
    if (value === undefined) {
      throw new Error('ImageBoxSmallScrollType is undefined');
    }
    return value;
  }

  // Image Box Small Scroll Amount
  get ImageBoxSmallScrollAmount(): number | undefined {
    return this.x00720314;
  }

  get x00720314(): number | undefined {
    const value = this.dwResponse['00720314']?.Value;
    return convert(value?.[0], 0x00720314, 'number');
  }

  getImageBoxSmallScrollAmount(): number {
    const value = this.x00720314;
    if (value === undefined) {
      throw new Error('ImageBoxSmallScrollAmount is undefined');
    }
    return value;
  }

  // Image Box Large Scroll Type
  get ImageBoxLargeScrollType(): string | undefined {
    return this.x00720316;
  }

  get x00720316(): string | undefined {
    const value = this.dwResponse['00720316']?.Value;
    return convert(value?.[0], 0x00720316, 'string');
  }

  getImageBoxLargeScrollType(): string {
    const value = this.x00720316;
    if (value === undefined) {
      throw new Error('ImageBoxLargeScrollType is undefined');
    }
    return value;
  }

  // Image Box Large Scroll Amount
  get ImageBoxLargeScrollAmount(): number | undefined {
    return this.x00720318;
  }

  get x00720318(): number | undefined {
    const value = this.dwResponse['00720318']?.Value;
    return convert(value?.[0], 0x00720318, 'number');
  }

  getImageBoxLargeScrollAmount(): number {
    const value = this.x00720318;
    if (value === undefined) {
      throw new Error('ImageBoxLargeScrollAmount is undefined');
    }
    return value;
  }

  // Image Box Overlap Priority
  get ImageBoxOverlapPriority(): number | undefined {
    return this.x00720320;
  }

  get x00720320(): number | undefined {
    const value = this.dwResponse['00720320']?.Value;
    return convert(value?.[0], 0x00720320, 'number');
  }

  getImageBoxOverlapPriority(): number {
    const value = this.x00720320;
    if (value === undefined) {
      throw new Error('ImageBoxOverlapPriority is undefined');
    }
    return value;
  }

  // Cine Relative to Real-Time
  get CineRelativeToRealTime(): number | undefined {
    return this.x00720330;
  }

  get x00720330(): number | undefined {
    const value = this.dwResponse['00720330']?.Value;
    return convert(value?.[0], 0x00720330, 'number');
  }

  getCineRelativeToRealTime(): number {
    const value = this.x00720330;
    if (value === undefined) {
      throw new Error('CineRelativeToRealTime is undefined');
    }
    return value;
  }

  // Filter Operations Sequence
  get FilterOperationsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00720400;
  }

  get x00720400(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00720400']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFilterOperationsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00720400;
    if (value === undefined) {
      throw new Error('FilterOperationsSequence is undefined');
    }
    return value;
  }

  // Filter-by Category
  get FilterByCategory(): string | undefined {
    return this.x00720402;
  }

  get x00720402(): string | undefined {
    const value = this.dwResponse['00720402']?.Value;
    return convert(value?.[0], 0x00720402, 'string');
  }

  getFilterByCategory(): string {
    const value = this.x00720402;
    if (value === undefined) {
      throw new Error('FilterByCategory is undefined');
    }
    return value;
  }

  // Filter-by Attribute Presence
  get FilterByAttributePresence(): string | undefined {
    return this.x00720404;
  }

  get x00720404(): string | undefined {
    const value = this.dwResponse['00720404']?.Value;
    return convert(value?.[0], 0x00720404, 'string');
  }

  getFilterByAttributePresence(): string {
    const value = this.x00720404;
    if (value === undefined) {
      throw new Error('FilterByAttributePresence is undefined');
    }
    return value;
  }

  // Filter-by Operator
  get FilterByOperator(): string | undefined {
    return this.x00720406;
  }

  get x00720406(): string | undefined {
    const value = this.dwResponse['00720406']?.Value;
    return convert(value?.[0], 0x00720406, 'string');
  }

  getFilterByOperator(): string {
    const value = this.x00720406;
    if (value === undefined) {
      throw new Error('FilterByOperator is undefined');
    }
    return value;
  }

  // Structured Display Background CIELab Value
  get StructuredDisplayBackgroundCIELabValue(): Array<number | undefined> | undefined {
    return this.x00720420;
  }

  get x00720420(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00720420']?.Value;
    return convert(value, 0x00720420, 'Array<number | undefined>');
  }

  getStructuredDisplayBackgroundCIELabValue(): Array<number | undefined> {
    const value = this.x00720420;
    if (value === undefined) {
      throw new Error('StructuredDisplayBackgroundCIELabValue is undefined');
    }
    return value;
  }

  // Empty Image Box CIELab Value
  get EmptyImageBoxCIELabValue(): Array<number | undefined> | undefined {
    return this.x00720421;
  }

  get x00720421(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00720421']?.Value;
    return convert(value, 0x00720421, 'Array<number | undefined>');
  }

  getEmptyImageBoxCIELabValue(): Array<number | undefined> {
    const value = this.x00720421;
    if (value === undefined) {
      throw new Error('EmptyImageBoxCIELabValue is undefined');
    }
    return value;
  }

  // Structured Display Image Box Sequence
  get StructuredDisplayImageBoxSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00720422;
  }

  get x00720422(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00720422']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getStructuredDisplayImageBoxSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00720422;
    if (value === undefined) {
      throw new Error('StructuredDisplayImageBoxSequence is undefined');
    }
    return value;
  }

  // Structured Display Text Box Sequence
  get StructuredDisplayTextBoxSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00720424;
  }

  get x00720424(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00720424']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getStructuredDisplayTextBoxSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00720424;
    if (value === undefined) {
      throw new Error('StructuredDisplayTextBoxSequence is undefined');
    }
    return value;
  }

  // Referenced First Frame Sequence
  get ReferencedFirstFrameSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00720427;
  }

  get x00720427(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00720427']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedFirstFrameSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00720427;
    if (value === undefined) {
      throw new Error('ReferencedFirstFrameSequence is undefined');
    }
    return value;
  }

  // Image Box Synchronization Sequence
  get ImageBoxSynchronizationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00720430;
  }

  get x00720430(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00720430']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getImageBoxSynchronizationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00720430;
    if (value === undefined) {
      throw new Error('ImageBoxSynchronizationSequence is undefined');
    }
    return value;
  }

  // Synchronized Image Box List
  get SynchronizedImageBoxList(): Array<number | undefined> | undefined {
    return this.x00720432;
  }

  get x00720432(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00720432']?.Value;
    return convert(value, 0x00720432, 'Array<number | undefined>');
  }

  getSynchronizedImageBoxList(): Array<number | undefined> {
    const value = this.x00720432;
    if (value === undefined) {
      throw new Error('SynchronizedImageBoxList is undefined');
    }
    return value;
  }

  // Type of Synchronization
  get TypeOfSynchronization(): string | undefined {
    return this.x00720434;
  }

  get x00720434(): string | undefined {
    const value = this.dwResponse['00720434']?.Value;
    return convert(value?.[0], 0x00720434, 'string');
  }

  getTypeOfSynchronization(): string {
    const value = this.x00720434;
    if (value === undefined) {
      throw new Error('TypeOfSynchronization is undefined');
    }
    return value;
  }

  // Blending Operation Type
  get BlendingOperationType(): string | undefined {
    return this.x00720500;
  }

  get x00720500(): string | undefined {
    const value = this.dwResponse['00720500']?.Value;
    return convert(value?.[0], 0x00720500, 'string');
  }

  getBlendingOperationType(): string {
    const value = this.x00720500;
    if (value === undefined) {
      throw new Error('BlendingOperationType is undefined');
    }
    return value;
  }

  // Reformatting Operation Type
  get ReformattingOperationType(): string | undefined {
    return this.x00720510;
  }

  get x00720510(): string | undefined {
    const value = this.dwResponse['00720510']?.Value;
    return convert(value?.[0], 0x00720510, 'string');
  }

  getReformattingOperationType(): string {
    const value = this.x00720510;
    if (value === undefined) {
      throw new Error('ReformattingOperationType is undefined');
    }
    return value;
  }

  // Reformatting Thickness
  get ReformattingThickness(): number | undefined {
    return this.x00720512;
  }

  get x00720512(): number | undefined {
    const value = this.dwResponse['00720512']?.Value;
    return convert(value?.[0], 0x00720512, 'number');
  }

  getReformattingThickness(): number {
    const value = this.x00720512;
    if (value === undefined) {
      throw new Error('ReformattingThickness is undefined');
    }
    return value;
  }

  // Reformatting Interval
  get ReformattingInterval(): number | undefined {
    return this.x00720514;
  }

  get x00720514(): number | undefined {
    const value = this.dwResponse['00720514']?.Value;
    return convert(value?.[0], 0x00720514, 'number');
  }

  getReformattingInterval(): number {
    const value = this.x00720514;
    if (value === undefined) {
      throw new Error('ReformattingInterval is undefined');
    }
    return value;
  }

  // Reformatting Operation Initial View Direction
  get ReformattingOperationInitialViewDirection(): string | undefined {
    return this.x00720516;
  }

  get x00720516(): string | undefined {
    const value = this.dwResponse['00720516']?.Value;
    return convert(value?.[0], 0x00720516, 'string');
  }

  getReformattingOperationInitialViewDirection(): string {
    const value = this.x00720516;
    if (value === undefined) {
      throw new Error('ReformattingOperationInitialViewDirection is undefined');
    }
    return value;
  }

  // 3D Rendering Type
  get ThreeDRenderingType(): Array<string | undefined> | undefined {
    return this.x00720520;
  }

  get x00720520(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00720520']?.Value;
    return convert(value, 0x00720520, 'Array<string | undefined>');
  }

  getThreeDRenderingType(): Array<string | undefined> {
    const value = this.x00720520;
    if (value === undefined) {
      throw new Error('ThreeDRenderingType is undefined');
    }
    return value;
  }

  // Sorting Operations Sequence
  get SortingOperationsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00720600;
  }

  get x00720600(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00720600']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSortingOperationsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00720600;
    if (value === undefined) {
      throw new Error('SortingOperationsSequence is undefined');
    }
    return value;
  }

  // Sort-by Category
  get SortByCategory(): string | undefined {
    return this.x00720602;
  }

  get x00720602(): string | undefined {
    const value = this.dwResponse['00720602']?.Value;
    return convert(value?.[0], 0x00720602, 'string');
  }

  getSortByCategory(): string {
    const value = this.x00720602;
    if (value === undefined) {
      throw new Error('SortByCategory is undefined');
    }
    return value;
  }

  // Sorting Direction
  get SortingDirection(): string | undefined {
    return this.x00720604;
  }

  get x00720604(): string | undefined {
    const value = this.dwResponse['00720604']?.Value;
    return convert(value?.[0], 0x00720604, 'string');
  }

  getSortingDirection(): string {
    const value = this.x00720604;
    if (value === undefined) {
      throw new Error('SortingDirection is undefined');
    }
    return value;
  }

  // Display Set Patient Orientation
  get DisplaySetPatientOrientation(): Array<string | undefined> | undefined {
    return this.x00720700;
  }

  get x00720700(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00720700']?.Value;
    return convert(value, 0x00720700, 'Array<string | undefined>');
  }

  getDisplaySetPatientOrientation(): Array<string | undefined> {
    const value = this.x00720700;
    if (value === undefined) {
      throw new Error('DisplaySetPatientOrientation is undefined');
    }
    return value;
  }

  // VOI Type
  get VOIType(): string | undefined {
    return this.x00720702;
  }

  get x00720702(): string | undefined {
    const value = this.dwResponse['00720702']?.Value;
    return convert(value?.[0], 0x00720702, 'string');
  }

  getVOIType(): string {
    const value = this.x00720702;
    if (value === undefined) {
      throw new Error('VOIType is undefined');
    }
    return value;
  }

  // Pseudo-Color Type
  get PseudoColorType(): string | undefined {
    return this.x00720704;
  }

  get x00720704(): string | undefined {
    const value = this.dwResponse['00720704']?.Value;
    return convert(value?.[0], 0x00720704, 'string');
  }

  getPseudoColorType(): string {
    const value = this.x00720704;
    if (value === undefined) {
      throw new Error('PseudoColorType is undefined');
    }
    return value;
  }

  // Pseudo-Color Palette Instance Reference Sequence
  get PseudoColorPaletteInstanceReferenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00720705;
  }

  get x00720705(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00720705']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPseudoColorPaletteInstanceReferenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00720705;
    if (value === undefined) {
      throw new Error('PseudoColorPaletteInstanceReferenceSequence is undefined');
    }
    return value;
  }

  // Show Grayscale Inverted
  get ShowGrayscaleInverted(): string | undefined {
    return this.x00720706;
  }

  get x00720706(): string | undefined {
    const value = this.dwResponse['00720706']?.Value;
    return convert(value?.[0], 0x00720706, 'string');
  }

  getShowGrayscaleInverted(): string {
    const value = this.x00720706;
    if (value === undefined) {
      throw new Error('ShowGrayscaleInverted is undefined');
    }
    return value;
  }

  // Show Image True Size Flag
  get ShowImageTrueSizeFlag(): string | undefined {
    return this.x00720710;
  }

  get x00720710(): string | undefined {
    const value = this.dwResponse['00720710']?.Value;
    return convert(value?.[0], 0x00720710, 'string');
  }

  getShowImageTrueSizeFlag(): string {
    const value = this.x00720710;
    if (value === undefined) {
      throw new Error('ShowImageTrueSizeFlag is undefined');
    }
    return value;
  }

  // Show Graphic Annotation Flag
  get ShowGraphicAnnotationFlag(): string | undefined {
    return this.x00720712;
  }

  get x00720712(): string | undefined {
    const value = this.dwResponse['00720712']?.Value;
    return convert(value?.[0], 0x00720712, 'string');
  }

  getShowGraphicAnnotationFlag(): string {
    const value = this.x00720712;
    if (value === undefined) {
      throw new Error('ShowGraphicAnnotationFlag is undefined');
    }
    return value;
  }

  // Show Patient Demographics Flag
  get ShowPatientDemographicsFlag(): string | undefined {
    return this.x00720714;
  }

  get x00720714(): string | undefined {
    const value = this.dwResponse['00720714']?.Value;
    return convert(value?.[0], 0x00720714, 'string');
  }

  getShowPatientDemographicsFlag(): string {
    const value = this.x00720714;
    if (value === undefined) {
      throw new Error('ShowPatientDemographicsFlag is undefined');
    }
    return value;
  }

  // Show Acquisition Techniques Flag
  get ShowAcquisitionTechniquesFlag(): string | undefined {
    return this.x00720716;
  }

  get x00720716(): string | undefined {
    const value = this.dwResponse['00720716']?.Value;
    return convert(value?.[0], 0x00720716, 'string');
  }

  getShowAcquisitionTechniquesFlag(): string {
    const value = this.x00720716;
    if (value === undefined) {
      throw new Error('ShowAcquisitionTechniquesFlag is undefined');
    }
    return value;
  }

  // Display Set Horizontal Justification
  get DisplaySetHorizontalJustification(): string | undefined {
    return this.x00720717;
  }

  get x00720717(): string | undefined {
    const value = this.dwResponse['00720717']?.Value;
    return convert(value?.[0], 0x00720717, 'string');
  }

  getDisplaySetHorizontalJustification(): string {
    const value = this.x00720717;
    if (value === undefined) {
      throw new Error('DisplaySetHorizontalJustification is undefined');
    }
    return value;
  }

  // Display Set Vertical Justification
  get DisplaySetVerticalJustification(): string | undefined {
    return this.x00720718;
  }

  get x00720718(): string | undefined {
    const value = this.dwResponse['00720718']?.Value;
    return convert(value?.[0], 0x00720718, 'string');
  }

  getDisplaySetVerticalJustification(): string {
    const value = this.x00720718;
    if (value === undefined) {
      throw new Error('DisplaySetVerticalJustification is undefined');
    }
    return value;
  }

  // Continuation Start Meterset
  get ContinuationStartMeterset(): number | undefined {
    return this.x00740120;
  }

  get x00740120(): number | undefined {
    const value = this.dwResponse['00740120']?.Value;
    return convert(value?.[0], 0x00740120, 'number');
  }

  getContinuationStartMeterset(): number {
    const value = this.x00740120;
    if (value === undefined) {
      throw new Error('ContinuationStartMeterset is undefined');
    }
    return value;
  }

  // Continuation End Meterset
  get ContinuationEndMeterset(): number | undefined {
    return this.x00740121;
  }

  get x00740121(): number | undefined {
    const value = this.dwResponse['00740121']?.Value;
    return convert(value?.[0], 0x00740121, 'number');
  }

  getContinuationEndMeterset(): number {
    const value = this.x00740121;
    if (value === undefined) {
      throw new Error('ContinuationEndMeterset is undefined');
    }
    return value;
  }

  // Procedure Step State
  get ProcedureStepState(): string | undefined {
    return this.x00741000;
  }

  get x00741000(): string | undefined {
    const value = this.dwResponse['00741000']?.Value;
    return convert(value?.[0], 0x00741000, 'string');
  }

  getProcedureStepState(): string {
    const value = this.x00741000;
    if (value === undefined) {
      throw new Error('ProcedureStepState is undefined');
    }
    return value;
  }

  // Procedure Step Progress Information Sequence
  get ProcedureStepProgressInformationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00741002;
  }

  get x00741002(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00741002']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getProcedureStepProgressInformationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00741002;
    if (value === undefined) {
      throw new Error('ProcedureStepProgressInformationSequence is undefined');
    }
    return value;
  }

  // Procedure Step Progress
  get ProcedureStepProgress(): number | undefined {
    return this.x00741004;
  }

  get x00741004(): number | undefined {
    const value = this.dwResponse['00741004']?.Value;
    return convert(value?.[0], 0x00741004, 'number');
  }

  getProcedureStepProgress(): number {
    const value = this.x00741004;
    if (value === undefined) {
      throw new Error('ProcedureStepProgress is undefined');
    }
    return value;
  }

  // Procedure Step Communications URI Sequence
  get ProcedureStepCommunicationsURISequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00741008;
  }

  get x00741008(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00741008']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getProcedureStepCommunicationsURISequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00741008;
    if (value === undefined) {
      throw new Error('ProcedureStepCommunicationsURISequence is undefined');
    }
    return value;
  }

  // Contact Display Name
  get ContactDisplayName(): string | undefined {
    return this.x0074100c;
  }

  get x0074100c(): string | undefined {
    const value = this.dwResponse['0074100C']?.Value;
    return convert(value?.[0], 0x0074100c, 'string');
  }

  getContactDisplayName(): string {
    const value = this.x0074100c;
    if (value === undefined) {
      throw new Error('ContactDisplayName is undefined');
    }
    return value;
  }

  // Procedure Step Discontinuation Reason Code Sequence
  get ProcedureStepDiscontinuationReasonCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0074100e;
  }

  get x0074100e(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0074100E']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getProcedureStepDiscontinuationReasonCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0074100e;
    if (value === undefined) {
      throw new Error('ProcedureStepDiscontinuationReasonCodeSequence is undefined');
    }
    return value;
  }

  // Beam Task Sequence
  get BeamTaskSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00741020;
  }

  get x00741020(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00741020']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBeamTaskSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00741020;
    if (value === undefined) {
      throw new Error('BeamTaskSequence is undefined');
    }
    return value;
  }

  // Beam Task Type
  get BeamTaskType(): string | undefined {
    return this.x00741022;
  }

  get x00741022(): string | undefined {
    const value = this.dwResponse['00741022']?.Value;
    return convert(value?.[0], 0x00741022, 'string');
  }

  getBeamTaskType(): string {
    const value = this.x00741022;
    if (value === undefined) {
      throw new Error('BeamTaskType is undefined');
    }
    return value;
  }

  // Beam Order Index (Trial)
  get BeamOrderIndexTrial(): number | undefined {
    return this.x00741024;
  }

  get x00741024(): number | undefined {
    const value = this.dwResponse['00741024']?.Value;
    return convert(value?.[0], 0x00741024, 'number');
  }

  getBeamOrderIndexTrial(): number {
    const value = this.x00741024;
    if (value === undefined) {
      throw new Error('BeamOrderIndexTrial is undefined');
    }
    return value;
  }

  // Autosequence Flag
  get AutosequenceFlag(): string | undefined {
    return this.x00741025;
  }

  get x00741025(): string | undefined {
    const value = this.dwResponse['00741025']?.Value;
    return convert(value?.[0], 0x00741025, 'string');
  }

  getAutosequenceFlag(): string {
    const value = this.x00741025;
    if (value === undefined) {
      throw new Error('AutosequenceFlag is undefined');
    }
    return value;
  }

  // Table Top Vertical Adjusted Position
  get TableTopVerticalAdjustedPosition(): number | undefined {
    return this.x00741026;
  }

  get x00741026(): number | undefined {
    const value = this.dwResponse['00741026']?.Value;
    return convert(value?.[0], 0x00741026, 'number');
  }

  getTableTopVerticalAdjustedPosition(): number {
    const value = this.x00741026;
    if (value === undefined) {
      throw new Error('TableTopVerticalAdjustedPosition is undefined');
    }
    return value;
  }

  // Table Top Longitudinal Adjusted Position
  get TableTopLongitudinalAdjustedPosition(): number | undefined {
    return this.x00741027;
  }

  get x00741027(): number | undefined {
    const value = this.dwResponse['00741027']?.Value;
    return convert(value?.[0], 0x00741027, 'number');
  }

  getTableTopLongitudinalAdjustedPosition(): number {
    const value = this.x00741027;
    if (value === undefined) {
      throw new Error('TableTopLongitudinalAdjustedPosition is undefined');
    }
    return value;
  }

  // Table Top Lateral Adjusted Position
  get TableTopLateralAdjustedPosition(): number | undefined {
    return this.x00741028;
  }

  get x00741028(): number | undefined {
    const value = this.dwResponse['00741028']?.Value;
    return convert(value?.[0], 0x00741028, 'number');
  }

  getTableTopLateralAdjustedPosition(): number {
    const value = this.x00741028;
    if (value === undefined) {
      throw new Error('TableTopLateralAdjustedPosition is undefined');
    }
    return value;
  }

  // Patient Support Adjusted Angle
  get PatientSupportAdjustedAngle(): number | undefined {
    return this.x0074102a;
  }

  get x0074102a(): number | undefined {
    const value = this.dwResponse['0074102A']?.Value;
    return convert(value?.[0], 0x0074102a, 'number');
  }

  getPatientSupportAdjustedAngle(): number {
    const value = this.x0074102a;
    if (value === undefined) {
      throw new Error('PatientSupportAdjustedAngle is undefined');
    }
    return value;
  }

  // Table Top Eccentric Adjusted Angle
  get TableTopEccentricAdjustedAngle(): number | undefined {
    return this.x0074102b;
  }

  get x0074102b(): number | undefined {
    const value = this.dwResponse['0074102B']?.Value;
    return convert(value?.[0], 0x0074102b, 'number');
  }

  getTableTopEccentricAdjustedAngle(): number {
    const value = this.x0074102b;
    if (value === undefined) {
      throw new Error('TableTopEccentricAdjustedAngle is undefined');
    }
    return value;
  }

  // Table Top Pitch Adjusted Angle
  get TableTopPitchAdjustedAngle(): number | undefined {
    return this.x0074102c;
  }

  get x0074102c(): number | undefined {
    const value = this.dwResponse['0074102C']?.Value;
    return convert(value?.[0], 0x0074102c, 'number');
  }

  getTableTopPitchAdjustedAngle(): number {
    const value = this.x0074102c;
    if (value === undefined) {
      throw new Error('TableTopPitchAdjustedAngle is undefined');
    }
    return value;
  }

  // Table Top Roll Adjusted Angle
  get TableTopRollAdjustedAngle(): number | undefined {
    return this.x0074102d;
  }

  get x0074102d(): number | undefined {
    const value = this.dwResponse['0074102D']?.Value;
    return convert(value?.[0], 0x0074102d, 'number');
  }

  getTableTopRollAdjustedAngle(): number {
    const value = this.x0074102d;
    if (value === undefined) {
      throw new Error('TableTopRollAdjustedAngle is undefined');
    }
    return value;
  }

  // Delivery Verification Image Sequence
  get DeliveryVerificationImageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00741030;
  }

  get x00741030(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00741030']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDeliveryVerificationImageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00741030;
    if (value === undefined) {
      throw new Error('DeliveryVerificationImageSequence is undefined');
    }
    return value;
  }

  // Verification Image Timing
  get VerificationImageTiming(): string | undefined {
    return this.x00741032;
  }

  get x00741032(): string | undefined {
    const value = this.dwResponse['00741032']?.Value;
    return convert(value?.[0], 0x00741032, 'string');
  }

  getVerificationImageTiming(): string {
    const value = this.x00741032;
    if (value === undefined) {
      throw new Error('VerificationImageTiming is undefined');
    }
    return value;
  }

  // Double Exposure Flag
  get DoubleExposureFlag(): string | undefined {
    return this.x00741034;
  }

  get x00741034(): string | undefined {
    const value = this.dwResponse['00741034']?.Value;
    return convert(value?.[0], 0x00741034, 'string');
  }

  getDoubleExposureFlag(): string {
    const value = this.x00741034;
    if (value === undefined) {
      throw new Error('DoubleExposureFlag is undefined');
    }
    return value;
  }

  // Double Exposure Ordering
  get DoubleExposureOrdering(): string | undefined {
    return this.x00741036;
  }

  get x00741036(): string | undefined {
    const value = this.dwResponse['00741036']?.Value;
    return convert(value?.[0], 0x00741036, 'string');
  }

  getDoubleExposureOrdering(): string {
    const value = this.x00741036;
    if (value === undefined) {
      throw new Error('DoubleExposureOrdering is undefined');
    }
    return value;
  }

  // Double Exposure Meterset (Trial)
  get DoubleExposureMetersetTrial(): number | undefined {
    return this.x00741038;
  }

  get x00741038(): number | undefined {
    const value = this.dwResponse['00741038']?.Value;
    return convert(value?.[0], 0x00741038, 'number');
  }

  getDoubleExposureMetersetTrial(): number {
    const value = this.x00741038;
    if (value === undefined) {
      throw new Error('DoubleExposureMetersetTrial is undefined');
    }
    return value;
  }

  // Double Exposure Field Delta (Trial)
  get DoubleExposureFieldDeltaTrial(): Array<number | undefined> | undefined {
    return this.x0074103a;
  }

  get x0074103a(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0074103A']?.Value;
    return convert(value, 0x0074103a, 'Array<number | undefined>');
  }

  getDoubleExposureFieldDeltaTrial(): Array<number | undefined> {
    const value = this.x0074103a;
    if (value === undefined) {
      throw new Error('DoubleExposureFieldDeltaTrial is undefined');
    }
    return value;
  }

  // Related Reference RT Image Sequence
  get RelatedReferenceRTImageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00741040;
  }

  get x00741040(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00741040']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRelatedReferenceRTImageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00741040;
    if (value === undefined) {
      throw new Error('RelatedReferenceRTImageSequence is undefined');
    }
    return value;
  }

  // General Machine Verification Sequence
  get GeneralMachineVerificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00741042;
  }

  get x00741042(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00741042']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getGeneralMachineVerificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00741042;
    if (value === undefined) {
      throw new Error('GeneralMachineVerificationSequence is undefined');
    }
    return value;
  }

  // Conventional Machine Verification Sequence
  get ConventionalMachineVerificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00741044;
  }

  get x00741044(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00741044']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getConventionalMachineVerificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00741044;
    if (value === undefined) {
      throw new Error('ConventionalMachineVerificationSequence is undefined');
    }
    return value;
  }

  // Ion Machine Verification Sequence
  get IonMachineVerificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00741046;
  }

  get x00741046(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00741046']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIonMachineVerificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00741046;
    if (value === undefined) {
      throw new Error('IonMachineVerificationSequence is undefined');
    }
    return value;
  }

  // Failed Attributes Sequence
  get FailedAttributesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00741048;
  }

  get x00741048(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00741048']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFailedAttributesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00741048;
    if (value === undefined) {
      throw new Error('FailedAttributesSequence is undefined');
    }
    return value;
  }

  // Overridden Attributes Sequence
  get OverriddenAttributesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0074104a;
  }

  get x0074104a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0074104A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOverriddenAttributesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0074104a;
    if (value === undefined) {
      throw new Error('OverriddenAttributesSequence is undefined');
    }
    return value;
  }

  // Conventional Control Point Verification Sequence
  get ConventionalControlPointVerificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0074104c;
  }

  get x0074104c(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0074104C']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getConventionalControlPointVerificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0074104c;
    if (value === undefined) {
      throw new Error('ConventionalControlPointVerificationSequence is undefined');
    }
    return value;
  }

  // Ion Control Point Verification Sequence
  get IonControlPointVerificationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0074104e;
  }

  get x0074104e(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0074104E']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIonControlPointVerificationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0074104e;
    if (value === undefined) {
      throw new Error('IonControlPointVerificationSequence is undefined');
    }
    return value;
  }

  // Attribute Occurrence Sequence
  get AttributeOccurrenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00741050;
  }

  get x00741050(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00741050']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAttributeOccurrenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00741050;
    if (value === undefined) {
      throw new Error('AttributeOccurrenceSequence is undefined');
    }
    return value;
  }

  // Attribute Occurrence Pointer
  get AttributeOccurrencePointer(): Uint16Array | undefined {
    return this.x00741052;
  }

  get x00741052(): Uint16Array | undefined {
    const value = this.dwResponse['00741052']?.Value;
    return convert(value?.[0], 0x00741052, 'Uint16Array');
  }

  getAttributeOccurrencePointer(): Uint16Array {
    const value = this.x00741052;
    if (value === undefined) {
      throw new Error('AttributeOccurrencePointer is undefined');
    }
    return value;
  }

  // Attribute Item Selector
  get AttributeItemSelector(): number | undefined {
    return this.x00741054;
  }

  get x00741054(): number | undefined {
    const value = this.dwResponse['00741054']?.Value;
    return convert(value?.[0], 0x00741054, 'number');
  }

  getAttributeItemSelector(): number {
    const value = this.x00741054;
    if (value === undefined) {
      throw new Error('AttributeItemSelector is undefined');
    }
    return value;
  }

  // Attribute Occurrence Private Creator
  get AttributeOccurrencePrivateCreator(): string | undefined {
    return this.x00741056;
  }

  get x00741056(): string | undefined {
    const value = this.dwResponse['00741056']?.Value;
    return convert(value?.[0], 0x00741056, 'string');
  }

  getAttributeOccurrencePrivateCreator(): string {
    const value = this.x00741056;
    if (value === undefined) {
      throw new Error('AttributeOccurrencePrivateCreator is undefined');
    }
    return value;
  }

  // Selector Sequence Pointer Items
  get SelectorSequencePointerItems(): Array<number | undefined> | undefined {
    return this.x00741057;
  }

  get x00741057(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00741057']?.Value;
    return convert(value, 0x00741057, 'Array<number | undefined>');
  }

  getSelectorSequencePointerItems(): Array<number | undefined> {
    const value = this.x00741057;
    if (value === undefined) {
      throw new Error('SelectorSequencePointerItems is undefined');
    }
    return value;
  }

  // Scheduled Procedure Step Priority
  get ScheduledProcedureStepPriority(): string | undefined {
    return this.x00741200;
  }

  get x00741200(): string | undefined {
    const value = this.dwResponse['00741200']?.Value;
    return convert(value?.[0], 0x00741200, 'string');
  }

  getScheduledProcedureStepPriority(): string {
    const value = this.x00741200;
    if (value === undefined) {
      throw new Error('ScheduledProcedureStepPriority is undefined');
    }
    return value;
  }

  // Worklist Label
  get WorklistLabel(): string | undefined {
    return this.x00741202;
  }

  get x00741202(): string | undefined {
    const value = this.dwResponse['00741202']?.Value;
    return convert(value?.[0], 0x00741202, 'string');
  }

  getWorklistLabel(): string {
    const value = this.x00741202;
    if (value === undefined) {
      throw new Error('WorklistLabel is undefined');
    }
    return value;
  }

  // Procedure Step Label
  get ProcedureStepLabel(): string | undefined {
    return this.x00741204;
  }

  get x00741204(): string | undefined {
    const value = this.dwResponse['00741204']?.Value;
    return convert(value?.[0], 0x00741204, 'string');
  }

  getProcedureStepLabel(): string {
    const value = this.x00741204;
    if (value === undefined) {
      throw new Error('ProcedureStepLabel is undefined');
    }
    return value;
  }

  // Scheduled Processing Parameters Sequence
  get ScheduledProcessingParametersSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00741210;
  }

  get x00741210(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00741210']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getScheduledProcessingParametersSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00741210;
    if (value === undefined) {
      throw new Error('ScheduledProcessingParametersSequence is undefined');
    }
    return value;
  }

  // Performed Processing Parameters Sequence
  get PerformedProcessingParametersSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00741212;
  }

  get x00741212(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00741212']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPerformedProcessingParametersSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00741212;
    if (value === undefined) {
      throw new Error('PerformedProcessingParametersSequence is undefined');
    }
    return value;
  }

  // Unified Procedure Step Performed Procedure Sequence
  get UnifiedProcedureStepPerformedProcedureSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00741216;
  }

  get x00741216(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00741216']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getUnifiedProcedureStepPerformedProcedureSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00741216;
    if (value === undefined) {
      throw new Error('UnifiedProcedureStepPerformedProcedureSequence is undefined');
    }
    return value;
  }

  // Related Procedure Step Sequence
  get RelatedProcedureStepSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00741220;
  }

  get x00741220(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00741220']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRelatedProcedureStepSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00741220;
    if (value === undefined) {
      throw new Error('RelatedProcedureStepSequence is undefined');
    }
    return value;
  }

  // Procedure Step Relationship Type
  get ProcedureStepRelationshipType(): string | undefined {
    return this.x00741222;
  }

  get x00741222(): string | undefined {
    const value = this.dwResponse['00741222']?.Value;
    return convert(value?.[0], 0x00741222, 'string');
  }

  getProcedureStepRelationshipType(): string {
    const value = this.x00741222;
    if (value === undefined) {
      throw new Error('ProcedureStepRelationshipType is undefined');
    }
    return value;
  }

  // Replaced Procedure Step Sequence
  get ReplacedProcedureStepSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00741224;
  }

  get x00741224(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00741224']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReplacedProcedureStepSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00741224;
    if (value === undefined) {
      throw new Error('ReplacedProcedureStepSequence is undefined');
    }
    return value;
  }

  // Deletion Lock
  get DeletionLock(): string | undefined {
    return this.x00741230;
  }

  get x00741230(): string | undefined {
    const value = this.dwResponse['00741230']?.Value;
    return convert(value?.[0], 0x00741230, 'string');
  }

  getDeletionLock(): string {
    const value = this.x00741230;
    if (value === undefined) {
      throw new Error('DeletionLock is undefined');
    }
    return value;
  }

  // Receiving AE
  get ReceivingAE(): string | undefined {
    return this.x00741234;
  }

  get x00741234(): string | undefined {
    const value = this.dwResponse['00741234']?.Value;
    return convert(value?.[0], 0x00741234, 'string');
  }

  getReceivingAE(): string {
    const value = this.x00741234;
    if (value === undefined) {
      throw new Error('ReceivingAE is undefined');
    }
    return value;
  }

  // Requesting AE
  get RequestingAE(): string | undefined {
    return this.x00741236;
  }

  get x00741236(): string | undefined {
    const value = this.dwResponse['00741236']?.Value;
    return convert(value?.[0], 0x00741236, 'string');
  }

  getRequestingAE(): string {
    const value = this.x00741236;
    if (value === undefined) {
      throw new Error('RequestingAE is undefined');
    }
    return value;
  }

  // SCP Status
  get SCPStatus(): string | undefined {
    return this.x00741242;
  }

  get x00741242(): string | undefined {
    const value = this.dwResponse['00741242']?.Value;
    return convert(value?.[0], 0x00741242, 'string');
  }

  getSCPStatus(): string {
    const value = this.x00741242;
    if (value === undefined) {
      throw new Error('SCPStatus is undefined');
    }
    return value;
  }

  // Subscription List Status
  get SubscriptionListStatus(): string | undefined {
    return this.x00741244;
  }

  get x00741244(): string | undefined {
    const value = this.dwResponse['00741244']?.Value;
    return convert(value?.[0], 0x00741244, 'string');
  }

  getSubscriptionListStatus(): string {
    const value = this.x00741244;
    if (value === undefined) {
      throw new Error('SubscriptionListStatus is undefined');
    }
    return value;
  }

  // Unified Procedure Step List Status
  get UnifiedProcedureStepListStatus(): string | undefined {
    return this.x00741246;
  }

  get x00741246(): string | undefined {
    const value = this.dwResponse['00741246']?.Value;
    return convert(value?.[0], 0x00741246, 'string');
  }

  getUnifiedProcedureStepListStatus(): string {
    const value = this.x00741246;
    if (value === undefined) {
      throw new Error('UnifiedProcedureStepListStatus is undefined');
    }
    return value;
  }

  // Beam Order Index
  get BeamOrderIndex(): number | undefined {
    return this.x00741324;
  }

  get x00741324(): number | undefined {
    const value = this.dwResponse['00741324']?.Value;
    return convert(value?.[0], 0x00741324, 'number');
  }

  getBeamOrderIndex(): number {
    const value = this.x00741324;
    if (value === undefined) {
      throw new Error('BeamOrderIndex is undefined');
    }
    return value;
  }

  // Double Exposure Meterset
  get DoubleExposureMeterset(): number | undefined {
    return this.x00741338;
  }

  get x00741338(): number | undefined {
    const value = this.dwResponse['00741338']?.Value;
    return convert(value?.[0], 0x00741338, 'number');
  }

  getDoubleExposureMeterset(): number {
    const value = this.x00741338;
    if (value === undefined) {
      throw new Error('DoubleExposureMeterset is undefined');
    }
    return value;
  }

  // Double Exposure Field Delta
  get DoubleExposureFieldDelta(): Array<number | undefined> | undefined {
    return this.x0074133a;
  }

  get x0074133a(): Array<number | undefined> | undefined {
    const value = this.dwResponse['0074133A']?.Value;
    return convert(value, 0x0074133a, 'Array<number | undefined>');
  }

  getDoubleExposureFieldDelta(): Array<number | undefined> {
    const value = this.x0074133a;
    if (value === undefined) {
      throw new Error('DoubleExposureFieldDelta is undefined');
    }
    return value;
  }

  // Implant Assembly Template Name
  get ImplantAssemblyTemplateName(): string | undefined {
    return this.x00760001;
  }

  get x00760001(): string | undefined {
    const value = this.dwResponse['00760001']?.Value;
    return convert(value?.[0], 0x00760001, 'string');
  }

  getImplantAssemblyTemplateName(): string {
    const value = this.x00760001;
    if (value === undefined) {
      throw new Error('ImplantAssemblyTemplateName is undefined');
    }
    return value;
  }

  // Implant Assembly Template Issuer
  get ImplantAssemblyTemplateIssuer(): string | undefined {
    return this.x00760003;
  }

  get x00760003(): string | undefined {
    const value = this.dwResponse['00760003']?.Value;
    return convert(value?.[0], 0x00760003, 'string');
  }

  getImplantAssemblyTemplateIssuer(): string {
    const value = this.x00760003;
    if (value === undefined) {
      throw new Error('ImplantAssemblyTemplateIssuer is undefined');
    }
    return value;
  }

  // Implant Assembly Template Version
  get ImplantAssemblyTemplateVersion(): string | undefined {
    return this.x00760006;
  }

  get x00760006(): string | undefined {
    const value = this.dwResponse['00760006']?.Value;
    return convert(value?.[0], 0x00760006, 'string');
  }

  getImplantAssemblyTemplateVersion(): string {
    const value = this.x00760006;
    if (value === undefined) {
      throw new Error('ImplantAssemblyTemplateVersion is undefined');
    }
    return value;
  }

  // Replaced Implant Assembly Template Sequence
  get ReplacedImplantAssemblyTemplateSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00760008;
  }

  get x00760008(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00760008']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReplacedImplantAssemblyTemplateSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00760008;
    if (value === undefined) {
      throw new Error('ReplacedImplantAssemblyTemplateSequence is undefined');
    }
    return value;
  }

  // Implant Assembly Template Type
  get ImplantAssemblyTemplateType(): string | undefined {
    return this.x0076000a;
  }

  get x0076000a(): string | undefined {
    const value = this.dwResponse['0076000A']?.Value;
    return convert(value?.[0], 0x0076000a, 'string');
  }

  getImplantAssemblyTemplateType(): string {
    const value = this.x0076000a;
    if (value === undefined) {
      throw new Error('ImplantAssemblyTemplateType is undefined');
    }
    return value;
  }

  // Original Implant Assembly Template Sequence
  get OriginalImplantAssemblyTemplateSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0076000c;
  }

  get x0076000c(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0076000C']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOriginalImplantAssemblyTemplateSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0076000c;
    if (value === undefined) {
      throw new Error('OriginalImplantAssemblyTemplateSequence is undefined');
    }
    return value;
  }

  // Derivation Implant Assembly Template Sequence
  get DerivationImplantAssemblyTemplateSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0076000e;
  }

  get x0076000e(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0076000E']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDerivationImplantAssemblyTemplateSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0076000e;
    if (value === undefined) {
      throw new Error('DerivationImplantAssemblyTemplateSequence is undefined');
    }
    return value;
  }

  // Implant Assembly Template Target Anatomy Sequence
  get ImplantAssemblyTemplateTargetAnatomySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00760010;
  }

  get x00760010(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00760010']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getImplantAssemblyTemplateTargetAnatomySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00760010;
    if (value === undefined) {
      throw new Error('ImplantAssemblyTemplateTargetAnatomySequence is undefined');
    }
    return value;
  }

  // Procedure Type Code Sequence
  get ProcedureTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00760020;
  }

  get x00760020(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00760020']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getProcedureTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00760020;
    if (value === undefined) {
      throw new Error('ProcedureTypeCodeSequence is undefined');
    }
    return value;
  }

  // Surgical Technique
  get SurgicalTechnique(): string | undefined {
    return this.x00760030;
  }

  get x00760030(): string | undefined {
    const value = this.dwResponse['00760030']?.Value;
    return convert(value?.[0], 0x00760030, 'string');
  }

  getSurgicalTechnique(): string {
    const value = this.x00760030;
    if (value === undefined) {
      throw new Error('SurgicalTechnique is undefined');
    }
    return value;
  }

  // Component Types Sequence
  get ComponentTypesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00760032;
  }

  get x00760032(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00760032']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getComponentTypesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00760032;
    if (value === undefined) {
      throw new Error('ComponentTypesSequence is undefined');
    }
    return value;
  }

  // Component Type Code Sequence
  get ComponentTypeCodeSequence(): string | undefined {
    return this.x00760034;
  }

  get x00760034(): string | undefined {
    const value = this.dwResponse['00760034']?.Value;
    return convert(value?.[0], 0x00760034, 'string');
  }

  getComponentTypeCodeSequence(): string {
    const value = this.x00760034;
    if (value === undefined) {
      throw new Error('ComponentTypeCodeSequence is undefined');
    }
    return value;
  }

  // Exclusive Component Type
  get ExclusiveComponentType(): string | undefined {
    return this.x00760036;
  }

  get x00760036(): string | undefined {
    const value = this.dwResponse['00760036']?.Value;
    return convert(value?.[0], 0x00760036, 'string');
  }

  getExclusiveComponentType(): string {
    const value = this.x00760036;
    if (value === undefined) {
      throw new Error('ExclusiveComponentType is undefined');
    }
    return value;
  }

  // Mandatory Component Type
  get MandatoryComponentType(): string | undefined {
    return this.x00760038;
  }

  get x00760038(): string | undefined {
    const value = this.dwResponse['00760038']?.Value;
    return convert(value?.[0], 0x00760038, 'string');
  }

  getMandatoryComponentType(): string {
    const value = this.x00760038;
    if (value === undefined) {
      throw new Error('MandatoryComponentType is undefined');
    }
    return value;
  }

  // Component Sequence
  get ComponentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00760040;
  }

  get x00760040(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00760040']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getComponentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00760040;
    if (value === undefined) {
      throw new Error('ComponentSequence is undefined');
    }
    return value;
  }

  // Component ID
  get ComponentID(): number | undefined {
    return this.x00760055;
  }

  get x00760055(): number | undefined {
    const value = this.dwResponse['00760055']?.Value;
    return convert(value?.[0], 0x00760055, 'number');
  }

  getComponentID(): number {
    const value = this.x00760055;
    if (value === undefined) {
      throw new Error('ComponentID is undefined');
    }
    return value;
  }

  // Component Assembly Sequence
  get ComponentAssemblySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00760060;
  }

  get x00760060(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00760060']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getComponentAssemblySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00760060;
    if (value === undefined) {
      throw new Error('ComponentAssemblySequence is undefined');
    }
    return value;
  }

  // Component 1 Referenced ID
  get Component1ReferencedID(): number | undefined {
    return this.x00760070;
  }

  get x00760070(): number | undefined {
    const value = this.dwResponse['00760070']?.Value;
    return convert(value?.[0], 0x00760070, 'number');
  }

  getComponent1ReferencedID(): number {
    const value = this.x00760070;
    if (value === undefined) {
      throw new Error('Component1ReferencedID is undefined');
    }
    return value;
  }

  // Component 1 Referenced Mating Feature Set ID
  get Component1ReferencedMatingFeatureSetID(): number | undefined {
    return this.x00760080;
  }

  get x00760080(): number | undefined {
    const value = this.dwResponse['00760080']?.Value;
    return convert(value?.[0], 0x00760080, 'number');
  }

  getComponent1ReferencedMatingFeatureSetID(): number {
    const value = this.x00760080;
    if (value === undefined) {
      throw new Error('Component1ReferencedMatingFeatureSetID is undefined');
    }
    return value;
  }

  // Component 1 Referenced Mating Feature ID
  get Component1ReferencedMatingFeatureID(): number | undefined {
    return this.x00760090;
  }

  get x00760090(): number | undefined {
    const value = this.dwResponse['00760090']?.Value;
    return convert(value?.[0], 0x00760090, 'number');
  }

  getComponent1ReferencedMatingFeatureID(): number {
    const value = this.x00760090;
    if (value === undefined) {
      throw new Error('Component1ReferencedMatingFeatureID is undefined');
    }
    return value;
  }

  // Component 2 Referenced ID
  get Component2ReferencedID(): number | undefined {
    return this.x007600a0;
  }

  get x007600a0(): number | undefined {
    const value = this.dwResponse['007600A0']?.Value;
    return convert(value?.[0], 0x007600a0, 'number');
  }

  getComponent2ReferencedID(): number {
    const value = this.x007600a0;
    if (value === undefined) {
      throw new Error('Component2ReferencedID is undefined');
    }
    return value;
  }

  // Component 2 Referenced Mating Feature Set ID
  get Component2ReferencedMatingFeatureSetID(): number | undefined {
    return this.x007600b0;
  }

  get x007600b0(): number | undefined {
    const value = this.dwResponse['007600B0']?.Value;
    return convert(value?.[0], 0x007600b0, 'number');
  }

  getComponent2ReferencedMatingFeatureSetID(): number {
    const value = this.x007600b0;
    if (value === undefined) {
      throw new Error('Component2ReferencedMatingFeatureSetID is undefined');
    }
    return value;
  }

  // Component 2 Referenced Mating Feature ID
  get Component2ReferencedMatingFeatureID(): number | undefined {
    return this.x007600c0;
  }

  get x007600c0(): number | undefined {
    const value = this.dwResponse['007600C0']?.Value;
    return convert(value?.[0], 0x007600c0, 'number');
  }

  getComponent2ReferencedMatingFeatureID(): number {
    const value = this.x007600c0;
    if (value === undefined) {
      throw new Error('Component2ReferencedMatingFeatureID is undefined');
    }
    return value;
  }

  // Implant Template Group Name
  get ImplantTemplateGroupName(): string | undefined {
    return this.x00780001;
  }

  get x00780001(): string | undefined {
    const value = this.dwResponse['00780001']?.Value;
    return convert(value?.[0], 0x00780001, 'string');
  }

  getImplantTemplateGroupName(): string {
    const value = this.x00780001;
    if (value === undefined) {
      throw new Error('ImplantTemplateGroupName is undefined');
    }
    return value;
  }

  // Implant Template Group Issuer
  get ImplantTemplateGroupIssuer(): string | undefined {
    return this.x00780020;
  }

  get x00780020(): string | undefined {
    const value = this.dwResponse['00780020']?.Value;
    return convert(value?.[0], 0x00780020, 'string');
  }

  getImplantTemplateGroupIssuer(): string {
    const value = this.x00780020;
    if (value === undefined) {
      throw new Error('ImplantTemplateGroupIssuer is undefined');
    }
    return value;
  }

  // Implant Template Group Version
  get ImplantTemplateGroupVersion(): string | undefined {
    return this.x00780024;
  }

  get x00780024(): string | undefined {
    const value = this.dwResponse['00780024']?.Value;
    return convert(value?.[0], 0x00780024, 'string');
  }

  getImplantTemplateGroupVersion(): string {
    const value = this.x00780024;
    if (value === undefined) {
      throw new Error('ImplantTemplateGroupVersion is undefined');
    }
    return value;
  }

  // Replaced Implant Template Group Sequence
  get ReplacedImplantTemplateGroupSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00780026;
  }

  get x00780026(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00780026']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReplacedImplantTemplateGroupSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00780026;
    if (value === undefined) {
      throw new Error('ReplacedImplantTemplateGroupSequence is undefined');
    }
    return value;
  }

  // Implant Template Group Target Anatomy Sequence
  get ImplantTemplateGroupTargetAnatomySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00780028;
  }

  get x00780028(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00780028']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getImplantTemplateGroupTargetAnatomySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00780028;
    if (value === undefined) {
      throw new Error('ImplantTemplateGroupTargetAnatomySequence is undefined');
    }
    return value;
  }

  // Implant Template Group Members Sequence
  get ImplantTemplateGroupMembersSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x0078002a;
  }

  get x0078002a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['0078002A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getImplantTemplateGroupMembersSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x0078002a;
    if (value === undefined) {
      throw new Error('ImplantTemplateGroupMembersSequence is undefined');
    }
    return value;
  }

  // Implant Template Group Member ID
  get ImplantTemplateGroupMemberID(): number | undefined {
    return this.x0078002e;
  }

  get x0078002e(): number | undefined {
    const value = this.dwResponse['0078002E']?.Value;
    return convert(value?.[0], 0x0078002e, 'number');
  }

  getImplantTemplateGroupMemberID(): number {
    const value = this.x0078002e;
    if (value === undefined) {
      throw new Error('ImplantTemplateGroupMemberID is undefined');
    }
    return value;
  }

  // 3D Implant Template Group Member Matching Point
  get ThreeDImplantTemplateGroupMemberMatchingPoint(): Array<number | undefined> | undefined {
    return this.x00780050;
  }

  get x00780050(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00780050']?.Value;
    return convert(value, 0x00780050, 'Array<number | undefined>');
  }

  getThreeDImplantTemplateGroupMemberMatchingPoint(): Array<number | undefined> {
    const value = this.x00780050;
    if (value === undefined) {
      throw new Error('ThreeDImplantTemplateGroupMemberMatchingPoint is undefined');
    }
    return value;
  }

  // 3D Implant Template Group Member Matching Axes
  get ThreeDImplantTemplateGroupMemberMatchingAxes(): Array<number | undefined> | undefined {
    return this.x00780060;
  }

  get x00780060(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00780060']?.Value;
    return convert(value, 0x00780060, 'Array<number | undefined>');
  }

  getThreeDImplantTemplateGroupMemberMatchingAxes(): Array<number | undefined> {
    const value = this.x00780060;
    if (value === undefined) {
      throw new Error('ThreeDImplantTemplateGroupMemberMatchingAxes is undefined');
    }
    return value;
  }

  // Implant Template Group Member Matching 2D Coordinates Sequence
  get ImplantTemplateGroupMemberMatching2DCoordinatesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00780070;
  }

  get x00780070(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00780070']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getImplantTemplateGroupMemberMatching2DCoordinatesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00780070;
    if (value === undefined) {
      throw new Error('ImplantTemplateGroupMemberMatching2DCoordinatesSequence is undefined');
    }
    return value;
  }

  // 2D Implant Template Group Member Matching Point
  get TwoDImplantTemplateGroupMemberMatchingPoint(): Array<number | undefined> | undefined {
    return this.x00780090;
  }

  get x00780090(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00780090']?.Value;
    return convert(value, 0x00780090, 'Array<number | undefined>');
  }

  getTwoDImplantTemplateGroupMemberMatchingPoint(): Array<number | undefined> {
    const value = this.x00780090;
    if (value === undefined) {
      throw new Error('TwoDImplantTemplateGroupMemberMatchingPoint is undefined');
    }
    return value;
  }

  // 2D Implant Template Group Member Matching Axes
  get TwoDImplantTemplateGroupMemberMatchingAxes(): Array<number | undefined> | undefined {
    return this.x007800a0;
  }

  get x007800a0(): Array<number | undefined> | undefined {
    const value = this.dwResponse['007800A0']?.Value;
    return convert(value, 0x007800a0, 'Array<number | undefined>');
  }

  getTwoDImplantTemplateGroupMemberMatchingAxes(): Array<number | undefined> {
    const value = this.x007800a0;
    if (value === undefined) {
      throw new Error('TwoDImplantTemplateGroupMemberMatchingAxes is undefined');
    }
    return value;
  }

  // Implant Template Group Variation Dimension Sequence
  get ImplantTemplateGroupVariationDimensionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x007800b0;
  }

  get x007800b0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['007800B0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getImplantTemplateGroupVariationDimensionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x007800b0;
    if (value === undefined) {
      throw new Error('ImplantTemplateGroupVariationDimensionSequence is undefined');
    }
    return value;
  }

  // Implant Template Group Variation Dimension Name
  get ImplantTemplateGroupVariationDimensionName(): string | undefined {
    return this.x007800b2;
  }

  get x007800b2(): string | undefined {
    const value = this.dwResponse['007800B2']?.Value;
    return convert(value?.[0], 0x007800b2, 'string');
  }

  getImplantTemplateGroupVariationDimensionName(): string {
    const value = this.x007800b2;
    if (value === undefined) {
      throw new Error('ImplantTemplateGroupVariationDimensionName is undefined');
    }
    return value;
  }

  // Implant Template Group Variation Dimension Rank Sequence
  get ImplantTemplateGroupVariationDimensionRankSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x007800b4;
  }

  get x007800b4(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['007800B4']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getImplantTemplateGroupVariationDimensionRankSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x007800b4;
    if (value === undefined) {
      throw new Error('ImplantTemplateGroupVariationDimensionRankSequence is undefined');
    }
    return value;
  }

  // Referenced Implant Template Group Member ID
  get ReferencedImplantTemplateGroupMemberID(): number | undefined {
    return this.x007800b6;
  }

  get x007800b6(): number | undefined {
    const value = this.dwResponse['007800B6']?.Value;
    return convert(value?.[0], 0x007800b6, 'number');
  }

  getReferencedImplantTemplateGroupMemberID(): number {
    const value = this.x007800b6;
    if (value === undefined) {
      throw new Error('ReferencedImplantTemplateGroupMemberID is undefined');
    }
    return value;
  }

  // Implant Template Group Variation Dimension Rank
  get ImplantTemplateGroupVariationDimensionRank(): number | undefined {
    return this.x007800b8;
  }

  get x007800b8(): number | undefined {
    const value = this.dwResponse['007800B8']?.Value;
    return convert(value?.[0], 0x007800b8, 'number');
  }

  getImplantTemplateGroupVariationDimensionRank(): number {
    const value = this.x007800b8;
    if (value === undefined) {
      throw new Error('ImplantTemplateGroupVariationDimensionRank is undefined');
    }
    return value;
  }

  // Surface Scan Acquisition Type Code Sequence
  get SurfaceScanAcquisitionTypeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00800001;
  }

  get x00800001(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00800001']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSurfaceScanAcquisitionTypeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00800001;
    if (value === undefined) {
      throw new Error('SurfaceScanAcquisitionTypeCodeSequence is undefined');
    }
    return value;
  }

  // Surface Scan Mode Code Sequence
  get SurfaceScanModeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00800002;
  }

  get x00800002(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00800002']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSurfaceScanModeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00800002;
    if (value === undefined) {
      throw new Error('SurfaceScanModeCodeSequence is undefined');
    }
    return value;
  }

  // Registration Method Code Sequence
  get RegistrationMethodCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00800003;
  }

  get x00800003(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00800003']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRegistrationMethodCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00800003;
    if (value === undefined) {
      throw new Error('RegistrationMethodCodeSequence is undefined');
    }
    return value;
  }

  // Shot Duration Time
  get ShotDurationTime(): number | undefined {
    return this.x00800004;
  }

  get x00800004(): number | undefined {
    const value = this.dwResponse['00800004']?.Value;
    return convert(value?.[0], 0x00800004, 'number');
  }

  getShotDurationTime(): number {
    const value = this.x00800004;
    if (value === undefined) {
      throw new Error('ShotDurationTime is undefined');
    }
    return value;
  }

  // Shot Offset Time
  get ShotOffsetTime(): number | undefined {
    return this.x00800005;
  }

  get x00800005(): number | undefined {
    const value = this.dwResponse['00800005']?.Value;
    return convert(value?.[0], 0x00800005, 'number');
  }

  getShotOffsetTime(): number {
    const value = this.x00800005;
    if (value === undefined) {
      throw new Error('ShotOffsetTime is undefined');
    }
    return value;
  }

  // Surface Point Presentation Value Data
  get SurfacePointPresentationValueData(): Array<number | undefined> | undefined {
    return this.x00800006;
  }

  get x00800006(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00800006']?.Value;
    return convert(value, 0x00800006, 'Array<number | undefined>');
  }

  getSurfacePointPresentationValueData(): Array<number | undefined> {
    const value = this.x00800006;
    if (value === undefined) {
      throw new Error('SurfacePointPresentationValueData is undefined');
    }
    return value;
  }

  // Surface Point Color CIELab Value Data
  get SurfacePointColorCIELabValueData(): Array<number | undefined> | undefined {
    return this.x00800007;
  }

  get x00800007(): Array<number | undefined> | undefined {
    const value = this.dwResponse['00800007']?.Value;
    return convert(value, 0x00800007, 'Array<number | undefined>');
  }

  getSurfacePointColorCIELabValueData(): Array<number | undefined> {
    const value = this.x00800007;
    if (value === undefined) {
      throw new Error('SurfacePointColorCIELabValueData is undefined');
    }
    return value;
  }

  // UV Mapping Sequence
  get UVMappingSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00800008;
  }

  get x00800008(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00800008']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getUVMappingSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00800008;
    if (value === undefined) {
      throw new Error('UVMappingSequence is undefined');
    }
    return value;
  }

  // Texture Label
  get TextureLabel(): string | undefined {
    return this.x00800009;
  }

  get x00800009(): string | undefined {
    const value = this.dwResponse['00800009']?.Value;
    return convert(value?.[0], 0x00800009, 'string');
  }

  getTextureLabel(): string {
    const value = this.x00800009;
    if (value === undefined) {
      throw new Error('TextureLabel is undefined');
    }
    return value;
  }

  // Referenced Texture Sequence
  get ReferencedTextureSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00800012;
  }

  get x00800012(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00800012']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedTextureSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00800012;
    if (value === undefined) {
      throw new Error('ReferencedTextureSequence is undefined');
    }
    return value;
  }

  // Referenced Surface Data Sequence
  get ReferencedSurfaceDataSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00800013;
  }

  get x00800013(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00800013']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedSurfaceDataSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00800013;
    if (value === undefined) {
      throw new Error('ReferencedSurfaceDataSequence is undefined');
    }
    return value;
  }

  // Storage Media File-set ID
  get StorageMediaFileSetID(): string | undefined {
    return this.x00880130;
  }

  get x00880130(): string | undefined {
    const value = this.dwResponse['00880130']?.Value;
    return convert(value?.[0], 0x00880130, 'string');
  }

  getStorageMediaFileSetID(): string {
    const value = this.x00880130;
    if (value === undefined) {
      throw new Error('StorageMediaFileSetID is undefined');
    }
    return value;
  }

  // Storage Media File-set UID
  get StorageMediaFileSetUID(): string | undefined {
    return this.x00880140;
  }

  get x00880140(): string | undefined {
    const value = this.dwResponse['00880140']?.Value;
    return convert(value?.[0], 0x00880140, 'string');
  }

  getStorageMediaFileSetUID(): string {
    const value = this.x00880140;
    if (value === undefined) {
      throw new Error('StorageMediaFileSetUID is undefined');
    }
    return value;
  }

  // Icon Image Sequence
  get IconImageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x00880200;
  }

  get x00880200(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['00880200']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIconImageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x00880200;
    if (value === undefined) {
      throw new Error('IconImageSequence is undefined');
    }
    return value;
  }

  // Topic Title
  get TopicTitle(): string | undefined {
    return this.x00880904;
  }

  get x00880904(): string | undefined {
    const value = this.dwResponse['00880904']?.Value;
    return convert(value?.[0], 0x00880904, 'string');
  }

  getTopicTitle(): string {
    const value = this.x00880904;
    if (value === undefined) {
      throw new Error('TopicTitle is undefined');
    }
    return value;
  }

  // Topic Author
  get TopicAuthor(): string | undefined {
    return this.x00880910;
  }

  get x00880910(): string | undefined {
    const value = this.dwResponse['00880910']?.Value;
    return convert(value?.[0], 0x00880910, 'string');
  }

  getTopicAuthor(): string {
    const value = this.x00880910;
    if (value === undefined) {
      throw new Error('TopicAuthor is undefined');
    }
    return value;
  }

  // Topic Keywords
  get TopicKeywords(): Array<string | undefined> | undefined {
    return this.x00880912;
  }

  get x00880912(): Array<string | undefined> | undefined {
    const value = this.dwResponse['00880912']?.Value;
    return convert(value, 0x00880912, 'Array<string | undefined>');
  }

  getTopicKeywords(): Array<string | undefined> {
    const value = this.x00880912;
    if (value === undefined) {
      throw new Error('TopicKeywords is undefined');
    }
    return value;
  }

  // SOP Instance Status
  get SOPInstanceStatus(): string | undefined {
    return this.x01000410;
  }

  get x01000410(): string | undefined {
    const value = this.dwResponse['01000410']?.Value;
    return convert(value?.[0], 0x01000410, 'string');
  }

  getSOPInstanceStatus(): string {
    const value = this.x01000410;
    if (value === undefined) {
      throw new Error('SOPInstanceStatus is undefined');
    }
    return value;
  }

  // SOP Authorization DateTime
  get SOPAuthorizationDateTime(): string | undefined {
    return this.x01000420;
  }

  get x01000420(): string | undefined {
    const value = this.dwResponse['01000420']?.Value;
    return convert(value?.[0], 0x01000420, 'string');
  }

  getSOPAuthorizationDateTime(): string {
    const value = this.x01000420;
    if (value === undefined) {
      throw new Error('SOPAuthorizationDateTime is undefined');
    }
    return value;
  }

  // Authorization Equipment Certification Number
  get AuthorizationEquipmentCertificationNumber(): string | undefined {
    return this.x01000426;
  }

  get x01000426(): string | undefined {
    const value = this.dwResponse['01000426']?.Value;
    return convert(value?.[0], 0x01000426, 'string');
  }

  getAuthorizationEquipmentCertificationNumber(): string {
    const value = this.x01000426;
    if (value === undefined) {
      throw new Error('AuthorizationEquipmentCertificationNumber is undefined');
    }
    return value;
  }

  // MAC ID Number
  get MACIDNumber(): number | undefined {
    return this.x04000005;
  }

  get x04000005(): number | undefined {
    const value = this.dwResponse['04000005']?.Value;
    return convert(value?.[0], 0x04000005, 'number');
  }

  getMACIDNumber(): number {
    const value = this.x04000005;
    if (value === undefined) {
      throw new Error('MACIDNumber is undefined');
    }
    return value;
  }

  // MAC Calculation Transfer Syntax UID
  get MACCalculationTransferSyntaxUID(): string | undefined {
    return this.x04000010;
  }

  get x04000010(): string | undefined {
    const value = this.dwResponse['04000010']?.Value;
    return convert(value?.[0], 0x04000010, 'string');
  }

  getMACCalculationTransferSyntaxUID(): string {
    const value = this.x04000010;
    if (value === undefined) {
      throw new Error('MACCalculationTransferSyntaxUID is undefined');
    }
    return value;
  }

  // MAC Algorithm
  get MACAlgorithm(): string | undefined {
    return this.x04000015;
  }

  get x04000015(): string | undefined {
    const value = this.dwResponse['04000015']?.Value;
    return convert(value?.[0], 0x04000015, 'string');
  }

  getMACAlgorithm(): string {
    const value = this.x04000015;
    if (value === undefined) {
      throw new Error('MACAlgorithm is undefined');
    }
    return value;
  }

  // Data Elements Signed
  get DataElementsSigned(): Array<Uint16Array | undefined> | undefined {
    return this.x04000020;
  }

  get x04000020(): Array<Uint16Array | undefined> | undefined {
    const value = this.dwResponse['04000020']?.Value;
    return convert(value, 0x04000020, 'Array<Uint16Array | undefined>');
  }

  getDataElementsSigned(): Array<Uint16Array | undefined> {
    const value = this.x04000020;
    if (value === undefined) {
      throw new Error('DataElementsSigned is undefined');
    }
    return value;
  }

  // Digital Signature UID
  get DigitalSignatureUID(): string | undefined {
    return this.x04000100;
  }

  get x04000100(): string | undefined {
    const value = this.dwResponse['04000100']?.Value;
    return convert(value?.[0], 0x04000100, 'string');
  }

  getDigitalSignatureUID(): string {
    const value = this.x04000100;
    if (value === undefined) {
      throw new Error('DigitalSignatureUID is undefined');
    }
    return value;
  }

  // Digital Signature DateTime
  get DigitalSignatureDateTime(): string | undefined {
    return this.x04000105;
  }

  get x04000105(): string | undefined {
    const value = this.dwResponse['04000105']?.Value;
    return convert(value?.[0], 0x04000105, 'string');
  }

  getDigitalSignatureDateTime(): string {
    const value = this.x04000105;
    if (value === undefined) {
      throw new Error('DigitalSignatureDateTime is undefined');
    }
    return value;
  }

  // Certificate Type
  get CertificateType(): string | undefined {
    return this.x04000110;
  }

  get x04000110(): string | undefined {
    const value = this.dwResponse['04000110']?.Value;
    return convert(value?.[0], 0x04000110, 'string');
  }

  getCertificateType(): string {
    const value = this.x04000110;
    if (value === undefined) {
      throw new Error('CertificateType is undefined');
    }
    return value;
  }

  // Certified Timestamp Type
  get CertifiedTimestampType(): string | undefined {
    return this.x04000305;
  }

  get x04000305(): string | undefined {
    const value = this.dwResponse['04000305']?.Value;
    return convert(value?.[0], 0x04000305, 'string');
  }

  getCertifiedTimestampType(): string {
    const value = this.x04000305;
    if (value === undefined) {
      throw new Error('CertifiedTimestampType is undefined');
    }
    return value;
  }

  // Digital Signature Purpose Code Sequence
  get DigitalSignaturePurposeCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x04000401;
  }

  get x04000401(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['04000401']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDigitalSignaturePurposeCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x04000401;
    if (value === undefined) {
      throw new Error('DigitalSignaturePurposeCodeSequence is undefined');
    }
    return value;
  }

  // Referenced Digital Signature Sequence
  get ReferencedDigitalSignatureSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x04000402;
  }

  get x04000402(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['04000402']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedDigitalSignatureSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x04000402;
    if (value === undefined) {
      throw new Error('ReferencedDigitalSignatureSequence is undefined');
    }
    return value;
  }

  // Referenced SOP Instance MAC Sequence
  get ReferencedSOPInstanceMACSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x04000403;
  }

  get x04000403(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['04000403']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedSOPInstanceMACSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x04000403;
    if (value === undefined) {
      throw new Error('ReferencedSOPInstanceMACSequence is undefined');
    }
    return value;
  }

  // Encrypted Attributes Sequence
  get EncryptedAttributesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x04000500;
  }

  get x04000500(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['04000500']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getEncryptedAttributesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x04000500;
    if (value === undefined) {
      throw new Error('EncryptedAttributesSequence is undefined');
    }
    return value;
  }

  // Encrypted Content Transfer Syntax UID
  get EncryptedContentTransferSyntaxUID(): string | undefined {
    return this.x04000510;
  }

  get x04000510(): string | undefined {
    const value = this.dwResponse['04000510']?.Value;
    return convert(value?.[0], 0x04000510, 'string');
  }

  getEncryptedContentTransferSyntaxUID(): string {
    const value = this.x04000510;
    if (value === undefined) {
      throw new Error('EncryptedContentTransferSyntaxUID is undefined');
    }
    return value;
  }

  // Modified Attributes Sequence
  get ModifiedAttributesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x04000550;
  }

  get x04000550(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['04000550']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getModifiedAttributesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x04000550;
    if (value === undefined) {
      throw new Error('ModifiedAttributesSequence is undefined');
    }
    return value;
  }

  // Original Attributes Sequence
  get OriginalAttributesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x04000561;
  }

  get x04000561(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['04000561']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOriginalAttributesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x04000561;
    if (value === undefined) {
      throw new Error('OriginalAttributesSequence is undefined');
    }
    return value;
  }

  // Attribute Modification DateTime
  get AttributeModificationDateTime(): string | undefined {
    return this.x04000562;
  }

  get x04000562(): string | undefined {
    const value = this.dwResponse['04000562']?.Value;
    return convert(value?.[0], 0x04000562, 'string');
  }

  getAttributeModificationDateTime(): string {
    const value = this.x04000562;
    if (value === undefined) {
      throw new Error('AttributeModificationDateTime is undefined');
    }
    return value;
  }

  // Modifying System
  get ModifyingSystem(): string | undefined {
    return this.x04000563;
  }

  get x04000563(): string | undefined {
    const value = this.dwResponse['04000563']?.Value;
    return convert(value?.[0], 0x04000563, 'string');
  }

  getModifyingSystem(): string {
    const value = this.x04000563;
    if (value === undefined) {
      throw new Error('ModifyingSystem is undefined');
    }
    return value;
  }

  // Source of Previous Values
  get SourceOfPreviousValues(): string | undefined {
    return this.x04000564;
  }

  get x04000564(): string | undefined {
    const value = this.dwResponse['04000564']?.Value;
    return convert(value?.[0], 0x04000564, 'string');
  }

  getSourceOfPreviousValues(): string {
    const value = this.x04000564;
    if (value === undefined) {
      throw new Error('SourceOfPreviousValues is undefined');
    }
    return value;
  }

  // Reason for the Attribute Modification
  get ReasonForTheAttributeModification(): string | undefined {
    return this.x04000565;
  }

  get x04000565(): string | undefined {
    const value = this.dwResponse['04000565']?.Value;
    return convert(value?.[0], 0x04000565, 'string');
  }

  getReasonForTheAttributeModification(): string {
    const value = this.x04000565;
    if (value === undefined) {
      throw new Error('ReasonForTheAttributeModification is undefined');
    }
    return value;
  }

  // Escape Triplet
  get EscapeTriplet(): Array<number | undefined> | undefined {
    return this.x1000xxx0;
  }

  get x1000xxx0(): Array<number | undefined> | undefined {
    const value = this.dwResponse['1000XXX0']?.Value;
    throw new Error('Unsupported field EscapeTriplet (1000xxx0)');
  }

  getEscapeTriplet(): Array<number | undefined> {
    const value = this.x1000xxx0;
    if (value === undefined) {
      throw new Error('EscapeTriplet is undefined');
    }
    return value;
  }

  // Run Length Triplet
  get RunLengthTriplet(): Array<number | undefined> | undefined {
    return this.x1000xxx1;
  }

  get x1000xxx1(): Array<number | undefined> | undefined {
    const value = this.dwResponse['1000XXX1']?.Value;
    throw new Error('Unsupported field RunLengthTriplet (1000xxx1)');
  }

  getRunLengthTriplet(): Array<number | undefined> {
    const value = this.x1000xxx1;
    if (value === undefined) {
      throw new Error('RunLengthTriplet is undefined');
    }
    return value;
  }

  // Huffman Table Size
  get HuffmanTableSize(): number | undefined {
    return this.x1000xxx2;
  }

  get x1000xxx2(): number | undefined {
    const value = this.dwResponse['1000XXX2']?.Value;
    throw new Error('Unsupported field HuffmanTableSize (1000xxx2)');
  }

  getHuffmanTableSize(): number {
    const value = this.x1000xxx2;
    if (value === undefined) {
      throw new Error('HuffmanTableSize is undefined');
    }
    return value;
  }

  // Huffman Table Triplet
  get HuffmanTableTriplet(): Array<number | undefined> | undefined {
    return this.x1000xxx3;
  }

  get x1000xxx3(): Array<number | undefined> | undefined {
    const value = this.dwResponse['1000XXX3']?.Value;
    throw new Error('Unsupported field HuffmanTableTriplet (1000xxx3)');
  }

  getHuffmanTableTriplet(): Array<number | undefined> {
    const value = this.x1000xxx3;
    if (value === undefined) {
      throw new Error('HuffmanTableTriplet is undefined');
    }
    return value;
  }

  // Shift Table Size
  get ShiftTableSize(): number | undefined {
    return this.x1000xxx4;
  }

  get x1000xxx4(): number | undefined {
    const value = this.dwResponse['1000XXX4']?.Value;
    throw new Error('Unsupported field ShiftTableSize (1000xxx4)');
  }

  getShiftTableSize(): number {
    const value = this.x1000xxx4;
    if (value === undefined) {
      throw new Error('ShiftTableSize is undefined');
    }
    return value;
  }

  // Shift Table Triplet
  get ShiftTableTriplet(): Array<number | undefined> | undefined {
    return this.x1000xxx5;
  }

  get x1000xxx5(): Array<number | undefined> | undefined {
    const value = this.dwResponse['1000XXX5']?.Value;
    throw new Error('Unsupported field ShiftTableTriplet (1000xxx5)');
  }

  getShiftTableTriplet(): Array<number | undefined> {
    const value = this.x1000xxx5;
    if (value === undefined) {
      throw new Error('ShiftTableTriplet is undefined');
    }
    return value;
  }

  // Zonal Map
  get ZonalMap(): Array<number | undefined> | undefined {
    return this.x1010xxxx;
  }

  get x1010xxxx(): Array<number | undefined> | undefined {
    const value = this.dwResponse['1010XXXX']?.Value;
    throw new Error('Unsupported field ZonalMap (1010xxxx)');
  }

  getZonalMap(): Array<number | undefined> {
    const value = this.x1010xxxx;
    if (value === undefined) {
      throw new Error('ZonalMap is undefined');
    }
    return value;
  }

  // Number of Copies
  get NumberOfCopies(): number | undefined {
    return this.x20000010;
  }

  get x20000010(): number | undefined {
    const value = this.dwResponse['20000010']?.Value;
    return convert(value?.[0], 0x20000010, 'number');
  }

  getNumberOfCopies(): number {
    const value = this.x20000010;
    if (value === undefined) {
      throw new Error('NumberOfCopies is undefined');
    }
    return value;
  }

  // Printer Configuration Sequence
  get PrinterConfigurationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x2000001e;
  }

  get x2000001e(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['2000001E']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPrinterConfigurationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x2000001e;
    if (value === undefined) {
      throw new Error('PrinterConfigurationSequence is undefined');
    }
    return value;
  }

  // Print Priority
  get PrintPriority(): string | undefined {
    return this.x20000020;
  }

  get x20000020(): string | undefined {
    const value = this.dwResponse['20000020']?.Value;
    return convert(value?.[0], 0x20000020, 'string');
  }

  getPrintPriority(): string {
    const value = this.x20000020;
    if (value === undefined) {
      throw new Error('PrintPriority is undefined');
    }
    return value;
  }

  // Medium Type
  get MediumType(): string | undefined {
    return this.x20000030;
  }

  get x20000030(): string | undefined {
    const value = this.dwResponse['20000030']?.Value;
    return convert(value?.[0], 0x20000030, 'string');
  }

  getMediumType(): string {
    const value = this.x20000030;
    if (value === undefined) {
      throw new Error('MediumType is undefined');
    }
    return value;
  }

  // Film Destination
  get FilmDestination(): string | undefined {
    return this.x20000040;
  }

  get x20000040(): string | undefined {
    const value = this.dwResponse['20000040']?.Value;
    return convert(value?.[0], 0x20000040, 'string');
  }

  getFilmDestination(): string {
    const value = this.x20000040;
    if (value === undefined) {
      throw new Error('FilmDestination is undefined');
    }
    return value;
  }

  // Film Session Label
  get FilmSessionLabel(): string | undefined {
    return this.x20000050;
  }

  get x20000050(): string | undefined {
    const value = this.dwResponse['20000050']?.Value;
    return convert(value?.[0], 0x20000050, 'string');
  }

  getFilmSessionLabel(): string {
    const value = this.x20000050;
    if (value === undefined) {
      throw new Error('FilmSessionLabel is undefined');
    }
    return value;
  }

  // Memory Allocation
  get MemoryAllocation(): number | undefined {
    return this.x20000060;
  }

  get x20000060(): number | undefined {
    const value = this.dwResponse['20000060']?.Value;
    return convert(value?.[0], 0x20000060, 'number');
  }

  getMemoryAllocation(): number {
    const value = this.x20000060;
    if (value === undefined) {
      throw new Error('MemoryAllocation is undefined');
    }
    return value;
  }

  // Maximum Memory Allocation
  get MaximumMemoryAllocation(): number | undefined {
    return this.x20000061;
  }

  get x20000061(): number | undefined {
    const value = this.dwResponse['20000061']?.Value;
    return convert(value?.[0], 0x20000061, 'number');
  }

  getMaximumMemoryAllocation(): number {
    const value = this.x20000061;
    if (value === undefined) {
      throw new Error('MaximumMemoryAllocation is undefined');
    }
    return value;
  }

  // Color Image Printing Flag
  get ColorImagePrintingFlag(): string | undefined {
    return this.x20000062;
  }

  get x20000062(): string | undefined {
    const value = this.dwResponse['20000062']?.Value;
    return convert(value?.[0], 0x20000062, 'string');
  }

  getColorImagePrintingFlag(): string {
    const value = this.x20000062;
    if (value === undefined) {
      throw new Error('ColorImagePrintingFlag is undefined');
    }
    return value;
  }

  // Collation Flag
  get CollationFlag(): string | undefined {
    return this.x20000063;
  }

  get x20000063(): string | undefined {
    const value = this.dwResponse['20000063']?.Value;
    return convert(value?.[0], 0x20000063, 'string');
  }

  getCollationFlag(): string {
    const value = this.x20000063;
    if (value === undefined) {
      throw new Error('CollationFlag is undefined');
    }
    return value;
  }

  // Annotation Flag
  get AnnotationFlag(): string | undefined {
    return this.x20000065;
  }

  get x20000065(): string | undefined {
    const value = this.dwResponse['20000065']?.Value;
    return convert(value?.[0], 0x20000065, 'string');
  }

  getAnnotationFlag(): string {
    const value = this.x20000065;
    if (value === undefined) {
      throw new Error('AnnotationFlag is undefined');
    }
    return value;
  }

  // Image Overlay Flag
  get ImageOverlayFlag(): string | undefined {
    return this.x20000067;
  }

  get x20000067(): string | undefined {
    const value = this.dwResponse['20000067']?.Value;
    return convert(value?.[0], 0x20000067, 'string');
  }

  getImageOverlayFlag(): string {
    const value = this.x20000067;
    if (value === undefined) {
      throw new Error('ImageOverlayFlag is undefined');
    }
    return value;
  }

  // Presentation LUT Flag
  get PresentationLUTFlag(): string | undefined {
    return this.x20000069;
  }

  get x20000069(): string | undefined {
    const value = this.dwResponse['20000069']?.Value;
    return convert(value?.[0], 0x20000069, 'string');
  }

  getPresentationLUTFlag(): string {
    const value = this.x20000069;
    if (value === undefined) {
      throw new Error('PresentationLUTFlag is undefined');
    }
    return value;
  }

  // Image Box Presentation LUT Flag
  get ImageBoxPresentationLUTFlag(): string | undefined {
    return this.x2000006a;
  }

  get x2000006a(): string | undefined {
    const value = this.dwResponse['2000006A']?.Value;
    return convert(value?.[0], 0x2000006a, 'string');
  }

  getImageBoxPresentationLUTFlag(): string {
    const value = this.x2000006a;
    if (value === undefined) {
      throw new Error('ImageBoxPresentationLUTFlag is undefined');
    }
    return value;
  }

  // Memory Bit Depth
  get MemoryBitDepth(): number | undefined {
    return this.x200000a0;
  }

  get x200000a0(): number | undefined {
    const value = this.dwResponse['200000A0']?.Value;
    return convert(value?.[0], 0x200000a0, 'number');
  }

  getMemoryBitDepth(): number {
    const value = this.x200000a0;
    if (value === undefined) {
      throw new Error('MemoryBitDepth is undefined');
    }
    return value;
  }

  // Printing Bit Depth
  get PrintingBitDepth(): number | undefined {
    return this.x200000a1;
  }

  get x200000a1(): number | undefined {
    const value = this.dwResponse['200000A1']?.Value;
    return convert(value?.[0], 0x200000a1, 'number');
  }

  getPrintingBitDepth(): number {
    const value = this.x200000a1;
    if (value === undefined) {
      throw new Error('PrintingBitDepth is undefined');
    }
    return value;
  }

  // Media Installed Sequence
  get MediaInstalledSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x200000a2;
  }

  get x200000a2(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['200000A2']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMediaInstalledSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x200000a2;
    if (value === undefined) {
      throw new Error('MediaInstalledSequence is undefined');
    }
    return value;
  }

  // Other Media Available Sequence
  get OtherMediaAvailableSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x200000a4;
  }

  get x200000a4(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['200000A4']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOtherMediaAvailableSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x200000a4;
    if (value === undefined) {
      throw new Error('OtherMediaAvailableSequence is undefined');
    }
    return value;
  }

  // Supported Image Display Formats Sequence
  get SupportedImageDisplayFormatsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x200000a8;
  }

  get x200000a8(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['200000A8']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSupportedImageDisplayFormatsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x200000a8;
    if (value === undefined) {
      throw new Error('SupportedImageDisplayFormatsSequence is undefined');
    }
    return value;
  }

  // Referenced Film Box Sequence
  get ReferencedFilmBoxSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x20000500;
  }

  get x20000500(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['20000500']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedFilmBoxSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x20000500;
    if (value === undefined) {
      throw new Error('ReferencedFilmBoxSequence is undefined');
    }
    return value;
  }

  // Referenced Stored Print Sequence
  get ReferencedStoredPrintSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x20000510;
  }

  get x20000510(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['20000510']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedStoredPrintSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x20000510;
    if (value === undefined) {
      throw new Error('ReferencedStoredPrintSequence is undefined');
    }
    return value;
  }

  // Annotation Display Format ID
  get AnnotationDisplayFormatID(): string | undefined {
    return this.x20100030;
  }

  get x20100030(): string | undefined {
    const value = this.dwResponse['20100030']?.Value;
    return convert(value?.[0], 0x20100030, 'string');
  }

  getAnnotationDisplayFormatID(): string {
    const value = this.x20100030;
    if (value === undefined) {
      throw new Error('AnnotationDisplayFormatID is undefined');
    }
    return value;
  }

  // Film Orientation
  get FilmOrientation(): string | undefined {
    return this.x20100040;
  }

  get x20100040(): string | undefined {
    const value = this.dwResponse['20100040']?.Value;
    return convert(value?.[0], 0x20100040, 'string');
  }

  getFilmOrientation(): string {
    const value = this.x20100040;
    if (value === undefined) {
      throw new Error('FilmOrientation is undefined');
    }
    return value;
  }

  // Film Size ID
  get FilmSizeID(): string | undefined {
    return this.x20100050;
  }

  get x20100050(): string | undefined {
    const value = this.dwResponse['20100050']?.Value;
    return convert(value?.[0], 0x20100050, 'string');
  }

  getFilmSizeID(): string {
    const value = this.x20100050;
    if (value === undefined) {
      throw new Error('FilmSizeID is undefined');
    }
    return value;
  }

  // Printer Resolution ID
  get PrinterResolutionID(): string | undefined {
    return this.x20100052;
  }

  get x20100052(): string | undefined {
    const value = this.dwResponse['20100052']?.Value;
    return convert(value?.[0], 0x20100052, 'string');
  }

  getPrinterResolutionID(): string {
    const value = this.x20100052;
    if (value === undefined) {
      throw new Error('PrinterResolutionID is undefined');
    }
    return value;
  }

  // Default Printer Resolution ID
  get DefaultPrinterResolutionID(): string | undefined {
    return this.x20100054;
  }

  get x20100054(): string | undefined {
    const value = this.dwResponse['20100054']?.Value;
    return convert(value?.[0], 0x20100054, 'string');
  }

  getDefaultPrinterResolutionID(): string {
    const value = this.x20100054;
    if (value === undefined) {
      throw new Error('DefaultPrinterResolutionID is undefined');
    }
    return value;
  }

  // Magnification Type
  get MagnificationType(): string | undefined {
    return this.x20100060;
  }

  get x20100060(): string | undefined {
    const value = this.dwResponse['20100060']?.Value;
    return convert(value?.[0], 0x20100060, 'string');
  }

  getMagnificationType(): string {
    const value = this.x20100060;
    if (value === undefined) {
      throw new Error('MagnificationType is undefined');
    }
    return value;
  }

  // Smoothing Type
  get SmoothingType(): string | undefined {
    return this.x20100080;
  }

  get x20100080(): string | undefined {
    const value = this.dwResponse['20100080']?.Value;
    return convert(value?.[0], 0x20100080, 'string');
  }

  getSmoothingType(): string {
    const value = this.x20100080;
    if (value === undefined) {
      throw new Error('SmoothingType is undefined');
    }
    return value;
  }

  // Default Magnification Type
  get DefaultMagnificationType(): string | undefined {
    return this.x201000a6;
  }

  get x201000a6(): string | undefined {
    const value = this.dwResponse['201000A6']?.Value;
    return convert(value?.[0], 0x201000a6, 'string');
  }

  getDefaultMagnificationType(): string {
    const value = this.x201000a6;
    if (value === undefined) {
      throw new Error('DefaultMagnificationType is undefined');
    }
    return value;
  }

  // Other Magnification Types Available
  get OtherMagnificationTypesAvailable(): Array<string | undefined> | undefined {
    return this.x201000a7;
  }

  get x201000a7(): Array<string | undefined> | undefined {
    const value = this.dwResponse['201000A7']?.Value;
    return convert(value, 0x201000a7, 'Array<string | undefined>');
  }

  getOtherMagnificationTypesAvailable(): Array<string | undefined> {
    const value = this.x201000a7;
    if (value === undefined) {
      throw new Error('OtherMagnificationTypesAvailable is undefined');
    }
    return value;
  }

  // Default Smoothing Type
  get DefaultSmoothingType(): string | undefined {
    return this.x201000a8;
  }

  get x201000a8(): string | undefined {
    const value = this.dwResponse['201000A8']?.Value;
    return convert(value?.[0], 0x201000a8, 'string');
  }

  getDefaultSmoothingType(): string {
    const value = this.x201000a8;
    if (value === undefined) {
      throw new Error('DefaultSmoothingType is undefined');
    }
    return value;
  }

  // Other Smoothing Types Available
  get OtherSmoothingTypesAvailable(): Array<string | undefined> | undefined {
    return this.x201000a9;
  }

  get x201000a9(): Array<string | undefined> | undefined {
    const value = this.dwResponse['201000A9']?.Value;
    return convert(value, 0x201000a9, 'Array<string | undefined>');
  }

  getOtherSmoothingTypesAvailable(): Array<string | undefined> {
    const value = this.x201000a9;
    if (value === undefined) {
      throw new Error('OtherSmoothingTypesAvailable is undefined');
    }
    return value;
  }

  // Border Density
  get BorderDensity(): string | undefined {
    return this.x20100100;
  }

  get x20100100(): string | undefined {
    const value = this.dwResponse['20100100']?.Value;
    return convert(value?.[0], 0x20100100, 'string');
  }

  getBorderDensity(): string {
    const value = this.x20100100;
    if (value === undefined) {
      throw new Error('BorderDensity is undefined');
    }
    return value;
  }

  // Empty Image Density
  get EmptyImageDensity(): string | undefined {
    return this.x20100110;
  }

  get x20100110(): string | undefined {
    const value = this.dwResponse['20100110']?.Value;
    return convert(value?.[0], 0x20100110, 'string');
  }

  getEmptyImageDensity(): string {
    const value = this.x20100110;
    if (value === undefined) {
      throw new Error('EmptyImageDensity is undefined');
    }
    return value;
  }

  // Min Density
  get MinDensity(): number | undefined {
    return this.x20100120;
  }

  get x20100120(): number | undefined {
    const value = this.dwResponse['20100120']?.Value;
    return convert(value?.[0], 0x20100120, 'number');
  }

  getMinDensity(): number {
    const value = this.x20100120;
    if (value === undefined) {
      throw new Error('MinDensity is undefined');
    }
    return value;
  }

  // Max Density
  get MaxDensity(): number | undefined {
    return this.x20100130;
  }

  get x20100130(): number | undefined {
    const value = this.dwResponse['20100130']?.Value;
    return convert(value?.[0], 0x20100130, 'number');
  }

  getMaxDensity(): number {
    const value = this.x20100130;
    if (value === undefined) {
      throw new Error('MaxDensity is undefined');
    }
    return value;
  }

  // Trim
  get Trim(): string | undefined {
    return this.x20100140;
  }

  get x20100140(): string | undefined {
    const value = this.dwResponse['20100140']?.Value;
    return convert(value?.[0], 0x20100140, 'string');
  }

  getTrim(): string {
    const value = this.x20100140;
    if (value === undefined) {
      throw new Error('Trim is undefined');
    }
    return value;
  }

  // Maximum Collated Films
  get MaximumCollatedFilms(): number | undefined {
    return this.x20100154;
  }

  get x20100154(): number | undefined {
    const value = this.dwResponse['20100154']?.Value;
    return convert(value?.[0], 0x20100154, 'number');
  }

  getMaximumCollatedFilms(): number {
    const value = this.x20100154;
    if (value === undefined) {
      throw new Error('MaximumCollatedFilms is undefined');
    }
    return value;
  }

  // Illumination
  get Illumination(): number | undefined {
    return this.x2010015e;
  }

  get x2010015e(): number | undefined {
    const value = this.dwResponse['2010015E']?.Value;
    return convert(value?.[0], 0x2010015e, 'number');
  }

  getIllumination(): number {
    const value = this.x2010015e;
    if (value === undefined) {
      throw new Error('Illumination is undefined');
    }
    return value;
  }

  // Reflected Ambient Light
  get ReflectedAmbientLight(): number | undefined {
    return this.x20100160;
  }

  get x20100160(): number | undefined {
    const value = this.dwResponse['20100160']?.Value;
    return convert(value?.[0], 0x20100160, 'number');
  }

  getReflectedAmbientLight(): number {
    const value = this.x20100160;
    if (value === undefined) {
      throw new Error('ReflectedAmbientLight is undefined');
    }
    return value;
  }

  // Printer Pixel Spacing
  get PrinterPixelSpacing(): Array<number | undefined> | undefined {
    return this.x20100376;
  }

  get x20100376(): Array<number | undefined> | undefined {
    const value = this.dwResponse['20100376']?.Value;
    return convert(value, 0x20100376, 'Array<number | undefined>');
  }

  getPrinterPixelSpacing(): Array<number | undefined> {
    const value = this.x20100376;
    if (value === undefined) {
      throw new Error('PrinterPixelSpacing is undefined');
    }
    return value;
  }

  // Referenced Film Session Sequence
  get ReferencedFilmSessionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x20100500;
  }

  get x20100500(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['20100500']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedFilmSessionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x20100500;
    if (value === undefined) {
      throw new Error('ReferencedFilmSessionSequence is undefined');
    }
    return value;
  }

  // Referenced Image Box Sequence
  get ReferencedImageBoxSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x20100510;
  }

  get x20100510(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['20100510']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedImageBoxSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x20100510;
    if (value === undefined) {
      throw new Error('ReferencedImageBoxSequence is undefined');
    }
    return value;
  }

  // Referenced Basic Annotation Box Sequence
  get ReferencedBasicAnnotationBoxSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x20100520;
  }

  get x20100520(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['20100520']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedBasicAnnotationBoxSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x20100520;
    if (value === undefined) {
      throw new Error('ReferencedBasicAnnotationBoxSequence is undefined');
    }
    return value;
  }

  // Image Box Position
  get ImageBoxPosition(): number | undefined {
    return this.x20200010;
  }

  get x20200010(): number | undefined {
    const value = this.dwResponse['20200010']?.Value;
    return convert(value?.[0], 0x20200010, 'number');
  }

  getImageBoxPosition(): number {
    const value = this.x20200010;
    if (value === undefined) {
      throw new Error('ImageBoxPosition is undefined');
    }
    return value;
  }

  // Polarity
  get Polarity(): string | undefined {
    return this.x20200020;
  }

  get x20200020(): string | undefined {
    const value = this.dwResponse['20200020']?.Value;
    return convert(value?.[0], 0x20200020, 'string');
  }

  getPolarity(): string {
    const value = this.x20200020;
    if (value === undefined) {
      throw new Error('Polarity is undefined');
    }
    return value;
  }

  // Requested Image Size
  get RequestedImageSize(): number | undefined {
    return this.x20200030;
  }

  get x20200030(): number | undefined {
    const value = this.dwResponse['20200030']?.Value;
    return convert(value?.[0], 0x20200030, 'number');
  }

  getRequestedImageSize(): number {
    const value = this.x20200030;
    if (value === undefined) {
      throw new Error('RequestedImageSize is undefined');
    }
    return value;
  }

  // Requested Decimate/Crop Behavior
  get RequestedDecimateCropBehavior(): string | undefined {
    return this.x20200040;
  }

  get x20200040(): string | undefined {
    const value = this.dwResponse['20200040']?.Value;
    return convert(value?.[0], 0x20200040, 'string');
  }

  getRequestedDecimateCropBehavior(): string {
    const value = this.x20200040;
    if (value === undefined) {
      throw new Error('RequestedDecimateCropBehavior is undefined');
    }
    return value;
  }

  // Requested Resolution ID
  get RequestedResolutionID(): string | undefined {
    return this.x20200050;
  }

  get x20200050(): string | undefined {
    const value = this.dwResponse['20200050']?.Value;
    return convert(value?.[0], 0x20200050, 'string');
  }

  getRequestedResolutionID(): string {
    const value = this.x20200050;
    if (value === undefined) {
      throw new Error('RequestedResolutionID is undefined');
    }
    return value;
  }

  // Requested Image Size Flag
  get RequestedImageSizeFlag(): string | undefined {
    return this.x202000a0;
  }

  get x202000a0(): string | undefined {
    const value = this.dwResponse['202000A0']?.Value;
    return convert(value?.[0], 0x202000a0, 'string');
  }

  getRequestedImageSizeFlag(): string {
    const value = this.x202000a0;
    if (value === undefined) {
      throw new Error('RequestedImageSizeFlag is undefined');
    }
    return value;
  }

  // Decimate/Crop Result
  get DecimateCropResult(): string | undefined {
    return this.x202000a2;
  }

  get x202000a2(): string | undefined {
    const value = this.dwResponse['202000A2']?.Value;
    return convert(value?.[0], 0x202000a2, 'string');
  }

  getDecimateCropResult(): string {
    const value = this.x202000a2;
    if (value === undefined) {
      throw new Error('DecimateCropResult is undefined');
    }
    return value;
  }

  // Basic Grayscale Image Sequence
  get BasicGrayscaleImageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x20200110;
  }

  get x20200110(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['20200110']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBasicGrayscaleImageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x20200110;
    if (value === undefined) {
      throw new Error('BasicGrayscaleImageSequence is undefined');
    }
    return value;
  }

  // Basic Color Image Sequence
  get BasicColorImageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x20200111;
  }

  get x20200111(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['20200111']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBasicColorImageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x20200111;
    if (value === undefined) {
      throw new Error('BasicColorImageSequence is undefined');
    }
    return value;
  }

  // Referenced Image Overlay Box Sequence
  get ReferencedImageOverlayBoxSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x20200130;
  }

  get x20200130(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['20200130']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedImageOverlayBoxSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x20200130;
    if (value === undefined) {
      throw new Error('ReferencedImageOverlayBoxSequence is undefined');
    }
    return value;
  }

  // Referenced VOI LUT Box Sequence
  get ReferencedVOILUTBoxSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x20200140;
  }

  get x20200140(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['20200140']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedVOILUTBoxSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x20200140;
    if (value === undefined) {
      throw new Error('ReferencedVOILUTBoxSequence is undefined');
    }
    return value;
  }

  // Annotation Position
  get AnnotationPosition(): number | undefined {
    return this.x20300010;
  }

  get x20300010(): number | undefined {
    const value = this.dwResponse['20300010']?.Value;
    return convert(value?.[0], 0x20300010, 'number');
  }

  getAnnotationPosition(): number {
    const value = this.x20300010;
    if (value === undefined) {
      throw new Error('AnnotationPosition is undefined');
    }
    return value;
  }

  // Text String
  get TextString(): string | undefined {
    return this.x20300020;
  }

  get x20300020(): string | undefined {
    const value = this.dwResponse['20300020']?.Value;
    return convert(value?.[0], 0x20300020, 'string');
  }

  getTextString(): string {
    const value = this.x20300020;
    if (value === undefined) {
      throw new Error('TextString is undefined');
    }
    return value;
  }

  // Referenced Overlay Plane Sequence
  get ReferencedOverlayPlaneSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x20400010;
  }

  get x20400010(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['20400010']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedOverlayPlaneSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x20400010;
    if (value === undefined) {
      throw new Error('ReferencedOverlayPlaneSequence is undefined');
    }
    return value;
  }

  // Referenced Overlay Plane Groups
  get ReferencedOverlayPlaneGroups(): Array<number | undefined> | undefined {
    return this.x20400011;
  }

  get x20400011(): Array<number | undefined> | undefined {
    const value = this.dwResponse['20400011']?.Value;
    return convert(value, 0x20400011, 'Array<number | undefined>');
  }

  getReferencedOverlayPlaneGroups(): Array<number | undefined> {
    const value = this.x20400011;
    if (value === undefined) {
      throw new Error('ReferencedOverlayPlaneGroups is undefined');
    }
    return value;
  }

  // Overlay Pixel Data Sequence
  get OverlayPixelDataSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x20400020;
  }

  get x20400020(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['20400020']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOverlayPixelDataSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x20400020;
    if (value === undefined) {
      throw new Error('OverlayPixelDataSequence is undefined');
    }
    return value;
  }

  // Overlay Magnification Type
  get OverlayMagnificationType(): string | undefined {
    return this.x20400060;
  }

  get x20400060(): string | undefined {
    const value = this.dwResponse['20400060']?.Value;
    return convert(value?.[0], 0x20400060, 'string');
  }

  getOverlayMagnificationType(): string {
    const value = this.x20400060;
    if (value === undefined) {
      throw new Error('OverlayMagnificationType is undefined');
    }
    return value;
  }

  // Overlay Smoothing Type
  get OverlaySmoothingType(): string | undefined {
    return this.x20400070;
  }

  get x20400070(): string | undefined {
    const value = this.dwResponse['20400070']?.Value;
    return convert(value?.[0], 0x20400070, 'string');
  }

  getOverlaySmoothingType(): string {
    const value = this.x20400070;
    if (value === undefined) {
      throw new Error('OverlaySmoothingType is undefined');
    }
    return value;
  }

  // Overlay or Image Magnification
  get OverlayOrImageMagnification(): string | undefined {
    return this.x20400072;
  }

  get x20400072(): string | undefined {
    const value = this.dwResponse['20400072']?.Value;
    return convert(value?.[0], 0x20400072, 'string');
  }

  getOverlayOrImageMagnification(): string {
    const value = this.x20400072;
    if (value === undefined) {
      throw new Error('OverlayOrImageMagnification is undefined');
    }
    return value;
  }

  // Magnify to Number of Columns
  get MagnifyToNumberOfColumns(): number | undefined {
    return this.x20400074;
  }

  get x20400074(): number | undefined {
    const value = this.dwResponse['20400074']?.Value;
    return convert(value?.[0], 0x20400074, 'number');
  }

  getMagnifyToNumberOfColumns(): number {
    const value = this.x20400074;
    if (value === undefined) {
      throw new Error('MagnifyToNumberOfColumns is undefined');
    }
    return value;
  }

  // Overlay Foreground Density
  get OverlayForegroundDensity(): string | undefined {
    return this.x20400080;
  }

  get x20400080(): string | undefined {
    const value = this.dwResponse['20400080']?.Value;
    return convert(value?.[0], 0x20400080, 'string');
  }

  getOverlayForegroundDensity(): string {
    const value = this.x20400080;
    if (value === undefined) {
      throw new Error('OverlayForegroundDensity is undefined');
    }
    return value;
  }

  // Overlay Background Density
  get OverlayBackgroundDensity(): string | undefined {
    return this.x20400082;
  }

  get x20400082(): string | undefined {
    const value = this.dwResponse['20400082']?.Value;
    return convert(value?.[0], 0x20400082, 'string');
  }

  getOverlayBackgroundDensity(): string {
    const value = this.x20400082;
    if (value === undefined) {
      throw new Error('OverlayBackgroundDensity is undefined');
    }
    return value;
  }

  // Overlay Mode
  get OverlayMode(): string | undefined {
    return this.x20400090;
  }

  get x20400090(): string | undefined {
    const value = this.dwResponse['20400090']?.Value;
    return convert(value?.[0], 0x20400090, 'string');
  }

  getOverlayMode(): string {
    const value = this.x20400090;
    if (value === undefined) {
      throw new Error('OverlayMode is undefined');
    }
    return value;
  }

  // Threshold Density
  get ThresholdDensity(): string | undefined {
    return this.x20400100;
  }

  get x20400100(): string | undefined {
    const value = this.dwResponse['20400100']?.Value;
    return convert(value?.[0], 0x20400100, 'string');
  }

  getThresholdDensity(): string {
    const value = this.x20400100;
    if (value === undefined) {
      throw new Error('ThresholdDensity is undefined');
    }
    return value;
  }

  // Referenced Image Box Sequence (Retired)
  get ReferencedImageBoxSequenceRetired(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x20400500;
  }

  get x20400500(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['20400500']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedImageBoxSequenceRetired(): Array<Partial<Dataset> | undefined> {
    const value = this.x20400500;
    if (value === undefined) {
      throw new Error('ReferencedImageBoxSequenceRetired is undefined');
    }
    return value;
  }

  // Presentation LUT Sequence
  get PresentationLUTSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x20500010;
  }

  get x20500010(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['20500010']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPresentationLUTSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x20500010;
    if (value === undefined) {
      throw new Error('PresentationLUTSequence is undefined');
    }
    return value;
  }

  // Presentation LUT Shape
  get PresentationLUTShape(): string | undefined {
    return this.x20500020;
  }

  get x20500020(): string | undefined {
    const value = this.dwResponse['20500020']?.Value;
    return convert(value?.[0], 0x20500020, 'string');
  }

  getPresentationLUTShape(): string {
    const value = this.x20500020;
    if (value === undefined) {
      throw new Error('PresentationLUTShape is undefined');
    }
    return value;
  }

  // Referenced Presentation LUT Sequence
  get ReferencedPresentationLUTSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x20500500;
  }

  get x20500500(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['20500500']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedPresentationLUTSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x20500500;
    if (value === undefined) {
      throw new Error('ReferencedPresentationLUTSequence is undefined');
    }
    return value;
  }

  // Print Job ID
  get PrintJobID(): string | undefined {
    return this.x21000010;
  }

  get x21000010(): string | undefined {
    const value = this.dwResponse['21000010']?.Value;
    return convert(value?.[0], 0x21000010, 'string');
  }

  getPrintJobID(): string {
    const value = this.x21000010;
    if (value === undefined) {
      throw new Error('PrintJobID is undefined');
    }
    return value;
  }

  // Execution Status
  get ExecutionStatus(): string | undefined {
    return this.x21000020;
  }

  get x21000020(): string | undefined {
    const value = this.dwResponse['21000020']?.Value;
    return convert(value?.[0], 0x21000020, 'string');
  }

  getExecutionStatus(): string {
    const value = this.x21000020;
    if (value === undefined) {
      throw new Error('ExecutionStatus is undefined');
    }
    return value;
  }

  // Execution Status Info
  get ExecutionStatusInfo(): string | undefined {
    return this.x21000030;
  }

  get x21000030(): string | undefined {
    const value = this.dwResponse['21000030']?.Value;
    return convert(value?.[0], 0x21000030, 'string');
  }

  getExecutionStatusInfo(): string {
    const value = this.x21000030;
    if (value === undefined) {
      throw new Error('ExecutionStatusInfo is undefined');
    }
    return value;
  }

  // Creation Date
  get CreationDate(): Date | undefined {
    return this.x21000040;
  }

  get x21000040(): Date | undefined {
    const value = this.dwResponse['21000040']?.Value;
    return convert(value?.[0], 0x21000040, 'Date');
  }

  getCreationDate(): Date {
    const value = this.x21000040;
    if (value === undefined) {
      throw new Error('CreationDate is undefined');
    }
    return value;
  }

  // Creation Time
  get CreationTime(): string | undefined {
    return this.x21000050;
  }

  get x21000050(): string | undefined {
    const value = this.dwResponse['21000050']?.Value;
    return convert(value?.[0], 0x21000050, 'string');
  }

  getCreationTime(): string {
    const value = this.x21000050;
    if (value === undefined) {
      throw new Error('CreationTime is undefined');
    }
    return value;
  }

  // Originator
  get Originator(): string | undefined {
    return this.x21000070;
  }

  get x21000070(): string | undefined {
    const value = this.dwResponse['21000070']?.Value;
    return convert(value?.[0], 0x21000070, 'string');
  }

  getOriginator(): string {
    const value = this.x21000070;
    if (value === undefined) {
      throw new Error('Originator is undefined');
    }
    return value;
  }

  // Destination AE
  get DestinationAE(): string | undefined {
    return this.x21000140;
  }

  get x21000140(): string | undefined {
    const value = this.dwResponse['21000140']?.Value;
    return convert(value?.[0], 0x21000140, 'string');
  }

  getDestinationAE(): string {
    const value = this.x21000140;
    if (value === undefined) {
      throw new Error('DestinationAE is undefined');
    }
    return value;
  }

  // Owner ID
  get OwnerID(): string | undefined {
    return this.x21000160;
  }

  get x21000160(): string | undefined {
    const value = this.dwResponse['21000160']?.Value;
    return convert(value?.[0], 0x21000160, 'string');
  }

  getOwnerID(): string {
    const value = this.x21000160;
    if (value === undefined) {
      throw new Error('OwnerID is undefined');
    }
    return value;
  }

  // Number of Films
  get NumberOfFilms(): number | undefined {
    return this.x21000170;
  }

  get x21000170(): number | undefined {
    const value = this.dwResponse['21000170']?.Value;
    return convert(value?.[0], 0x21000170, 'number');
  }

  getNumberOfFilms(): number {
    const value = this.x21000170;
    if (value === undefined) {
      throw new Error('NumberOfFilms is undefined');
    }
    return value;
  }

  // Referenced Print Job Sequence (Pull Stored Print)
  get ReferencedPrintJobSequencePullStoredPrint(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x21000500;
  }

  get x21000500(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['21000500']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedPrintJobSequencePullStoredPrint(): Array<Partial<Dataset> | undefined> {
    const value = this.x21000500;
    if (value === undefined) {
      throw new Error('ReferencedPrintJobSequencePullStoredPrint is undefined');
    }
    return value;
  }

  // Printer Status
  get PrinterStatus(): string | undefined {
    return this.x21100010;
  }

  get x21100010(): string | undefined {
    const value = this.dwResponse['21100010']?.Value;
    return convert(value?.[0], 0x21100010, 'string');
  }

  getPrinterStatus(): string {
    const value = this.x21100010;
    if (value === undefined) {
      throw new Error('PrinterStatus is undefined');
    }
    return value;
  }

  // Printer Status Info
  get PrinterStatusInfo(): string | undefined {
    return this.x21100020;
  }

  get x21100020(): string | undefined {
    const value = this.dwResponse['21100020']?.Value;
    return convert(value?.[0], 0x21100020, 'string');
  }

  getPrinterStatusInfo(): string {
    const value = this.x21100020;
    if (value === undefined) {
      throw new Error('PrinterStatusInfo is undefined');
    }
    return value;
  }

  // Printer Name
  get PrinterName(): string | undefined {
    return this.x21100030;
  }

  get x21100030(): string | undefined {
    const value = this.dwResponse['21100030']?.Value;
    return convert(value?.[0], 0x21100030, 'string');
  }

  getPrinterName(): string {
    const value = this.x21100030;
    if (value === undefined) {
      throw new Error('PrinterName is undefined');
    }
    return value;
  }

  // Print Queue ID
  get PrintQueueID(): string | undefined {
    return this.x21100099;
  }

  get x21100099(): string | undefined {
    const value = this.dwResponse['21100099']?.Value;
    return convert(value?.[0], 0x21100099, 'string');
  }

  getPrintQueueID(): string {
    const value = this.x21100099;
    if (value === undefined) {
      throw new Error('PrintQueueID is undefined');
    }
    return value;
  }

  // Queue Status
  get QueueStatus(): string | undefined {
    return this.x21200010;
  }

  get x21200010(): string | undefined {
    const value = this.dwResponse['21200010']?.Value;
    return convert(value?.[0], 0x21200010, 'string');
  }

  getQueueStatus(): string {
    const value = this.x21200010;
    if (value === undefined) {
      throw new Error('QueueStatus is undefined');
    }
    return value;
  }

  // Print Job Description Sequence
  get PrintJobDescriptionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x21200050;
  }

  get x21200050(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['21200050']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPrintJobDescriptionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x21200050;
    if (value === undefined) {
      throw new Error('PrintJobDescriptionSequence is undefined');
    }
    return value;
  }

  // Referenced Print Job Sequence
  get ReferencedPrintJobSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x21200070;
  }

  get x21200070(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['21200070']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedPrintJobSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x21200070;
    if (value === undefined) {
      throw new Error('ReferencedPrintJobSequence is undefined');
    }
    return value;
  }

  // Print Management Capabilities Sequence
  get PrintManagementCapabilitiesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x21300010;
  }

  get x21300010(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['21300010']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPrintManagementCapabilitiesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x21300010;
    if (value === undefined) {
      throw new Error('PrintManagementCapabilitiesSequence is undefined');
    }
    return value;
  }

  // Printer Characteristics Sequence
  get PrinterCharacteristicsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x21300015;
  }

  get x21300015(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['21300015']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPrinterCharacteristicsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x21300015;
    if (value === undefined) {
      throw new Error('PrinterCharacteristicsSequence is undefined');
    }
    return value;
  }

  // Film Box Content Sequence
  get FilmBoxContentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x21300030;
  }

  get x21300030(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['21300030']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFilmBoxContentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x21300030;
    if (value === undefined) {
      throw new Error('FilmBoxContentSequence is undefined');
    }
    return value;
  }

  // Image Box Content Sequence
  get ImageBoxContentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x21300040;
  }

  get x21300040(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['21300040']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getImageBoxContentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x21300040;
    if (value === undefined) {
      throw new Error('ImageBoxContentSequence is undefined');
    }
    return value;
  }

  // Annotation Content Sequence
  get AnnotationContentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x21300050;
  }

  get x21300050(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['21300050']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAnnotationContentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x21300050;
    if (value === undefined) {
      throw new Error('AnnotationContentSequence is undefined');
    }
    return value;
  }

  // Image Overlay Box Content Sequence
  get ImageOverlayBoxContentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x21300060;
  }

  get x21300060(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['21300060']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getImageOverlayBoxContentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x21300060;
    if (value === undefined) {
      throw new Error('ImageOverlayBoxContentSequence is undefined');
    }
    return value;
  }

  // Presentation LUT Content Sequence
  get PresentationLUTContentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x21300080;
  }

  get x21300080(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['21300080']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPresentationLUTContentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x21300080;
    if (value === undefined) {
      throw new Error('PresentationLUTContentSequence is undefined');
    }
    return value;
  }

  // Proposed Study Sequence
  get ProposedStudySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x213000a0;
  }

  get x213000a0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['213000A0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getProposedStudySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x213000a0;
    if (value === undefined) {
      throw new Error('ProposedStudySequence is undefined');
    }
    return value;
  }

  // Original Image Sequence
  get OriginalImageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x213000c0;
  }

  get x213000c0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['213000C0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOriginalImageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x213000c0;
    if (value === undefined) {
      throw new Error('OriginalImageSequence is undefined');
    }
    return value;
  }

  // Label Using Information Extracted From Instances
  get LabelUsingInformationExtractedFromInstances(): string | undefined {
    return this.x22000001;
  }

  get x22000001(): string | undefined {
    const value = this.dwResponse['22000001']?.Value;
    return convert(value?.[0], 0x22000001, 'string');
  }

  getLabelUsingInformationExtractedFromInstances(): string {
    const value = this.x22000001;
    if (value === undefined) {
      throw new Error('LabelUsingInformationExtractedFromInstances is undefined');
    }
    return value;
  }

  // Label Style Selection
  get LabelStyleSelection(): string | undefined {
    return this.x22000003;
  }

  get x22000003(): string | undefined {
    const value = this.dwResponse['22000003']?.Value;
    return convert(value?.[0], 0x22000003, 'string');
  }

  getLabelStyleSelection(): string {
    const value = this.x22000003;
    if (value === undefined) {
      throw new Error('LabelStyleSelection is undefined');
    }
    return value;
  }

  // Barcode Symbology
  get BarcodeSymbology(): string | undefined {
    return this.x22000006;
  }

  get x22000006(): string | undefined {
    const value = this.dwResponse['22000006']?.Value;
    return convert(value?.[0], 0x22000006, 'string');
  }

  getBarcodeSymbology(): string {
    const value = this.x22000006;
    if (value === undefined) {
      throw new Error('BarcodeSymbology is undefined');
    }
    return value;
  }

  // Allow Media Splitting
  get AllowMediaSplitting(): string | undefined {
    return this.x22000007;
  }

  get x22000007(): string | undefined {
    const value = this.dwResponse['22000007']?.Value;
    return convert(value?.[0], 0x22000007, 'string');
  }

  getAllowMediaSplitting(): string {
    const value = this.x22000007;
    if (value === undefined) {
      throw new Error('AllowMediaSplitting is undefined');
    }
    return value;
  }

  // Include Non-DICOM Objects
  get IncludeNonDICOMObjects(): string | undefined {
    return this.x22000008;
  }

  get x22000008(): string | undefined {
    const value = this.dwResponse['22000008']?.Value;
    return convert(value?.[0], 0x22000008, 'string');
  }

  getIncludeNonDICOMObjects(): string {
    const value = this.x22000008;
    if (value === undefined) {
      throw new Error('IncludeNonDICOMObjects is undefined');
    }
    return value;
  }

  // Include Display Application
  get IncludeDisplayApplication(): string | undefined {
    return this.x22000009;
  }

  get x22000009(): string | undefined {
    const value = this.dwResponse['22000009']?.Value;
    return convert(value?.[0], 0x22000009, 'string');
  }

  getIncludeDisplayApplication(): string {
    const value = this.x22000009;
    if (value === undefined) {
      throw new Error('IncludeDisplayApplication is undefined');
    }
    return value;
  }

  // Preserve Composite Instances After Media Creation
  get PreserveCompositeInstancesAfterMediaCreation(): string | undefined {
    return this.x2200000a;
  }

  get x2200000a(): string | undefined {
    const value = this.dwResponse['2200000A']?.Value;
    return convert(value?.[0], 0x2200000a, 'string');
  }

  getPreserveCompositeInstancesAfterMediaCreation(): string {
    const value = this.x2200000a;
    if (value === undefined) {
      throw new Error('PreserveCompositeInstancesAfterMediaCreation is undefined');
    }
    return value;
  }

  // Total Number of Pieces of Media Created
  get TotalNumberOfPiecesOfMediaCreated(): number | undefined {
    return this.x2200000b;
  }

  get x2200000b(): number | undefined {
    const value = this.dwResponse['2200000B']?.Value;
    return convert(value?.[0], 0x2200000b, 'number');
  }

  getTotalNumberOfPiecesOfMediaCreated(): number {
    const value = this.x2200000b;
    if (value === undefined) {
      throw new Error('TotalNumberOfPiecesOfMediaCreated is undefined');
    }
    return value;
  }

  // Requested Media Application Profile
  get RequestedMediaApplicationProfile(): string | undefined {
    return this.x2200000c;
  }

  get x2200000c(): string | undefined {
    const value = this.dwResponse['2200000C']?.Value;
    return convert(value?.[0], 0x2200000c, 'string');
  }

  getRequestedMediaApplicationProfile(): string {
    const value = this.x2200000c;
    if (value === undefined) {
      throw new Error('RequestedMediaApplicationProfile is undefined');
    }
    return value;
  }

  // Referenced Storage Media Sequence
  get ReferencedStorageMediaSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x2200000d;
  }

  get x2200000d(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['2200000D']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedStorageMediaSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x2200000d;
    if (value === undefined) {
      throw new Error('ReferencedStorageMediaSequence is undefined');
    }
    return value;
  }

  // Failure Attributes
  get FailureAttributes(): Array<Uint16Array | undefined> | undefined {
    return this.x2200000e;
  }

  get x2200000e(): Array<Uint16Array | undefined> | undefined {
    const value = this.dwResponse['2200000E']?.Value;
    return convert(value, 0x2200000e, 'Array<Uint16Array | undefined>');
  }

  getFailureAttributes(): Array<Uint16Array | undefined> {
    const value = this.x2200000e;
    if (value === undefined) {
      throw new Error('FailureAttributes is undefined');
    }
    return value;
  }

  // Allow Lossy Compression
  get AllowLossyCompression(): string | undefined {
    return this.x2200000f;
  }

  get x2200000f(): string | undefined {
    const value = this.dwResponse['2200000F']?.Value;
    return convert(value?.[0], 0x2200000f, 'string');
  }

  getAllowLossyCompression(): string {
    const value = this.x2200000f;
    if (value === undefined) {
      throw new Error('AllowLossyCompression is undefined');
    }
    return value;
  }

  // Request Priority
  get RequestPriority(): string | undefined {
    return this.x22000020;
  }

  get x22000020(): string | undefined {
    const value = this.dwResponse['22000020']?.Value;
    return convert(value?.[0], 0x22000020, 'string');
  }

  getRequestPriority(): string {
    const value = this.x22000020;
    if (value === undefined) {
      throw new Error('RequestPriority is undefined');
    }
    return value;
  }

  // RT Image Label
  get RTImageLabel(): string | undefined {
    return this.x30020002;
  }

  get x30020002(): string | undefined {
    const value = this.dwResponse['30020002']?.Value;
    return convert(value?.[0], 0x30020002, 'string');
  }

  getRTImageLabel(): string {
    const value = this.x30020002;
    if (value === undefined) {
      throw new Error('RTImageLabel is undefined');
    }
    return value;
  }

  // RT Image Name
  get RTImageName(): string | undefined {
    return this.x30020003;
  }

  get x30020003(): string | undefined {
    const value = this.dwResponse['30020003']?.Value;
    return convert(value?.[0], 0x30020003, 'string');
  }

  getRTImageName(): string {
    const value = this.x30020003;
    if (value === undefined) {
      throw new Error('RTImageName is undefined');
    }
    return value;
  }

  // Reported Values Origin
  get ReportedValuesOrigin(): string | undefined {
    return this.x3002000a;
  }

  get x3002000a(): string | undefined {
    const value = this.dwResponse['3002000A']?.Value;
    return convert(value?.[0], 0x3002000a, 'string');
  }

  getReportedValuesOrigin(): string {
    const value = this.x3002000a;
    if (value === undefined) {
      throw new Error('ReportedValuesOrigin is undefined');
    }
    return value;
  }

  // RT Image Plane
  get RTImagePlane(): string | undefined {
    return this.x3002000c;
  }

  get x3002000c(): string | undefined {
    const value = this.dwResponse['3002000C']?.Value;
    return convert(value?.[0], 0x3002000c, 'string');
  }

  getRTImagePlane(): string {
    const value = this.x3002000c;
    if (value === undefined) {
      throw new Error('RTImagePlane is undefined');
    }
    return value;
  }

  // X-Ray Image Receptor Translation
  get XRayImageReceptorTranslation(): Array<number | undefined> | undefined {
    return this.x3002000d;
  }

  get x3002000d(): Array<number | undefined> | undefined {
    const value = this.dwResponse['3002000D']?.Value;
    return convert(value, 0x3002000d, 'Array<number | undefined>');
  }

  getXRayImageReceptorTranslation(): Array<number | undefined> {
    const value = this.x3002000d;
    if (value === undefined) {
      throw new Error('XRayImageReceptorTranslation is undefined');
    }
    return value;
  }

  // X-Ray Image Receptor Angle
  get XRayImageReceptorAngle(): number | undefined {
    return this.x3002000e;
  }

  get x3002000e(): number | undefined {
    const value = this.dwResponse['3002000E']?.Value;
    return convert(value?.[0], 0x3002000e, 'number');
  }

  getXRayImageReceptorAngle(): number {
    const value = this.x3002000e;
    if (value === undefined) {
      throw new Error('XRayImageReceptorAngle is undefined');
    }
    return value;
  }

  // RT Image Orientation
  get RTImageOrientation(): Array<number | undefined> | undefined {
    return this.x30020010;
  }

  get x30020010(): Array<number | undefined> | undefined {
    const value = this.dwResponse['30020010']?.Value;
    return convert(value, 0x30020010, 'Array<number | undefined>');
  }

  getRTImageOrientation(): Array<number | undefined> {
    const value = this.x30020010;
    if (value === undefined) {
      throw new Error('RTImageOrientation is undefined');
    }
    return value;
  }

  // Image Plane Pixel Spacing
  get ImagePlanePixelSpacing(): Array<number | undefined> | undefined {
    return this.x30020011;
  }

  get x30020011(): Array<number | undefined> | undefined {
    const value = this.dwResponse['30020011']?.Value;
    return convert(value, 0x30020011, 'Array<number | undefined>');
  }

  getImagePlanePixelSpacing(): Array<number | undefined> {
    const value = this.x30020011;
    if (value === undefined) {
      throw new Error('ImagePlanePixelSpacing is undefined');
    }
    return value;
  }

  // RT Image Position
  get RTImagePosition(): Array<number | undefined> | undefined {
    return this.x30020012;
  }

  get x30020012(): Array<number | undefined> | undefined {
    const value = this.dwResponse['30020012']?.Value;
    return convert(value, 0x30020012, 'Array<number | undefined>');
  }

  getRTImagePosition(): Array<number | undefined> {
    const value = this.x30020012;
    if (value === undefined) {
      throw new Error('RTImagePosition is undefined');
    }
    return value;
  }

  // Radiation Machine Name
  get RadiationMachineName(): string | undefined {
    return this.x30020020;
  }

  get x30020020(): string | undefined {
    const value = this.dwResponse['30020020']?.Value;
    return convert(value?.[0], 0x30020020, 'string');
  }

  getRadiationMachineName(): string {
    const value = this.x30020020;
    if (value === undefined) {
      throw new Error('RadiationMachineName is undefined');
    }
    return value;
  }

  // Radiation Machine SAD
  get RadiationMachineSAD(): number | undefined {
    return this.x30020022;
  }

  get x30020022(): number | undefined {
    const value = this.dwResponse['30020022']?.Value;
    return convert(value?.[0], 0x30020022, 'number');
  }

  getRadiationMachineSAD(): number {
    const value = this.x30020022;
    if (value === undefined) {
      throw new Error('RadiationMachineSAD is undefined');
    }
    return value;
  }

  // Radiation Machine SSD
  get RadiationMachineSSD(): number | undefined {
    return this.x30020024;
  }

  get x30020024(): number | undefined {
    const value = this.dwResponse['30020024']?.Value;
    return convert(value?.[0], 0x30020024, 'number');
  }

  getRadiationMachineSSD(): number {
    const value = this.x30020024;
    if (value === undefined) {
      throw new Error('RadiationMachineSSD is undefined');
    }
    return value;
  }

  // RT Image SID
  get RTImageSID(): number | undefined {
    return this.x30020026;
  }

  get x30020026(): number | undefined {
    const value = this.dwResponse['30020026']?.Value;
    return convert(value?.[0], 0x30020026, 'number');
  }

  getRTImageSID(): number {
    const value = this.x30020026;
    if (value === undefined) {
      throw new Error('RTImageSID is undefined');
    }
    return value;
  }

  // Source to Reference Object Distance
  get SourceToReferenceObjectDistance(): number | undefined {
    return this.x30020028;
  }

  get x30020028(): number | undefined {
    const value = this.dwResponse['30020028']?.Value;
    return convert(value?.[0], 0x30020028, 'number');
  }

  getSourceToReferenceObjectDistance(): number {
    const value = this.x30020028;
    if (value === undefined) {
      throw new Error('SourceToReferenceObjectDistance is undefined');
    }
    return value;
  }

  // Fraction Number
  get FractionNumber(): number | undefined {
    return this.x30020029;
  }

  get x30020029(): number | undefined {
    const value = this.dwResponse['30020029']?.Value;
    return convert(value?.[0], 0x30020029, 'number');
  }

  getFractionNumber(): number {
    const value = this.x30020029;
    if (value === undefined) {
      throw new Error('FractionNumber is undefined');
    }
    return value;
  }

  // Exposure Sequence
  get ExposureSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30020030;
  }

  get x30020030(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30020030']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getExposureSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30020030;
    if (value === undefined) {
      throw new Error('ExposureSequence is undefined');
    }
    return value;
  }

  // Meterset Exposure
  get MetersetExposure(): number | undefined {
    return this.x30020032;
  }

  get x30020032(): number | undefined {
    const value = this.dwResponse['30020032']?.Value;
    return convert(value?.[0], 0x30020032, 'number');
  }

  getMetersetExposure(): number {
    const value = this.x30020032;
    if (value === undefined) {
      throw new Error('MetersetExposure is undefined');
    }
    return value;
  }

  // Diaphragm Position
  get DiaphragmPosition(): Array<number | undefined> | undefined {
    return this.x30020034;
  }

  get x30020034(): Array<number | undefined> | undefined {
    const value = this.dwResponse['30020034']?.Value;
    return convert(value, 0x30020034, 'Array<number | undefined>');
  }

  getDiaphragmPosition(): Array<number | undefined> {
    const value = this.x30020034;
    if (value === undefined) {
      throw new Error('DiaphragmPosition is undefined');
    }
    return value;
  }

  // Fluence Map Sequence
  get FluenceMapSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30020040;
  }

  get x30020040(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30020040']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFluenceMapSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30020040;
    if (value === undefined) {
      throw new Error('FluenceMapSequence is undefined');
    }
    return value;
  }

  // Fluence Data Source
  get FluenceDataSource(): string | undefined {
    return this.x30020041;
  }

  get x30020041(): string | undefined {
    const value = this.dwResponse['30020041']?.Value;
    return convert(value?.[0], 0x30020041, 'string');
  }

  getFluenceDataSource(): string {
    const value = this.x30020041;
    if (value === undefined) {
      throw new Error('FluenceDataSource is undefined');
    }
    return value;
  }

  // Fluence Data Scale
  get FluenceDataScale(): number | undefined {
    return this.x30020042;
  }

  get x30020042(): number | undefined {
    const value = this.dwResponse['30020042']?.Value;
    return convert(value?.[0], 0x30020042, 'number');
  }

  getFluenceDataScale(): number {
    const value = this.x30020042;
    if (value === undefined) {
      throw new Error('FluenceDataScale is undefined');
    }
    return value;
  }

  // Primary Fluence Mode Sequence
  get PrimaryFluenceModeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30020050;
  }

  get x30020050(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30020050']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPrimaryFluenceModeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30020050;
    if (value === undefined) {
      throw new Error('PrimaryFluenceModeSequence is undefined');
    }
    return value;
  }

  // Fluence Mode
  get FluenceMode(): string | undefined {
    return this.x30020051;
  }

  get x30020051(): string | undefined {
    const value = this.dwResponse['30020051']?.Value;
    return convert(value?.[0], 0x30020051, 'string');
  }

  getFluenceMode(): string {
    const value = this.x30020051;
    if (value === undefined) {
      throw new Error('FluenceMode is undefined');
    }
    return value;
  }

  // Fluence Mode ID
  get FluenceModeID(): string | undefined {
    return this.x30020052;
  }

  get x30020052(): string | undefined {
    const value = this.dwResponse['30020052']?.Value;
    return convert(value?.[0], 0x30020052, 'string');
  }

  getFluenceModeID(): string {
    const value = this.x30020052;
    if (value === undefined) {
      throw new Error('FluenceModeID is undefined');
    }
    return value;
  }

  // DVH Type
  get DVHType(): string | undefined {
    return this.x30040001;
  }

  get x30040001(): string | undefined {
    const value = this.dwResponse['30040001']?.Value;
    return convert(value?.[0], 0x30040001, 'string');
  }

  getDVHType(): string {
    const value = this.x30040001;
    if (value === undefined) {
      throw new Error('DVHType is undefined');
    }
    return value;
  }

  // Dose Units
  get DoseUnits(): string | undefined {
    return this.x30040002;
  }

  get x30040002(): string | undefined {
    const value = this.dwResponse['30040002']?.Value;
    return convert(value?.[0], 0x30040002, 'string');
  }

  getDoseUnits(): string {
    const value = this.x30040002;
    if (value === undefined) {
      throw new Error('DoseUnits is undefined');
    }
    return value;
  }

  // Dose Type
  get DoseType(): string | undefined {
    return this.x30040004;
  }

  get x30040004(): string | undefined {
    const value = this.dwResponse['30040004']?.Value;
    return convert(value?.[0], 0x30040004, 'string');
  }

  getDoseType(): string {
    const value = this.x30040004;
    if (value === undefined) {
      throw new Error('DoseType is undefined');
    }
    return value;
  }

  // Spatial Transform of Dose
  get SpatialTransformOfDose(): string | undefined {
    return this.x30040005;
  }

  get x30040005(): string | undefined {
    const value = this.dwResponse['30040005']?.Value;
    return convert(value?.[0], 0x30040005, 'string');
  }

  getSpatialTransformOfDose(): string {
    const value = this.x30040005;
    if (value === undefined) {
      throw new Error('SpatialTransformOfDose is undefined');
    }
    return value;
  }

  // Dose Comment
  get DoseComment(): string | undefined {
    return this.x30040006;
  }

  get x30040006(): string | undefined {
    const value = this.dwResponse['30040006']?.Value;
    return convert(value?.[0], 0x30040006, 'string');
  }

  getDoseComment(): string {
    const value = this.x30040006;
    if (value === undefined) {
      throw new Error('DoseComment is undefined');
    }
    return value;
  }

  // Normalization Point
  get NormalizationPoint(): Array<number | undefined> | undefined {
    return this.x30040008;
  }

  get x30040008(): Array<number | undefined> | undefined {
    const value = this.dwResponse['30040008']?.Value;
    return convert(value, 0x30040008, 'Array<number | undefined>');
  }

  getNormalizationPoint(): Array<number | undefined> {
    const value = this.x30040008;
    if (value === undefined) {
      throw new Error('NormalizationPoint is undefined');
    }
    return value;
  }

  // Dose Summation Type
  get DoseSummationType(): string | undefined {
    return this.x3004000a;
  }

  get x3004000a(): string | undefined {
    const value = this.dwResponse['3004000A']?.Value;
    return convert(value?.[0], 0x3004000a, 'string');
  }

  getDoseSummationType(): string {
    const value = this.x3004000a;
    if (value === undefined) {
      throw new Error('DoseSummationType is undefined');
    }
    return value;
  }

  // Grid Frame Offset Vector
  get GridFrameOffsetVector(): Array<number | undefined> | undefined {
    return this.x3004000c;
  }

  get x3004000c(): Array<number | undefined> | undefined {
    const value = this.dwResponse['3004000C']?.Value;
    return convert(value, 0x3004000c, 'Array<number | undefined>');
  }

  getGridFrameOffsetVector(): Array<number | undefined> {
    const value = this.x3004000c;
    if (value === undefined) {
      throw new Error('GridFrameOffsetVector is undefined');
    }
    return value;
  }

  // Dose Grid Scaling
  get DoseGridScaling(): number | undefined {
    return this.x3004000e;
  }

  get x3004000e(): number | undefined {
    const value = this.dwResponse['3004000E']?.Value;
    return convert(value?.[0], 0x3004000e, 'number');
  }

  getDoseGridScaling(): number {
    const value = this.x3004000e;
    if (value === undefined) {
      throw new Error('DoseGridScaling is undefined');
    }
    return value;
  }

  // RT Dose ROI Sequence
  get RTDoseROISequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30040010;
  }

  get x30040010(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30040010']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRTDoseROISequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30040010;
    if (value === undefined) {
      throw new Error('RTDoseROISequence is undefined');
    }
    return value;
  }

  // Dose Value
  get DoseValue(): number | undefined {
    return this.x30040012;
  }

  get x30040012(): number | undefined {
    const value = this.dwResponse['30040012']?.Value;
    return convert(value?.[0], 0x30040012, 'number');
  }

  getDoseValue(): number {
    const value = this.x30040012;
    if (value === undefined) {
      throw new Error('DoseValue is undefined');
    }
    return value;
  }

  // Tissue Heterogeneity Correction
  get TissueHeterogeneityCorrection(): Array<string | undefined> | undefined {
    return this.x30040014;
  }

  get x30040014(): Array<string | undefined> | undefined {
    const value = this.dwResponse['30040014']?.Value;
    return convert(value, 0x30040014, 'Array<string | undefined>');
  }

  getTissueHeterogeneityCorrection(): Array<string | undefined> {
    const value = this.x30040014;
    if (value === undefined) {
      throw new Error('TissueHeterogeneityCorrection is undefined');
    }
    return value;
  }

  // DVH Normalization Point
  get DVHNormalizationPoint(): Array<number | undefined> | undefined {
    return this.x30040040;
  }

  get x30040040(): Array<number | undefined> | undefined {
    const value = this.dwResponse['30040040']?.Value;
    return convert(value, 0x30040040, 'Array<number | undefined>');
  }

  getDVHNormalizationPoint(): Array<number | undefined> {
    const value = this.x30040040;
    if (value === undefined) {
      throw new Error('DVHNormalizationPoint is undefined');
    }
    return value;
  }

  // DVH Normalization Dose Value
  get DVHNormalizationDoseValue(): number | undefined {
    return this.x30040042;
  }

  get x30040042(): number | undefined {
    const value = this.dwResponse['30040042']?.Value;
    return convert(value?.[0], 0x30040042, 'number');
  }

  getDVHNormalizationDoseValue(): number {
    const value = this.x30040042;
    if (value === undefined) {
      throw new Error('DVHNormalizationDoseValue is undefined');
    }
    return value;
  }

  // DVH Sequence
  get DVHSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30040050;
  }

  get x30040050(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30040050']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDVHSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30040050;
    if (value === undefined) {
      throw new Error('DVHSequence is undefined');
    }
    return value;
  }

  // DVH Dose Scaling
  get DVHDoseScaling(): number | undefined {
    return this.x30040052;
  }

  get x30040052(): number | undefined {
    const value = this.dwResponse['30040052']?.Value;
    return convert(value?.[0], 0x30040052, 'number');
  }

  getDVHDoseScaling(): number {
    const value = this.x30040052;
    if (value === undefined) {
      throw new Error('DVHDoseScaling is undefined');
    }
    return value;
  }

  // DVH Volume Units
  get DVHVolumeUnits(): string | undefined {
    return this.x30040054;
  }

  get x30040054(): string | undefined {
    const value = this.dwResponse['30040054']?.Value;
    return convert(value?.[0], 0x30040054, 'string');
  }

  getDVHVolumeUnits(): string {
    const value = this.x30040054;
    if (value === undefined) {
      throw new Error('DVHVolumeUnits is undefined');
    }
    return value;
  }

  // DVH Number of Bins
  get DVHNumberOfBins(): number | undefined {
    return this.x30040056;
  }

  get x30040056(): number | undefined {
    const value = this.dwResponse['30040056']?.Value;
    return convert(value?.[0], 0x30040056, 'number');
  }

  getDVHNumberOfBins(): number {
    const value = this.x30040056;
    if (value === undefined) {
      throw new Error('DVHNumberOfBins is undefined');
    }
    return value;
  }

  // DVH Data
  get DVHData(): Array<number | undefined> | undefined {
    return this.x30040058;
  }

  get x30040058(): Array<number | undefined> | undefined {
    const value = this.dwResponse['30040058']?.Value;
    return convert(value, 0x30040058, 'Array<number | undefined>');
  }

  getDVHData(): Array<number | undefined> {
    const value = this.x30040058;
    if (value === undefined) {
      throw new Error('DVHData is undefined');
    }
    return value;
  }

  // DVH Referenced ROI Sequence
  get DVHReferencedROISequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30040060;
  }

  get x30040060(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30040060']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDVHReferencedROISequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30040060;
    if (value === undefined) {
      throw new Error('DVHReferencedROISequence is undefined');
    }
    return value;
  }

  // DVH ROI Contribution Type
  get DVHROIContributionType(): string | undefined {
    return this.x30040062;
  }

  get x30040062(): string | undefined {
    const value = this.dwResponse['30040062']?.Value;
    return convert(value?.[0], 0x30040062, 'string');
  }

  getDVHROIContributionType(): string {
    const value = this.x30040062;
    if (value === undefined) {
      throw new Error('DVHROIContributionType is undefined');
    }
    return value;
  }

  // DVH Minimum Dose
  get DVHMinimumDose(): number | undefined {
    return this.x30040070;
  }

  get x30040070(): number | undefined {
    const value = this.dwResponse['30040070']?.Value;
    return convert(value?.[0], 0x30040070, 'number');
  }

  getDVHMinimumDose(): number {
    const value = this.x30040070;
    if (value === undefined) {
      throw new Error('DVHMinimumDose is undefined');
    }
    return value;
  }

  // DVH Maximum Dose
  get DVHMaximumDose(): number | undefined {
    return this.x30040072;
  }

  get x30040072(): number | undefined {
    const value = this.dwResponse['30040072']?.Value;
    return convert(value?.[0], 0x30040072, 'number');
  }

  getDVHMaximumDose(): number {
    const value = this.x30040072;
    if (value === undefined) {
      throw new Error('DVHMaximumDose is undefined');
    }
    return value;
  }

  // DVH Mean Dose
  get DVHMeanDose(): number | undefined {
    return this.x30040074;
  }

  get x30040074(): number | undefined {
    const value = this.dwResponse['30040074']?.Value;
    return convert(value?.[0], 0x30040074, 'number');
  }

  getDVHMeanDose(): number {
    const value = this.x30040074;
    if (value === undefined) {
      throw new Error('DVHMeanDose is undefined');
    }
    return value;
  }

  // Structure Set Label
  get StructureSetLabel(): string | undefined {
    return this.x30060002;
  }

  get x30060002(): string | undefined {
    const value = this.dwResponse['30060002']?.Value;
    return convert(value?.[0], 0x30060002, 'string');
  }

  getStructureSetLabel(): string {
    const value = this.x30060002;
    if (value === undefined) {
      throw new Error('StructureSetLabel is undefined');
    }
    return value;
  }

  // Structure Set Name
  get StructureSetName(): string | undefined {
    return this.x30060004;
  }

  get x30060004(): string | undefined {
    const value = this.dwResponse['30060004']?.Value;
    return convert(value?.[0], 0x30060004, 'string');
  }

  getStructureSetName(): string {
    const value = this.x30060004;
    if (value === undefined) {
      throw new Error('StructureSetName is undefined');
    }
    return value;
  }

  // Structure Set Date
  get StructureSetDate(): Date | undefined {
    return this.x30060008;
  }

  get x30060008(): Date | undefined {
    const value = this.dwResponse['30060008']?.Value;
    return convert(value?.[0], 0x30060008, 'Date');
  }

  getStructureSetDate(): Date {
    const value = this.x30060008;
    if (value === undefined) {
      throw new Error('StructureSetDate is undefined');
    }
    return value;
  }

  // Structure Set Time
  get StructureSetTime(): string | undefined {
    return this.x30060009;
  }

  get x30060009(): string | undefined {
    const value = this.dwResponse['30060009']?.Value;
    return convert(value?.[0], 0x30060009, 'string');
  }

  getStructureSetTime(): string {
    const value = this.x30060009;
    if (value === undefined) {
      throw new Error('StructureSetTime is undefined');
    }
    return value;
  }

  // Referenced Frame of Reference Sequence
  get ReferencedFrameOfReferenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30060010;
  }

  get x30060010(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30060010']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedFrameOfReferenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30060010;
    if (value === undefined) {
      throw new Error('ReferencedFrameOfReferenceSequence is undefined');
    }
    return value;
  }

  // RT Referenced Study Sequence
  get RTReferencedStudySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30060012;
  }

  get x30060012(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30060012']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRTReferencedStudySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30060012;
    if (value === undefined) {
      throw new Error('RTReferencedStudySequence is undefined');
    }
    return value;
  }

  // RT Referenced Series Sequence
  get RTReferencedSeriesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30060014;
  }

  get x30060014(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30060014']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRTReferencedSeriesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30060014;
    if (value === undefined) {
      throw new Error('RTReferencedSeriesSequence is undefined');
    }
    return value;
  }

  // Contour Image Sequence
  get ContourImageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30060016;
  }

  get x30060016(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30060016']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getContourImageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30060016;
    if (value === undefined) {
      throw new Error('ContourImageSequence is undefined');
    }
    return value;
  }

  // Predecessor Structure Set Sequence
  get PredecessorStructureSetSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30060018;
  }

  get x30060018(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30060018']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPredecessorStructureSetSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30060018;
    if (value === undefined) {
      throw new Error('PredecessorStructureSetSequence is undefined');
    }
    return value;
  }

  // Structure Set ROI Sequence
  get StructureSetROISequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30060020;
  }

  get x30060020(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30060020']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getStructureSetROISequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30060020;
    if (value === undefined) {
      throw new Error('StructureSetROISequence is undefined');
    }
    return value;
  }

  // ROI Number
  get ROINumber(): number | undefined {
    return this.x30060022;
  }

  get x30060022(): number | undefined {
    const value = this.dwResponse['30060022']?.Value;
    return convert(value?.[0], 0x30060022, 'number');
  }

  getROINumber(): number {
    const value = this.x30060022;
    if (value === undefined) {
      throw new Error('ROINumber is undefined');
    }
    return value;
  }

  // Referenced Frame of Reference UID
  get ReferencedFrameOfReferenceUID(): string | undefined {
    return this.x30060024;
  }

  get x30060024(): string | undefined {
    const value = this.dwResponse['30060024']?.Value;
    return convert(value?.[0], 0x30060024, 'string');
  }

  getReferencedFrameOfReferenceUID(): string {
    const value = this.x30060024;
    if (value === undefined) {
      throw new Error('ReferencedFrameOfReferenceUID is undefined');
    }
    return value;
  }

  // ROI Name
  get ROIName(): string | undefined {
    return this.x30060026;
  }

  get x30060026(): string | undefined {
    const value = this.dwResponse['30060026']?.Value;
    return convert(value?.[0], 0x30060026, 'string');
  }

  getROIName(): string {
    const value = this.x30060026;
    if (value === undefined) {
      throw new Error('ROIName is undefined');
    }
    return value;
  }

  // ROI Display Color
  get ROIDisplayColor(): Array<number | undefined> | undefined {
    return this.x3006002a;
  }

  get x3006002a(): Array<number | undefined> | undefined {
    const value = this.dwResponse['3006002A']?.Value;
    return convert(value, 0x3006002a, 'Array<number | undefined>');
  }

  getROIDisplayColor(): Array<number | undefined> {
    const value = this.x3006002a;
    if (value === undefined) {
      throw new Error('ROIDisplayColor is undefined');
    }
    return value;
  }

  // ROI Volume
  get ROIVolume(): number | undefined {
    return this.x3006002c;
  }

  get x3006002c(): number | undefined {
    const value = this.dwResponse['3006002C']?.Value;
    return convert(value?.[0], 0x3006002c, 'number');
  }

  getROIVolume(): number {
    const value = this.x3006002c;
    if (value === undefined) {
      throw new Error('ROIVolume is undefined');
    }
    return value;
  }

  // RT Related ROI Sequence
  get RTRelatedROISequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30060030;
  }

  get x30060030(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30060030']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRTRelatedROISequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30060030;
    if (value === undefined) {
      throw new Error('RTRelatedROISequence is undefined');
    }
    return value;
  }

  // RT ROI Relationship
  get RTROIRelationship(): string | undefined {
    return this.x30060033;
  }

  get x30060033(): string | undefined {
    const value = this.dwResponse['30060033']?.Value;
    return convert(value?.[0], 0x30060033, 'string');
  }

  getRTROIRelationship(): string {
    const value = this.x30060033;
    if (value === undefined) {
      throw new Error('RTROIRelationship is undefined');
    }
    return value;
  }

  // ROI Generation Algorithm
  get ROIGenerationAlgorithm(): string | undefined {
    return this.x30060036;
  }

  get x30060036(): string | undefined {
    const value = this.dwResponse['30060036']?.Value;
    return convert(value?.[0], 0x30060036, 'string');
  }

  getROIGenerationAlgorithm(): string {
    const value = this.x30060036;
    if (value === undefined) {
      throw new Error('ROIGenerationAlgorithm is undefined');
    }
    return value;
  }

  // ROI Generation Description
  get ROIGenerationDescription(): string | undefined {
    return this.x30060038;
  }

  get x30060038(): string | undefined {
    const value = this.dwResponse['30060038']?.Value;
    return convert(value?.[0], 0x30060038, 'string');
  }

  getROIGenerationDescription(): string {
    const value = this.x30060038;
    if (value === undefined) {
      throw new Error('ROIGenerationDescription is undefined');
    }
    return value;
  }

  // ROI Contour Sequence
  get ROIContourSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30060039;
  }

  get x30060039(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30060039']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getROIContourSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30060039;
    if (value === undefined) {
      throw new Error('ROIContourSequence is undefined');
    }
    return value;
  }

  // Contour Sequence
  get ContourSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30060040;
  }

  get x30060040(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30060040']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getContourSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30060040;
    if (value === undefined) {
      throw new Error('ContourSequence is undefined');
    }
    return value;
  }

  // Contour Geometric Type
  get ContourGeometricType(): string | undefined {
    return this.x30060042;
  }

  get x30060042(): string | undefined {
    const value = this.dwResponse['30060042']?.Value;
    return convert(value?.[0], 0x30060042, 'string');
  }

  getContourGeometricType(): string {
    const value = this.x30060042;
    if (value === undefined) {
      throw new Error('ContourGeometricType is undefined');
    }
    return value;
  }

  // Contour Slab Thickness
  get ContourSlabThickness(): number | undefined {
    return this.x30060044;
  }

  get x30060044(): number | undefined {
    const value = this.dwResponse['30060044']?.Value;
    return convert(value?.[0], 0x30060044, 'number');
  }

  getContourSlabThickness(): number {
    const value = this.x30060044;
    if (value === undefined) {
      throw new Error('ContourSlabThickness is undefined');
    }
    return value;
  }

  // Contour Offset Vector
  get ContourOffsetVector(): Array<number | undefined> | undefined {
    return this.x30060045;
  }

  get x30060045(): Array<number | undefined> | undefined {
    const value = this.dwResponse['30060045']?.Value;
    return convert(value, 0x30060045, 'Array<number | undefined>');
  }

  getContourOffsetVector(): Array<number | undefined> {
    const value = this.x30060045;
    if (value === undefined) {
      throw new Error('ContourOffsetVector is undefined');
    }
    return value;
  }

  // Number of Contour Points
  get NumberOfContourPoints(): number | undefined {
    return this.x30060046;
  }

  get x30060046(): number | undefined {
    const value = this.dwResponse['30060046']?.Value;
    return convert(value?.[0], 0x30060046, 'number');
  }

  getNumberOfContourPoints(): number {
    const value = this.x30060046;
    if (value === undefined) {
      throw new Error('NumberOfContourPoints is undefined');
    }
    return value;
  }

  // Contour Number
  get ContourNumber(): number | undefined {
    return this.x30060048;
  }

  get x30060048(): number | undefined {
    const value = this.dwResponse['30060048']?.Value;
    return convert(value?.[0], 0x30060048, 'number');
  }

  getContourNumber(): number {
    const value = this.x30060048;
    if (value === undefined) {
      throw new Error('ContourNumber is undefined');
    }
    return value;
  }

  // Attached Contours
  get AttachedContours(): Array<number | undefined> | undefined {
    return this.x30060049;
  }

  get x30060049(): Array<number | undefined> | undefined {
    const value = this.dwResponse['30060049']?.Value;
    return convert(value, 0x30060049, 'Array<number | undefined>');
  }

  getAttachedContours(): Array<number | undefined> {
    const value = this.x30060049;
    if (value === undefined) {
      throw new Error('AttachedContours is undefined');
    }
    return value;
  }

  // Contour Data
  get ContourData(): Array<number | undefined> | undefined {
    return this.x30060050;
  }

  get x30060050(): Array<number | undefined> | undefined {
    const value = this.dwResponse['30060050']?.Value;
    return convert(value, 0x30060050, 'Array<number | undefined>');
  }

  getContourData(): Array<number | undefined> {
    const value = this.x30060050;
    if (value === undefined) {
      throw new Error('ContourData is undefined');
    }
    return value;
  }

  // RT ROI Observations Sequence
  get RTROIObservationsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30060080;
  }

  get x30060080(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30060080']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRTROIObservationsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30060080;
    if (value === undefined) {
      throw new Error('RTROIObservationsSequence is undefined');
    }
    return value;
  }

  // Observation Number
  get ObservationNumber(): number | undefined {
    return this.x30060082;
  }

  get x30060082(): number | undefined {
    const value = this.dwResponse['30060082']?.Value;
    return convert(value?.[0], 0x30060082, 'number');
  }

  getObservationNumber(): number {
    const value = this.x30060082;
    if (value === undefined) {
      throw new Error('ObservationNumber is undefined');
    }
    return value;
  }

  // Referenced ROI Number
  get ReferencedROINumber(): number | undefined {
    return this.x30060084;
  }

  get x30060084(): number | undefined {
    const value = this.dwResponse['30060084']?.Value;
    return convert(value?.[0], 0x30060084, 'number');
  }

  getReferencedROINumber(): number {
    const value = this.x30060084;
    if (value === undefined) {
      throw new Error('ReferencedROINumber is undefined');
    }
    return value;
  }

  // ROI Observation Label
  get ROIObservationLabel(): string | undefined {
    return this.x30060085;
  }

  get x30060085(): string | undefined {
    const value = this.dwResponse['30060085']?.Value;
    return convert(value?.[0], 0x30060085, 'string');
  }

  getROIObservationLabel(): string {
    const value = this.x30060085;
    if (value === undefined) {
      throw new Error('ROIObservationLabel is undefined');
    }
    return value;
  }

  // RT ROI Identification Code Sequence
  get RTROIIdentificationCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30060086;
  }

  get x30060086(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30060086']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRTROIIdentificationCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30060086;
    if (value === undefined) {
      throw new Error('RTROIIdentificationCodeSequence is undefined');
    }
    return value;
  }

  // Related RT ROI Observations Sequence
  get RelatedRTROIObservationsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300600a0;
  }

  get x300600a0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300600A0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRelatedRTROIObservationsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300600a0;
    if (value === undefined) {
      throw new Error('RelatedRTROIObservationsSequence is undefined');
    }
    return value;
  }

  // RT ROI Interpreted Type
  get RTROIInterpretedType(): string | undefined {
    return this.x300600a4;
  }

  get x300600a4(): string | undefined {
    const value = this.dwResponse['300600A4']?.Value;
    return convert(value?.[0], 0x300600a4, 'string');
  }

  getRTROIInterpretedType(): string {
    const value = this.x300600a4;
    if (value === undefined) {
      throw new Error('RTROIInterpretedType is undefined');
    }
    return value;
  }

  // ROI Interpreter
  get ROIInterpreter(): any | undefined {
    return this.x300600a6;
  }

  get x300600a6(): any | undefined {
    const value = this.dwResponse['300600A6']?.Value;
    return convert(value?.[0], 0x300600a6, 'any');
  }

  getROIInterpreter(): any {
    const value = this.x300600a6;
    if (value === undefined) {
      throw new Error('ROIInterpreter is undefined');
    }
    return value;
  }

  // ROI Physical Properties Sequence
  get ROIPhysicalPropertiesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300600b0;
  }

  get x300600b0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300600B0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getROIPhysicalPropertiesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300600b0;
    if (value === undefined) {
      throw new Error('ROIPhysicalPropertiesSequence is undefined');
    }
    return value;
  }

  // ROI Physical Property
  get ROIPhysicalProperty(): string | undefined {
    return this.x300600b2;
  }

  get x300600b2(): string | undefined {
    const value = this.dwResponse['300600B2']?.Value;
    return convert(value?.[0], 0x300600b2, 'string');
  }

  getROIPhysicalProperty(): string {
    const value = this.x300600b2;
    if (value === undefined) {
      throw new Error('ROIPhysicalProperty is undefined');
    }
    return value;
  }

  // ROI Physical Property Value
  get ROIPhysicalPropertyValue(): number | undefined {
    return this.x300600b4;
  }

  get x300600b4(): number | undefined {
    const value = this.dwResponse['300600B4']?.Value;
    return convert(value?.[0], 0x300600b4, 'number');
  }

  getROIPhysicalPropertyValue(): number {
    const value = this.x300600b4;
    if (value === undefined) {
      throw new Error('ROIPhysicalPropertyValue is undefined');
    }
    return value;
  }

  // ROI Elemental Composition Sequence
  get ROIElementalCompositionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300600b6;
  }

  get x300600b6(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300600B6']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getROIElementalCompositionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300600b6;
    if (value === undefined) {
      throw new Error('ROIElementalCompositionSequence is undefined');
    }
    return value;
  }

  // ROI Elemental Composition Atomic Number
  get ROIElementalCompositionAtomicNumber(): number | undefined {
    return this.x300600b7;
  }

  get x300600b7(): number | undefined {
    const value = this.dwResponse['300600B7']?.Value;
    return convert(value?.[0], 0x300600b7, 'number');
  }

  getROIElementalCompositionAtomicNumber(): number {
    const value = this.x300600b7;
    if (value === undefined) {
      throw new Error('ROIElementalCompositionAtomicNumber is undefined');
    }
    return value;
  }

  // ROI Elemental Composition Atomic Mass Fraction
  get ROIElementalCompositionAtomicMassFraction(): number | undefined {
    return this.x300600b8;
  }

  get x300600b8(): number | undefined {
    const value = this.dwResponse['300600B8']?.Value;
    return convert(value?.[0], 0x300600b8, 'number');
  }

  getROIElementalCompositionAtomicMassFraction(): number {
    const value = this.x300600b8;
    if (value === undefined) {
      throw new Error('ROIElementalCompositionAtomicMassFraction is undefined');
    }
    return value;
  }

  // Additional RT ROI Identification Code Sequence
  get AdditionalRTROIIdentificationCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300600b9;
  }

  get x300600b9(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300600B9']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAdditionalRTROIIdentificationCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300600b9;
    if (value === undefined) {
      throw new Error('AdditionalRTROIIdentificationCodeSequence is undefined');
    }
    return value;
  }

  // Frame of Reference Relationship Sequence
  get FrameOfReferenceRelationshipSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300600c0;
  }

  get x300600c0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300600C0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFrameOfReferenceRelationshipSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300600c0;
    if (value === undefined) {
      throw new Error('FrameOfReferenceRelationshipSequence is undefined');
    }
    return value;
  }

  // Related Frame of Reference UID
  get RelatedFrameOfReferenceUID(): string | undefined {
    return this.x300600c2;
  }

  get x300600c2(): string | undefined {
    const value = this.dwResponse['300600C2']?.Value;
    return convert(value?.[0], 0x300600c2, 'string');
  }

  getRelatedFrameOfReferenceUID(): string {
    const value = this.x300600c2;
    if (value === undefined) {
      throw new Error('RelatedFrameOfReferenceUID is undefined');
    }
    return value;
  }

  // Frame of Reference Transformation Type
  get FrameOfReferenceTransformationType(): string | undefined {
    return this.x300600c4;
  }

  get x300600c4(): string | undefined {
    const value = this.dwResponse['300600C4']?.Value;
    return convert(value?.[0], 0x300600c4, 'string');
  }

  getFrameOfReferenceTransformationType(): string {
    const value = this.x300600c4;
    if (value === undefined) {
      throw new Error('FrameOfReferenceTransformationType is undefined');
    }
    return value;
  }

  // Frame of Reference Transformation Matrix
  get FrameOfReferenceTransformationMatrix(): Array<number | undefined> | undefined {
    return this.x300600c6;
  }

  get x300600c6(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300600C6']?.Value;
    return convert(value, 0x300600c6, 'Array<number | undefined>');
  }

  getFrameOfReferenceTransformationMatrix(): Array<number | undefined> {
    const value = this.x300600c6;
    if (value === undefined) {
      throw new Error('FrameOfReferenceTransformationMatrix is undefined');
    }
    return value;
  }

  // Frame of Reference Transformation Comment
  get FrameOfReferenceTransformationComment(): string | undefined {
    return this.x300600c8;
  }

  get x300600c8(): string | undefined {
    const value = this.dwResponse['300600C8']?.Value;
    return convert(value?.[0], 0x300600c8, 'string');
  }

  getFrameOfReferenceTransformationComment(): string {
    const value = this.x300600c8;
    if (value === undefined) {
      throw new Error('FrameOfReferenceTransformationComment is undefined');
    }
    return value;
  }

  // Measured Dose Reference Sequence
  get MeasuredDoseReferenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080010;
  }

  get x30080010(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080010']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMeasuredDoseReferenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080010;
    if (value === undefined) {
      throw new Error('MeasuredDoseReferenceSequence is undefined');
    }
    return value;
  }

  // Measured Dose Type
  get MeasuredDoseType(): string | undefined {
    return this.x30080014;
  }

  get x30080014(): string | undefined {
    const value = this.dwResponse['30080014']?.Value;
    return convert(value?.[0], 0x30080014, 'string');
  }

  getMeasuredDoseType(): string {
    const value = this.x30080014;
    if (value === undefined) {
      throw new Error('MeasuredDoseType is undefined');
    }
    return value;
  }

  // Measured Dose Value
  get MeasuredDoseValue(): number | undefined {
    return this.x30080016;
  }

  get x30080016(): number | undefined {
    const value = this.dwResponse['30080016']?.Value;
    return convert(value?.[0], 0x30080016, 'number');
  }

  getMeasuredDoseValue(): number {
    const value = this.x30080016;
    if (value === undefined) {
      throw new Error('MeasuredDoseValue is undefined');
    }
    return value;
  }

  // Treatment Session Beam Sequence
  get TreatmentSessionBeamSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080020;
  }

  get x30080020(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080020']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTreatmentSessionBeamSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080020;
    if (value === undefined) {
      throw new Error('TreatmentSessionBeamSequence is undefined');
    }
    return value;
  }

  // Treatment Session Ion Beam Sequence
  get TreatmentSessionIonBeamSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080021;
  }

  get x30080021(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080021']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTreatmentSessionIonBeamSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080021;
    if (value === undefined) {
      throw new Error('TreatmentSessionIonBeamSequence is undefined');
    }
    return value;
  }

  // Current Fraction Number
  get CurrentFractionNumber(): number | undefined {
    return this.x30080022;
  }

  get x30080022(): number | undefined {
    const value = this.dwResponse['30080022']?.Value;
    return convert(value?.[0], 0x30080022, 'number');
  }

  getCurrentFractionNumber(): number {
    const value = this.x30080022;
    if (value === undefined) {
      throw new Error('CurrentFractionNumber is undefined');
    }
    return value;
  }

  // Treatment Control Point Date
  get TreatmentControlPointDate(): Date | undefined {
    return this.x30080024;
  }

  get x30080024(): Date | undefined {
    const value = this.dwResponse['30080024']?.Value;
    return convert(value?.[0], 0x30080024, 'Date');
  }

  getTreatmentControlPointDate(): Date {
    const value = this.x30080024;
    if (value === undefined) {
      throw new Error('TreatmentControlPointDate is undefined');
    }
    return value;
  }

  // Treatment Control Point Time
  get TreatmentControlPointTime(): string | undefined {
    return this.x30080025;
  }

  get x30080025(): string | undefined {
    const value = this.dwResponse['30080025']?.Value;
    return convert(value?.[0], 0x30080025, 'string');
  }

  getTreatmentControlPointTime(): string {
    const value = this.x30080025;
    if (value === undefined) {
      throw new Error('TreatmentControlPointTime is undefined');
    }
    return value;
  }

  // Treatment Termination Status
  get TreatmentTerminationStatus(): string | undefined {
    return this.x3008002a;
  }

  get x3008002a(): string | undefined {
    const value = this.dwResponse['3008002A']?.Value;
    return convert(value?.[0], 0x3008002a, 'string');
  }

  getTreatmentTerminationStatus(): string {
    const value = this.x3008002a;
    if (value === undefined) {
      throw new Error('TreatmentTerminationStatus is undefined');
    }
    return value;
  }

  // Treatment Termination Code
  get TreatmentTerminationCode(): string | undefined {
    return this.x3008002b;
  }

  get x3008002b(): string | undefined {
    const value = this.dwResponse['3008002B']?.Value;
    return convert(value?.[0], 0x3008002b, 'string');
  }

  getTreatmentTerminationCode(): string {
    const value = this.x3008002b;
    if (value === undefined) {
      throw new Error('TreatmentTerminationCode is undefined');
    }
    return value;
  }

  // Treatment Verification Status
  get TreatmentVerificationStatus(): string | undefined {
    return this.x3008002c;
  }

  get x3008002c(): string | undefined {
    const value = this.dwResponse['3008002C']?.Value;
    return convert(value?.[0], 0x3008002c, 'string');
  }

  getTreatmentVerificationStatus(): string {
    const value = this.x3008002c;
    if (value === undefined) {
      throw new Error('TreatmentVerificationStatus is undefined');
    }
    return value;
  }

  // Referenced Treatment Record Sequence
  get ReferencedTreatmentRecordSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080030;
  }

  get x30080030(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080030']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedTreatmentRecordSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080030;
    if (value === undefined) {
      throw new Error('ReferencedTreatmentRecordSequence is undefined');
    }
    return value;
  }

  // Specified Primary Meterset
  get SpecifiedPrimaryMeterset(): number | undefined {
    return this.x30080032;
  }

  get x30080032(): number | undefined {
    const value = this.dwResponse['30080032']?.Value;
    return convert(value?.[0], 0x30080032, 'number');
  }

  getSpecifiedPrimaryMeterset(): number {
    const value = this.x30080032;
    if (value === undefined) {
      throw new Error('SpecifiedPrimaryMeterset is undefined');
    }
    return value;
  }

  // Specified Secondary Meterset
  get SpecifiedSecondaryMeterset(): number | undefined {
    return this.x30080033;
  }

  get x30080033(): number | undefined {
    const value = this.dwResponse['30080033']?.Value;
    return convert(value?.[0], 0x30080033, 'number');
  }

  getSpecifiedSecondaryMeterset(): number {
    const value = this.x30080033;
    if (value === undefined) {
      throw new Error('SpecifiedSecondaryMeterset is undefined');
    }
    return value;
  }

  // Delivered Primary Meterset
  get DeliveredPrimaryMeterset(): number | undefined {
    return this.x30080036;
  }

  get x30080036(): number | undefined {
    const value = this.dwResponse['30080036']?.Value;
    return convert(value?.[0], 0x30080036, 'number');
  }

  getDeliveredPrimaryMeterset(): number {
    const value = this.x30080036;
    if (value === undefined) {
      throw new Error('DeliveredPrimaryMeterset is undefined');
    }
    return value;
  }

  // Delivered Secondary Meterset
  get DeliveredSecondaryMeterset(): number | undefined {
    return this.x30080037;
  }

  get x30080037(): number | undefined {
    const value = this.dwResponse['30080037']?.Value;
    return convert(value?.[0], 0x30080037, 'number');
  }

  getDeliveredSecondaryMeterset(): number {
    const value = this.x30080037;
    if (value === undefined) {
      throw new Error('DeliveredSecondaryMeterset is undefined');
    }
    return value;
  }

  // Specified Treatment Time
  get SpecifiedTreatmentTime(): number | undefined {
    return this.x3008003a;
  }

  get x3008003a(): number | undefined {
    const value = this.dwResponse['3008003A']?.Value;
    return convert(value?.[0], 0x3008003a, 'number');
  }

  getSpecifiedTreatmentTime(): number {
    const value = this.x3008003a;
    if (value === undefined) {
      throw new Error('SpecifiedTreatmentTime is undefined');
    }
    return value;
  }

  // Delivered Treatment Time
  get DeliveredTreatmentTime(): number | undefined {
    return this.x3008003b;
  }

  get x3008003b(): number | undefined {
    const value = this.dwResponse['3008003B']?.Value;
    return convert(value?.[0], 0x3008003b, 'number');
  }

  getDeliveredTreatmentTime(): number {
    const value = this.x3008003b;
    if (value === undefined) {
      throw new Error('DeliveredTreatmentTime is undefined');
    }
    return value;
  }

  // Control Point Delivery Sequence
  get ControlPointDeliverySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080040;
  }

  get x30080040(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080040']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getControlPointDeliverySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080040;
    if (value === undefined) {
      throw new Error('ControlPointDeliverySequence is undefined');
    }
    return value;
  }

  // Ion Control Point Delivery Sequence
  get IonControlPointDeliverySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080041;
  }

  get x30080041(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080041']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIonControlPointDeliverySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080041;
    if (value === undefined) {
      throw new Error('IonControlPointDeliverySequence is undefined');
    }
    return value;
  }

  // Specified Meterset
  get SpecifiedMeterset(): number | undefined {
    return this.x30080042;
  }

  get x30080042(): number | undefined {
    const value = this.dwResponse['30080042']?.Value;
    return convert(value?.[0], 0x30080042, 'number');
  }

  getSpecifiedMeterset(): number {
    const value = this.x30080042;
    if (value === undefined) {
      throw new Error('SpecifiedMeterset is undefined');
    }
    return value;
  }

  // Delivered Meterset
  get DeliveredMeterset(): number | undefined {
    return this.x30080044;
  }

  get x30080044(): number | undefined {
    const value = this.dwResponse['30080044']?.Value;
    return convert(value?.[0], 0x30080044, 'number');
  }

  getDeliveredMeterset(): number {
    const value = this.x30080044;
    if (value === undefined) {
      throw new Error('DeliveredMeterset is undefined');
    }
    return value;
  }

  // Meterset Rate Set
  get MetersetRateSet(): number | undefined {
    return this.x30080045;
  }

  get x30080045(): number | undefined {
    const value = this.dwResponse['30080045']?.Value;
    return convert(value?.[0], 0x30080045, 'number');
  }

  getMetersetRateSet(): number {
    const value = this.x30080045;
    if (value === undefined) {
      throw new Error('MetersetRateSet is undefined');
    }
    return value;
  }

  // Meterset Rate Delivered
  get MetersetRateDelivered(): number | undefined {
    return this.x30080046;
  }

  get x30080046(): number | undefined {
    const value = this.dwResponse['30080046']?.Value;
    return convert(value?.[0], 0x30080046, 'number');
  }

  getMetersetRateDelivered(): number {
    const value = this.x30080046;
    if (value === undefined) {
      throw new Error('MetersetRateDelivered is undefined');
    }
    return value;
  }

  // Scan Spot Metersets Delivered
  get ScanSpotMetersetsDelivered(): Array<number | undefined> | undefined {
    return this.x30080047;
  }

  get x30080047(): Array<number | undefined> | undefined {
    const value = this.dwResponse['30080047']?.Value;
    return convert(value, 0x30080047, 'Array<number | undefined>');
  }

  getScanSpotMetersetsDelivered(): Array<number | undefined> {
    const value = this.x30080047;
    if (value === undefined) {
      throw new Error('ScanSpotMetersetsDelivered is undefined');
    }
    return value;
  }

  // Dose Rate Delivered
  get DoseRateDelivered(): number | undefined {
    return this.x30080048;
  }

  get x30080048(): number | undefined {
    const value = this.dwResponse['30080048']?.Value;
    return convert(value?.[0], 0x30080048, 'number');
  }

  getDoseRateDelivered(): number {
    const value = this.x30080048;
    if (value === undefined) {
      throw new Error('DoseRateDelivered is undefined');
    }
    return value;
  }

  // Treatment Summary Calculated Dose Reference Sequence
  get TreatmentSummaryCalculatedDoseReferenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080050;
  }

  get x30080050(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080050']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTreatmentSummaryCalculatedDoseReferenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080050;
    if (value === undefined) {
      throw new Error('TreatmentSummaryCalculatedDoseReferenceSequence is undefined');
    }
    return value;
  }

  // Cumulative Dose to Dose Reference
  get CumulativeDoseToDoseReference(): number | undefined {
    return this.x30080052;
  }

  get x30080052(): number | undefined {
    const value = this.dwResponse['30080052']?.Value;
    return convert(value?.[0], 0x30080052, 'number');
  }

  getCumulativeDoseToDoseReference(): number {
    const value = this.x30080052;
    if (value === undefined) {
      throw new Error('CumulativeDoseToDoseReference is undefined');
    }
    return value;
  }

  // First Treatment Date
  get FirstTreatmentDate(): Date | undefined {
    return this.x30080054;
  }

  get x30080054(): Date | undefined {
    const value = this.dwResponse['30080054']?.Value;
    return convert(value?.[0], 0x30080054, 'Date');
  }

  getFirstTreatmentDate(): Date {
    const value = this.x30080054;
    if (value === undefined) {
      throw new Error('FirstTreatmentDate is undefined');
    }
    return value;
  }

  // Most Recent Treatment Date
  get MostRecentTreatmentDate(): Date | undefined {
    return this.x30080056;
  }

  get x30080056(): Date | undefined {
    const value = this.dwResponse['30080056']?.Value;
    return convert(value?.[0], 0x30080056, 'Date');
  }

  getMostRecentTreatmentDate(): Date {
    const value = this.x30080056;
    if (value === undefined) {
      throw new Error('MostRecentTreatmentDate is undefined');
    }
    return value;
  }

  // Number of Fractions Delivered
  get NumberOfFractionsDelivered(): number | undefined {
    return this.x3008005a;
  }

  get x3008005a(): number | undefined {
    const value = this.dwResponse['3008005A']?.Value;
    return convert(value?.[0], 0x3008005a, 'number');
  }

  getNumberOfFractionsDelivered(): number {
    const value = this.x3008005a;
    if (value === undefined) {
      throw new Error('NumberOfFractionsDelivered is undefined');
    }
    return value;
  }

  // Override Sequence
  get OverrideSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080060;
  }

  get x30080060(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080060']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOverrideSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080060;
    if (value === undefined) {
      throw new Error('OverrideSequence is undefined');
    }
    return value;
  }

  // Parameter Sequence Pointer
  get ParameterSequencePointer(): Uint16Array | undefined {
    return this.x30080061;
  }

  get x30080061(): Uint16Array | undefined {
    const value = this.dwResponse['30080061']?.Value;
    return convert(value?.[0], 0x30080061, 'Uint16Array');
  }

  getParameterSequencePointer(): Uint16Array {
    const value = this.x30080061;
    if (value === undefined) {
      throw new Error('ParameterSequencePointer is undefined');
    }
    return value;
  }

  // Override Parameter Pointer
  get OverrideParameterPointer(): Uint16Array | undefined {
    return this.x30080062;
  }

  get x30080062(): Uint16Array | undefined {
    const value = this.dwResponse['30080062']?.Value;
    return convert(value?.[0], 0x30080062, 'Uint16Array');
  }

  getOverrideParameterPointer(): Uint16Array {
    const value = this.x30080062;
    if (value === undefined) {
      throw new Error('OverrideParameterPointer is undefined');
    }
    return value;
  }

  // Parameter Item Index
  get ParameterItemIndex(): number | undefined {
    return this.x30080063;
  }

  get x30080063(): number | undefined {
    const value = this.dwResponse['30080063']?.Value;
    return convert(value?.[0], 0x30080063, 'number');
  }

  getParameterItemIndex(): number {
    const value = this.x30080063;
    if (value === undefined) {
      throw new Error('ParameterItemIndex is undefined');
    }
    return value;
  }

  // Measured Dose Reference Number
  get MeasuredDoseReferenceNumber(): number | undefined {
    return this.x30080064;
  }

  get x30080064(): number | undefined {
    const value = this.dwResponse['30080064']?.Value;
    return convert(value?.[0], 0x30080064, 'number');
  }

  getMeasuredDoseReferenceNumber(): number {
    const value = this.x30080064;
    if (value === undefined) {
      throw new Error('MeasuredDoseReferenceNumber is undefined');
    }
    return value;
  }

  // Parameter Pointer
  get ParameterPointer(): Uint16Array | undefined {
    return this.x30080065;
  }

  get x30080065(): Uint16Array | undefined {
    const value = this.dwResponse['30080065']?.Value;
    return convert(value?.[0], 0x30080065, 'Uint16Array');
  }

  getParameterPointer(): Uint16Array {
    const value = this.x30080065;
    if (value === undefined) {
      throw new Error('ParameterPointer is undefined');
    }
    return value;
  }

  // Corrected Parameter Sequence
  get CorrectedParameterSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080068;
  }

  get x30080068(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080068']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCorrectedParameterSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080068;
    if (value === undefined) {
      throw new Error('CorrectedParameterSequence is undefined');
    }
    return value;
  }

  // Correction Value
  get CorrectionValue(): number | undefined {
    return this.x3008006a;
  }

  get x3008006a(): number | undefined {
    const value = this.dwResponse['3008006A']?.Value;
    return convert(value?.[0], 0x3008006a, 'number');
  }

  getCorrectionValue(): number {
    const value = this.x3008006a;
    if (value === undefined) {
      throw new Error('CorrectionValue is undefined');
    }
    return value;
  }

  // Calculated Dose Reference Sequence
  get CalculatedDoseReferenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080070;
  }

  get x30080070(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080070']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCalculatedDoseReferenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080070;
    if (value === undefined) {
      throw new Error('CalculatedDoseReferenceSequence is undefined');
    }
    return value;
  }

  // Calculated Dose Reference Number
  get CalculatedDoseReferenceNumber(): number | undefined {
    return this.x30080072;
  }

  get x30080072(): number | undefined {
    const value = this.dwResponse['30080072']?.Value;
    return convert(value?.[0], 0x30080072, 'number');
  }

  getCalculatedDoseReferenceNumber(): number {
    const value = this.x30080072;
    if (value === undefined) {
      throw new Error('CalculatedDoseReferenceNumber is undefined');
    }
    return value;
  }

  // Calculated Dose Reference Dose Value
  get CalculatedDoseReferenceDoseValue(): number | undefined {
    return this.x30080076;
  }

  get x30080076(): number | undefined {
    const value = this.dwResponse['30080076']?.Value;
    return convert(value?.[0], 0x30080076, 'number');
  }

  getCalculatedDoseReferenceDoseValue(): number {
    const value = this.x30080076;
    if (value === undefined) {
      throw new Error('CalculatedDoseReferenceDoseValue is undefined');
    }
    return value;
  }

  // Start Meterset
  get StartMeterset(): number | undefined {
    return this.x30080078;
  }

  get x30080078(): number | undefined {
    const value = this.dwResponse['30080078']?.Value;
    return convert(value?.[0], 0x30080078, 'number');
  }

  getStartMeterset(): number {
    const value = this.x30080078;
    if (value === undefined) {
      throw new Error('StartMeterset is undefined');
    }
    return value;
  }

  // End Meterset
  get EndMeterset(): number | undefined {
    return this.x3008007a;
  }

  get x3008007a(): number | undefined {
    const value = this.dwResponse['3008007A']?.Value;
    return convert(value?.[0], 0x3008007a, 'number');
  }

  getEndMeterset(): number {
    const value = this.x3008007a;
    if (value === undefined) {
      throw new Error('EndMeterset is undefined');
    }
    return value;
  }

  // Referenced Measured Dose Reference Sequence
  get ReferencedMeasuredDoseReferenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080080;
  }

  get x30080080(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080080']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedMeasuredDoseReferenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080080;
    if (value === undefined) {
      throw new Error('ReferencedMeasuredDoseReferenceSequence is undefined');
    }
    return value;
  }

  // Referenced Measured Dose Reference Number
  get ReferencedMeasuredDoseReferenceNumber(): number | undefined {
    return this.x30080082;
  }

  get x30080082(): number | undefined {
    const value = this.dwResponse['30080082']?.Value;
    return convert(value?.[0], 0x30080082, 'number');
  }

  getReferencedMeasuredDoseReferenceNumber(): number {
    const value = this.x30080082;
    if (value === undefined) {
      throw new Error('ReferencedMeasuredDoseReferenceNumber is undefined');
    }
    return value;
  }

  // Referenced Calculated Dose Reference Sequence
  get ReferencedCalculatedDoseReferenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080090;
  }

  get x30080090(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080090']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedCalculatedDoseReferenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080090;
    if (value === undefined) {
      throw new Error('ReferencedCalculatedDoseReferenceSequence is undefined');
    }
    return value;
  }

  // Referenced Calculated Dose Reference Number
  get ReferencedCalculatedDoseReferenceNumber(): number | undefined {
    return this.x30080092;
  }

  get x30080092(): number | undefined {
    const value = this.dwResponse['30080092']?.Value;
    return convert(value?.[0], 0x30080092, 'number');
  }

  getReferencedCalculatedDoseReferenceNumber(): number {
    const value = this.x30080092;
    if (value === undefined) {
      throw new Error('ReferencedCalculatedDoseReferenceNumber is undefined');
    }
    return value;
  }

  // Beam Limiting Device Leaf Pairs Sequence
  get BeamLimitingDeviceLeafPairsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300800a0;
  }

  get x300800a0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300800A0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBeamLimitingDeviceLeafPairsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300800a0;
    if (value === undefined) {
      throw new Error('BeamLimitingDeviceLeafPairsSequence is undefined');
    }
    return value;
  }

  // Recorded Wedge Sequence
  get RecordedWedgeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300800b0;
  }

  get x300800b0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300800B0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRecordedWedgeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300800b0;
    if (value === undefined) {
      throw new Error('RecordedWedgeSequence is undefined');
    }
    return value;
  }

  // Recorded Compensator Sequence
  get RecordedCompensatorSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300800c0;
  }

  get x300800c0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300800C0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRecordedCompensatorSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300800c0;
    if (value === undefined) {
      throw new Error('RecordedCompensatorSequence is undefined');
    }
    return value;
  }

  // Recorded Block Sequence
  get RecordedBlockSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300800d0;
  }

  get x300800d0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300800D0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRecordedBlockSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300800d0;
    if (value === undefined) {
      throw new Error('RecordedBlockSequence is undefined');
    }
    return value;
  }

  // Treatment Summary Measured Dose Reference Sequence
  get TreatmentSummaryMeasuredDoseReferenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300800e0;
  }

  get x300800e0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300800E0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTreatmentSummaryMeasuredDoseReferenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300800e0;
    if (value === undefined) {
      throw new Error('TreatmentSummaryMeasuredDoseReferenceSequence is undefined');
    }
    return value;
  }

  // Recorded Snout Sequence
  get RecordedSnoutSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300800f0;
  }

  get x300800f0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300800F0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRecordedSnoutSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300800f0;
    if (value === undefined) {
      throw new Error('RecordedSnoutSequence is undefined');
    }
    return value;
  }

  // Recorded Range Shifter Sequence
  get RecordedRangeShifterSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300800f2;
  }

  get x300800f2(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300800F2']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRecordedRangeShifterSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300800f2;
    if (value === undefined) {
      throw new Error('RecordedRangeShifterSequence is undefined');
    }
    return value;
  }

  // Recorded Lateral Spreading Device Sequence
  get RecordedLateralSpreadingDeviceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300800f4;
  }

  get x300800f4(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300800F4']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRecordedLateralSpreadingDeviceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300800f4;
    if (value === undefined) {
      throw new Error('RecordedLateralSpreadingDeviceSequence is undefined');
    }
    return value;
  }

  // Recorded Range Modulator Sequence
  get RecordedRangeModulatorSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300800f6;
  }

  get x300800f6(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300800F6']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRecordedRangeModulatorSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300800f6;
    if (value === undefined) {
      throw new Error('RecordedRangeModulatorSequence is undefined');
    }
    return value;
  }

  // Recorded Source Sequence
  get RecordedSourceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080100;
  }

  get x30080100(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080100']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRecordedSourceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080100;
    if (value === undefined) {
      throw new Error('RecordedSourceSequence is undefined');
    }
    return value;
  }

  // Source Serial Number
  get SourceSerialNumber(): string | undefined {
    return this.x30080105;
  }

  get x30080105(): string | undefined {
    const value = this.dwResponse['30080105']?.Value;
    return convert(value?.[0], 0x30080105, 'string');
  }

  getSourceSerialNumber(): string {
    const value = this.x30080105;
    if (value === undefined) {
      throw new Error('SourceSerialNumber is undefined');
    }
    return value;
  }

  // Treatment Session Application Setup Sequence
  get TreatmentSessionApplicationSetupSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080110;
  }

  get x30080110(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080110']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTreatmentSessionApplicationSetupSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080110;
    if (value === undefined) {
      throw new Error('TreatmentSessionApplicationSetupSequence is undefined');
    }
    return value;
  }

  // Application Setup Check
  get ApplicationSetupCheck(): string | undefined {
    return this.x30080116;
  }

  get x30080116(): string | undefined {
    const value = this.dwResponse['30080116']?.Value;
    return convert(value?.[0], 0x30080116, 'string');
  }

  getApplicationSetupCheck(): string {
    const value = this.x30080116;
    if (value === undefined) {
      throw new Error('ApplicationSetupCheck is undefined');
    }
    return value;
  }

  // Recorded Brachy Accessory Device Sequence
  get RecordedBrachyAccessoryDeviceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080120;
  }

  get x30080120(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080120']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRecordedBrachyAccessoryDeviceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080120;
    if (value === undefined) {
      throw new Error('RecordedBrachyAccessoryDeviceSequence is undefined');
    }
    return value;
  }

  // Referenced Brachy Accessory Device Number
  get ReferencedBrachyAccessoryDeviceNumber(): number | undefined {
    return this.x30080122;
  }

  get x30080122(): number | undefined {
    const value = this.dwResponse['30080122']?.Value;
    return convert(value?.[0], 0x30080122, 'number');
  }

  getReferencedBrachyAccessoryDeviceNumber(): number {
    const value = this.x30080122;
    if (value === undefined) {
      throw new Error('ReferencedBrachyAccessoryDeviceNumber is undefined');
    }
    return value;
  }

  // Recorded Channel Sequence
  get RecordedChannelSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080130;
  }

  get x30080130(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080130']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRecordedChannelSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080130;
    if (value === undefined) {
      throw new Error('RecordedChannelSequence is undefined');
    }
    return value;
  }

  // Specified Channel Total Time
  get SpecifiedChannelTotalTime(): number | undefined {
    return this.x30080132;
  }

  get x30080132(): number | undefined {
    const value = this.dwResponse['30080132']?.Value;
    return convert(value?.[0], 0x30080132, 'number');
  }

  getSpecifiedChannelTotalTime(): number {
    const value = this.x30080132;
    if (value === undefined) {
      throw new Error('SpecifiedChannelTotalTime is undefined');
    }
    return value;
  }

  // Delivered Channel Total Time
  get DeliveredChannelTotalTime(): number | undefined {
    return this.x30080134;
  }

  get x30080134(): number | undefined {
    const value = this.dwResponse['30080134']?.Value;
    return convert(value?.[0], 0x30080134, 'number');
  }

  getDeliveredChannelTotalTime(): number {
    const value = this.x30080134;
    if (value === undefined) {
      throw new Error('DeliveredChannelTotalTime is undefined');
    }
    return value;
  }

  // Specified Number of Pulses
  get SpecifiedNumberOfPulses(): number | undefined {
    return this.x30080136;
  }

  get x30080136(): number | undefined {
    const value = this.dwResponse['30080136']?.Value;
    return convert(value?.[0], 0x30080136, 'number');
  }

  getSpecifiedNumberOfPulses(): number {
    const value = this.x30080136;
    if (value === undefined) {
      throw new Error('SpecifiedNumberOfPulses is undefined');
    }
    return value;
  }

  // Delivered Number of Pulses
  get DeliveredNumberOfPulses(): number | undefined {
    return this.x30080138;
  }

  get x30080138(): number | undefined {
    const value = this.dwResponse['30080138']?.Value;
    return convert(value?.[0], 0x30080138, 'number');
  }

  getDeliveredNumberOfPulses(): number {
    const value = this.x30080138;
    if (value === undefined) {
      throw new Error('DeliveredNumberOfPulses is undefined');
    }
    return value;
  }

  // Specified Pulse Repetition Interval
  get SpecifiedPulseRepetitionInterval(): number | undefined {
    return this.x3008013a;
  }

  get x3008013a(): number | undefined {
    const value = this.dwResponse['3008013A']?.Value;
    return convert(value?.[0], 0x3008013a, 'number');
  }

  getSpecifiedPulseRepetitionInterval(): number {
    const value = this.x3008013a;
    if (value === undefined) {
      throw new Error('SpecifiedPulseRepetitionInterval is undefined');
    }
    return value;
  }

  // Delivered Pulse Repetition Interval
  get DeliveredPulseRepetitionInterval(): number | undefined {
    return this.x3008013c;
  }

  get x3008013c(): number | undefined {
    const value = this.dwResponse['3008013C']?.Value;
    return convert(value?.[0], 0x3008013c, 'number');
  }

  getDeliveredPulseRepetitionInterval(): number {
    const value = this.x3008013c;
    if (value === undefined) {
      throw new Error('DeliveredPulseRepetitionInterval is undefined');
    }
    return value;
  }

  // Recorded Source Applicator Sequence
  get RecordedSourceApplicatorSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080140;
  }

  get x30080140(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080140']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRecordedSourceApplicatorSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080140;
    if (value === undefined) {
      throw new Error('RecordedSourceApplicatorSequence is undefined');
    }
    return value;
  }

  // Referenced Source Applicator Number
  get ReferencedSourceApplicatorNumber(): number | undefined {
    return this.x30080142;
  }

  get x30080142(): number | undefined {
    const value = this.dwResponse['30080142']?.Value;
    return convert(value?.[0], 0x30080142, 'number');
  }

  getReferencedSourceApplicatorNumber(): number {
    const value = this.x30080142;
    if (value === undefined) {
      throw new Error('ReferencedSourceApplicatorNumber is undefined');
    }
    return value;
  }

  // Recorded Channel Shield Sequence
  get RecordedChannelShieldSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080150;
  }

  get x30080150(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080150']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRecordedChannelShieldSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080150;
    if (value === undefined) {
      throw new Error('RecordedChannelShieldSequence is undefined');
    }
    return value;
  }

  // Referenced Channel Shield Number
  get ReferencedChannelShieldNumber(): number | undefined {
    return this.x30080152;
  }

  get x30080152(): number | undefined {
    const value = this.dwResponse['30080152']?.Value;
    return convert(value?.[0], 0x30080152, 'number');
  }

  getReferencedChannelShieldNumber(): number {
    const value = this.x30080152;
    if (value === undefined) {
      throw new Error('ReferencedChannelShieldNumber is undefined');
    }
    return value;
  }

  // Brachy Control Point Delivered Sequence
  get BrachyControlPointDeliveredSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080160;
  }

  get x30080160(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080160']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBrachyControlPointDeliveredSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080160;
    if (value === undefined) {
      throw new Error('BrachyControlPointDeliveredSequence is undefined');
    }
    return value;
  }

  // Safe Position Exit Date
  get SafePositionExitDate(): Date | undefined {
    return this.x30080162;
  }

  get x30080162(): Date | undefined {
    const value = this.dwResponse['30080162']?.Value;
    return convert(value?.[0], 0x30080162, 'Date');
  }

  getSafePositionExitDate(): Date {
    const value = this.x30080162;
    if (value === undefined) {
      throw new Error('SafePositionExitDate is undefined');
    }
    return value;
  }

  // Safe Position Exit Time
  get SafePositionExitTime(): string | undefined {
    return this.x30080164;
  }

  get x30080164(): string | undefined {
    const value = this.dwResponse['30080164']?.Value;
    return convert(value?.[0], 0x30080164, 'string');
  }

  getSafePositionExitTime(): string {
    const value = this.x30080164;
    if (value === undefined) {
      throw new Error('SafePositionExitTime is undefined');
    }
    return value;
  }

  // Safe Position Return Date
  get SafePositionReturnDate(): Date | undefined {
    return this.x30080166;
  }

  get x30080166(): Date | undefined {
    const value = this.dwResponse['30080166']?.Value;
    return convert(value?.[0], 0x30080166, 'Date');
  }

  getSafePositionReturnDate(): Date {
    const value = this.x30080166;
    if (value === undefined) {
      throw new Error('SafePositionReturnDate is undefined');
    }
    return value;
  }

  // Safe Position Return Time
  get SafePositionReturnTime(): string | undefined {
    return this.x30080168;
  }

  get x30080168(): string | undefined {
    const value = this.dwResponse['30080168']?.Value;
    return convert(value?.[0], 0x30080168, 'string');
  }

  getSafePositionReturnTime(): string {
    const value = this.x30080168;
    if (value === undefined) {
      throw new Error('SafePositionReturnTime is undefined');
    }
    return value;
  }

  // Pulse Specific Brachy Control Point Delivered Sequence
  get PulseSpecificBrachyControlPointDeliveredSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080171;
  }

  get x30080171(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080171']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPulseSpecificBrachyControlPointDeliveredSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080171;
    if (value === undefined) {
      throw new Error('PulseSpecificBrachyControlPointDeliveredSequence is undefined');
    }
    return value;
  }

  // Pulse Number
  get PulseNumber(): number | undefined {
    return this.x30080172;
  }

  get x30080172(): number | undefined {
    const value = this.dwResponse['30080172']?.Value;
    return convert(value?.[0], 0x30080172, 'number');
  }

  getPulseNumber(): number {
    const value = this.x30080172;
    if (value === undefined) {
      throw new Error('PulseNumber is undefined');
    }
    return value;
  }

  // Brachy Pulse Control Point Delivered Sequence
  get BrachyPulseControlPointDeliveredSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080173;
  }

  get x30080173(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080173']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBrachyPulseControlPointDeliveredSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080173;
    if (value === undefined) {
      throw new Error('BrachyPulseControlPointDeliveredSequence is undefined');
    }
    return value;
  }

  // Current Treatment Status
  get CurrentTreatmentStatus(): string | undefined {
    return this.x30080200;
  }

  get x30080200(): string | undefined {
    const value = this.dwResponse['30080200']?.Value;
    return convert(value?.[0], 0x30080200, 'string');
  }

  getCurrentTreatmentStatus(): string {
    const value = this.x30080200;
    if (value === undefined) {
      throw new Error('CurrentTreatmentStatus is undefined');
    }
    return value;
  }

  // Fraction Group Summary Sequence
  get FractionGroupSummarySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080220;
  }

  get x30080220(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080220']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFractionGroupSummarySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080220;
    if (value === undefined) {
      throw new Error('FractionGroupSummarySequence is undefined');
    }
    return value;
  }

  // Referenced Fraction Number
  get ReferencedFractionNumber(): number | undefined {
    return this.x30080223;
  }

  get x30080223(): number | undefined {
    const value = this.dwResponse['30080223']?.Value;
    return convert(value?.[0], 0x30080223, 'number');
  }

  getReferencedFractionNumber(): number {
    const value = this.x30080223;
    if (value === undefined) {
      throw new Error('ReferencedFractionNumber is undefined');
    }
    return value;
  }

  // Fraction Group Type
  get FractionGroupType(): string | undefined {
    return this.x30080224;
  }

  get x30080224(): string | undefined {
    const value = this.dwResponse['30080224']?.Value;
    return convert(value?.[0], 0x30080224, 'string');
  }

  getFractionGroupType(): string {
    const value = this.x30080224;
    if (value === undefined) {
      throw new Error('FractionGroupType is undefined');
    }
    return value;
  }

  // Beam Stopper Position
  get BeamStopperPosition(): string | undefined {
    return this.x30080230;
  }

  get x30080230(): string | undefined {
    const value = this.dwResponse['30080230']?.Value;
    return convert(value?.[0], 0x30080230, 'string');
  }

  getBeamStopperPosition(): string {
    const value = this.x30080230;
    if (value === undefined) {
      throw new Error('BeamStopperPosition is undefined');
    }
    return value;
  }

  // Fraction Status Summary Sequence
  get FractionStatusSummarySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x30080240;
  }

  get x30080240(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['30080240']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFractionStatusSummarySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x30080240;
    if (value === undefined) {
      throw new Error('FractionStatusSummarySequence is undefined');
    }
    return value;
  }

  // Treatment Date
  get TreatmentDate(): Date | undefined {
    return this.x30080250;
  }

  get x30080250(): Date | undefined {
    const value = this.dwResponse['30080250']?.Value;
    return convert(value?.[0], 0x30080250, 'Date');
  }

  getTreatmentDate(): Date {
    const value = this.x30080250;
    if (value === undefined) {
      throw new Error('TreatmentDate is undefined');
    }
    return value;
  }

  // Treatment Time
  get TreatmentTime(): string | undefined {
    return this.x30080251;
  }

  get x30080251(): string | undefined {
    const value = this.dwResponse['30080251']?.Value;
    return convert(value?.[0], 0x30080251, 'string');
  }

  getTreatmentTime(): string {
    const value = this.x30080251;
    if (value === undefined) {
      throw new Error('TreatmentTime is undefined');
    }
    return value;
  }

  // RT Plan Label
  get RTPlanLabel(): string | undefined {
    return this.x300a0002;
  }

  get x300a0002(): string | undefined {
    const value = this.dwResponse['300A0002']?.Value;
    return convert(value?.[0], 0x300a0002, 'string');
  }

  getRTPlanLabel(): string {
    const value = this.x300a0002;
    if (value === undefined) {
      throw new Error('RTPlanLabel is undefined');
    }
    return value;
  }

  // RT Plan Name
  get RTPlanName(): string | undefined {
    return this.x300a0003;
  }

  get x300a0003(): string | undefined {
    const value = this.dwResponse['300A0003']?.Value;
    return convert(value?.[0], 0x300a0003, 'string');
  }

  getRTPlanName(): string {
    const value = this.x300a0003;
    if (value === undefined) {
      throw new Error('RTPlanName is undefined');
    }
    return value;
  }

  // RT Plan Date
  get RTPlanDate(): Date | undefined {
    return this.x300a0006;
  }

  get x300a0006(): Date | undefined {
    const value = this.dwResponse['300A0006']?.Value;
    return convert(value?.[0], 0x300a0006, 'Date');
  }

  getRTPlanDate(): Date {
    const value = this.x300a0006;
    if (value === undefined) {
      throw new Error('RTPlanDate is undefined');
    }
    return value;
  }

  // RT Plan Time
  get RTPlanTime(): string | undefined {
    return this.x300a0007;
  }

  get x300a0007(): string | undefined {
    const value = this.dwResponse['300A0007']?.Value;
    return convert(value?.[0], 0x300a0007, 'string');
  }

  getRTPlanTime(): string {
    const value = this.x300a0007;
    if (value === undefined) {
      throw new Error('RTPlanTime is undefined');
    }
    return value;
  }

  // Treatment Protocols
  get TreatmentProtocols(): Array<string | undefined> | undefined {
    return this.x300a0009;
  }

  get x300a0009(): Array<string | undefined> | undefined {
    const value = this.dwResponse['300A0009']?.Value;
    return convert(value, 0x300a0009, 'Array<string | undefined>');
  }

  getTreatmentProtocols(): Array<string | undefined> {
    const value = this.x300a0009;
    if (value === undefined) {
      throw new Error('TreatmentProtocols is undefined');
    }
    return value;
  }

  // Plan Intent
  get PlanIntent(): string | undefined {
    return this.x300a000a;
  }

  get x300a000a(): string | undefined {
    const value = this.dwResponse['300A000A']?.Value;
    return convert(value?.[0], 0x300a000a, 'string');
  }

  getPlanIntent(): string {
    const value = this.x300a000a;
    if (value === undefined) {
      throw new Error('PlanIntent is undefined');
    }
    return value;
  }

  // Treatment Sites
  get TreatmentSites(): Array<string | undefined> | undefined {
    return this.x300a000b;
  }

  get x300a000b(): Array<string | undefined> | undefined {
    const value = this.dwResponse['300A000B']?.Value;
    return convert(value, 0x300a000b, 'Array<string | undefined>');
  }

  getTreatmentSites(): Array<string | undefined> {
    const value = this.x300a000b;
    if (value === undefined) {
      throw new Error('TreatmentSites is undefined');
    }
    return value;
  }

  // RT Plan Geometry
  get RTPlanGeometry(): string | undefined {
    return this.x300a000c;
  }

  get x300a000c(): string | undefined {
    const value = this.dwResponse['300A000C']?.Value;
    return convert(value?.[0], 0x300a000c, 'string');
  }

  getRTPlanGeometry(): string {
    const value = this.x300a000c;
    if (value === undefined) {
      throw new Error('RTPlanGeometry is undefined');
    }
    return value;
  }

  // Dose Reference Sequence
  get DoseReferenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0010;
  }

  get x300a0010(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0010']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDoseReferenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0010;
    if (value === undefined) {
      throw new Error('DoseReferenceSequence is undefined');
    }
    return value;
  }

  // Dose Reference Number
  get DoseReferenceNumber(): number | undefined {
    return this.x300a0012;
  }

  get x300a0012(): number | undefined {
    const value = this.dwResponse['300A0012']?.Value;
    return convert(value?.[0], 0x300a0012, 'number');
  }

  getDoseReferenceNumber(): number {
    const value = this.x300a0012;
    if (value === undefined) {
      throw new Error('DoseReferenceNumber is undefined');
    }
    return value;
  }

  // Dose Reference UID
  get DoseReferenceUID(): string | undefined {
    return this.x300a0013;
  }

  get x300a0013(): string | undefined {
    const value = this.dwResponse['300A0013']?.Value;
    return convert(value?.[0], 0x300a0013, 'string');
  }

  getDoseReferenceUID(): string {
    const value = this.x300a0013;
    if (value === undefined) {
      throw new Error('DoseReferenceUID is undefined');
    }
    return value;
  }

  // Dose Reference Structure Type
  get DoseReferenceStructureType(): string | undefined {
    return this.x300a0014;
  }

  get x300a0014(): string | undefined {
    const value = this.dwResponse['300A0014']?.Value;
    return convert(value?.[0], 0x300a0014, 'string');
  }

  getDoseReferenceStructureType(): string {
    const value = this.x300a0014;
    if (value === undefined) {
      throw new Error('DoseReferenceStructureType is undefined');
    }
    return value;
  }

  // Nominal Beam Energy Unit
  get NominalBeamEnergyUnit(): string | undefined {
    return this.x300a0015;
  }

  get x300a0015(): string | undefined {
    const value = this.dwResponse['300A0015']?.Value;
    return convert(value?.[0], 0x300a0015, 'string');
  }

  getNominalBeamEnergyUnit(): string {
    const value = this.x300a0015;
    if (value === undefined) {
      throw new Error('NominalBeamEnergyUnit is undefined');
    }
    return value;
  }

  // Dose Reference Description
  get DoseReferenceDescription(): string | undefined {
    return this.x300a0016;
  }

  get x300a0016(): string | undefined {
    const value = this.dwResponse['300A0016']?.Value;
    return convert(value?.[0], 0x300a0016, 'string');
  }

  getDoseReferenceDescription(): string {
    const value = this.x300a0016;
    if (value === undefined) {
      throw new Error('DoseReferenceDescription is undefined');
    }
    return value;
  }

  // Dose Reference Point Coordinates
  get DoseReferencePointCoordinates(): Array<number | undefined> | undefined {
    return this.x300a0018;
  }

  get x300a0018(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A0018']?.Value;
    return convert(value, 0x300a0018, 'Array<number | undefined>');
  }

  getDoseReferencePointCoordinates(): Array<number | undefined> {
    const value = this.x300a0018;
    if (value === undefined) {
      throw new Error('DoseReferencePointCoordinates is undefined');
    }
    return value;
  }

  // Nominal Prior Dose
  get NominalPriorDose(): number | undefined {
    return this.x300a001a;
  }

  get x300a001a(): number | undefined {
    const value = this.dwResponse['300A001A']?.Value;
    return convert(value?.[0], 0x300a001a, 'number');
  }

  getNominalPriorDose(): number {
    const value = this.x300a001a;
    if (value === undefined) {
      throw new Error('NominalPriorDose is undefined');
    }
    return value;
  }

  // Dose Reference Type
  get DoseReferenceType(): string | undefined {
    return this.x300a0020;
  }

  get x300a0020(): string | undefined {
    const value = this.dwResponse['300A0020']?.Value;
    return convert(value?.[0], 0x300a0020, 'string');
  }

  getDoseReferenceType(): string {
    const value = this.x300a0020;
    if (value === undefined) {
      throw new Error('DoseReferenceType is undefined');
    }
    return value;
  }

  // Constraint Weight
  get ConstraintWeight(): number | undefined {
    return this.x300a0021;
  }

  get x300a0021(): number | undefined {
    const value = this.dwResponse['300A0021']?.Value;
    return convert(value?.[0], 0x300a0021, 'number');
  }

  getConstraintWeight(): number {
    const value = this.x300a0021;
    if (value === undefined) {
      throw new Error('ConstraintWeight is undefined');
    }
    return value;
  }

  // Delivery Warning Dose
  get DeliveryWarningDose(): number | undefined {
    return this.x300a0022;
  }

  get x300a0022(): number | undefined {
    const value = this.dwResponse['300A0022']?.Value;
    return convert(value?.[0], 0x300a0022, 'number');
  }

  getDeliveryWarningDose(): number {
    const value = this.x300a0022;
    if (value === undefined) {
      throw new Error('DeliveryWarningDose is undefined');
    }
    return value;
  }

  // Delivery Maximum Dose
  get DeliveryMaximumDose(): number | undefined {
    return this.x300a0023;
  }

  get x300a0023(): number | undefined {
    const value = this.dwResponse['300A0023']?.Value;
    return convert(value?.[0], 0x300a0023, 'number');
  }

  getDeliveryMaximumDose(): number {
    const value = this.x300a0023;
    if (value === undefined) {
      throw new Error('DeliveryMaximumDose is undefined');
    }
    return value;
  }

  // Target Minimum Dose
  get TargetMinimumDose(): number | undefined {
    return this.x300a0025;
  }

  get x300a0025(): number | undefined {
    const value = this.dwResponse['300A0025']?.Value;
    return convert(value?.[0], 0x300a0025, 'number');
  }

  getTargetMinimumDose(): number {
    const value = this.x300a0025;
    if (value === undefined) {
      throw new Error('TargetMinimumDose is undefined');
    }
    return value;
  }

  // Target Prescription Dose
  get TargetPrescriptionDose(): number | undefined {
    return this.x300a0026;
  }

  get x300a0026(): number | undefined {
    const value = this.dwResponse['300A0026']?.Value;
    return convert(value?.[0], 0x300a0026, 'number');
  }

  getTargetPrescriptionDose(): number {
    const value = this.x300a0026;
    if (value === undefined) {
      throw new Error('TargetPrescriptionDose is undefined');
    }
    return value;
  }

  // Target Maximum Dose
  get TargetMaximumDose(): number | undefined {
    return this.x300a0027;
  }

  get x300a0027(): number | undefined {
    const value = this.dwResponse['300A0027']?.Value;
    return convert(value?.[0], 0x300a0027, 'number');
  }

  getTargetMaximumDose(): number {
    const value = this.x300a0027;
    if (value === undefined) {
      throw new Error('TargetMaximumDose is undefined');
    }
    return value;
  }

  // Target Underdose Volume Fraction
  get TargetUnderdoseVolumeFraction(): number | undefined {
    return this.x300a0028;
  }

  get x300a0028(): number | undefined {
    const value = this.dwResponse['300A0028']?.Value;
    return convert(value?.[0], 0x300a0028, 'number');
  }

  getTargetUnderdoseVolumeFraction(): number {
    const value = this.x300a0028;
    if (value === undefined) {
      throw new Error('TargetUnderdoseVolumeFraction is undefined');
    }
    return value;
  }

  // Organ at Risk Full-volume Dose
  get OrganAtRiskFullVolumeDose(): number | undefined {
    return this.x300a002a;
  }

  get x300a002a(): number | undefined {
    const value = this.dwResponse['300A002A']?.Value;
    return convert(value?.[0], 0x300a002a, 'number');
  }

  getOrganAtRiskFullVolumeDose(): number {
    const value = this.x300a002a;
    if (value === undefined) {
      throw new Error('OrganAtRiskFullVolumeDose is undefined');
    }
    return value;
  }

  // Organ at Risk Limit Dose
  get OrganAtRiskLimitDose(): number | undefined {
    return this.x300a002b;
  }

  get x300a002b(): number | undefined {
    const value = this.dwResponse['300A002B']?.Value;
    return convert(value?.[0], 0x300a002b, 'number');
  }

  getOrganAtRiskLimitDose(): number {
    const value = this.x300a002b;
    if (value === undefined) {
      throw new Error('OrganAtRiskLimitDose is undefined');
    }
    return value;
  }

  // Organ at Risk Maximum Dose
  get OrganAtRiskMaximumDose(): number | undefined {
    return this.x300a002c;
  }

  get x300a002c(): number | undefined {
    const value = this.dwResponse['300A002C']?.Value;
    return convert(value?.[0], 0x300a002c, 'number');
  }

  getOrganAtRiskMaximumDose(): number {
    const value = this.x300a002c;
    if (value === undefined) {
      throw new Error('OrganAtRiskMaximumDose is undefined');
    }
    return value;
  }

  // Organ at Risk Overdose Volume Fraction
  get OrganAtRiskOverdoseVolumeFraction(): number | undefined {
    return this.x300a002d;
  }

  get x300a002d(): number | undefined {
    const value = this.dwResponse['300A002D']?.Value;
    return convert(value?.[0], 0x300a002d, 'number');
  }

  getOrganAtRiskOverdoseVolumeFraction(): number {
    const value = this.x300a002d;
    if (value === undefined) {
      throw new Error('OrganAtRiskOverdoseVolumeFraction is undefined');
    }
    return value;
  }

  // Tolerance Table Sequence
  get ToleranceTableSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0040;
  }

  get x300a0040(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0040']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getToleranceTableSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0040;
    if (value === undefined) {
      throw new Error('ToleranceTableSequence is undefined');
    }
    return value;
  }

  // Tolerance Table Number
  get ToleranceTableNumber(): number | undefined {
    return this.x300a0042;
  }

  get x300a0042(): number | undefined {
    const value = this.dwResponse['300A0042']?.Value;
    return convert(value?.[0], 0x300a0042, 'number');
  }

  getToleranceTableNumber(): number {
    const value = this.x300a0042;
    if (value === undefined) {
      throw new Error('ToleranceTableNumber is undefined');
    }
    return value;
  }

  // Tolerance Table Label
  get ToleranceTableLabel(): string | undefined {
    return this.x300a0043;
  }

  get x300a0043(): string | undefined {
    const value = this.dwResponse['300A0043']?.Value;
    return convert(value?.[0], 0x300a0043, 'string');
  }

  getToleranceTableLabel(): string {
    const value = this.x300a0043;
    if (value === undefined) {
      throw new Error('ToleranceTableLabel is undefined');
    }
    return value;
  }

  // Gantry Angle Tolerance
  get GantryAngleTolerance(): number | undefined {
    return this.x300a0044;
  }

  get x300a0044(): number | undefined {
    const value = this.dwResponse['300A0044']?.Value;
    return convert(value?.[0], 0x300a0044, 'number');
  }

  getGantryAngleTolerance(): number {
    const value = this.x300a0044;
    if (value === undefined) {
      throw new Error('GantryAngleTolerance is undefined');
    }
    return value;
  }

  // Beam Limiting Device Angle Tolerance
  get BeamLimitingDeviceAngleTolerance(): number | undefined {
    return this.x300a0046;
  }

  get x300a0046(): number | undefined {
    const value = this.dwResponse['300A0046']?.Value;
    return convert(value?.[0], 0x300a0046, 'number');
  }

  getBeamLimitingDeviceAngleTolerance(): number {
    const value = this.x300a0046;
    if (value === undefined) {
      throw new Error('BeamLimitingDeviceAngleTolerance is undefined');
    }
    return value;
  }

  // Beam Limiting Device Tolerance Sequence
  get BeamLimitingDeviceToleranceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0048;
  }

  get x300a0048(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0048']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBeamLimitingDeviceToleranceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0048;
    if (value === undefined) {
      throw new Error('BeamLimitingDeviceToleranceSequence is undefined');
    }
    return value;
  }

  // Beam Limiting Device Position Tolerance
  get BeamLimitingDevicePositionTolerance(): number | undefined {
    return this.x300a004a;
  }

  get x300a004a(): number | undefined {
    const value = this.dwResponse['300A004A']?.Value;
    return convert(value?.[0], 0x300a004a, 'number');
  }

  getBeamLimitingDevicePositionTolerance(): number {
    const value = this.x300a004a;
    if (value === undefined) {
      throw new Error('BeamLimitingDevicePositionTolerance is undefined');
    }
    return value;
  }

  // Snout Position Tolerance
  get SnoutPositionTolerance(): number | undefined {
    return this.x300a004b;
  }

  get x300a004b(): number | undefined {
    const value = this.dwResponse['300A004B']?.Value;
    return convert(value?.[0], 0x300a004b, 'number');
  }

  getSnoutPositionTolerance(): number {
    const value = this.x300a004b;
    if (value === undefined) {
      throw new Error('SnoutPositionTolerance is undefined');
    }
    return value;
  }

  // Patient Support Angle Tolerance
  get PatientSupportAngleTolerance(): number | undefined {
    return this.x300a004c;
  }

  get x300a004c(): number | undefined {
    const value = this.dwResponse['300A004C']?.Value;
    return convert(value?.[0], 0x300a004c, 'number');
  }

  getPatientSupportAngleTolerance(): number {
    const value = this.x300a004c;
    if (value === undefined) {
      throw new Error('PatientSupportAngleTolerance is undefined');
    }
    return value;
  }

  // Table Top Eccentric Angle Tolerance
  get TableTopEccentricAngleTolerance(): number | undefined {
    return this.x300a004e;
  }

  get x300a004e(): number | undefined {
    const value = this.dwResponse['300A004E']?.Value;
    return convert(value?.[0], 0x300a004e, 'number');
  }

  getTableTopEccentricAngleTolerance(): number {
    const value = this.x300a004e;
    if (value === undefined) {
      throw new Error('TableTopEccentricAngleTolerance is undefined');
    }
    return value;
  }

  // Table Top Pitch Angle Tolerance
  get TableTopPitchAngleTolerance(): number | undefined {
    return this.x300a004f;
  }

  get x300a004f(): number | undefined {
    const value = this.dwResponse['300A004F']?.Value;
    return convert(value?.[0], 0x300a004f, 'number');
  }

  getTableTopPitchAngleTolerance(): number {
    const value = this.x300a004f;
    if (value === undefined) {
      throw new Error('TableTopPitchAngleTolerance is undefined');
    }
    return value;
  }

  // Table Top Roll Angle Tolerance
  get TableTopRollAngleTolerance(): number | undefined {
    return this.x300a0050;
  }

  get x300a0050(): number | undefined {
    const value = this.dwResponse['300A0050']?.Value;
    return convert(value?.[0], 0x300a0050, 'number');
  }

  getTableTopRollAngleTolerance(): number {
    const value = this.x300a0050;
    if (value === undefined) {
      throw new Error('TableTopRollAngleTolerance is undefined');
    }
    return value;
  }

  // Table Top Vertical Position Tolerance
  get TableTopVerticalPositionTolerance(): number | undefined {
    return this.x300a0051;
  }

  get x300a0051(): number | undefined {
    const value = this.dwResponse['300A0051']?.Value;
    return convert(value?.[0], 0x300a0051, 'number');
  }

  getTableTopVerticalPositionTolerance(): number {
    const value = this.x300a0051;
    if (value === undefined) {
      throw new Error('TableTopVerticalPositionTolerance is undefined');
    }
    return value;
  }

  // Table Top Longitudinal Position Tolerance
  get TableTopLongitudinalPositionTolerance(): number | undefined {
    return this.x300a0052;
  }

  get x300a0052(): number | undefined {
    const value = this.dwResponse['300A0052']?.Value;
    return convert(value?.[0], 0x300a0052, 'number');
  }

  getTableTopLongitudinalPositionTolerance(): number {
    const value = this.x300a0052;
    if (value === undefined) {
      throw new Error('TableTopLongitudinalPositionTolerance is undefined');
    }
    return value;
  }

  // Table Top Lateral Position Tolerance
  get TableTopLateralPositionTolerance(): number | undefined {
    return this.x300a0053;
  }

  get x300a0053(): number | undefined {
    const value = this.dwResponse['300A0053']?.Value;
    return convert(value?.[0], 0x300a0053, 'number');
  }

  getTableTopLateralPositionTolerance(): number {
    const value = this.x300a0053;
    if (value === undefined) {
      throw new Error('TableTopLateralPositionTolerance is undefined');
    }
    return value;
  }

  // RT Plan Relationship
  get RTPlanRelationship(): string | undefined {
    return this.x300a0055;
  }

  get x300a0055(): string | undefined {
    const value = this.dwResponse['300A0055']?.Value;
    return convert(value?.[0], 0x300a0055, 'string');
  }

  getRTPlanRelationship(): string {
    const value = this.x300a0055;
    if (value === undefined) {
      throw new Error('RTPlanRelationship is undefined');
    }
    return value;
  }

  // Fraction Group Sequence
  get FractionGroupSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0070;
  }

  get x300a0070(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0070']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFractionGroupSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0070;
    if (value === undefined) {
      throw new Error('FractionGroupSequence is undefined');
    }
    return value;
  }

  // Fraction Group Number
  get FractionGroupNumber(): number | undefined {
    return this.x300a0071;
  }

  get x300a0071(): number | undefined {
    const value = this.dwResponse['300A0071']?.Value;
    return convert(value?.[0], 0x300a0071, 'number');
  }

  getFractionGroupNumber(): number {
    const value = this.x300a0071;
    if (value === undefined) {
      throw new Error('FractionGroupNumber is undefined');
    }
    return value;
  }

  // Fraction Group Description
  get FractionGroupDescription(): string | undefined {
    return this.x300a0072;
  }

  get x300a0072(): string | undefined {
    const value = this.dwResponse['300A0072']?.Value;
    return convert(value?.[0], 0x300a0072, 'string');
  }

  getFractionGroupDescription(): string {
    const value = this.x300a0072;
    if (value === undefined) {
      throw new Error('FractionGroupDescription is undefined');
    }
    return value;
  }

  // Number of Fractions Planned
  get NumberOfFractionsPlanned(): number | undefined {
    return this.x300a0078;
  }

  get x300a0078(): number | undefined {
    const value = this.dwResponse['300A0078']?.Value;
    return convert(value?.[0], 0x300a0078, 'number');
  }

  getNumberOfFractionsPlanned(): number {
    const value = this.x300a0078;
    if (value === undefined) {
      throw new Error('NumberOfFractionsPlanned is undefined');
    }
    return value;
  }

  // Number of Fraction Pattern Digits Per Day
  get NumberOfFractionPatternDigitsPerDay(): number | undefined {
    return this.x300a0079;
  }

  get x300a0079(): number | undefined {
    const value = this.dwResponse['300A0079']?.Value;
    return convert(value?.[0], 0x300a0079, 'number');
  }

  getNumberOfFractionPatternDigitsPerDay(): number {
    const value = this.x300a0079;
    if (value === undefined) {
      throw new Error('NumberOfFractionPatternDigitsPerDay is undefined');
    }
    return value;
  }

  // Repeat Fraction Cycle Length
  get RepeatFractionCycleLength(): number | undefined {
    return this.x300a007a;
  }

  get x300a007a(): number | undefined {
    const value = this.dwResponse['300A007A']?.Value;
    return convert(value?.[0], 0x300a007a, 'number');
  }

  getRepeatFractionCycleLength(): number {
    const value = this.x300a007a;
    if (value === undefined) {
      throw new Error('RepeatFractionCycleLength is undefined');
    }
    return value;
  }

  // Number of Beams
  get NumberOfBeams(): number | undefined {
    return this.x300a0080;
  }

  get x300a0080(): number | undefined {
    const value = this.dwResponse['300A0080']?.Value;
    return convert(value?.[0], 0x300a0080, 'number');
  }

  getNumberOfBeams(): number {
    const value = this.x300a0080;
    if (value === undefined) {
      throw new Error('NumberOfBeams is undefined');
    }
    return value;
  }

  // Beam Dose Specification Point
  get BeamDoseSpecificationPoint(): Array<number | undefined> | undefined {
    return this.x300a0082;
  }

  get x300a0082(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A0082']?.Value;
    return convert(value, 0x300a0082, 'Array<number | undefined>');
  }

  getBeamDoseSpecificationPoint(): Array<number | undefined> {
    const value = this.x300a0082;
    if (value === undefined) {
      throw new Error('BeamDoseSpecificationPoint is undefined');
    }
    return value;
  }

  // Beam Dose
  get BeamDose(): number | undefined {
    return this.x300a0084;
  }

  get x300a0084(): number | undefined {
    const value = this.dwResponse['300A0084']?.Value;
    return convert(value?.[0], 0x300a0084, 'number');
  }

  getBeamDose(): number {
    const value = this.x300a0084;
    if (value === undefined) {
      throw new Error('BeamDose is undefined');
    }
    return value;
  }

  // Beam Meterset
  get BeamMeterset(): number | undefined {
    return this.x300a0086;
  }

  get x300a0086(): number | undefined {
    const value = this.dwResponse['300A0086']?.Value;
    return convert(value?.[0], 0x300a0086, 'number');
  }

  getBeamMeterset(): number {
    const value = this.x300a0086;
    if (value === undefined) {
      throw new Error('BeamMeterset is undefined');
    }
    return value;
  }

  // Beam Dose Point Depth
  get BeamDosePointDepth(): number | undefined {
    return this.x300a0088;
  }

  get x300a0088(): number | undefined {
    const value = this.dwResponse['300A0088']?.Value;
    return convert(value?.[0], 0x300a0088, 'number');
  }

  getBeamDosePointDepth(): number {
    const value = this.x300a0088;
    if (value === undefined) {
      throw new Error('BeamDosePointDepth is undefined');
    }
    return value;
  }

  // Beam Dose Point Equivalent Depth
  get BeamDosePointEquivalentDepth(): number | undefined {
    return this.x300a0089;
  }

  get x300a0089(): number | undefined {
    const value = this.dwResponse['300A0089']?.Value;
    return convert(value?.[0], 0x300a0089, 'number');
  }

  getBeamDosePointEquivalentDepth(): number {
    const value = this.x300a0089;
    if (value === undefined) {
      throw new Error('BeamDosePointEquivalentDepth is undefined');
    }
    return value;
  }

  // Beam Dose Point SSD
  get BeamDosePointSSD(): number | undefined {
    return this.x300a008a;
  }

  get x300a008a(): number | undefined {
    const value = this.dwResponse['300A008A']?.Value;
    return convert(value?.[0], 0x300a008a, 'number');
  }

  getBeamDosePointSSD(): number {
    const value = this.x300a008a;
    if (value === undefined) {
      throw new Error('BeamDosePointSSD is undefined');
    }
    return value;
  }

  // Beam Dose Meaning
  get BeamDoseMeaning(): string | undefined {
    return this.x300a008b;
  }

  get x300a008b(): string | undefined {
    const value = this.dwResponse['300A008B']?.Value;
    return convert(value?.[0], 0x300a008b, 'string');
  }

  getBeamDoseMeaning(): string {
    const value = this.x300a008b;
    if (value === undefined) {
      throw new Error('BeamDoseMeaning is undefined');
    }
    return value;
  }

  // Beam Dose Verification Control Point Sequence
  get BeamDoseVerificationControlPointSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a008c;
  }

  get x300a008c(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A008C']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBeamDoseVerificationControlPointSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a008c;
    if (value === undefined) {
      throw new Error('BeamDoseVerificationControlPointSequence is undefined');
    }
    return value;
  }

  // Average Beam Dose Point Depth
  get AverageBeamDosePointDepth(): number | undefined {
    return this.x300a008d;
  }

  get x300a008d(): number | undefined {
    const value = this.dwResponse['300A008D']?.Value;
    return convert(value?.[0], 0x300a008d, 'number');
  }

  getAverageBeamDosePointDepth(): number {
    const value = this.x300a008d;
    if (value === undefined) {
      throw new Error('AverageBeamDosePointDepth is undefined');
    }
    return value;
  }

  // Average Beam Dose Point Equivalent Depth
  get AverageBeamDosePointEquivalentDepth(): number | undefined {
    return this.x300a008e;
  }

  get x300a008e(): number | undefined {
    const value = this.dwResponse['300A008E']?.Value;
    return convert(value?.[0], 0x300a008e, 'number');
  }

  getAverageBeamDosePointEquivalentDepth(): number {
    const value = this.x300a008e;
    if (value === undefined) {
      throw new Error('AverageBeamDosePointEquivalentDepth is undefined');
    }
    return value;
  }

  // Average Beam Dose Point SSD
  get AverageBeamDosePointSSD(): number | undefined {
    return this.x300a008f;
  }

  get x300a008f(): number | undefined {
    const value = this.dwResponse['300A008F']?.Value;
    return convert(value?.[0], 0x300a008f, 'number');
  }

  getAverageBeamDosePointSSD(): number {
    const value = this.x300a008f;
    if (value === undefined) {
      throw new Error('AverageBeamDosePointSSD is undefined');
    }
    return value;
  }

  // Number of Brachy Application Setups
  get NumberOfBrachyApplicationSetups(): number | undefined {
    return this.x300a00a0;
  }

  get x300a00a0(): number | undefined {
    const value = this.dwResponse['300A00A0']?.Value;
    return convert(value?.[0], 0x300a00a0, 'number');
  }

  getNumberOfBrachyApplicationSetups(): number {
    const value = this.x300a00a0;
    if (value === undefined) {
      throw new Error('NumberOfBrachyApplicationSetups is undefined');
    }
    return value;
  }

  // Brachy Application Setup Dose Specification Point
  get BrachyApplicationSetupDoseSpecificationPoint(): Array<number | undefined> | undefined {
    return this.x300a00a2;
  }

  get x300a00a2(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A00A2']?.Value;
    return convert(value, 0x300a00a2, 'Array<number | undefined>');
  }

  getBrachyApplicationSetupDoseSpecificationPoint(): Array<number | undefined> {
    const value = this.x300a00a2;
    if (value === undefined) {
      throw new Error('BrachyApplicationSetupDoseSpecificationPoint is undefined');
    }
    return value;
  }

  // Brachy Application Setup Dose
  get BrachyApplicationSetupDose(): number | undefined {
    return this.x300a00a4;
  }

  get x300a00a4(): number | undefined {
    const value = this.dwResponse['300A00A4']?.Value;
    return convert(value?.[0], 0x300a00a4, 'number');
  }

  getBrachyApplicationSetupDose(): number {
    const value = this.x300a00a4;
    if (value === undefined) {
      throw new Error('BrachyApplicationSetupDose is undefined');
    }
    return value;
  }

  // Beam Sequence
  get BeamSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a00b0;
  }

  get x300a00b0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A00B0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBeamSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a00b0;
    if (value === undefined) {
      throw new Error('BeamSequence is undefined');
    }
    return value;
  }

  // Treatment Machine Name
  get TreatmentMachineName(): string | undefined {
    return this.x300a00b2;
  }

  get x300a00b2(): string | undefined {
    const value = this.dwResponse['300A00B2']?.Value;
    return convert(value?.[0], 0x300a00b2, 'string');
  }

  getTreatmentMachineName(): string {
    const value = this.x300a00b2;
    if (value === undefined) {
      throw new Error('TreatmentMachineName is undefined');
    }
    return value;
  }

  // Primary Dosimeter Unit
  get PrimaryDosimeterUnit(): string | undefined {
    return this.x300a00b3;
  }

  get x300a00b3(): string | undefined {
    const value = this.dwResponse['300A00B3']?.Value;
    return convert(value?.[0], 0x300a00b3, 'string');
  }

  getPrimaryDosimeterUnit(): string {
    const value = this.x300a00b3;
    if (value === undefined) {
      throw new Error('PrimaryDosimeterUnit is undefined');
    }
    return value;
  }

  // Source-Axis Distance
  get SourceAxisDistance(): number | undefined {
    return this.x300a00b4;
  }

  get x300a00b4(): number | undefined {
    const value = this.dwResponse['300A00B4']?.Value;
    return convert(value?.[0], 0x300a00b4, 'number');
  }

  getSourceAxisDistance(): number {
    const value = this.x300a00b4;
    if (value === undefined) {
      throw new Error('SourceAxisDistance is undefined');
    }
    return value;
  }

  // Beam Limiting Device Sequence
  get BeamLimitingDeviceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a00b6;
  }

  get x300a00b6(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A00B6']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBeamLimitingDeviceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a00b6;
    if (value === undefined) {
      throw new Error('BeamLimitingDeviceSequence is undefined');
    }
    return value;
  }

  // RT Beam Limiting Device Type
  get RTBeamLimitingDeviceType(): string | undefined {
    return this.x300a00b8;
  }

  get x300a00b8(): string | undefined {
    const value = this.dwResponse['300A00B8']?.Value;
    return convert(value?.[0], 0x300a00b8, 'string');
  }

  getRTBeamLimitingDeviceType(): string {
    const value = this.x300a00b8;
    if (value === undefined) {
      throw new Error('RTBeamLimitingDeviceType is undefined');
    }
    return value;
  }

  // Source to Beam Limiting Device Distance
  get SourceToBeamLimitingDeviceDistance(): number | undefined {
    return this.x300a00ba;
  }

  get x300a00ba(): number | undefined {
    const value = this.dwResponse['300A00BA']?.Value;
    return convert(value?.[0], 0x300a00ba, 'number');
  }

  getSourceToBeamLimitingDeviceDistance(): number {
    const value = this.x300a00ba;
    if (value === undefined) {
      throw new Error('SourceToBeamLimitingDeviceDistance is undefined');
    }
    return value;
  }

  // Isocenter to Beam Limiting Device Distance
  get IsocenterToBeamLimitingDeviceDistance(): number | undefined {
    return this.x300a00bb;
  }

  get x300a00bb(): number | undefined {
    const value = this.dwResponse['300A00BB']?.Value;
    return convert(value?.[0], 0x300a00bb, 'number');
  }

  getIsocenterToBeamLimitingDeviceDistance(): number {
    const value = this.x300a00bb;
    if (value === undefined) {
      throw new Error('IsocenterToBeamLimitingDeviceDistance is undefined');
    }
    return value;
  }

  // Number of Leaf/Jaw Pairs
  get NumberOfLeafJawPairs(): number | undefined {
    return this.x300a00bc;
  }

  get x300a00bc(): number | undefined {
    const value = this.dwResponse['300A00BC']?.Value;
    return convert(value?.[0], 0x300a00bc, 'number');
  }

  getNumberOfLeafJawPairs(): number {
    const value = this.x300a00bc;
    if (value === undefined) {
      throw new Error('NumberOfLeafJawPairs is undefined');
    }
    return value;
  }

  // Leaf Position Boundaries
  get LeafPositionBoundaries(): Array<number | undefined> | undefined {
    return this.x300a00be;
  }

  get x300a00be(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A00BE']?.Value;
    return convert(value, 0x300a00be, 'Array<number | undefined>');
  }

  getLeafPositionBoundaries(): Array<number | undefined> {
    const value = this.x300a00be;
    if (value === undefined) {
      throw new Error('LeafPositionBoundaries is undefined');
    }
    return value;
  }

  // Beam Number
  get BeamNumber(): number | undefined {
    return this.x300a00c0;
  }

  get x300a00c0(): number | undefined {
    const value = this.dwResponse['300A00C0']?.Value;
    return convert(value?.[0], 0x300a00c0, 'number');
  }

  getBeamNumber(): number {
    const value = this.x300a00c0;
    if (value === undefined) {
      throw new Error('BeamNumber is undefined');
    }
    return value;
  }

  // Beam Name
  get BeamName(): string | undefined {
    return this.x300a00c2;
  }

  get x300a00c2(): string | undefined {
    const value = this.dwResponse['300A00C2']?.Value;
    return convert(value?.[0], 0x300a00c2, 'string');
  }

  getBeamName(): string {
    const value = this.x300a00c2;
    if (value === undefined) {
      throw new Error('BeamName is undefined');
    }
    return value;
  }

  // Beam Type
  get BeamType(): string | undefined {
    return this.x300a00c4;
  }

  get x300a00c4(): string | undefined {
    const value = this.dwResponse['300A00C4']?.Value;
    return convert(value?.[0], 0x300a00c4, 'string');
  }

  getBeamType(): string {
    const value = this.x300a00c4;
    if (value === undefined) {
      throw new Error('BeamType is undefined');
    }
    return value;
  }

  // Beam Delivery Duration Limit
  get BeamDeliveryDurationLimit(): number | undefined {
    return this.x300a00c5;
  }

  get x300a00c5(): number | undefined {
    const value = this.dwResponse['300A00C5']?.Value;
    return convert(value?.[0], 0x300a00c5, 'number');
  }

  getBeamDeliveryDurationLimit(): number {
    const value = this.x300a00c5;
    if (value === undefined) {
      throw new Error('BeamDeliveryDurationLimit is undefined');
    }
    return value;
  }

  // Radiation Type
  get RadiationType(): string | undefined {
    return this.x300a00c6;
  }

  get x300a00c6(): string | undefined {
    const value = this.dwResponse['300A00C6']?.Value;
    return convert(value?.[0], 0x300a00c6, 'string');
  }

  getRadiationType(): string {
    const value = this.x300a00c6;
    if (value === undefined) {
      throw new Error('RadiationType is undefined');
    }
    return value;
  }

  // High-Dose Technique Type
  get HighDoseTechniqueType(): string | undefined {
    return this.x300a00c7;
  }

  get x300a00c7(): string | undefined {
    const value = this.dwResponse['300A00C7']?.Value;
    return convert(value?.[0], 0x300a00c7, 'string');
  }

  getHighDoseTechniqueType(): string {
    const value = this.x300a00c7;
    if (value === undefined) {
      throw new Error('HighDoseTechniqueType is undefined');
    }
    return value;
  }

  // Reference Image Number
  get ReferenceImageNumber(): number | undefined {
    return this.x300a00c8;
  }

  get x300a00c8(): number | undefined {
    const value = this.dwResponse['300A00C8']?.Value;
    return convert(value?.[0], 0x300a00c8, 'number');
  }

  getReferenceImageNumber(): number {
    const value = this.x300a00c8;
    if (value === undefined) {
      throw new Error('ReferenceImageNumber is undefined');
    }
    return value;
  }

  // Planned Verification Image Sequence
  get PlannedVerificationImageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a00ca;
  }

  get x300a00ca(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A00CA']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPlannedVerificationImageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a00ca;
    if (value === undefined) {
      throw new Error('PlannedVerificationImageSequence is undefined');
    }
    return value;
  }

  // Imaging Device-Specific Acquisition Parameters
  get ImagingDeviceSpecificAcquisitionParameters(): Array<string | undefined> | undefined {
    return this.x300a00cc;
  }

  get x300a00cc(): Array<string | undefined> | undefined {
    const value = this.dwResponse['300A00CC']?.Value;
    return convert(value, 0x300a00cc, 'Array<string | undefined>');
  }

  getImagingDeviceSpecificAcquisitionParameters(): Array<string | undefined> {
    const value = this.x300a00cc;
    if (value === undefined) {
      throw new Error('ImagingDeviceSpecificAcquisitionParameters is undefined');
    }
    return value;
  }

  // Treatment Delivery Type
  get TreatmentDeliveryType(): string | undefined {
    return this.x300a00ce;
  }

  get x300a00ce(): string | undefined {
    const value = this.dwResponse['300A00CE']?.Value;
    return convert(value?.[0], 0x300a00ce, 'string');
  }

  getTreatmentDeliveryType(): string {
    const value = this.x300a00ce;
    if (value === undefined) {
      throw new Error('TreatmentDeliveryType is undefined');
    }
    return value;
  }

  // Number of Wedges
  get NumberOfWedges(): number | undefined {
    return this.x300a00d0;
  }

  get x300a00d0(): number | undefined {
    const value = this.dwResponse['300A00D0']?.Value;
    return convert(value?.[0], 0x300a00d0, 'number');
  }

  getNumberOfWedges(): number {
    const value = this.x300a00d0;
    if (value === undefined) {
      throw new Error('NumberOfWedges is undefined');
    }
    return value;
  }

  // Wedge Sequence
  get WedgeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a00d1;
  }

  get x300a00d1(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A00D1']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getWedgeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a00d1;
    if (value === undefined) {
      throw new Error('WedgeSequence is undefined');
    }
    return value;
  }

  // Wedge Number
  get WedgeNumber(): number | undefined {
    return this.x300a00d2;
  }

  get x300a00d2(): number | undefined {
    const value = this.dwResponse['300A00D2']?.Value;
    return convert(value?.[0], 0x300a00d2, 'number');
  }

  getWedgeNumber(): number {
    const value = this.x300a00d2;
    if (value === undefined) {
      throw new Error('WedgeNumber is undefined');
    }
    return value;
  }

  // Wedge Type
  get WedgeType(): string | undefined {
    return this.x300a00d3;
  }

  get x300a00d3(): string | undefined {
    const value = this.dwResponse['300A00D3']?.Value;
    return convert(value?.[0], 0x300a00d3, 'string');
  }

  getWedgeType(): string {
    const value = this.x300a00d3;
    if (value === undefined) {
      throw new Error('WedgeType is undefined');
    }
    return value;
  }

  // Wedge ID
  get WedgeID(): string | undefined {
    return this.x300a00d4;
  }

  get x300a00d4(): string | undefined {
    const value = this.dwResponse['300A00D4']?.Value;
    return convert(value?.[0], 0x300a00d4, 'string');
  }

  getWedgeID(): string {
    const value = this.x300a00d4;
    if (value === undefined) {
      throw new Error('WedgeID is undefined');
    }
    return value;
  }

  // Wedge Angle
  get WedgeAngle(): number | undefined {
    return this.x300a00d5;
  }

  get x300a00d5(): number | undefined {
    const value = this.dwResponse['300A00D5']?.Value;
    return convert(value?.[0], 0x300a00d5, 'number');
  }

  getWedgeAngle(): number {
    const value = this.x300a00d5;
    if (value === undefined) {
      throw new Error('WedgeAngle is undefined');
    }
    return value;
  }

  // Wedge Factor
  get WedgeFactor(): number | undefined {
    return this.x300a00d6;
  }

  get x300a00d6(): number | undefined {
    const value = this.dwResponse['300A00D6']?.Value;
    return convert(value?.[0], 0x300a00d6, 'number');
  }

  getWedgeFactor(): number {
    const value = this.x300a00d6;
    if (value === undefined) {
      throw new Error('WedgeFactor is undefined');
    }
    return value;
  }

  // Total Wedge Tray Water-Equivalent Thickness
  get TotalWedgeTrayWaterEquivalentThickness(): number | undefined {
    return this.x300a00d7;
  }

  get x300a00d7(): number | undefined {
    const value = this.dwResponse['300A00D7']?.Value;
    return convert(value?.[0], 0x300a00d7, 'number');
  }

  getTotalWedgeTrayWaterEquivalentThickness(): number {
    const value = this.x300a00d7;
    if (value === undefined) {
      throw new Error('TotalWedgeTrayWaterEquivalentThickness is undefined');
    }
    return value;
  }

  // Wedge Orientation
  get WedgeOrientation(): number | undefined {
    return this.x300a00d8;
  }

  get x300a00d8(): number | undefined {
    const value = this.dwResponse['300A00D8']?.Value;
    return convert(value?.[0], 0x300a00d8, 'number');
  }

  getWedgeOrientation(): number {
    const value = this.x300a00d8;
    if (value === undefined) {
      throw new Error('WedgeOrientation is undefined');
    }
    return value;
  }

  // Isocenter to Wedge Tray Distance
  get IsocenterToWedgeTrayDistance(): number | undefined {
    return this.x300a00d9;
  }

  get x300a00d9(): number | undefined {
    const value = this.dwResponse['300A00D9']?.Value;
    return convert(value?.[0], 0x300a00d9, 'number');
  }

  getIsocenterToWedgeTrayDistance(): number {
    const value = this.x300a00d9;
    if (value === undefined) {
      throw new Error('IsocenterToWedgeTrayDistance is undefined');
    }
    return value;
  }

  // Source to Wedge Tray Distance
  get SourceToWedgeTrayDistance(): number | undefined {
    return this.x300a00da;
  }

  get x300a00da(): number | undefined {
    const value = this.dwResponse['300A00DA']?.Value;
    return convert(value?.[0], 0x300a00da, 'number');
  }

  getSourceToWedgeTrayDistance(): number {
    const value = this.x300a00da;
    if (value === undefined) {
      throw new Error('SourceToWedgeTrayDistance is undefined');
    }
    return value;
  }

  // Wedge Thin Edge Position
  get WedgeThinEdgePosition(): number | undefined {
    return this.x300a00db;
  }

  get x300a00db(): number | undefined {
    const value = this.dwResponse['300A00DB']?.Value;
    return convert(value?.[0], 0x300a00db, 'number');
  }

  getWedgeThinEdgePosition(): number {
    const value = this.x300a00db;
    if (value === undefined) {
      throw new Error('WedgeThinEdgePosition is undefined');
    }
    return value;
  }

  // Bolus ID
  get BolusID(): string | undefined {
    return this.x300a00dc;
  }

  get x300a00dc(): string | undefined {
    const value = this.dwResponse['300A00DC']?.Value;
    return convert(value?.[0], 0x300a00dc, 'string');
  }

  getBolusID(): string {
    const value = this.x300a00dc;
    if (value === undefined) {
      throw new Error('BolusID is undefined');
    }
    return value;
  }

  // Number of Compensators
  get NumberOfCompensators(): number | undefined {
    return this.x300a00e0;
  }

  get x300a00e0(): number | undefined {
    const value = this.dwResponse['300A00E0']?.Value;
    return convert(value?.[0], 0x300a00e0, 'number');
  }

  getNumberOfCompensators(): number {
    const value = this.x300a00e0;
    if (value === undefined) {
      throw new Error('NumberOfCompensators is undefined');
    }
    return value;
  }

  // Material ID
  get MaterialID(): string | undefined {
    return this.x300a00e1;
  }

  get x300a00e1(): string | undefined {
    const value = this.dwResponse['300A00E1']?.Value;
    return convert(value?.[0], 0x300a00e1, 'string');
  }

  getMaterialID(): string {
    const value = this.x300a00e1;
    if (value === undefined) {
      throw new Error('MaterialID is undefined');
    }
    return value;
  }

  // Total Compensator Tray Factor
  get TotalCompensatorTrayFactor(): number | undefined {
    return this.x300a00e2;
  }

  get x300a00e2(): number | undefined {
    const value = this.dwResponse['300A00E2']?.Value;
    return convert(value?.[0], 0x300a00e2, 'number');
  }

  getTotalCompensatorTrayFactor(): number {
    const value = this.x300a00e2;
    if (value === undefined) {
      throw new Error('TotalCompensatorTrayFactor is undefined');
    }
    return value;
  }

  // Compensator Sequence
  get CompensatorSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a00e3;
  }

  get x300a00e3(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A00E3']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCompensatorSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a00e3;
    if (value === undefined) {
      throw new Error('CompensatorSequence is undefined');
    }
    return value;
  }

  // Compensator Number
  get CompensatorNumber(): number | undefined {
    return this.x300a00e4;
  }

  get x300a00e4(): number | undefined {
    const value = this.dwResponse['300A00E4']?.Value;
    return convert(value?.[0], 0x300a00e4, 'number');
  }

  getCompensatorNumber(): number {
    const value = this.x300a00e4;
    if (value === undefined) {
      throw new Error('CompensatorNumber is undefined');
    }
    return value;
  }

  // Compensator ID
  get CompensatorID(): string | undefined {
    return this.x300a00e5;
  }

  get x300a00e5(): string | undefined {
    const value = this.dwResponse['300A00E5']?.Value;
    return convert(value?.[0], 0x300a00e5, 'string');
  }

  getCompensatorID(): string {
    const value = this.x300a00e5;
    if (value === undefined) {
      throw new Error('CompensatorID is undefined');
    }
    return value;
  }

  // Source to Compensator Tray Distance
  get SourceToCompensatorTrayDistance(): number | undefined {
    return this.x300a00e6;
  }

  get x300a00e6(): number | undefined {
    const value = this.dwResponse['300A00E6']?.Value;
    return convert(value?.[0], 0x300a00e6, 'number');
  }

  getSourceToCompensatorTrayDistance(): number {
    const value = this.x300a00e6;
    if (value === undefined) {
      throw new Error('SourceToCompensatorTrayDistance is undefined');
    }
    return value;
  }

  // Compensator Rows
  get CompensatorRows(): number | undefined {
    return this.x300a00e7;
  }

  get x300a00e7(): number | undefined {
    const value = this.dwResponse['300A00E7']?.Value;
    return convert(value?.[0], 0x300a00e7, 'number');
  }

  getCompensatorRows(): number {
    const value = this.x300a00e7;
    if (value === undefined) {
      throw new Error('CompensatorRows is undefined');
    }
    return value;
  }

  // Compensator Columns
  get CompensatorColumns(): number | undefined {
    return this.x300a00e8;
  }

  get x300a00e8(): number | undefined {
    const value = this.dwResponse['300A00E8']?.Value;
    return convert(value?.[0], 0x300a00e8, 'number');
  }

  getCompensatorColumns(): number {
    const value = this.x300a00e8;
    if (value === undefined) {
      throw new Error('CompensatorColumns is undefined');
    }
    return value;
  }

  // Compensator Pixel Spacing
  get CompensatorPixelSpacing(): Array<number | undefined> | undefined {
    return this.x300a00e9;
  }

  get x300a00e9(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A00E9']?.Value;
    return convert(value, 0x300a00e9, 'Array<number | undefined>');
  }

  getCompensatorPixelSpacing(): Array<number | undefined> {
    const value = this.x300a00e9;
    if (value === undefined) {
      throw new Error('CompensatorPixelSpacing is undefined');
    }
    return value;
  }

  // Compensator Position
  get CompensatorPosition(): Array<number | undefined> | undefined {
    return this.x300a00ea;
  }

  get x300a00ea(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A00EA']?.Value;
    return convert(value, 0x300a00ea, 'Array<number | undefined>');
  }

  getCompensatorPosition(): Array<number | undefined> {
    const value = this.x300a00ea;
    if (value === undefined) {
      throw new Error('CompensatorPosition is undefined');
    }
    return value;
  }

  // Compensator Transmission Data
  get CompensatorTransmissionData(): Array<number | undefined> | undefined {
    return this.x300a00eb;
  }

  get x300a00eb(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A00EB']?.Value;
    return convert(value, 0x300a00eb, 'Array<number | undefined>');
  }

  getCompensatorTransmissionData(): Array<number | undefined> {
    const value = this.x300a00eb;
    if (value === undefined) {
      throw new Error('CompensatorTransmissionData is undefined');
    }
    return value;
  }

  // Compensator Thickness Data
  get CompensatorThicknessData(): Array<number | undefined> | undefined {
    return this.x300a00ec;
  }

  get x300a00ec(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A00EC']?.Value;
    return convert(value, 0x300a00ec, 'Array<number | undefined>');
  }

  getCompensatorThicknessData(): Array<number | undefined> {
    const value = this.x300a00ec;
    if (value === undefined) {
      throw new Error('CompensatorThicknessData is undefined');
    }
    return value;
  }

  // Number of Boli
  get NumberOfBoli(): number | undefined {
    return this.x300a00ed;
  }

  get x300a00ed(): number | undefined {
    const value = this.dwResponse['300A00ED']?.Value;
    return convert(value?.[0], 0x300a00ed, 'number');
  }

  getNumberOfBoli(): number {
    const value = this.x300a00ed;
    if (value === undefined) {
      throw new Error('NumberOfBoli is undefined');
    }
    return value;
  }

  // Compensator Type
  get CompensatorType(): string | undefined {
    return this.x300a00ee;
  }

  get x300a00ee(): string | undefined {
    const value = this.dwResponse['300A00EE']?.Value;
    return convert(value?.[0], 0x300a00ee, 'string');
  }

  getCompensatorType(): string {
    const value = this.x300a00ee;
    if (value === undefined) {
      throw new Error('CompensatorType is undefined');
    }
    return value;
  }

  // Compensator Tray ID
  get CompensatorTrayID(): string | undefined {
    return this.x300a00ef;
  }

  get x300a00ef(): string | undefined {
    const value = this.dwResponse['300A00EF']?.Value;
    return convert(value?.[0], 0x300a00ef, 'string');
  }

  getCompensatorTrayID(): string {
    const value = this.x300a00ef;
    if (value === undefined) {
      throw new Error('CompensatorTrayID is undefined');
    }
    return value;
  }

  // Number of Blocks
  get NumberOfBlocks(): number | undefined {
    return this.x300a00f0;
  }

  get x300a00f0(): number | undefined {
    const value = this.dwResponse['300A00F0']?.Value;
    return convert(value?.[0], 0x300a00f0, 'number');
  }

  getNumberOfBlocks(): number {
    const value = this.x300a00f0;
    if (value === undefined) {
      throw new Error('NumberOfBlocks is undefined');
    }
    return value;
  }

  // Total Block Tray Factor
  get TotalBlockTrayFactor(): number | undefined {
    return this.x300a00f2;
  }

  get x300a00f2(): number | undefined {
    const value = this.dwResponse['300A00F2']?.Value;
    return convert(value?.[0], 0x300a00f2, 'number');
  }

  getTotalBlockTrayFactor(): number {
    const value = this.x300a00f2;
    if (value === undefined) {
      throw new Error('TotalBlockTrayFactor is undefined');
    }
    return value;
  }

  // Total Block Tray Water-Equivalent Thickness
  get TotalBlockTrayWaterEquivalentThickness(): number | undefined {
    return this.x300a00f3;
  }

  get x300a00f3(): number | undefined {
    const value = this.dwResponse['300A00F3']?.Value;
    return convert(value?.[0], 0x300a00f3, 'number');
  }

  getTotalBlockTrayWaterEquivalentThickness(): number {
    const value = this.x300a00f3;
    if (value === undefined) {
      throw new Error('TotalBlockTrayWaterEquivalentThickness is undefined');
    }
    return value;
  }

  // Block Sequence
  get BlockSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a00f4;
  }

  get x300a00f4(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A00F4']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBlockSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a00f4;
    if (value === undefined) {
      throw new Error('BlockSequence is undefined');
    }
    return value;
  }

  // Block Tray ID
  get BlockTrayID(): string | undefined {
    return this.x300a00f5;
  }

  get x300a00f5(): string | undefined {
    const value = this.dwResponse['300A00F5']?.Value;
    return convert(value?.[0], 0x300a00f5, 'string');
  }

  getBlockTrayID(): string {
    const value = this.x300a00f5;
    if (value === undefined) {
      throw new Error('BlockTrayID is undefined');
    }
    return value;
  }

  // Source to Block Tray Distance
  get SourceToBlockTrayDistance(): number | undefined {
    return this.x300a00f6;
  }

  get x300a00f6(): number | undefined {
    const value = this.dwResponse['300A00F6']?.Value;
    return convert(value?.[0], 0x300a00f6, 'number');
  }

  getSourceToBlockTrayDistance(): number {
    const value = this.x300a00f6;
    if (value === undefined) {
      throw new Error('SourceToBlockTrayDistance is undefined');
    }
    return value;
  }

  // Isocenter to Block Tray Distance
  get IsocenterToBlockTrayDistance(): number | undefined {
    return this.x300a00f7;
  }

  get x300a00f7(): number | undefined {
    const value = this.dwResponse['300A00F7']?.Value;
    return convert(value?.[0], 0x300a00f7, 'number');
  }

  getIsocenterToBlockTrayDistance(): number {
    const value = this.x300a00f7;
    if (value === undefined) {
      throw new Error('IsocenterToBlockTrayDistance is undefined');
    }
    return value;
  }

  // Block Type
  get BlockType(): string | undefined {
    return this.x300a00f8;
  }

  get x300a00f8(): string | undefined {
    const value = this.dwResponse['300A00F8']?.Value;
    return convert(value?.[0], 0x300a00f8, 'string');
  }

  getBlockType(): string {
    const value = this.x300a00f8;
    if (value === undefined) {
      throw new Error('BlockType is undefined');
    }
    return value;
  }

  // Accessory Code
  get AccessoryCode(): string | undefined {
    return this.x300a00f9;
  }

  get x300a00f9(): string | undefined {
    const value = this.dwResponse['300A00F9']?.Value;
    return convert(value?.[0], 0x300a00f9, 'string');
  }

  getAccessoryCode(): string {
    const value = this.x300a00f9;
    if (value === undefined) {
      throw new Error('AccessoryCode is undefined');
    }
    return value;
  }

  // Block Divergence
  get BlockDivergence(): string | undefined {
    return this.x300a00fa;
  }

  get x300a00fa(): string | undefined {
    const value = this.dwResponse['300A00FA']?.Value;
    return convert(value?.[0], 0x300a00fa, 'string');
  }

  getBlockDivergence(): string {
    const value = this.x300a00fa;
    if (value === undefined) {
      throw new Error('BlockDivergence is undefined');
    }
    return value;
  }

  // Block Mounting Position
  get BlockMountingPosition(): string | undefined {
    return this.x300a00fb;
  }

  get x300a00fb(): string | undefined {
    const value = this.dwResponse['300A00FB']?.Value;
    return convert(value?.[0], 0x300a00fb, 'string');
  }

  getBlockMountingPosition(): string {
    const value = this.x300a00fb;
    if (value === undefined) {
      throw new Error('BlockMountingPosition is undefined');
    }
    return value;
  }

  // Block Number
  get BlockNumber(): number | undefined {
    return this.x300a00fc;
  }

  get x300a00fc(): number | undefined {
    const value = this.dwResponse['300A00FC']?.Value;
    return convert(value?.[0], 0x300a00fc, 'number');
  }

  getBlockNumber(): number {
    const value = this.x300a00fc;
    if (value === undefined) {
      throw new Error('BlockNumber is undefined');
    }
    return value;
  }

  // Block Name
  get BlockName(): string | undefined {
    return this.x300a00fe;
  }

  get x300a00fe(): string | undefined {
    const value = this.dwResponse['300A00FE']?.Value;
    return convert(value?.[0], 0x300a00fe, 'string');
  }

  getBlockName(): string {
    const value = this.x300a00fe;
    if (value === undefined) {
      throw new Error('BlockName is undefined');
    }
    return value;
  }

  // Block Thickness
  get BlockThickness(): number | undefined {
    return this.x300a0100;
  }

  get x300a0100(): number | undefined {
    const value = this.dwResponse['300A0100']?.Value;
    return convert(value?.[0], 0x300a0100, 'number');
  }

  getBlockThickness(): number {
    const value = this.x300a0100;
    if (value === undefined) {
      throw new Error('BlockThickness is undefined');
    }
    return value;
  }

  // Block Transmission
  get BlockTransmission(): number | undefined {
    return this.x300a0102;
  }

  get x300a0102(): number | undefined {
    const value = this.dwResponse['300A0102']?.Value;
    return convert(value?.[0], 0x300a0102, 'number');
  }

  getBlockTransmission(): number {
    const value = this.x300a0102;
    if (value === undefined) {
      throw new Error('BlockTransmission is undefined');
    }
    return value;
  }

  // Block Number of Points
  get BlockNumberOfPoints(): number | undefined {
    return this.x300a0104;
  }

  get x300a0104(): number | undefined {
    const value = this.dwResponse['300A0104']?.Value;
    return convert(value?.[0], 0x300a0104, 'number');
  }

  getBlockNumberOfPoints(): number {
    const value = this.x300a0104;
    if (value === undefined) {
      throw new Error('BlockNumberOfPoints is undefined');
    }
    return value;
  }

  // Block Data
  get BlockData(): Array<number | undefined> | undefined {
    return this.x300a0106;
  }

  get x300a0106(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A0106']?.Value;
    return convert(value, 0x300a0106, 'Array<number | undefined>');
  }

  getBlockData(): Array<number | undefined> {
    const value = this.x300a0106;
    if (value === undefined) {
      throw new Error('BlockData is undefined');
    }
    return value;
  }

  // Applicator Sequence
  get ApplicatorSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0107;
  }

  get x300a0107(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0107']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getApplicatorSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0107;
    if (value === undefined) {
      throw new Error('ApplicatorSequence is undefined');
    }
    return value;
  }

  // Applicator ID
  get ApplicatorID(): string | undefined {
    return this.x300a0108;
  }

  get x300a0108(): string | undefined {
    const value = this.dwResponse['300A0108']?.Value;
    return convert(value?.[0], 0x300a0108, 'string');
  }

  getApplicatorID(): string {
    const value = this.x300a0108;
    if (value === undefined) {
      throw new Error('ApplicatorID is undefined');
    }
    return value;
  }

  // Applicator Type
  get ApplicatorType(): string | undefined {
    return this.x300a0109;
  }

  get x300a0109(): string | undefined {
    const value = this.dwResponse['300A0109']?.Value;
    return convert(value?.[0], 0x300a0109, 'string');
  }

  getApplicatorType(): string {
    const value = this.x300a0109;
    if (value === undefined) {
      throw new Error('ApplicatorType is undefined');
    }
    return value;
  }

  // Applicator Description
  get ApplicatorDescription(): string | undefined {
    return this.x300a010a;
  }

  get x300a010a(): string | undefined {
    const value = this.dwResponse['300A010A']?.Value;
    return convert(value?.[0], 0x300a010a, 'string');
  }

  getApplicatorDescription(): string {
    const value = this.x300a010a;
    if (value === undefined) {
      throw new Error('ApplicatorDescription is undefined');
    }
    return value;
  }

  // Cumulative Dose Reference Coefficient
  get CumulativeDoseReferenceCoefficient(): number | undefined {
    return this.x300a010c;
  }

  get x300a010c(): number | undefined {
    const value = this.dwResponse['300A010C']?.Value;
    return convert(value?.[0], 0x300a010c, 'number');
  }

  getCumulativeDoseReferenceCoefficient(): number {
    const value = this.x300a010c;
    if (value === undefined) {
      throw new Error('CumulativeDoseReferenceCoefficient is undefined');
    }
    return value;
  }

  // Final Cumulative Meterset Weight
  get FinalCumulativeMetersetWeight(): number | undefined {
    return this.x300a010e;
  }

  get x300a010e(): number | undefined {
    const value = this.dwResponse['300A010E']?.Value;
    return convert(value?.[0], 0x300a010e, 'number');
  }

  getFinalCumulativeMetersetWeight(): number {
    const value = this.x300a010e;
    if (value === undefined) {
      throw new Error('FinalCumulativeMetersetWeight is undefined');
    }
    return value;
  }

  // Number of Control Points
  get NumberOfControlPoints(): number | undefined {
    return this.x300a0110;
  }

  get x300a0110(): number | undefined {
    const value = this.dwResponse['300A0110']?.Value;
    return convert(value?.[0], 0x300a0110, 'number');
  }

  getNumberOfControlPoints(): number {
    const value = this.x300a0110;
    if (value === undefined) {
      throw new Error('NumberOfControlPoints is undefined');
    }
    return value;
  }

  // Control Point Sequence
  get ControlPointSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0111;
  }

  get x300a0111(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0111']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getControlPointSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0111;
    if (value === undefined) {
      throw new Error('ControlPointSequence is undefined');
    }
    return value;
  }

  // Control Point Index
  get ControlPointIndex(): number | undefined {
    return this.x300a0112;
  }

  get x300a0112(): number | undefined {
    const value = this.dwResponse['300A0112']?.Value;
    return convert(value?.[0], 0x300a0112, 'number');
  }

  getControlPointIndex(): number {
    const value = this.x300a0112;
    if (value === undefined) {
      throw new Error('ControlPointIndex is undefined');
    }
    return value;
  }

  // Nominal Beam Energy
  get NominalBeamEnergy(): number | undefined {
    return this.x300a0114;
  }

  get x300a0114(): number | undefined {
    const value = this.dwResponse['300A0114']?.Value;
    return convert(value?.[0], 0x300a0114, 'number');
  }

  getNominalBeamEnergy(): number {
    const value = this.x300a0114;
    if (value === undefined) {
      throw new Error('NominalBeamEnergy is undefined');
    }
    return value;
  }

  // Dose Rate Set
  get DoseRateSet(): number | undefined {
    return this.x300a0115;
  }

  get x300a0115(): number | undefined {
    const value = this.dwResponse['300A0115']?.Value;
    return convert(value?.[0], 0x300a0115, 'number');
  }

  getDoseRateSet(): number {
    const value = this.x300a0115;
    if (value === undefined) {
      throw new Error('DoseRateSet is undefined');
    }
    return value;
  }

  // Wedge Position Sequence
  get WedgePositionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0116;
  }

  get x300a0116(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0116']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getWedgePositionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0116;
    if (value === undefined) {
      throw new Error('WedgePositionSequence is undefined');
    }
    return value;
  }

  // Wedge Position
  get WedgePosition(): string | undefined {
    return this.x300a0118;
  }

  get x300a0118(): string | undefined {
    const value = this.dwResponse['300A0118']?.Value;
    return convert(value?.[0], 0x300a0118, 'string');
  }

  getWedgePosition(): string {
    const value = this.x300a0118;
    if (value === undefined) {
      throw new Error('WedgePosition is undefined');
    }
    return value;
  }

  // Beam Limiting Device Position Sequence
  get BeamLimitingDevicePositionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a011a;
  }

  get x300a011a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A011A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBeamLimitingDevicePositionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a011a;
    if (value === undefined) {
      throw new Error('BeamLimitingDevicePositionSequence is undefined');
    }
    return value;
  }

  // Leaf/Jaw Positions
  get LeafJawPositions(): Array<number | undefined> | undefined {
    return this.x300a011c;
  }

  get x300a011c(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A011C']?.Value;
    return convert(value, 0x300a011c, 'Array<number | undefined>');
  }

  getLeafJawPositions(): Array<number | undefined> {
    const value = this.x300a011c;
    if (value === undefined) {
      throw new Error('LeafJawPositions is undefined');
    }
    return value;
  }

  // Gantry Angle
  get GantryAngle(): number | undefined {
    return this.x300a011e;
  }

  get x300a011e(): number | undefined {
    const value = this.dwResponse['300A011E']?.Value;
    return convert(value?.[0], 0x300a011e, 'number');
  }

  getGantryAngle(): number {
    const value = this.x300a011e;
    if (value === undefined) {
      throw new Error('GantryAngle is undefined');
    }
    return value;
  }

  // Gantry Rotation Direction
  get GantryRotationDirection(): string | undefined {
    return this.x300a011f;
  }

  get x300a011f(): string | undefined {
    const value = this.dwResponse['300A011F']?.Value;
    return convert(value?.[0], 0x300a011f, 'string');
  }

  getGantryRotationDirection(): string {
    const value = this.x300a011f;
    if (value === undefined) {
      throw new Error('GantryRotationDirection is undefined');
    }
    return value;
  }

  // Beam Limiting Device Angle
  get BeamLimitingDeviceAngle(): number | undefined {
    return this.x300a0120;
  }

  get x300a0120(): number | undefined {
    const value = this.dwResponse['300A0120']?.Value;
    return convert(value?.[0], 0x300a0120, 'number');
  }

  getBeamLimitingDeviceAngle(): number {
    const value = this.x300a0120;
    if (value === undefined) {
      throw new Error('BeamLimitingDeviceAngle is undefined');
    }
    return value;
  }

  // Beam Limiting Device Rotation Direction
  get BeamLimitingDeviceRotationDirection(): string | undefined {
    return this.x300a0121;
  }

  get x300a0121(): string | undefined {
    const value = this.dwResponse['300A0121']?.Value;
    return convert(value?.[0], 0x300a0121, 'string');
  }

  getBeamLimitingDeviceRotationDirection(): string {
    const value = this.x300a0121;
    if (value === undefined) {
      throw new Error('BeamLimitingDeviceRotationDirection is undefined');
    }
    return value;
  }

  // Patient Support Angle
  get PatientSupportAngle(): number | undefined {
    return this.x300a0122;
  }

  get x300a0122(): number | undefined {
    const value = this.dwResponse['300A0122']?.Value;
    return convert(value?.[0], 0x300a0122, 'number');
  }

  getPatientSupportAngle(): number {
    const value = this.x300a0122;
    if (value === undefined) {
      throw new Error('PatientSupportAngle is undefined');
    }
    return value;
  }

  // Patient Support Rotation Direction
  get PatientSupportRotationDirection(): string | undefined {
    return this.x300a0123;
  }

  get x300a0123(): string | undefined {
    const value = this.dwResponse['300A0123']?.Value;
    return convert(value?.[0], 0x300a0123, 'string');
  }

  getPatientSupportRotationDirection(): string {
    const value = this.x300a0123;
    if (value === undefined) {
      throw new Error('PatientSupportRotationDirection is undefined');
    }
    return value;
  }

  // Table Top Eccentric Axis Distance
  get TableTopEccentricAxisDistance(): number | undefined {
    return this.x300a0124;
  }

  get x300a0124(): number | undefined {
    const value = this.dwResponse['300A0124']?.Value;
    return convert(value?.[0], 0x300a0124, 'number');
  }

  getTableTopEccentricAxisDistance(): number {
    const value = this.x300a0124;
    if (value === undefined) {
      throw new Error('TableTopEccentricAxisDistance is undefined');
    }
    return value;
  }

  // Table Top Eccentric Angle
  get TableTopEccentricAngle(): number | undefined {
    return this.x300a0125;
  }

  get x300a0125(): number | undefined {
    const value = this.dwResponse['300A0125']?.Value;
    return convert(value?.[0], 0x300a0125, 'number');
  }

  getTableTopEccentricAngle(): number {
    const value = this.x300a0125;
    if (value === undefined) {
      throw new Error('TableTopEccentricAngle is undefined');
    }
    return value;
  }

  // Table Top Eccentric Rotation Direction
  get TableTopEccentricRotationDirection(): string | undefined {
    return this.x300a0126;
  }

  get x300a0126(): string | undefined {
    const value = this.dwResponse['300A0126']?.Value;
    return convert(value?.[0], 0x300a0126, 'string');
  }

  getTableTopEccentricRotationDirection(): string {
    const value = this.x300a0126;
    if (value === undefined) {
      throw new Error('TableTopEccentricRotationDirection is undefined');
    }
    return value;
  }

  // Table Top Vertical Position
  get TableTopVerticalPosition(): number | undefined {
    return this.x300a0128;
  }

  get x300a0128(): number | undefined {
    const value = this.dwResponse['300A0128']?.Value;
    return convert(value?.[0], 0x300a0128, 'number');
  }

  getTableTopVerticalPosition(): number {
    const value = this.x300a0128;
    if (value === undefined) {
      throw new Error('TableTopVerticalPosition is undefined');
    }
    return value;
  }

  // Table Top Longitudinal Position
  get TableTopLongitudinalPosition(): number | undefined {
    return this.x300a0129;
  }

  get x300a0129(): number | undefined {
    const value = this.dwResponse['300A0129']?.Value;
    return convert(value?.[0], 0x300a0129, 'number');
  }

  getTableTopLongitudinalPosition(): number {
    const value = this.x300a0129;
    if (value === undefined) {
      throw new Error('TableTopLongitudinalPosition is undefined');
    }
    return value;
  }

  // Table Top Lateral Position
  get TableTopLateralPosition(): number | undefined {
    return this.x300a012a;
  }

  get x300a012a(): number | undefined {
    const value = this.dwResponse['300A012A']?.Value;
    return convert(value?.[0], 0x300a012a, 'number');
  }

  getTableTopLateralPosition(): number {
    const value = this.x300a012a;
    if (value === undefined) {
      throw new Error('TableTopLateralPosition is undefined');
    }
    return value;
  }

  // Isocenter Position
  get IsocenterPosition(): Array<number | undefined> | undefined {
    return this.x300a012c;
  }

  get x300a012c(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A012C']?.Value;
    return convert(value, 0x300a012c, 'Array<number | undefined>');
  }

  getIsocenterPosition(): Array<number | undefined> {
    const value = this.x300a012c;
    if (value === undefined) {
      throw new Error('IsocenterPosition is undefined');
    }
    return value;
  }

  // Surface Entry Point
  get SurfaceEntryPoint(): Array<number | undefined> | undefined {
    return this.x300a012e;
  }

  get x300a012e(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A012E']?.Value;
    return convert(value, 0x300a012e, 'Array<number | undefined>');
  }

  getSurfaceEntryPoint(): Array<number | undefined> {
    const value = this.x300a012e;
    if (value === undefined) {
      throw new Error('SurfaceEntryPoint is undefined');
    }
    return value;
  }

  // Source to Surface Distance
  get SourceToSurfaceDistance(): number | undefined {
    return this.x300a0130;
  }

  get x300a0130(): number | undefined {
    const value = this.dwResponse['300A0130']?.Value;
    return convert(value?.[0], 0x300a0130, 'number');
  }

  getSourceToSurfaceDistance(): number {
    const value = this.x300a0130;
    if (value === undefined) {
      throw new Error('SourceToSurfaceDistance is undefined');
    }
    return value;
  }

  // Cumulative Meterset Weight
  get CumulativeMetersetWeight(): number | undefined {
    return this.x300a0134;
  }

  get x300a0134(): number | undefined {
    const value = this.dwResponse['300A0134']?.Value;
    return convert(value?.[0], 0x300a0134, 'number');
  }

  getCumulativeMetersetWeight(): number {
    const value = this.x300a0134;
    if (value === undefined) {
      throw new Error('CumulativeMetersetWeight is undefined');
    }
    return value;
  }

  // Table Top Pitch Angle
  get TableTopPitchAngle(): number | undefined {
    return this.x300a0140;
  }

  get x300a0140(): number | undefined {
    const value = this.dwResponse['300A0140']?.Value;
    return convert(value?.[0], 0x300a0140, 'number');
  }

  getTableTopPitchAngle(): number {
    const value = this.x300a0140;
    if (value === undefined) {
      throw new Error('TableTopPitchAngle is undefined');
    }
    return value;
  }

  // Table Top Pitch Rotation Direction
  get TableTopPitchRotationDirection(): string | undefined {
    return this.x300a0142;
  }

  get x300a0142(): string | undefined {
    const value = this.dwResponse['300A0142']?.Value;
    return convert(value?.[0], 0x300a0142, 'string');
  }

  getTableTopPitchRotationDirection(): string {
    const value = this.x300a0142;
    if (value === undefined) {
      throw new Error('TableTopPitchRotationDirection is undefined');
    }
    return value;
  }

  // Table Top Roll Angle
  get TableTopRollAngle(): number | undefined {
    return this.x300a0144;
  }

  get x300a0144(): number | undefined {
    const value = this.dwResponse['300A0144']?.Value;
    return convert(value?.[0], 0x300a0144, 'number');
  }

  getTableTopRollAngle(): number {
    const value = this.x300a0144;
    if (value === undefined) {
      throw new Error('TableTopRollAngle is undefined');
    }
    return value;
  }

  // Table Top Roll Rotation Direction
  get TableTopRollRotationDirection(): string | undefined {
    return this.x300a0146;
  }

  get x300a0146(): string | undefined {
    const value = this.dwResponse['300A0146']?.Value;
    return convert(value?.[0], 0x300a0146, 'string');
  }

  getTableTopRollRotationDirection(): string {
    const value = this.x300a0146;
    if (value === undefined) {
      throw new Error('TableTopRollRotationDirection is undefined');
    }
    return value;
  }

  // Head Fixation Angle
  get HeadFixationAngle(): number | undefined {
    return this.x300a0148;
  }

  get x300a0148(): number | undefined {
    const value = this.dwResponse['300A0148']?.Value;
    return convert(value?.[0], 0x300a0148, 'number');
  }

  getHeadFixationAngle(): number {
    const value = this.x300a0148;
    if (value === undefined) {
      throw new Error('HeadFixationAngle is undefined');
    }
    return value;
  }

  // Gantry Pitch Angle
  get GantryPitchAngle(): number | undefined {
    return this.x300a014a;
  }

  get x300a014a(): number | undefined {
    const value = this.dwResponse['300A014A']?.Value;
    return convert(value?.[0], 0x300a014a, 'number');
  }

  getGantryPitchAngle(): number {
    const value = this.x300a014a;
    if (value === undefined) {
      throw new Error('GantryPitchAngle is undefined');
    }
    return value;
  }

  // Gantry Pitch Rotation Direction
  get GantryPitchRotationDirection(): string | undefined {
    return this.x300a014c;
  }

  get x300a014c(): string | undefined {
    const value = this.dwResponse['300A014C']?.Value;
    return convert(value?.[0], 0x300a014c, 'string');
  }

  getGantryPitchRotationDirection(): string {
    const value = this.x300a014c;
    if (value === undefined) {
      throw new Error('GantryPitchRotationDirection is undefined');
    }
    return value;
  }

  // Gantry Pitch Angle Tolerance
  get GantryPitchAngleTolerance(): number | undefined {
    return this.x300a014e;
  }

  get x300a014e(): number | undefined {
    const value = this.dwResponse['300A014E']?.Value;
    return convert(value?.[0], 0x300a014e, 'number');
  }

  getGantryPitchAngleTolerance(): number {
    const value = this.x300a014e;
    if (value === undefined) {
      throw new Error('GantryPitchAngleTolerance is undefined');
    }
    return value;
  }

  // Patient Setup Sequence
  get PatientSetupSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0180;
  }

  get x300a0180(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0180']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPatientSetupSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0180;
    if (value === undefined) {
      throw new Error('PatientSetupSequence is undefined');
    }
    return value;
  }

  // Patient Setup Number
  get PatientSetupNumber(): number | undefined {
    return this.x300a0182;
  }

  get x300a0182(): number | undefined {
    const value = this.dwResponse['300A0182']?.Value;
    return convert(value?.[0], 0x300a0182, 'number');
  }

  getPatientSetupNumber(): number {
    const value = this.x300a0182;
    if (value === undefined) {
      throw new Error('PatientSetupNumber is undefined');
    }
    return value;
  }

  // Patient Setup Label
  get PatientSetupLabel(): string | undefined {
    return this.x300a0183;
  }

  get x300a0183(): string | undefined {
    const value = this.dwResponse['300A0183']?.Value;
    return convert(value?.[0], 0x300a0183, 'string');
  }

  getPatientSetupLabel(): string {
    const value = this.x300a0183;
    if (value === undefined) {
      throw new Error('PatientSetupLabel is undefined');
    }
    return value;
  }

  // Patient Additional Position
  get PatientAdditionalPosition(): string | undefined {
    return this.x300a0184;
  }

  get x300a0184(): string | undefined {
    const value = this.dwResponse['300A0184']?.Value;
    return convert(value?.[0], 0x300a0184, 'string');
  }

  getPatientAdditionalPosition(): string {
    const value = this.x300a0184;
    if (value === undefined) {
      throw new Error('PatientAdditionalPosition is undefined');
    }
    return value;
  }

  // Fixation Device Sequence
  get FixationDeviceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0190;
  }

  get x300a0190(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0190']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getFixationDeviceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0190;
    if (value === undefined) {
      throw new Error('FixationDeviceSequence is undefined');
    }
    return value;
  }

  // Fixation Device Type
  get FixationDeviceType(): string | undefined {
    return this.x300a0192;
  }

  get x300a0192(): string | undefined {
    const value = this.dwResponse['300A0192']?.Value;
    return convert(value?.[0], 0x300a0192, 'string');
  }

  getFixationDeviceType(): string {
    const value = this.x300a0192;
    if (value === undefined) {
      throw new Error('FixationDeviceType is undefined');
    }
    return value;
  }

  // Fixation Device Label
  get FixationDeviceLabel(): string | undefined {
    return this.x300a0194;
  }

  get x300a0194(): string | undefined {
    const value = this.dwResponse['300A0194']?.Value;
    return convert(value?.[0], 0x300a0194, 'string');
  }

  getFixationDeviceLabel(): string {
    const value = this.x300a0194;
    if (value === undefined) {
      throw new Error('FixationDeviceLabel is undefined');
    }
    return value;
  }

  // Fixation Device Position
  get FixationDevicePosition(): string | undefined {
    return this.x300a0198;
  }

  get x300a0198(): string | undefined {
    const value = this.dwResponse['300A0198']?.Value;
    return convert(value?.[0], 0x300a0198, 'string');
  }

  getFixationDevicePosition(): string {
    const value = this.x300a0198;
    if (value === undefined) {
      throw new Error('FixationDevicePosition is undefined');
    }
    return value;
  }

  // Fixation Device Pitch Angle
  get FixationDevicePitchAngle(): number | undefined {
    return this.x300a0199;
  }

  get x300a0199(): number | undefined {
    const value = this.dwResponse['300A0199']?.Value;
    return convert(value?.[0], 0x300a0199, 'number');
  }

  getFixationDevicePitchAngle(): number {
    const value = this.x300a0199;
    if (value === undefined) {
      throw new Error('FixationDevicePitchAngle is undefined');
    }
    return value;
  }

  // Fixation Device Roll Angle
  get FixationDeviceRollAngle(): number | undefined {
    return this.x300a019a;
  }

  get x300a019a(): number | undefined {
    const value = this.dwResponse['300A019A']?.Value;
    return convert(value?.[0], 0x300a019a, 'number');
  }

  getFixationDeviceRollAngle(): number {
    const value = this.x300a019a;
    if (value === undefined) {
      throw new Error('FixationDeviceRollAngle is undefined');
    }
    return value;
  }

  // Shielding Device Sequence
  get ShieldingDeviceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a01a0;
  }

  get x300a01a0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A01A0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getShieldingDeviceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a01a0;
    if (value === undefined) {
      throw new Error('ShieldingDeviceSequence is undefined');
    }
    return value;
  }

  // Shielding Device Type
  get ShieldingDeviceType(): string | undefined {
    return this.x300a01a2;
  }

  get x300a01a2(): string | undefined {
    const value = this.dwResponse['300A01A2']?.Value;
    return convert(value?.[0], 0x300a01a2, 'string');
  }

  getShieldingDeviceType(): string {
    const value = this.x300a01a2;
    if (value === undefined) {
      throw new Error('ShieldingDeviceType is undefined');
    }
    return value;
  }

  // Shielding Device Label
  get ShieldingDeviceLabel(): string | undefined {
    return this.x300a01a4;
  }

  get x300a01a4(): string | undefined {
    const value = this.dwResponse['300A01A4']?.Value;
    return convert(value?.[0], 0x300a01a4, 'string');
  }

  getShieldingDeviceLabel(): string {
    const value = this.x300a01a4;
    if (value === undefined) {
      throw new Error('ShieldingDeviceLabel is undefined');
    }
    return value;
  }

  // Shielding Device Position
  get ShieldingDevicePosition(): string | undefined {
    return this.x300a01a8;
  }

  get x300a01a8(): string | undefined {
    const value = this.dwResponse['300A01A8']?.Value;
    return convert(value?.[0], 0x300a01a8, 'string');
  }

  getShieldingDevicePosition(): string {
    const value = this.x300a01a8;
    if (value === undefined) {
      throw new Error('ShieldingDevicePosition is undefined');
    }
    return value;
  }

  // Setup Technique
  get SetupTechnique(): string | undefined {
    return this.x300a01b0;
  }

  get x300a01b0(): string | undefined {
    const value = this.dwResponse['300A01B0']?.Value;
    return convert(value?.[0], 0x300a01b0, 'string');
  }

  getSetupTechnique(): string {
    const value = this.x300a01b0;
    if (value === undefined) {
      throw new Error('SetupTechnique is undefined');
    }
    return value;
  }

  // Setup Device Sequence
  get SetupDeviceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a01b4;
  }

  get x300a01b4(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A01B4']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSetupDeviceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a01b4;
    if (value === undefined) {
      throw new Error('SetupDeviceSequence is undefined');
    }
    return value;
  }

  // Setup Device Type
  get SetupDeviceType(): string | undefined {
    return this.x300a01b6;
  }

  get x300a01b6(): string | undefined {
    const value = this.dwResponse['300A01B6']?.Value;
    return convert(value?.[0], 0x300a01b6, 'string');
  }

  getSetupDeviceType(): string {
    const value = this.x300a01b6;
    if (value === undefined) {
      throw new Error('SetupDeviceType is undefined');
    }
    return value;
  }

  // Setup Device Label
  get SetupDeviceLabel(): string | undefined {
    return this.x300a01b8;
  }

  get x300a01b8(): string | undefined {
    const value = this.dwResponse['300A01B8']?.Value;
    return convert(value?.[0], 0x300a01b8, 'string');
  }

  getSetupDeviceLabel(): string {
    const value = this.x300a01b8;
    if (value === undefined) {
      throw new Error('SetupDeviceLabel is undefined');
    }
    return value;
  }

  // Setup Device Parameter
  get SetupDeviceParameter(): number | undefined {
    return this.x300a01bc;
  }

  get x300a01bc(): number | undefined {
    const value = this.dwResponse['300A01BC']?.Value;
    return convert(value?.[0], 0x300a01bc, 'number');
  }

  getSetupDeviceParameter(): number {
    const value = this.x300a01bc;
    if (value === undefined) {
      throw new Error('SetupDeviceParameter is undefined');
    }
    return value;
  }

  // Table Top Vertical Setup Displacement
  get TableTopVerticalSetupDisplacement(): number | undefined {
    return this.x300a01d2;
  }

  get x300a01d2(): number | undefined {
    const value = this.dwResponse['300A01D2']?.Value;
    return convert(value?.[0], 0x300a01d2, 'number');
  }

  getTableTopVerticalSetupDisplacement(): number {
    const value = this.x300a01d2;
    if (value === undefined) {
      throw new Error('TableTopVerticalSetupDisplacement is undefined');
    }
    return value;
  }

  // Table Top Longitudinal Setup Displacement
  get TableTopLongitudinalSetupDisplacement(): number | undefined {
    return this.x300a01d4;
  }

  get x300a01d4(): number | undefined {
    const value = this.dwResponse['300A01D4']?.Value;
    return convert(value?.[0], 0x300a01d4, 'number');
  }

  getTableTopLongitudinalSetupDisplacement(): number {
    const value = this.x300a01d4;
    if (value === undefined) {
      throw new Error('TableTopLongitudinalSetupDisplacement is undefined');
    }
    return value;
  }

  // Table Top Lateral Setup Displacement
  get TableTopLateralSetupDisplacement(): number | undefined {
    return this.x300a01d6;
  }

  get x300a01d6(): number | undefined {
    const value = this.dwResponse['300A01D6']?.Value;
    return convert(value?.[0], 0x300a01d6, 'number');
  }

  getTableTopLateralSetupDisplacement(): number {
    const value = this.x300a01d6;
    if (value === undefined) {
      throw new Error('TableTopLateralSetupDisplacement is undefined');
    }
    return value;
  }

  // Brachy Treatment Technique
  get BrachyTreatmentTechnique(): string | undefined {
    return this.x300a0200;
  }

  get x300a0200(): string | undefined {
    const value = this.dwResponse['300A0200']?.Value;
    return convert(value?.[0], 0x300a0200, 'string');
  }

  getBrachyTreatmentTechnique(): string {
    const value = this.x300a0200;
    if (value === undefined) {
      throw new Error('BrachyTreatmentTechnique is undefined');
    }
    return value;
  }

  // Brachy Treatment Type
  get BrachyTreatmentType(): string | undefined {
    return this.x300a0202;
  }

  get x300a0202(): string | undefined {
    const value = this.dwResponse['300A0202']?.Value;
    return convert(value?.[0], 0x300a0202, 'string');
  }

  getBrachyTreatmentType(): string {
    const value = this.x300a0202;
    if (value === undefined) {
      throw new Error('BrachyTreatmentType is undefined');
    }
    return value;
  }

  // Treatment Machine Sequence
  get TreatmentMachineSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0206;
  }

  get x300a0206(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0206']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTreatmentMachineSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0206;
    if (value === undefined) {
      throw new Error('TreatmentMachineSequence is undefined');
    }
    return value;
  }

  // Source Sequence
  get SourceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0210;
  }

  get x300a0210(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0210']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSourceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0210;
    if (value === undefined) {
      throw new Error('SourceSequence is undefined');
    }
    return value;
  }

  // Source Number
  get SourceNumber(): number | undefined {
    return this.x300a0212;
  }

  get x300a0212(): number | undefined {
    const value = this.dwResponse['300A0212']?.Value;
    return convert(value?.[0], 0x300a0212, 'number');
  }

  getSourceNumber(): number {
    const value = this.x300a0212;
    if (value === undefined) {
      throw new Error('SourceNumber is undefined');
    }
    return value;
  }

  // Source Type
  get SourceType(): string | undefined {
    return this.x300a0214;
  }

  get x300a0214(): string | undefined {
    const value = this.dwResponse['300A0214']?.Value;
    return convert(value?.[0], 0x300a0214, 'string');
  }

  getSourceType(): string {
    const value = this.x300a0214;
    if (value === undefined) {
      throw new Error('SourceType is undefined');
    }
    return value;
  }

  // Source Manufacturer
  get SourceManufacturer(): string | undefined {
    return this.x300a0216;
  }

  get x300a0216(): string | undefined {
    const value = this.dwResponse['300A0216']?.Value;
    return convert(value?.[0], 0x300a0216, 'string');
  }

  getSourceManufacturer(): string {
    const value = this.x300a0216;
    if (value === undefined) {
      throw new Error('SourceManufacturer is undefined');
    }
    return value;
  }

  // Active Source Diameter
  get ActiveSourceDiameter(): number | undefined {
    return this.x300a0218;
  }

  get x300a0218(): number | undefined {
    const value = this.dwResponse['300A0218']?.Value;
    return convert(value?.[0], 0x300a0218, 'number');
  }

  getActiveSourceDiameter(): number {
    const value = this.x300a0218;
    if (value === undefined) {
      throw new Error('ActiveSourceDiameter is undefined');
    }
    return value;
  }

  // Active Source Length
  get ActiveSourceLength(): number | undefined {
    return this.x300a021a;
  }

  get x300a021a(): number | undefined {
    const value = this.dwResponse['300A021A']?.Value;
    return convert(value?.[0], 0x300a021a, 'number');
  }

  getActiveSourceLength(): number {
    const value = this.x300a021a;
    if (value === undefined) {
      throw new Error('ActiveSourceLength is undefined');
    }
    return value;
  }

  // Source Model ID
  get SourceModelID(): string | undefined {
    return this.x300a021b;
  }

  get x300a021b(): string | undefined {
    const value = this.dwResponse['300A021B']?.Value;
    return convert(value?.[0], 0x300a021b, 'string');
  }

  getSourceModelID(): string {
    const value = this.x300a021b;
    if (value === undefined) {
      throw new Error('SourceModelID is undefined');
    }
    return value;
  }

  // Source Description
  get SourceDescription(): string | undefined {
    return this.x300a021c;
  }

  get x300a021c(): string | undefined {
    const value = this.dwResponse['300A021C']?.Value;
    return convert(value?.[0], 0x300a021c, 'string');
  }

  getSourceDescription(): string {
    const value = this.x300a021c;
    if (value === undefined) {
      throw new Error('SourceDescription is undefined');
    }
    return value;
  }

  // Source Encapsulation Nominal Thickness
  get SourceEncapsulationNominalThickness(): number | undefined {
    return this.x300a0222;
  }

  get x300a0222(): number | undefined {
    const value = this.dwResponse['300A0222']?.Value;
    return convert(value?.[0], 0x300a0222, 'number');
  }

  getSourceEncapsulationNominalThickness(): number {
    const value = this.x300a0222;
    if (value === undefined) {
      throw new Error('SourceEncapsulationNominalThickness is undefined');
    }
    return value;
  }

  // Source Encapsulation Nominal Transmission
  get SourceEncapsulationNominalTransmission(): number | undefined {
    return this.x300a0224;
  }

  get x300a0224(): number | undefined {
    const value = this.dwResponse['300A0224']?.Value;
    return convert(value?.[0], 0x300a0224, 'number');
  }

  getSourceEncapsulationNominalTransmission(): number {
    const value = this.x300a0224;
    if (value === undefined) {
      throw new Error('SourceEncapsulationNominalTransmission is undefined');
    }
    return value;
  }

  // Source Isotope Name
  get SourceIsotopeName(): string | undefined {
    return this.x300a0226;
  }

  get x300a0226(): string | undefined {
    const value = this.dwResponse['300A0226']?.Value;
    return convert(value?.[0], 0x300a0226, 'string');
  }

  getSourceIsotopeName(): string {
    const value = this.x300a0226;
    if (value === undefined) {
      throw new Error('SourceIsotopeName is undefined');
    }
    return value;
  }

  // Source Isotope Half Life
  get SourceIsotopeHalfLife(): number | undefined {
    return this.x300a0228;
  }

  get x300a0228(): number | undefined {
    const value = this.dwResponse['300A0228']?.Value;
    return convert(value?.[0], 0x300a0228, 'number');
  }

  getSourceIsotopeHalfLife(): number {
    const value = this.x300a0228;
    if (value === undefined) {
      throw new Error('SourceIsotopeHalfLife is undefined');
    }
    return value;
  }

  // Source Strength Units
  get SourceStrengthUnits(): string | undefined {
    return this.x300a0229;
  }

  get x300a0229(): string | undefined {
    const value = this.dwResponse['300A0229']?.Value;
    return convert(value?.[0], 0x300a0229, 'string');
  }

  getSourceStrengthUnits(): string {
    const value = this.x300a0229;
    if (value === undefined) {
      throw new Error('SourceStrengthUnits is undefined');
    }
    return value;
  }

  // Reference Air Kerma Rate
  get ReferenceAirKermaRate(): number | undefined {
    return this.x300a022a;
  }

  get x300a022a(): number | undefined {
    const value = this.dwResponse['300A022A']?.Value;
    return convert(value?.[0], 0x300a022a, 'number');
  }

  getReferenceAirKermaRate(): number {
    const value = this.x300a022a;
    if (value === undefined) {
      throw new Error('ReferenceAirKermaRate is undefined');
    }
    return value;
  }

  // Source Strength
  get SourceStrength(): number | undefined {
    return this.x300a022b;
  }

  get x300a022b(): number | undefined {
    const value = this.dwResponse['300A022B']?.Value;
    return convert(value?.[0], 0x300a022b, 'number');
  }

  getSourceStrength(): number {
    const value = this.x300a022b;
    if (value === undefined) {
      throw new Error('SourceStrength is undefined');
    }
    return value;
  }

  // Source Strength Reference Date
  get SourceStrengthReferenceDate(): Date | undefined {
    return this.x300a022c;
  }

  get x300a022c(): Date | undefined {
    const value = this.dwResponse['300A022C']?.Value;
    return convert(value?.[0], 0x300a022c, 'Date');
  }

  getSourceStrengthReferenceDate(): Date {
    const value = this.x300a022c;
    if (value === undefined) {
      throw new Error('SourceStrengthReferenceDate is undefined');
    }
    return value;
  }

  // Source Strength Reference Time
  get SourceStrengthReferenceTime(): string | undefined {
    return this.x300a022e;
  }

  get x300a022e(): string | undefined {
    const value = this.dwResponse['300A022E']?.Value;
    return convert(value?.[0], 0x300a022e, 'string');
  }

  getSourceStrengthReferenceTime(): string {
    const value = this.x300a022e;
    if (value === undefined) {
      throw new Error('SourceStrengthReferenceTime is undefined');
    }
    return value;
  }

  // Application Setup Sequence
  get ApplicationSetupSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0230;
  }

  get x300a0230(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0230']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getApplicationSetupSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0230;
    if (value === undefined) {
      throw new Error('ApplicationSetupSequence is undefined');
    }
    return value;
  }

  // Application Setup Type
  get ApplicationSetupType(): string | undefined {
    return this.x300a0232;
  }

  get x300a0232(): string | undefined {
    const value = this.dwResponse['300A0232']?.Value;
    return convert(value?.[0], 0x300a0232, 'string');
  }

  getApplicationSetupType(): string {
    const value = this.x300a0232;
    if (value === undefined) {
      throw new Error('ApplicationSetupType is undefined');
    }
    return value;
  }

  // Application Setup Number
  get ApplicationSetupNumber(): number | undefined {
    return this.x300a0234;
  }

  get x300a0234(): number | undefined {
    const value = this.dwResponse['300A0234']?.Value;
    return convert(value?.[0], 0x300a0234, 'number');
  }

  getApplicationSetupNumber(): number {
    const value = this.x300a0234;
    if (value === undefined) {
      throw new Error('ApplicationSetupNumber is undefined');
    }
    return value;
  }

  // Application Setup Name
  get ApplicationSetupName(): string | undefined {
    return this.x300a0236;
  }

  get x300a0236(): string | undefined {
    const value = this.dwResponse['300A0236']?.Value;
    return convert(value?.[0], 0x300a0236, 'string');
  }

  getApplicationSetupName(): string {
    const value = this.x300a0236;
    if (value === undefined) {
      throw new Error('ApplicationSetupName is undefined');
    }
    return value;
  }

  // Application Setup Manufacturer
  get ApplicationSetupManufacturer(): string | undefined {
    return this.x300a0238;
  }

  get x300a0238(): string | undefined {
    const value = this.dwResponse['300A0238']?.Value;
    return convert(value?.[0], 0x300a0238, 'string');
  }

  getApplicationSetupManufacturer(): string {
    const value = this.x300a0238;
    if (value === undefined) {
      throw new Error('ApplicationSetupManufacturer is undefined');
    }
    return value;
  }

  // Template Number
  get TemplateNumber(): number | undefined {
    return this.x300a0240;
  }

  get x300a0240(): number | undefined {
    const value = this.dwResponse['300A0240']?.Value;
    return convert(value?.[0], 0x300a0240, 'number');
  }

  getTemplateNumber(): number {
    const value = this.x300a0240;
    if (value === undefined) {
      throw new Error('TemplateNumber is undefined');
    }
    return value;
  }

  // Template Type
  get TemplateType(): string | undefined {
    return this.x300a0242;
  }

  get x300a0242(): string | undefined {
    const value = this.dwResponse['300A0242']?.Value;
    return convert(value?.[0], 0x300a0242, 'string');
  }

  getTemplateType(): string {
    const value = this.x300a0242;
    if (value === undefined) {
      throw new Error('TemplateType is undefined');
    }
    return value;
  }

  // Template Name
  get TemplateName(): string | undefined {
    return this.x300a0244;
  }

  get x300a0244(): string | undefined {
    const value = this.dwResponse['300A0244']?.Value;
    return convert(value?.[0], 0x300a0244, 'string');
  }

  getTemplateName(): string {
    const value = this.x300a0244;
    if (value === undefined) {
      throw new Error('TemplateName is undefined');
    }
    return value;
  }

  // Total Reference Air Kerma
  get TotalReferenceAirKerma(): number | undefined {
    return this.x300a0250;
  }

  get x300a0250(): number | undefined {
    const value = this.dwResponse['300A0250']?.Value;
    return convert(value?.[0], 0x300a0250, 'number');
  }

  getTotalReferenceAirKerma(): number {
    const value = this.x300a0250;
    if (value === undefined) {
      throw new Error('TotalReferenceAirKerma is undefined');
    }
    return value;
  }

  // Brachy Accessory Device Sequence
  get BrachyAccessoryDeviceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0260;
  }

  get x300a0260(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0260']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBrachyAccessoryDeviceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0260;
    if (value === undefined) {
      throw new Error('BrachyAccessoryDeviceSequence is undefined');
    }
    return value;
  }

  // Brachy Accessory Device Number
  get BrachyAccessoryDeviceNumber(): number | undefined {
    return this.x300a0262;
  }

  get x300a0262(): number | undefined {
    const value = this.dwResponse['300A0262']?.Value;
    return convert(value?.[0], 0x300a0262, 'number');
  }

  getBrachyAccessoryDeviceNumber(): number {
    const value = this.x300a0262;
    if (value === undefined) {
      throw new Error('BrachyAccessoryDeviceNumber is undefined');
    }
    return value;
  }

  // Brachy Accessory Device ID
  get BrachyAccessoryDeviceID(): string | undefined {
    return this.x300a0263;
  }

  get x300a0263(): string | undefined {
    const value = this.dwResponse['300A0263']?.Value;
    return convert(value?.[0], 0x300a0263, 'string');
  }

  getBrachyAccessoryDeviceID(): string {
    const value = this.x300a0263;
    if (value === undefined) {
      throw new Error('BrachyAccessoryDeviceID is undefined');
    }
    return value;
  }

  // Brachy Accessory Device Type
  get BrachyAccessoryDeviceType(): string | undefined {
    return this.x300a0264;
  }

  get x300a0264(): string | undefined {
    const value = this.dwResponse['300A0264']?.Value;
    return convert(value?.[0], 0x300a0264, 'string');
  }

  getBrachyAccessoryDeviceType(): string {
    const value = this.x300a0264;
    if (value === undefined) {
      throw new Error('BrachyAccessoryDeviceType is undefined');
    }
    return value;
  }

  // Brachy Accessory Device Name
  get BrachyAccessoryDeviceName(): string | undefined {
    return this.x300a0266;
  }

  get x300a0266(): string | undefined {
    const value = this.dwResponse['300A0266']?.Value;
    return convert(value?.[0], 0x300a0266, 'string');
  }

  getBrachyAccessoryDeviceName(): string {
    const value = this.x300a0266;
    if (value === undefined) {
      throw new Error('BrachyAccessoryDeviceName is undefined');
    }
    return value;
  }

  // Brachy Accessory Device Nominal Thickness
  get BrachyAccessoryDeviceNominalThickness(): number | undefined {
    return this.x300a026a;
  }

  get x300a026a(): number | undefined {
    const value = this.dwResponse['300A026A']?.Value;
    return convert(value?.[0], 0x300a026a, 'number');
  }

  getBrachyAccessoryDeviceNominalThickness(): number {
    const value = this.x300a026a;
    if (value === undefined) {
      throw new Error('BrachyAccessoryDeviceNominalThickness is undefined');
    }
    return value;
  }

  // Brachy Accessory Device Nominal Transmission
  get BrachyAccessoryDeviceNominalTransmission(): number | undefined {
    return this.x300a026c;
  }

  get x300a026c(): number | undefined {
    const value = this.dwResponse['300A026C']?.Value;
    return convert(value?.[0], 0x300a026c, 'number');
  }

  getBrachyAccessoryDeviceNominalTransmission(): number {
    const value = this.x300a026c;
    if (value === undefined) {
      throw new Error('BrachyAccessoryDeviceNominalTransmission is undefined');
    }
    return value;
  }

  // Channel Sequence
  get ChannelSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0280;
  }

  get x300a0280(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0280']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getChannelSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0280;
    if (value === undefined) {
      throw new Error('ChannelSequence is undefined');
    }
    return value;
  }

  // Channel Number
  get ChannelNumber(): number | undefined {
    return this.x300a0282;
  }

  get x300a0282(): number | undefined {
    const value = this.dwResponse['300A0282']?.Value;
    return convert(value?.[0], 0x300a0282, 'number');
  }

  getChannelNumber(): number {
    const value = this.x300a0282;
    if (value === undefined) {
      throw new Error('ChannelNumber is undefined');
    }
    return value;
  }

  // Channel Length
  get ChannelLength(): number | undefined {
    return this.x300a0284;
  }

  get x300a0284(): number | undefined {
    const value = this.dwResponse['300A0284']?.Value;
    return convert(value?.[0], 0x300a0284, 'number');
  }

  getChannelLength(): number {
    const value = this.x300a0284;
    if (value === undefined) {
      throw new Error('ChannelLength is undefined');
    }
    return value;
  }

  // Channel Total Time
  get ChannelTotalTime(): number | undefined {
    return this.x300a0286;
  }

  get x300a0286(): number | undefined {
    const value = this.dwResponse['300A0286']?.Value;
    return convert(value?.[0], 0x300a0286, 'number');
  }

  getChannelTotalTime(): number {
    const value = this.x300a0286;
    if (value === undefined) {
      throw new Error('ChannelTotalTime is undefined');
    }
    return value;
  }

  // Source Movement Type
  get SourceMovementType(): string | undefined {
    return this.x300a0288;
  }

  get x300a0288(): string | undefined {
    const value = this.dwResponse['300A0288']?.Value;
    return convert(value?.[0], 0x300a0288, 'string');
  }

  getSourceMovementType(): string {
    const value = this.x300a0288;
    if (value === undefined) {
      throw new Error('SourceMovementType is undefined');
    }
    return value;
  }

  // Number of Pulses
  get NumberOfPulses(): number | undefined {
    return this.x300a028a;
  }

  get x300a028a(): number | undefined {
    const value = this.dwResponse['300A028A']?.Value;
    return convert(value?.[0], 0x300a028a, 'number');
  }

  getNumberOfPulses(): number {
    const value = this.x300a028a;
    if (value === undefined) {
      throw new Error('NumberOfPulses is undefined');
    }
    return value;
  }

  // Pulse Repetition Interval
  get PulseRepetitionInterval(): number | undefined {
    return this.x300a028c;
  }

  get x300a028c(): number | undefined {
    const value = this.dwResponse['300A028C']?.Value;
    return convert(value?.[0], 0x300a028c, 'number');
  }

  getPulseRepetitionInterval(): number {
    const value = this.x300a028c;
    if (value === undefined) {
      throw new Error('PulseRepetitionInterval is undefined');
    }
    return value;
  }

  // Source Applicator Number
  get SourceApplicatorNumber(): number | undefined {
    return this.x300a0290;
  }

  get x300a0290(): number | undefined {
    const value = this.dwResponse['300A0290']?.Value;
    return convert(value?.[0], 0x300a0290, 'number');
  }

  getSourceApplicatorNumber(): number {
    const value = this.x300a0290;
    if (value === undefined) {
      throw new Error('SourceApplicatorNumber is undefined');
    }
    return value;
  }

  // Source Applicator ID
  get SourceApplicatorID(): string | undefined {
    return this.x300a0291;
  }

  get x300a0291(): string | undefined {
    const value = this.dwResponse['300A0291']?.Value;
    return convert(value?.[0], 0x300a0291, 'string');
  }

  getSourceApplicatorID(): string {
    const value = this.x300a0291;
    if (value === undefined) {
      throw new Error('SourceApplicatorID is undefined');
    }
    return value;
  }

  // Source Applicator Type
  get SourceApplicatorType(): string | undefined {
    return this.x300a0292;
  }

  get x300a0292(): string | undefined {
    const value = this.dwResponse['300A0292']?.Value;
    return convert(value?.[0], 0x300a0292, 'string');
  }

  getSourceApplicatorType(): string {
    const value = this.x300a0292;
    if (value === undefined) {
      throw new Error('SourceApplicatorType is undefined');
    }
    return value;
  }

  // Source Applicator Name
  get SourceApplicatorName(): string | undefined {
    return this.x300a0294;
  }

  get x300a0294(): string | undefined {
    const value = this.dwResponse['300A0294']?.Value;
    return convert(value?.[0], 0x300a0294, 'string');
  }

  getSourceApplicatorName(): string {
    const value = this.x300a0294;
    if (value === undefined) {
      throw new Error('SourceApplicatorName is undefined');
    }
    return value;
  }

  // Source Applicator Length
  get SourceApplicatorLength(): number | undefined {
    return this.x300a0296;
  }

  get x300a0296(): number | undefined {
    const value = this.dwResponse['300A0296']?.Value;
    return convert(value?.[0], 0x300a0296, 'number');
  }

  getSourceApplicatorLength(): number {
    const value = this.x300a0296;
    if (value === undefined) {
      throw new Error('SourceApplicatorLength is undefined');
    }
    return value;
  }

  // Source Applicator Manufacturer
  get SourceApplicatorManufacturer(): string | undefined {
    return this.x300a0298;
  }

  get x300a0298(): string | undefined {
    const value = this.dwResponse['300A0298']?.Value;
    return convert(value?.[0], 0x300a0298, 'string');
  }

  getSourceApplicatorManufacturer(): string {
    const value = this.x300a0298;
    if (value === undefined) {
      throw new Error('SourceApplicatorManufacturer is undefined');
    }
    return value;
  }

  // Source Applicator Wall Nominal Thickness
  get SourceApplicatorWallNominalThickness(): number | undefined {
    return this.x300a029c;
  }

  get x300a029c(): number | undefined {
    const value = this.dwResponse['300A029C']?.Value;
    return convert(value?.[0], 0x300a029c, 'number');
  }

  getSourceApplicatorWallNominalThickness(): number {
    const value = this.x300a029c;
    if (value === undefined) {
      throw new Error('SourceApplicatorWallNominalThickness is undefined');
    }
    return value;
  }

  // Source Applicator Wall Nominal Transmission
  get SourceApplicatorWallNominalTransmission(): number | undefined {
    return this.x300a029e;
  }

  get x300a029e(): number | undefined {
    const value = this.dwResponse['300A029E']?.Value;
    return convert(value?.[0], 0x300a029e, 'number');
  }

  getSourceApplicatorWallNominalTransmission(): number {
    const value = this.x300a029e;
    if (value === undefined) {
      throw new Error('SourceApplicatorWallNominalTransmission is undefined');
    }
    return value;
  }

  // Source Applicator Step Size
  get SourceApplicatorStepSize(): number | undefined {
    return this.x300a02a0;
  }

  get x300a02a0(): number | undefined {
    const value = this.dwResponse['300A02A0']?.Value;
    return convert(value?.[0], 0x300a02a0, 'number');
  }

  getSourceApplicatorStepSize(): number {
    const value = this.x300a02a0;
    if (value === undefined) {
      throw new Error('SourceApplicatorStepSize is undefined');
    }
    return value;
  }

  // Transfer Tube Number
  get TransferTubeNumber(): number | undefined {
    return this.x300a02a2;
  }

  get x300a02a2(): number | undefined {
    const value = this.dwResponse['300A02A2']?.Value;
    return convert(value?.[0], 0x300a02a2, 'number');
  }

  getTransferTubeNumber(): number {
    const value = this.x300a02a2;
    if (value === undefined) {
      throw new Error('TransferTubeNumber is undefined');
    }
    return value;
  }

  // Transfer Tube Length
  get TransferTubeLength(): number | undefined {
    return this.x300a02a4;
  }

  get x300a02a4(): number | undefined {
    const value = this.dwResponse['300A02A4']?.Value;
    return convert(value?.[0], 0x300a02a4, 'number');
  }

  getTransferTubeLength(): number {
    const value = this.x300a02a4;
    if (value === undefined) {
      throw new Error('TransferTubeLength is undefined');
    }
    return value;
  }

  // Channel Shield Sequence
  get ChannelShieldSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a02b0;
  }

  get x300a02b0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A02B0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getChannelShieldSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a02b0;
    if (value === undefined) {
      throw new Error('ChannelShieldSequence is undefined');
    }
    return value;
  }

  // Channel Shield Number
  get ChannelShieldNumber(): number | undefined {
    return this.x300a02b2;
  }

  get x300a02b2(): number | undefined {
    const value = this.dwResponse['300A02B2']?.Value;
    return convert(value?.[0], 0x300a02b2, 'number');
  }

  getChannelShieldNumber(): number {
    const value = this.x300a02b2;
    if (value === undefined) {
      throw new Error('ChannelShieldNumber is undefined');
    }
    return value;
  }

  // Channel Shield ID
  get ChannelShieldID(): string | undefined {
    return this.x300a02b3;
  }

  get x300a02b3(): string | undefined {
    const value = this.dwResponse['300A02B3']?.Value;
    return convert(value?.[0], 0x300a02b3, 'string');
  }

  getChannelShieldID(): string {
    const value = this.x300a02b3;
    if (value === undefined) {
      throw new Error('ChannelShieldID is undefined');
    }
    return value;
  }

  // Channel Shield Name
  get ChannelShieldName(): string | undefined {
    return this.x300a02b4;
  }

  get x300a02b4(): string | undefined {
    const value = this.dwResponse['300A02B4']?.Value;
    return convert(value?.[0], 0x300a02b4, 'string');
  }

  getChannelShieldName(): string {
    const value = this.x300a02b4;
    if (value === undefined) {
      throw new Error('ChannelShieldName is undefined');
    }
    return value;
  }

  // Channel Shield Nominal Thickness
  get ChannelShieldNominalThickness(): number | undefined {
    return this.x300a02b8;
  }

  get x300a02b8(): number | undefined {
    const value = this.dwResponse['300A02B8']?.Value;
    return convert(value?.[0], 0x300a02b8, 'number');
  }

  getChannelShieldNominalThickness(): number {
    const value = this.x300a02b8;
    if (value === undefined) {
      throw new Error('ChannelShieldNominalThickness is undefined');
    }
    return value;
  }

  // Channel Shield Nominal Transmission
  get ChannelShieldNominalTransmission(): number | undefined {
    return this.x300a02ba;
  }

  get x300a02ba(): number | undefined {
    const value = this.dwResponse['300A02BA']?.Value;
    return convert(value?.[0], 0x300a02ba, 'number');
  }

  getChannelShieldNominalTransmission(): number {
    const value = this.x300a02ba;
    if (value === undefined) {
      throw new Error('ChannelShieldNominalTransmission is undefined');
    }
    return value;
  }

  // Final Cumulative Time Weight
  get FinalCumulativeTimeWeight(): number | undefined {
    return this.x300a02c8;
  }

  get x300a02c8(): number | undefined {
    const value = this.dwResponse['300A02C8']?.Value;
    return convert(value?.[0], 0x300a02c8, 'number');
  }

  getFinalCumulativeTimeWeight(): number {
    const value = this.x300a02c8;
    if (value === undefined) {
      throw new Error('FinalCumulativeTimeWeight is undefined');
    }
    return value;
  }

  // Brachy Control Point Sequence
  get BrachyControlPointSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a02d0;
  }

  get x300a02d0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A02D0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBrachyControlPointSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a02d0;
    if (value === undefined) {
      throw new Error('BrachyControlPointSequence is undefined');
    }
    return value;
  }

  // Control Point Relative Position
  get ControlPointRelativePosition(): number | undefined {
    return this.x300a02d2;
  }

  get x300a02d2(): number | undefined {
    const value = this.dwResponse['300A02D2']?.Value;
    return convert(value?.[0], 0x300a02d2, 'number');
  }

  getControlPointRelativePosition(): number {
    const value = this.x300a02d2;
    if (value === undefined) {
      throw new Error('ControlPointRelativePosition is undefined');
    }
    return value;
  }

  // Control Point 3D Position
  get ControlPoint3DPosition(): Array<number | undefined> | undefined {
    return this.x300a02d4;
  }

  get x300a02d4(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A02D4']?.Value;
    return convert(value, 0x300a02d4, 'Array<number | undefined>');
  }

  getControlPoint3DPosition(): Array<number | undefined> {
    const value = this.x300a02d4;
    if (value === undefined) {
      throw new Error('ControlPoint3DPosition is undefined');
    }
    return value;
  }

  // Cumulative Time Weight
  get CumulativeTimeWeight(): number | undefined {
    return this.x300a02d6;
  }

  get x300a02d6(): number | undefined {
    const value = this.dwResponse['300A02D6']?.Value;
    return convert(value?.[0], 0x300a02d6, 'number');
  }

  getCumulativeTimeWeight(): number {
    const value = this.x300a02d6;
    if (value === undefined) {
      throw new Error('CumulativeTimeWeight is undefined');
    }
    return value;
  }

  // Compensator Divergence
  get CompensatorDivergence(): string | undefined {
    return this.x300a02e0;
  }

  get x300a02e0(): string | undefined {
    const value = this.dwResponse['300A02E0']?.Value;
    return convert(value?.[0], 0x300a02e0, 'string');
  }

  getCompensatorDivergence(): string {
    const value = this.x300a02e0;
    if (value === undefined) {
      throw new Error('CompensatorDivergence is undefined');
    }
    return value;
  }

  // Compensator Mounting Position
  get CompensatorMountingPosition(): string | undefined {
    return this.x300a02e1;
  }

  get x300a02e1(): string | undefined {
    const value = this.dwResponse['300A02E1']?.Value;
    return convert(value?.[0], 0x300a02e1, 'string');
  }

  getCompensatorMountingPosition(): string {
    const value = this.x300a02e1;
    if (value === undefined) {
      throw new Error('CompensatorMountingPosition is undefined');
    }
    return value;
  }

  // Source to Compensator Distance
  get SourceToCompensatorDistance(): Array<number | undefined> | undefined {
    return this.x300a02e2;
  }

  get x300a02e2(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A02E2']?.Value;
    return convert(value, 0x300a02e2, 'Array<number | undefined>');
  }

  getSourceToCompensatorDistance(): Array<number | undefined> {
    const value = this.x300a02e2;
    if (value === undefined) {
      throw new Error('SourceToCompensatorDistance is undefined');
    }
    return value;
  }

  // Total Compensator Tray Water-Equivalent Thickness
  get TotalCompensatorTrayWaterEquivalentThickness(): number | undefined {
    return this.x300a02e3;
  }

  get x300a02e3(): number | undefined {
    const value = this.dwResponse['300A02E3']?.Value;
    return convert(value?.[0], 0x300a02e3, 'number');
  }

  getTotalCompensatorTrayWaterEquivalentThickness(): number {
    const value = this.x300a02e3;
    if (value === undefined) {
      throw new Error('TotalCompensatorTrayWaterEquivalentThickness is undefined');
    }
    return value;
  }

  // Isocenter to Compensator Tray Distance
  get IsocenterToCompensatorTrayDistance(): number | undefined {
    return this.x300a02e4;
  }

  get x300a02e4(): number | undefined {
    const value = this.dwResponse['300A02E4']?.Value;
    return convert(value?.[0], 0x300a02e4, 'number');
  }

  getIsocenterToCompensatorTrayDistance(): number {
    const value = this.x300a02e4;
    if (value === undefined) {
      throw new Error('IsocenterToCompensatorTrayDistance is undefined');
    }
    return value;
  }

  // Compensator Column Offset
  get CompensatorColumnOffset(): number | undefined {
    return this.x300a02e5;
  }

  get x300a02e5(): number | undefined {
    const value = this.dwResponse['300A02E5']?.Value;
    return convert(value?.[0], 0x300a02e5, 'number');
  }

  getCompensatorColumnOffset(): number {
    const value = this.x300a02e5;
    if (value === undefined) {
      throw new Error('CompensatorColumnOffset is undefined');
    }
    return value;
  }

  // Isocenter to Compensator Distances
  get IsocenterToCompensatorDistances(): Array<number | undefined> | undefined {
    return this.x300a02e6;
  }

  get x300a02e6(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A02E6']?.Value;
    return convert(value, 0x300a02e6, 'Array<number | undefined>');
  }

  getIsocenterToCompensatorDistances(): Array<number | undefined> {
    const value = this.x300a02e6;
    if (value === undefined) {
      throw new Error('IsocenterToCompensatorDistances is undefined');
    }
    return value;
  }

  // Compensator Relative Stopping Power Ratio
  get CompensatorRelativeStoppingPowerRatio(): number | undefined {
    return this.x300a02e7;
  }

  get x300a02e7(): number | undefined {
    const value = this.dwResponse['300A02E7']?.Value;
    return convert(value?.[0], 0x300a02e7, 'number');
  }

  getCompensatorRelativeStoppingPowerRatio(): number {
    const value = this.x300a02e7;
    if (value === undefined) {
      throw new Error('CompensatorRelativeStoppingPowerRatio is undefined');
    }
    return value;
  }

  // Compensator Milling Tool Diameter
  get CompensatorMillingToolDiameter(): number | undefined {
    return this.x300a02e8;
  }

  get x300a02e8(): number | undefined {
    const value = this.dwResponse['300A02E8']?.Value;
    return convert(value?.[0], 0x300a02e8, 'number');
  }

  getCompensatorMillingToolDiameter(): number {
    const value = this.x300a02e8;
    if (value === undefined) {
      throw new Error('CompensatorMillingToolDiameter is undefined');
    }
    return value;
  }

  // Ion Range Compensator Sequence
  get IonRangeCompensatorSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a02ea;
  }

  get x300a02ea(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A02EA']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIonRangeCompensatorSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a02ea;
    if (value === undefined) {
      throw new Error('IonRangeCompensatorSequence is undefined');
    }
    return value;
  }

  // Radiation Mass Number
  get RadiationMassNumber(): number | undefined {
    return this.x300a0302;
  }

  get x300a0302(): number | undefined {
    const value = this.dwResponse['300A0302']?.Value;
    return convert(value?.[0], 0x300a0302, 'number');
  }

  getRadiationMassNumber(): number {
    const value = this.x300a0302;
    if (value === undefined) {
      throw new Error('RadiationMassNumber is undefined');
    }
    return value;
  }

  // Radiation Atomic Number
  get RadiationAtomicNumber(): number | undefined {
    return this.x300a0304;
  }

  get x300a0304(): number | undefined {
    const value = this.dwResponse['300A0304']?.Value;
    return convert(value?.[0], 0x300a0304, 'number');
  }

  getRadiationAtomicNumber(): number {
    const value = this.x300a0304;
    if (value === undefined) {
      throw new Error('RadiationAtomicNumber is undefined');
    }
    return value;
  }

  // Radiation Charge State
  get RadiationChargeState(): Uint8Array | undefined {
    return this.x300a0306;
  }

  get x300a0306(): Uint8Array | undefined {
    const value = this.dwResponse['300A0306']?.Value;
    return convert(value?.[0], 0x300a0306, 'Uint8Array');
  }

  getRadiationChargeState(): Uint8Array {
    const value = this.x300a0306;
    if (value === undefined) {
      throw new Error('RadiationChargeState is undefined');
    }
    return value;
  }

  // Scan Mode
  get ScanMode(): string | undefined {
    return this.x300a0308;
  }

  get x300a0308(): string | undefined {
    const value = this.dwResponse['300A0308']?.Value;
    return convert(value?.[0], 0x300a0308, 'string');
  }

  getScanMode(): string {
    const value = this.x300a0308;
    if (value === undefined) {
      throw new Error('ScanMode is undefined');
    }
    return value;
  }

  // Virtual Source-Axis Distances
  get VirtualSourceAxisDistances(): Array<number | undefined> | undefined {
    return this.x300a030a;
  }

  get x300a030a(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A030A']?.Value;
    return convert(value, 0x300a030a, 'Array<number | undefined>');
  }

  getVirtualSourceAxisDistances(): Array<number | undefined> {
    const value = this.x300a030a;
    if (value === undefined) {
      throw new Error('VirtualSourceAxisDistances is undefined');
    }
    return value;
  }

  // Snout Sequence
  get SnoutSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a030c;
  }

  get x300a030c(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A030C']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSnoutSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a030c;
    if (value === undefined) {
      throw new Error('SnoutSequence is undefined');
    }
    return value;
  }

  // Snout Position
  get SnoutPosition(): number | undefined {
    return this.x300a030d;
  }

  get x300a030d(): number | undefined {
    const value = this.dwResponse['300A030D']?.Value;
    return convert(value?.[0], 0x300a030d, 'number');
  }

  getSnoutPosition(): number {
    const value = this.x300a030d;
    if (value === undefined) {
      throw new Error('SnoutPosition is undefined');
    }
    return value;
  }

  // Snout ID
  get SnoutID(): string | undefined {
    return this.x300a030f;
  }

  get x300a030f(): string | undefined {
    const value = this.dwResponse['300A030F']?.Value;
    return convert(value?.[0], 0x300a030f, 'string');
  }

  getSnoutID(): string {
    const value = this.x300a030f;
    if (value === undefined) {
      throw new Error('SnoutID is undefined');
    }
    return value;
  }

  // Number of Range Shifters
  get NumberOfRangeShifters(): number | undefined {
    return this.x300a0312;
  }

  get x300a0312(): number | undefined {
    const value = this.dwResponse['300A0312']?.Value;
    return convert(value?.[0], 0x300a0312, 'number');
  }

  getNumberOfRangeShifters(): number {
    const value = this.x300a0312;
    if (value === undefined) {
      throw new Error('NumberOfRangeShifters is undefined');
    }
    return value;
  }

  // Range Shifter Sequence
  get RangeShifterSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0314;
  }

  get x300a0314(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0314']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRangeShifterSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0314;
    if (value === undefined) {
      throw new Error('RangeShifterSequence is undefined');
    }
    return value;
  }

  // Range Shifter Number
  get RangeShifterNumber(): number | undefined {
    return this.x300a0316;
  }

  get x300a0316(): number | undefined {
    const value = this.dwResponse['300A0316']?.Value;
    return convert(value?.[0], 0x300a0316, 'number');
  }

  getRangeShifterNumber(): number {
    const value = this.x300a0316;
    if (value === undefined) {
      throw new Error('RangeShifterNumber is undefined');
    }
    return value;
  }

  // Range Shifter ID
  get RangeShifterID(): string | undefined {
    return this.x300a0318;
  }

  get x300a0318(): string | undefined {
    const value = this.dwResponse['300A0318']?.Value;
    return convert(value?.[0], 0x300a0318, 'string');
  }

  getRangeShifterID(): string {
    const value = this.x300a0318;
    if (value === undefined) {
      throw new Error('RangeShifterID is undefined');
    }
    return value;
  }

  // Range Shifter Type
  get RangeShifterType(): string | undefined {
    return this.x300a0320;
  }

  get x300a0320(): string | undefined {
    const value = this.dwResponse['300A0320']?.Value;
    return convert(value?.[0], 0x300a0320, 'string');
  }

  getRangeShifterType(): string {
    const value = this.x300a0320;
    if (value === undefined) {
      throw new Error('RangeShifterType is undefined');
    }
    return value;
  }

  // Range Shifter Description
  get RangeShifterDescription(): string | undefined {
    return this.x300a0322;
  }

  get x300a0322(): string | undefined {
    const value = this.dwResponse['300A0322']?.Value;
    return convert(value?.[0], 0x300a0322, 'string');
  }

  getRangeShifterDescription(): string {
    const value = this.x300a0322;
    if (value === undefined) {
      throw new Error('RangeShifterDescription is undefined');
    }
    return value;
  }

  // Number of Lateral Spreading Devices
  get NumberOfLateralSpreadingDevices(): number | undefined {
    return this.x300a0330;
  }

  get x300a0330(): number | undefined {
    const value = this.dwResponse['300A0330']?.Value;
    return convert(value?.[0], 0x300a0330, 'number');
  }

  getNumberOfLateralSpreadingDevices(): number {
    const value = this.x300a0330;
    if (value === undefined) {
      throw new Error('NumberOfLateralSpreadingDevices is undefined');
    }
    return value;
  }

  // Lateral Spreading Device Sequence
  get LateralSpreadingDeviceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0332;
  }

  get x300a0332(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0332']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getLateralSpreadingDeviceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0332;
    if (value === undefined) {
      throw new Error('LateralSpreadingDeviceSequence is undefined');
    }
    return value;
  }

  // Lateral Spreading Device Number
  get LateralSpreadingDeviceNumber(): number | undefined {
    return this.x300a0334;
  }

  get x300a0334(): number | undefined {
    const value = this.dwResponse['300A0334']?.Value;
    return convert(value?.[0], 0x300a0334, 'number');
  }

  getLateralSpreadingDeviceNumber(): number {
    const value = this.x300a0334;
    if (value === undefined) {
      throw new Error('LateralSpreadingDeviceNumber is undefined');
    }
    return value;
  }

  // Lateral Spreading Device ID
  get LateralSpreadingDeviceID(): string | undefined {
    return this.x300a0336;
  }

  get x300a0336(): string | undefined {
    const value = this.dwResponse['300A0336']?.Value;
    return convert(value?.[0], 0x300a0336, 'string');
  }

  getLateralSpreadingDeviceID(): string {
    const value = this.x300a0336;
    if (value === undefined) {
      throw new Error('LateralSpreadingDeviceID is undefined');
    }
    return value;
  }

  // Lateral Spreading Device Type
  get LateralSpreadingDeviceType(): string | undefined {
    return this.x300a0338;
  }

  get x300a0338(): string | undefined {
    const value = this.dwResponse['300A0338']?.Value;
    return convert(value?.[0], 0x300a0338, 'string');
  }

  getLateralSpreadingDeviceType(): string {
    const value = this.x300a0338;
    if (value === undefined) {
      throw new Error('LateralSpreadingDeviceType is undefined');
    }
    return value;
  }

  // Lateral Spreading Device Description
  get LateralSpreadingDeviceDescription(): string | undefined {
    return this.x300a033a;
  }

  get x300a033a(): string | undefined {
    const value = this.dwResponse['300A033A']?.Value;
    return convert(value?.[0], 0x300a033a, 'string');
  }

  getLateralSpreadingDeviceDescription(): string {
    const value = this.x300a033a;
    if (value === undefined) {
      throw new Error('LateralSpreadingDeviceDescription is undefined');
    }
    return value;
  }

  // Lateral Spreading Device Water Equivalent Thickness
  get LateralSpreadingDeviceWaterEquivalentThickness(): number | undefined {
    return this.x300a033c;
  }

  get x300a033c(): number | undefined {
    const value = this.dwResponse['300A033C']?.Value;
    return convert(value?.[0], 0x300a033c, 'number');
  }

  getLateralSpreadingDeviceWaterEquivalentThickness(): number {
    const value = this.x300a033c;
    if (value === undefined) {
      throw new Error('LateralSpreadingDeviceWaterEquivalentThickness is undefined');
    }
    return value;
  }

  // Number of Range Modulators
  get NumberOfRangeModulators(): number | undefined {
    return this.x300a0340;
  }

  get x300a0340(): number | undefined {
    const value = this.dwResponse['300A0340']?.Value;
    return convert(value?.[0], 0x300a0340, 'number');
  }

  getNumberOfRangeModulators(): number {
    const value = this.x300a0340;
    if (value === undefined) {
      throw new Error('NumberOfRangeModulators is undefined');
    }
    return value;
  }

  // Range Modulator Sequence
  get RangeModulatorSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0342;
  }

  get x300a0342(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0342']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRangeModulatorSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0342;
    if (value === undefined) {
      throw new Error('RangeModulatorSequence is undefined');
    }
    return value;
  }

  // Range Modulator Number
  get RangeModulatorNumber(): number | undefined {
    return this.x300a0344;
  }

  get x300a0344(): number | undefined {
    const value = this.dwResponse['300A0344']?.Value;
    return convert(value?.[0], 0x300a0344, 'number');
  }

  getRangeModulatorNumber(): number {
    const value = this.x300a0344;
    if (value === undefined) {
      throw new Error('RangeModulatorNumber is undefined');
    }
    return value;
  }

  // Range Modulator ID
  get RangeModulatorID(): string | undefined {
    return this.x300a0346;
  }

  get x300a0346(): string | undefined {
    const value = this.dwResponse['300A0346']?.Value;
    return convert(value?.[0], 0x300a0346, 'string');
  }

  getRangeModulatorID(): string {
    const value = this.x300a0346;
    if (value === undefined) {
      throw new Error('RangeModulatorID is undefined');
    }
    return value;
  }

  // Range Modulator Type
  get RangeModulatorType(): string | undefined {
    return this.x300a0348;
  }

  get x300a0348(): string | undefined {
    const value = this.dwResponse['300A0348']?.Value;
    return convert(value?.[0], 0x300a0348, 'string');
  }

  getRangeModulatorType(): string {
    const value = this.x300a0348;
    if (value === undefined) {
      throw new Error('RangeModulatorType is undefined');
    }
    return value;
  }

  // Range Modulator Description
  get RangeModulatorDescription(): string | undefined {
    return this.x300a034a;
  }

  get x300a034a(): string | undefined {
    const value = this.dwResponse['300A034A']?.Value;
    return convert(value?.[0], 0x300a034a, 'string');
  }

  getRangeModulatorDescription(): string {
    const value = this.x300a034a;
    if (value === undefined) {
      throw new Error('RangeModulatorDescription is undefined');
    }
    return value;
  }

  // Beam Current Modulation ID
  get BeamCurrentModulationID(): string | undefined {
    return this.x300a034c;
  }

  get x300a034c(): string | undefined {
    const value = this.dwResponse['300A034C']?.Value;
    return convert(value?.[0], 0x300a034c, 'string');
  }

  getBeamCurrentModulationID(): string {
    const value = this.x300a034c;
    if (value === undefined) {
      throw new Error('BeamCurrentModulationID is undefined');
    }
    return value;
  }

  // Patient Support Type
  get PatientSupportType(): string | undefined {
    return this.x300a0350;
  }

  get x300a0350(): string | undefined {
    const value = this.dwResponse['300A0350']?.Value;
    return convert(value?.[0], 0x300a0350, 'string');
  }

  getPatientSupportType(): string {
    const value = this.x300a0350;
    if (value === undefined) {
      throw new Error('PatientSupportType is undefined');
    }
    return value;
  }

  // Patient Support ID
  get PatientSupportID(): string | undefined {
    return this.x300a0352;
  }

  get x300a0352(): string | undefined {
    const value = this.dwResponse['300A0352']?.Value;
    return convert(value?.[0], 0x300a0352, 'string');
  }

  getPatientSupportID(): string {
    const value = this.x300a0352;
    if (value === undefined) {
      throw new Error('PatientSupportID is undefined');
    }
    return value;
  }

  // Patient Support Accessory Code
  get PatientSupportAccessoryCode(): string | undefined {
    return this.x300a0354;
  }

  get x300a0354(): string | undefined {
    const value = this.dwResponse['300A0354']?.Value;
    return convert(value?.[0], 0x300a0354, 'string');
  }

  getPatientSupportAccessoryCode(): string {
    const value = this.x300a0354;
    if (value === undefined) {
      throw new Error('PatientSupportAccessoryCode is undefined');
    }
    return value;
  }

  // Fixation Light Azimuthal Angle
  get FixationLightAzimuthalAngle(): number | undefined {
    return this.x300a0356;
  }

  get x300a0356(): number | undefined {
    const value = this.dwResponse['300A0356']?.Value;
    return convert(value?.[0], 0x300a0356, 'number');
  }

  getFixationLightAzimuthalAngle(): number {
    const value = this.x300a0356;
    if (value === undefined) {
      throw new Error('FixationLightAzimuthalAngle is undefined');
    }
    return value;
  }

  // Fixation Light Polar Angle
  get FixationLightPolarAngle(): number | undefined {
    return this.x300a0358;
  }

  get x300a0358(): number | undefined {
    const value = this.dwResponse['300A0358']?.Value;
    return convert(value?.[0], 0x300a0358, 'number');
  }

  getFixationLightPolarAngle(): number {
    const value = this.x300a0358;
    if (value === undefined) {
      throw new Error('FixationLightPolarAngle is undefined');
    }
    return value;
  }

  // Meterset Rate
  get MetersetRate(): number | undefined {
    return this.x300a035a;
  }

  get x300a035a(): number | undefined {
    const value = this.dwResponse['300A035A']?.Value;
    return convert(value?.[0], 0x300a035a, 'number');
  }

  getMetersetRate(): number {
    const value = this.x300a035a;
    if (value === undefined) {
      throw new Error('MetersetRate is undefined');
    }
    return value;
  }

  // Range Shifter Settings Sequence
  get RangeShifterSettingsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0360;
  }

  get x300a0360(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0360']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRangeShifterSettingsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0360;
    if (value === undefined) {
      throw new Error('RangeShifterSettingsSequence is undefined');
    }
    return value;
  }

  // Range Shifter Setting
  get RangeShifterSetting(): string | undefined {
    return this.x300a0362;
  }

  get x300a0362(): string | undefined {
    const value = this.dwResponse['300A0362']?.Value;
    return convert(value?.[0], 0x300a0362, 'string');
  }

  getRangeShifterSetting(): string {
    const value = this.x300a0362;
    if (value === undefined) {
      throw new Error('RangeShifterSetting is undefined');
    }
    return value;
  }

  // Isocenter to Range Shifter Distance
  get IsocenterToRangeShifterDistance(): number | undefined {
    return this.x300a0364;
  }

  get x300a0364(): number | undefined {
    const value = this.dwResponse['300A0364']?.Value;
    return convert(value?.[0], 0x300a0364, 'number');
  }

  getIsocenterToRangeShifterDistance(): number {
    const value = this.x300a0364;
    if (value === undefined) {
      throw new Error('IsocenterToRangeShifterDistance is undefined');
    }
    return value;
  }

  // Range Shifter Water Equivalent Thickness
  get RangeShifterWaterEquivalentThickness(): number | undefined {
    return this.x300a0366;
  }

  get x300a0366(): number | undefined {
    const value = this.dwResponse['300A0366']?.Value;
    return convert(value?.[0], 0x300a0366, 'number');
  }

  getRangeShifterWaterEquivalentThickness(): number {
    const value = this.x300a0366;
    if (value === undefined) {
      throw new Error('RangeShifterWaterEquivalentThickness is undefined');
    }
    return value;
  }

  // Lateral Spreading Device Settings Sequence
  get LateralSpreadingDeviceSettingsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0370;
  }

  get x300a0370(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0370']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getLateralSpreadingDeviceSettingsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0370;
    if (value === undefined) {
      throw new Error('LateralSpreadingDeviceSettingsSequence is undefined');
    }
    return value;
  }

  // Lateral Spreading Device Setting
  get LateralSpreadingDeviceSetting(): string | undefined {
    return this.x300a0372;
  }

  get x300a0372(): string | undefined {
    const value = this.dwResponse['300A0372']?.Value;
    return convert(value?.[0], 0x300a0372, 'string');
  }

  getLateralSpreadingDeviceSetting(): string {
    const value = this.x300a0372;
    if (value === undefined) {
      throw new Error('LateralSpreadingDeviceSetting is undefined');
    }
    return value;
  }

  // Isocenter to Lateral Spreading Device Distance
  get IsocenterToLateralSpreadingDeviceDistance(): number | undefined {
    return this.x300a0374;
  }

  get x300a0374(): number | undefined {
    const value = this.dwResponse['300A0374']?.Value;
    return convert(value?.[0], 0x300a0374, 'number');
  }

  getIsocenterToLateralSpreadingDeviceDistance(): number {
    const value = this.x300a0374;
    if (value === undefined) {
      throw new Error('IsocenterToLateralSpreadingDeviceDistance is undefined');
    }
    return value;
  }

  // Range Modulator Settings Sequence
  get RangeModulatorSettingsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0380;
  }

  get x300a0380(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0380']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRangeModulatorSettingsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0380;
    if (value === undefined) {
      throw new Error('RangeModulatorSettingsSequence is undefined');
    }
    return value;
  }

  // Range Modulator Gating Start Value
  get RangeModulatorGatingStartValue(): number | undefined {
    return this.x300a0382;
  }

  get x300a0382(): number | undefined {
    const value = this.dwResponse['300A0382']?.Value;
    return convert(value?.[0], 0x300a0382, 'number');
  }

  getRangeModulatorGatingStartValue(): number {
    const value = this.x300a0382;
    if (value === undefined) {
      throw new Error('RangeModulatorGatingStartValue is undefined');
    }
    return value;
  }

  // Range Modulator Gating Stop Value
  get RangeModulatorGatingStopValue(): number | undefined {
    return this.x300a0384;
  }

  get x300a0384(): number | undefined {
    const value = this.dwResponse['300A0384']?.Value;
    return convert(value?.[0], 0x300a0384, 'number');
  }

  getRangeModulatorGatingStopValue(): number {
    const value = this.x300a0384;
    if (value === undefined) {
      throw new Error('RangeModulatorGatingStopValue is undefined');
    }
    return value;
  }

  // Range Modulator Gating Start Water Equivalent Thickness
  get RangeModulatorGatingStartWaterEquivalentThickness(): number | undefined {
    return this.x300a0386;
  }

  get x300a0386(): number | undefined {
    const value = this.dwResponse['300A0386']?.Value;
    return convert(value?.[0], 0x300a0386, 'number');
  }

  getRangeModulatorGatingStartWaterEquivalentThickness(): number {
    const value = this.x300a0386;
    if (value === undefined) {
      throw new Error('RangeModulatorGatingStartWaterEquivalentThickness is undefined');
    }
    return value;
  }

  // Range Modulator Gating Stop Water Equivalent Thickness
  get RangeModulatorGatingStopWaterEquivalentThickness(): number | undefined {
    return this.x300a0388;
  }

  get x300a0388(): number | undefined {
    const value = this.dwResponse['300A0388']?.Value;
    return convert(value?.[0], 0x300a0388, 'number');
  }

  getRangeModulatorGatingStopWaterEquivalentThickness(): number {
    const value = this.x300a0388;
    if (value === undefined) {
      throw new Error('RangeModulatorGatingStopWaterEquivalentThickness is undefined');
    }
    return value;
  }

  // Isocenter to Range Modulator Distance
  get IsocenterToRangeModulatorDistance(): number | undefined {
    return this.x300a038a;
  }

  get x300a038a(): number | undefined {
    const value = this.dwResponse['300A038A']?.Value;
    return convert(value?.[0], 0x300a038a, 'number');
  }

  getIsocenterToRangeModulatorDistance(): number {
    const value = this.x300a038a;
    if (value === undefined) {
      throw new Error('IsocenterToRangeModulatorDistance is undefined');
    }
    return value;
  }

  // Scan Spot Tune ID
  get ScanSpotTuneID(): string | undefined {
    return this.x300a0390;
  }

  get x300a0390(): string | undefined {
    const value = this.dwResponse['300A0390']?.Value;
    return convert(value?.[0], 0x300a0390, 'string');
  }

  getScanSpotTuneID(): string {
    const value = this.x300a0390;
    if (value === undefined) {
      throw new Error('ScanSpotTuneID is undefined');
    }
    return value;
  }

  // Number of Scan Spot Positions
  get NumberOfScanSpotPositions(): number | undefined {
    return this.x300a0392;
  }

  get x300a0392(): number | undefined {
    const value = this.dwResponse['300A0392']?.Value;
    return convert(value?.[0], 0x300a0392, 'number');
  }

  getNumberOfScanSpotPositions(): number {
    const value = this.x300a0392;
    if (value === undefined) {
      throw new Error('NumberOfScanSpotPositions is undefined');
    }
    return value;
  }

  // Scan Spot Position Map
  get ScanSpotPositionMap(): Array<number | undefined> | undefined {
    return this.x300a0394;
  }

  get x300a0394(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A0394']?.Value;
    return convert(value, 0x300a0394, 'Array<number | undefined>');
  }

  getScanSpotPositionMap(): Array<number | undefined> {
    const value = this.x300a0394;
    if (value === undefined) {
      throw new Error('ScanSpotPositionMap is undefined');
    }
    return value;
  }

  // Scan Spot Meterset Weights
  get ScanSpotMetersetWeights(): Array<number | undefined> | undefined {
    return this.x300a0396;
  }

  get x300a0396(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A0396']?.Value;
    return convert(value, 0x300a0396, 'Array<number | undefined>');
  }

  getScanSpotMetersetWeights(): Array<number | undefined> {
    const value = this.x300a0396;
    if (value === undefined) {
      throw new Error('ScanSpotMetersetWeights is undefined');
    }
    return value;
  }

  // Scanning Spot Size
  get ScanningSpotSize(): Array<number | undefined> | undefined {
    return this.x300a0398;
  }

  get x300a0398(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A0398']?.Value;
    return convert(value, 0x300a0398, 'Array<number | undefined>');
  }

  getScanningSpotSize(): Array<number | undefined> {
    const value = this.x300a0398;
    if (value === undefined) {
      throw new Error('ScanningSpotSize is undefined');
    }
    return value;
  }

  // Number of Paintings
  get NumberOfPaintings(): number | undefined {
    return this.x300a039a;
  }

  get x300a039a(): number | undefined {
    const value = this.dwResponse['300A039A']?.Value;
    return convert(value?.[0], 0x300a039a, 'number');
  }

  getNumberOfPaintings(): number {
    const value = this.x300a039a;
    if (value === undefined) {
      throw new Error('NumberOfPaintings is undefined');
    }
    return value;
  }

  // Ion Tolerance Table Sequence
  get IonToleranceTableSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a03a0;
  }

  get x300a03a0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A03A0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIonToleranceTableSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a03a0;
    if (value === undefined) {
      throw new Error('IonToleranceTableSequence is undefined');
    }
    return value;
  }

  // Ion Beam Sequence
  get IonBeamSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a03a2;
  }

  get x300a03a2(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A03A2']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIonBeamSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a03a2;
    if (value === undefined) {
      throw new Error('IonBeamSequence is undefined');
    }
    return value;
  }

  // Ion Beam Limiting Device Sequence
  get IonBeamLimitingDeviceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a03a4;
  }

  get x300a03a4(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A03A4']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIonBeamLimitingDeviceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a03a4;
    if (value === undefined) {
      throw new Error('IonBeamLimitingDeviceSequence is undefined');
    }
    return value;
  }

  // Ion Block Sequence
  get IonBlockSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a03a6;
  }

  get x300a03a6(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A03A6']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIonBlockSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a03a6;
    if (value === undefined) {
      throw new Error('IonBlockSequence is undefined');
    }
    return value;
  }

  // Ion Control Point Sequence
  get IonControlPointSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a03a8;
  }

  get x300a03a8(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A03A8']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIonControlPointSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a03a8;
    if (value === undefined) {
      throw new Error('IonControlPointSequence is undefined');
    }
    return value;
  }

  // Ion Wedge Sequence
  get IonWedgeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a03aa;
  }

  get x300a03aa(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A03AA']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIonWedgeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a03aa;
    if (value === undefined) {
      throw new Error('IonWedgeSequence is undefined');
    }
    return value;
  }

  // Ion Wedge Position Sequence
  get IonWedgePositionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a03ac;
  }

  get x300a03ac(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A03AC']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getIonWedgePositionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a03ac;
    if (value === undefined) {
      throw new Error('IonWedgePositionSequence is undefined');
    }
    return value;
  }

  // Referenced Setup Image Sequence
  get ReferencedSetupImageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0401;
  }

  get x300a0401(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0401']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedSetupImageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0401;
    if (value === undefined) {
      throw new Error('ReferencedSetupImageSequence is undefined');
    }
    return value;
  }

  // Motion Synchronization Sequence
  get MotionSynchronizationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0410;
  }

  get x300a0410(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0410']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMotionSynchronizationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0410;
    if (value === undefined) {
      throw new Error('MotionSynchronizationSequence is undefined');
    }
    return value;
  }

  // Control Point Orientation
  get ControlPointOrientation(): Array<number | undefined> | undefined {
    return this.x300a0412;
  }

  get x300a0412(): Array<number | undefined> | undefined {
    const value = this.dwResponse['300A0412']?.Value;
    return convert(value, 0x300a0412, 'Array<number | undefined>');
  }

  getControlPointOrientation(): Array<number | undefined> {
    const value = this.x300a0412;
    if (value === undefined) {
      throw new Error('ControlPointOrientation is undefined');
    }
    return value;
  }

  // General Accessory Sequence
  get GeneralAccessorySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0420;
  }

  get x300a0420(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0420']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getGeneralAccessorySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0420;
    if (value === undefined) {
      throw new Error('GeneralAccessorySequence is undefined');
    }
    return value;
  }

  // General Accessory ID
  get GeneralAccessoryID(): string | undefined {
    return this.x300a0421;
  }

  get x300a0421(): string | undefined {
    const value = this.dwResponse['300A0421']?.Value;
    return convert(value?.[0], 0x300a0421, 'string');
  }

  getGeneralAccessoryID(): string {
    const value = this.x300a0421;
    if (value === undefined) {
      throw new Error('GeneralAccessoryID is undefined');
    }
    return value;
  }

  // General Accessory Type
  get GeneralAccessoryType(): string | undefined {
    return this.x300a0423;
  }

  get x300a0423(): string | undefined {
    const value = this.dwResponse['300A0423']?.Value;
    return convert(value?.[0], 0x300a0423, 'string');
  }

  getGeneralAccessoryType(): string {
    const value = this.x300a0423;
    if (value === undefined) {
      throw new Error('GeneralAccessoryType is undefined');
    }
    return value;
  }

  // General Accessory Number
  get GeneralAccessoryNumber(): number | undefined {
    return this.x300a0424;
  }

  get x300a0424(): number | undefined {
    const value = this.dwResponse['300A0424']?.Value;
    return convert(value?.[0], 0x300a0424, 'number');
  }

  getGeneralAccessoryNumber(): number {
    const value = this.x300a0424;
    if (value === undefined) {
      throw new Error('GeneralAccessoryNumber is undefined');
    }
    return value;
  }

  // Source to General Accessory Distance
  get SourceToGeneralAccessoryDistance(): number | undefined {
    return this.x300a0425;
  }

  get x300a0425(): number | undefined {
    const value = this.dwResponse['300A0425']?.Value;
    return convert(value?.[0], 0x300a0425, 'number');
  }

  getSourceToGeneralAccessoryDistance(): number {
    const value = this.x300a0425;
    if (value === undefined) {
      throw new Error('SourceToGeneralAccessoryDistance is undefined');
    }
    return value;
  }

  // Applicator Geometry Sequence
  get ApplicatorGeometrySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300a0431;
  }

  get x300a0431(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300A0431']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getApplicatorGeometrySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300a0431;
    if (value === undefined) {
      throw new Error('ApplicatorGeometrySequence is undefined');
    }
    return value;
  }

  // Applicator Aperture Shape
  get ApplicatorApertureShape(): string | undefined {
    return this.x300a0432;
  }

  get x300a0432(): string | undefined {
    const value = this.dwResponse['300A0432']?.Value;
    return convert(value?.[0], 0x300a0432, 'string');
  }

  getApplicatorApertureShape(): string {
    const value = this.x300a0432;
    if (value === undefined) {
      throw new Error('ApplicatorApertureShape is undefined');
    }
    return value;
  }

  // Applicator Opening
  get ApplicatorOpening(): number | undefined {
    return this.x300a0433;
  }

  get x300a0433(): number | undefined {
    const value = this.dwResponse['300A0433']?.Value;
    return convert(value?.[0], 0x300a0433, 'number');
  }

  getApplicatorOpening(): number {
    const value = this.x300a0433;
    if (value === undefined) {
      throw new Error('ApplicatorOpening is undefined');
    }
    return value;
  }

  // Applicator Opening X
  get ApplicatorOpeningX(): number | undefined {
    return this.x300a0434;
  }

  get x300a0434(): number | undefined {
    const value = this.dwResponse['300A0434']?.Value;
    return convert(value?.[0], 0x300a0434, 'number');
  }

  getApplicatorOpeningX(): number {
    const value = this.x300a0434;
    if (value === undefined) {
      throw new Error('ApplicatorOpeningX is undefined');
    }
    return value;
  }

  // Applicator Opening Y
  get ApplicatorOpeningY(): number | undefined {
    return this.x300a0435;
  }

  get x300a0435(): number | undefined {
    const value = this.dwResponse['300A0435']?.Value;
    return convert(value?.[0], 0x300a0435, 'number');
  }

  getApplicatorOpeningY(): number {
    const value = this.x300a0435;
    if (value === undefined) {
      throw new Error('ApplicatorOpeningY is undefined');
    }
    return value;
  }

  // Source to Applicator Mounting Position Distance
  get SourceToApplicatorMountingPositionDistance(): number | undefined {
    return this.x300a0436;
  }

  get x300a0436(): number | undefined {
    const value = this.dwResponse['300A0436']?.Value;
    return convert(value?.[0], 0x300a0436, 'number');
  }

  getSourceToApplicatorMountingPositionDistance(): number {
    const value = this.x300a0436;
    if (value === undefined) {
      throw new Error('SourceToApplicatorMountingPositionDistance is undefined');
    }
    return value;
  }

  // Referenced RT Plan Sequence
  get ReferencedRTPlanSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300c0002;
  }

  get x300c0002(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300C0002']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedRTPlanSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300c0002;
    if (value === undefined) {
      throw new Error('ReferencedRTPlanSequence is undefined');
    }
    return value;
  }

  // Referenced Beam Sequence
  get ReferencedBeamSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300c0004;
  }

  get x300c0004(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300C0004']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedBeamSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300c0004;
    if (value === undefined) {
      throw new Error('ReferencedBeamSequence is undefined');
    }
    return value;
  }

  // Referenced Beam Number
  get ReferencedBeamNumber(): number | undefined {
    return this.x300c0006;
  }

  get x300c0006(): number | undefined {
    const value = this.dwResponse['300C0006']?.Value;
    return convert(value?.[0], 0x300c0006, 'number');
  }

  getReferencedBeamNumber(): number {
    const value = this.x300c0006;
    if (value === undefined) {
      throw new Error('ReferencedBeamNumber is undefined');
    }
    return value;
  }

  // Referenced Reference Image Number
  get ReferencedReferenceImageNumber(): number | undefined {
    return this.x300c0007;
  }

  get x300c0007(): number | undefined {
    const value = this.dwResponse['300C0007']?.Value;
    return convert(value?.[0], 0x300c0007, 'number');
  }

  getReferencedReferenceImageNumber(): number {
    const value = this.x300c0007;
    if (value === undefined) {
      throw new Error('ReferencedReferenceImageNumber is undefined');
    }
    return value;
  }

  // Start Cumulative Meterset Weight
  get StartCumulativeMetersetWeight(): number | undefined {
    return this.x300c0008;
  }

  get x300c0008(): number | undefined {
    const value = this.dwResponse['300C0008']?.Value;
    return convert(value?.[0], 0x300c0008, 'number');
  }

  getStartCumulativeMetersetWeight(): number {
    const value = this.x300c0008;
    if (value === undefined) {
      throw new Error('StartCumulativeMetersetWeight is undefined');
    }
    return value;
  }

  // End Cumulative Meterset Weight
  get EndCumulativeMetersetWeight(): number | undefined {
    return this.x300c0009;
  }

  get x300c0009(): number | undefined {
    const value = this.dwResponse['300C0009']?.Value;
    return convert(value?.[0], 0x300c0009, 'number');
  }

  getEndCumulativeMetersetWeight(): number {
    const value = this.x300c0009;
    if (value === undefined) {
      throw new Error('EndCumulativeMetersetWeight is undefined');
    }
    return value;
  }

  // Referenced Brachy Application Setup Sequence
  get ReferencedBrachyApplicationSetupSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300c000a;
  }

  get x300c000a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300C000A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedBrachyApplicationSetupSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300c000a;
    if (value === undefined) {
      throw new Error('ReferencedBrachyApplicationSetupSequence is undefined');
    }
    return value;
  }

  // Referenced Brachy Application Setup Number
  get ReferencedBrachyApplicationSetupNumber(): number | undefined {
    return this.x300c000c;
  }

  get x300c000c(): number | undefined {
    const value = this.dwResponse['300C000C']?.Value;
    return convert(value?.[0], 0x300c000c, 'number');
  }

  getReferencedBrachyApplicationSetupNumber(): number {
    const value = this.x300c000c;
    if (value === undefined) {
      throw new Error('ReferencedBrachyApplicationSetupNumber is undefined');
    }
    return value;
  }

  // Referenced Source Number
  get ReferencedSourceNumber(): number | undefined {
    return this.x300c000e;
  }

  get x300c000e(): number | undefined {
    const value = this.dwResponse['300C000E']?.Value;
    return convert(value?.[0], 0x300c000e, 'number');
  }

  getReferencedSourceNumber(): number {
    const value = this.x300c000e;
    if (value === undefined) {
      throw new Error('ReferencedSourceNumber is undefined');
    }
    return value;
  }

  // Referenced Fraction Group Sequence
  get ReferencedFractionGroupSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300c0020;
  }

  get x300c0020(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300C0020']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedFractionGroupSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300c0020;
    if (value === undefined) {
      throw new Error('ReferencedFractionGroupSequence is undefined');
    }
    return value;
  }

  // Referenced Fraction Group Number
  get ReferencedFractionGroupNumber(): number | undefined {
    return this.x300c0022;
  }

  get x300c0022(): number | undefined {
    const value = this.dwResponse['300C0022']?.Value;
    return convert(value?.[0], 0x300c0022, 'number');
  }

  getReferencedFractionGroupNumber(): number {
    const value = this.x300c0022;
    if (value === undefined) {
      throw new Error('ReferencedFractionGroupNumber is undefined');
    }
    return value;
  }

  // Referenced Verification Image Sequence
  get ReferencedVerificationImageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300c0040;
  }

  get x300c0040(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300C0040']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedVerificationImageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300c0040;
    if (value === undefined) {
      throw new Error('ReferencedVerificationImageSequence is undefined');
    }
    return value;
  }

  // Referenced Reference Image Sequence
  get ReferencedReferenceImageSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300c0042;
  }

  get x300c0042(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300C0042']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedReferenceImageSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300c0042;
    if (value === undefined) {
      throw new Error('ReferencedReferenceImageSequence is undefined');
    }
    return value;
  }

  // Referenced Dose Reference Sequence
  get ReferencedDoseReferenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300c0050;
  }

  get x300c0050(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300C0050']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedDoseReferenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300c0050;
    if (value === undefined) {
      throw new Error('ReferencedDoseReferenceSequence is undefined');
    }
    return value;
  }

  // Referenced Dose Reference Number
  get ReferencedDoseReferenceNumber(): number | undefined {
    return this.x300c0051;
  }

  get x300c0051(): number | undefined {
    const value = this.dwResponse['300C0051']?.Value;
    return convert(value?.[0], 0x300c0051, 'number');
  }

  getReferencedDoseReferenceNumber(): number {
    const value = this.x300c0051;
    if (value === undefined) {
      throw new Error('ReferencedDoseReferenceNumber is undefined');
    }
    return value;
  }

  // Brachy Referenced Dose Reference Sequence
  get BrachyReferencedDoseReferenceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300c0055;
  }

  get x300c0055(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300C0055']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBrachyReferencedDoseReferenceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300c0055;
    if (value === undefined) {
      throw new Error('BrachyReferencedDoseReferenceSequence is undefined');
    }
    return value;
  }

  // Referenced Structure Set Sequence
  get ReferencedStructureSetSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300c0060;
  }

  get x300c0060(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300C0060']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedStructureSetSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300c0060;
    if (value === undefined) {
      throw new Error('ReferencedStructureSetSequence is undefined');
    }
    return value;
  }

  // Referenced Patient Setup Number
  get ReferencedPatientSetupNumber(): number | undefined {
    return this.x300c006a;
  }

  get x300c006a(): number | undefined {
    const value = this.dwResponse['300C006A']?.Value;
    return convert(value?.[0], 0x300c006a, 'number');
  }

  getReferencedPatientSetupNumber(): number {
    const value = this.x300c006a;
    if (value === undefined) {
      throw new Error('ReferencedPatientSetupNumber is undefined');
    }
    return value;
  }

  // Referenced Dose Sequence
  get ReferencedDoseSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300c0080;
  }

  get x300c0080(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300C0080']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedDoseSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300c0080;
    if (value === undefined) {
      throw new Error('ReferencedDoseSequence is undefined');
    }
    return value;
  }

  // Referenced Tolerance Table Number
  get ReferencedToleranceTableNumber(): number | undefined {
    return this.x300c00a0;
  }

  get x300c00a0(): number | undefined {
    const value = this.dwResponse['300C00A0']?.Value;
    return convert(value?.[0], 0x300c00a0, 'number');
  }

  getReferencedToleranceTableNumber(): number {
    const value = this.x300c00a0;
    if (value === undefined) {
      throw new Error('ReferencedToleranceTableNumber is undefined');
    }
    return value;
  }

  // Referenced Bolus Sequence
  get ReferencedBolusSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300c00b0;
  }

  get x300c00b0(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300C00B0']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedBolusSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300c00b0;
    if (value === undefined) {
      throw new Error('ReferencedBolusSequence is undefined');
    }
    return value;
  }

  // Referenced Wedge Number
  get ReferencedWedgeNumber(): number | undefined {
    return this.x300c00c0;
  }

  get x300c00c0(): number | undefined {
    const value = this.dwResponse['300C00C0']?.Value;
    return convert(value?.[0], 0x300c00c0, 'number');
  }

  getReferencedWedgeNumber(): number {
    const value = this.x300c00c0;
    if (value === undefined) {
      throw new Error('ReferencedWedgeNumber is undefined');
    }
    return value;
  }

  // Referenced Compensator Number
  get ReferencedCompensatorNumber(): number | undefined {
    return this.x300c00d0;
  }

  get x300c00d0(): number | undefined {
    const value = this.dwResponse['300C00D0']?.Value;
    return convert(value?.[0], 0x300c00d0, 'number');
  }

  getReferencedCompensatorNumber(): number {
    const value = this.x300c00d0;
    if (value === undefined) {
      throw new Error('ReferencedCompensatorNumber is undefined');
    }
    return value;
  }

  // Referenced Block Number
  get ReferencedBlockNumber(): number | undefined {
    return this.x300c00e0;
  }

  get x300c00e0(): number | undefined {
    const value = this.dwResponse['300C00E0']?.Value;
    return convert(value?.[0], 0x300c00e0, 'number');
  }

  getReferencedBlockNumber(): number {
    const value = this.x300c00e0;
    if (value === undefined) {
      throw new Error('ReferencedBlockNumber is undefined');
    }
    return value;
  }

  // Referenced Control Point Index
  get ReferencedControlPointIndex(): number | undefined {
    return this.x300c00f0;
  }

  get x300c00f0(): number | undefined {
    const value = this.dwResponse['300C00F0']?.Value;
    return convert(value?.[0], 0x300c00f0, 'number');
  }

  getReferencedControlPointIndex(): number {
    const value = this.x300c00f0;
    if (value === undefined) {
      throw new Error('ReferencedControlPointIndex is undefined');
    }
    return value;
  }

  // Referenced Control Point Sequence
  get ReferencedControlPointSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x300c00f2;
  }

  get x300c00f2(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['300C00F2']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedControlPointSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x300c00f2;
    if (value === undefined) {
      throw new Error('ReferencedControlPointSequence is undefined');
    }
    return value;
  }

  // Referenced Start Control Point Index
  get ReferencedStartControlPointIndex(): number | undefined {
    return this.x300c00f4;
  }

  get x300c00f4(): number | undefined {
    const value = this.dwResponse['300C00F4']?.Value;
    return convert(value?.[0], 0x300c00f4, 'number');
  }

  getReferencedStartControlPointIndex(): number {
    const value = this.x300c00f4;
    if (value === undefined) {
      throw new Error('ReferencedStartControlPointIndex is undefined');
    }
    return value;
  }

  // Referenced Stop Control Point Index
  get ReferencedStopControlPointIndex(): number | undefined {
    return this.x300c00f6;
  }

  get x300c00f6(): number | undefined {
    const value = this.dwResponse['300C00F6']?.Value;
    return convert(value?.[0], 0x300c00f6, 'number');
  }

  getReferencedStopControlPointIndex(): number {
    const value = this.x300c00f6;
    if (value === undefined) {
      throw new Error('ReferencedStopControlPointIndex is undefined');
    }
    return value;
  }

  // Referenced Range Shifter Number
  get ReferencedRangeShifterNumber(): number | undefined {
    return this.x300c0100;
  }

  get x300c0100(): number | undefined {
    const value = this.dwResponse['300C0100']?.Value;
    return convert(value?.[0], 0x300c0100, 'number');
  }

  getReferencedRangeShifterNumber(): number {
    const value = this.x300c0100;
    if (value === undefined) {
      throw new Error('ReferencedRangeShifterNumber is undefined');
    }
    return value;
  }

  // Referenced Lateral Spreading Device Number
  get ReferencedLateralSpreadingDeviceNumber(): number | undefined {
    return this.x300c0102;
  }

  get x300c0102(): number | undefined {
    const value = this.dwResponse['300C0102']?.Value;
    return convert(value?.[0], 0x300c0102, 'number');
  }

  getReferencedLateralSpreadingDeviceNumber(): number {
    const value = this.x300c0102;
    if (value === undefined) {
      throw new Error('ReferencedLateralSpreadingDeviceNumber is undefined');
    }
    return value;
  }

  // Referenced Range Modulator Number
  get ReferencedRangeModulatorNumber(): number | undefined {
    return this.x300c0104;
  }

  get x300c0104(): number | undefined {
    const value = this.dwResponse['300C0104']?.Value;
    return convert(value?.[0], 0x300c0104, 'number');
  }

  getReferencedRangeModulatorNumber(): number {
    const value = this.x300c0104;
    if (value === undefined) {
      throw new Error('ReferencedRangeModulatorNumber is undefined');
    }
    return value;
  }

  // Approval Status
  get ApprovalStatus(): string | undefined {
    return this.x300e0002;
  }

  get x300e0002(): string | undefined {
    const value = this.dwResponse['300E0002']?.Value;
    return convert(value?.[0], 0x300e0002, 'string');
  }

  getApprovalStatus(): string {
    const value = this.x300e0002;
    if (value === undefined) {
      throw new Error('ApprovalStatus is undefined');
    }
    return value;
  }

  // Review Date
  get ReviewDate(): Date | undefined {
    return this.x300e0004;
  }

  get x300e0004(): Date | undefined {
    const value = this.dwResponse['300E0004']?.Value;
    return convert(value?.[0], 0x300e0004, 'Date');
  }

  getReviewDate(): Date {
    const value = this.x300e0004;
    if (value === undefined) {
      throw new Error('ReviewDate is undefined');
    }
    return value;
  }

  // Review Time
  get ReviewTime(): string | undefined {
    return this.x300e0005;
  }

  get x300e0005(): string | undefined {
    const value = this.dwResponse['300E0005']?.Value;
    return convert(value?.[0], 0x300e0005, 'string');
  }

  getReviewTime(): string {
    const value = this.x300e0005;
    if (value === undefined) {
      throw new Error('ReviewTime is undefined');
    }
    return value;
  }

  // Reviewer Name
  get ReviewerName(): any | undefined {
    return this.x300e0008;
  }

  get x300e0008(): any | undefined {
    const value = this.dwResponse['300E0008']?.Value;
    return convert(value?.[0], 0x300e0008, 'any');
  }

  getReviewerName(): any {
    const value = this.x300e0008;
    if (value === undefined) {
      throw new Error('ReviewerName is undefined');
    }
    return value;
  }

  // Results ID
  get ResultsID(): string | undefined {
    return this.x40080040;
  }

  get x40080040(): string | undefined {
    const value = this.dwResponse['40080040']?.Value;
    return convert(value?.[0], 0x40080040, 'string');
  }

  getResultsID(): string {
    const value = this.x40080040;
    if (value === undefined) {
      throw new Error('ResultsID is undefined');
    }
    return value;
  }

  // Results ID Issuer
  get ResultsIDIssuer(): string | undefined {
    return this.x40080042;
  }

  get x40080042(): string | undefined {
    const value = this.dwResponse['40080042']?.Value;
    return convert(value?.[0], 0x40080042, 'string');
  }

  getResultsIDIssuer(): string {
    const value = this.x40080042;
    if (value === undefined) {
      throw new Error('ResultsIDIssuer is undefined');
    }
    return value;
  }

  // Referenced Interpretation Sequence
  get ReferencedInterpretationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x40080050;
  }

  get x40080050(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['40080050']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedInterpretationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x40080050;
    if (value === undefined) {
      throw new Error('ReferencedInterpretationSequence is undefined');
    }
    return value;
  }

  // Report Production Status (Trial)
  get ReportProductionStatusTrial(): string | undefined {
    return this.x400800ff;
  }

  get x400800ff(): string | undefined {
    const value = this.dwResponse['400800FF']?.Value;
    return convert(value?.[0], 0x400800ff, 'string');
  }

  getReportProductionStatusTrial(): string {
    const value = this.x400800ff;
    if (value === undefined) {
      throw new Error('ReportProductionStatusTrial is undefined');
    }
    return value;
  }

  // Interpretation Recorded Date
  get InterpretationRecordedDate(): Date | undefined {
    return this.x40080100;
  }

  get x40080100(): Date | undefined {
    const value = this.dwResponse['40080100']?.Value;
    return convert(value?.[0], 0x40080100, 'Date');
  }

  getInterpretationRecordedDate(): Date {
    const value = this.x40080100;
    if (value === undefined) {
      throw new Error('InterpretationRecordedDate is undefined');
    }
    return value;
  }

  // Interpretation Recorded Time
  get InterpretationRecordedTime(): string | undefined {
    return this.x40080101;
  }

  get x40080101(): string | undefined {
    const value = this.dwResponse['40080101']?.Value;
    return convert(value?.[0], 0x40080101, 'string');
  }

  getInterpretationRecordedTime(): string {
    const value = this.x40080101;
    if (value === undefined) {
      throw new Error('InterpretationRecordedTime is undefined');
    }
    return value;
  }

  // Interpretation Recorder
  get InterpretationRecorder(): any | undefined {
    return this.x40080102;
  }

  get x40080102(): any | undefined {
    const value = this.dwResponse['40080102']?.Value;
    return convert(value?.[0], 0x40080102, 'any');
  }

  getInterpretationRecorder(): any {
    const value = this.x40080102;
    if (value === undefined) {
      throw new Error('InterpretationRecorder is undefined');
    }
    return value;
  }

  // Reference to Recorded Sound
  get ReferenceToRecordedSound(): string | undefined {
    return this.x40080103;
  }

  get x40080103(): string | undefined {
    const value = this.dwResponse['40080103']?.Value;
    return convert(value?.[0], 0x40080103, 'string');
  }

  getReferenceToRecordedSound(): string {
    const value = this.x40080103;
    if (value === undefined) {
      throw new Error('ReferenceToRecordedSound is undefined');
    }
    return value;
  }

  // Interpretation Transcription Date
  get InterpretationTranscriptionDate(): Date | undefined {
    return this.x40080108;
  }

  get x40080108(): Date | undefined {
    const value = this.dwResponse['40080108']?.Value;
    return convert(value?.[0], 0x40080108, 'Date');
  }

  getInterpretationTranscriptionDate(): Date {
    const value = this.x40080108;
    if (value === undefined) {
      throw new Error('InterpretationTranscriptionDate is undefined');
    }
    return value;
  }

  // Interpretation Transcription Time
  get InterpretationTranscriptionTime(): string | undefined {
    return this.x40080109;
  }

  get x40080109(): string | undefined {
    const value = this.dwResponse['40080109']?.Value;
    return convert(value?.[0], 0x40080109, 'string');
  }

  getInterpretationTranscriptionTime(): string {
    const value = this.x40080109;
    if (value === undefined) {
      throw new Error('InterpretationTranscriptionTime is undefined');
    }
    return value;
  }

  // Interpretation Transcriber
  get InterpretationTranscriber(): any | undefined {
    return this.x4008010a;
  }

  get x4008010a(): any | undefined {
    const value = this.dwResponse['4008010A']?.Value;
    return convert(value?.[0], 0x4008010a, 'any');
  }

  getInterpretationTranscriber(): any {
    const value = this.x4008010a;
    if (value === undefined) {
      throw new Error('InterpretationTranscriber is undefined');
    }
    return value;
  }

  // Interpretation Author
  get InterpretationAuthor(): any | undefined {
    return this.x4008010c;
  }

  get x4008010c(): any | undefined {
    const value = this.dwResponse['4008010C']?.Value;
    return convert(value?.[0], 0x4008010c, 'any');
  }

  getInterpretationAuthor(): any {
    const value = this.x4008010c;
    if (value === undefined) {
      throw new Error('InterpretationAuthor is undefined');
    }
    return value;
  }

  // Interpretation Approver Sequence
  get InterpretationApproverSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x40080111;
  }

  get x40080111(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['40080111']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getInterpretationApproverSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x40080111;
    if (value === undefined) {
      throw new Error('InterpretationApproverSequence is undefined');
    }
    return value;
  }

  // Interpretation Approval Date
  get InterpretationApprovalDate(): Date | undefined {
    return this.x40080112;
  }

  get x40080112(): Date | undefined {
    const value = this.dwResponse['40080112']?.Value;
    return convert(value?.[0], 0x40080112, 'Date');
  }

  getInterpretationApprovalDate(): Date {
    const value = this.x40080112;
    if (value === undefined) {
      throw new Error('InterpretationApprovalDate is undefined');
    }
    return value;
  }

  // Interpretation Approval Time
  get InterpretationApprovalTime(): string | undefined {
    return this.x40080113;
  }

  get x40080113(): string | undefined {
    const value = this.dwResponse['40080113']?.Value;
    return convert(value?.[0], 0x40080113, 'string');
  }

  getInterpretationApprovalTime(): string {
    const value = this.x40080113;
    if (value === undefined) {
      throw new Error('InterpretationApprovalTime is undefined');
    }
    return value;
  }

  // Physician Approving Interpretation
  get PhysicianApprovingInterpretation(): any | undefined {
    return this.x40080114;
  }

  get x40080114(): any | undefined {
    const value = this.dwResponse['40080114']?.Value;
    return convert(value?.[0], 0x40080114, 'any');
  }

  getPhysicianApprovingInterpretation(): any {
    const value = this.x40080114;
    if (value === undefined) {
      throw new Error('PhysicianApprovingInterpretation is undefined');
    }
    return value;
  }

  // Interpretation Diagnosis Code Sequence
  get InterpretationDiagnosisCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x40080117;
  }

  get x40080117(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['40080117']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getInterpretationDiagnosisCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x40080117;
    if (value === undefined) {
      throw new Error('InterpretationDiagnosisCodeSequence is undefined');
    }
    return value;
  }

  // Results Distribution List Sequence
  get ResultsDistributionListSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x40080118;
  }

  get x40080118(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['40080118']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getResultsDistributionListSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x40080118;
    if (value === undefined) {
      throw new Error('ResultsDistributionListSequence is undefined');
    }
    return value;
  }

  // Distribution Name
  get DistributionName(): any | undefined {
    return this.x40080119;
  }

  get x40080119(): any | undefined {
    const value = this.dwResponse['40080119']?.Value;
    return convert(value?.[0], 0x40080119, 'any');
  }

  getDistributionName(): any {
    const value = this.x40080119;
    if (value === undefined) {
      throw new Error('DistributionName is undefined');
    }
    return value;
  }

  // Distribution Address
  get DistributionAddress(): string | undefined {
    return this.x4008011a;
  }

  get x4008011a(): string | undefined {
    const value = this.dwResponse['4008011A']?.Value;
    return convert(value?.[0], 0x4008011a, 'string');
  }

  getDistributionAddress(): string {
    const value = this.x4008011a;
    if (value === undefined) {
      throw new Error('DistributionAddress is undefined');
    }
    return value;
  }

  // Interpretation ID
  get InterpretationID(): string | undefined {
    return this.x40080200;
  }

  get x40080200(): string | undefined {
    const value = this.dwResponse['40080200']?.Value;
    return convert(value?.[0], 0x40080200, 'string');
  }

  getInterpretationID(): string {
    const value = this.x40080200;
    if (value === undefined) {
      throw new Error('InterpretationID is undefined');
    }
    return value;
  }

  // Interpretation ID Issuer
  get InterpretationIDIssuer(): string | undefined {
    return this.x40080202;
  }

  get x40080202(): string | undefined {
    const value = this.dwResponse['40080202']?.Value;
    return convert(value?.[0], 0x40080202, 'string');
  }

  getInterpretationIDIssuer(): string {
    const value = this.x40080202;
    if (value === undefined) {
      throw new Error('InterpretationIDIssuer is undefined');
    }
    return value;
  }

  // Interpretation Type ID
  get InterpretationTypeID(): string | undefined {
    return this.x40080210;
  }

  get x40080210(): string | undefined {
    const value = this.dwResponse['40080210']?.Value;
    return convert(value?.[0], 0x40080210, 'string');
  }

  getInterpretationTypeID(): string {
    const value = this.x40080210;
    if (value === undefined) {
      throw new Error('InterpretationTypeID is undefined');
    }
    return value;
  }

  // Interpretation Status ID
  get InterpretationStatusID(): string | undefined {
    return this.x40080212;
  }

  get x40080212(): string | undefined {
    const value = this.dwResponse['40080212']?.Value;
    return convert(value?.[0], 0x40080212, 'string');
  }

  getInterpretationStatusID(): string {
    const value = this.x40080212;
    if (value === undefined) {
      throw new Error('InterpretationStatusID is undefined');
    }
    return value;
  }

  // Low Energy Detectors
  get LowEnergyDetectors(): string | undefined {
    return this.x40100001;
  }

  get x40100001(): string | undefined {
    const value = this.dwResponse['40100001']?.Value;
    return convert(value?.[0], 0x40100001, 'string');
  }

  getLowEnergyDetectors(): string {
    const value = this.x40100001;
    if (value === undefined) {
      throw new Error('LowEnergyDetectors is undefined');
    }
    return value;
  }

  // High Energy Detectors
  get HighEnergyDetectors(): string | undefined {
    return this.x40100002;
  }

  get x40100002(): string | undefined {
    const value = this.dwResponse['40100002']?.Value;
    return convert(value?.[0], 0x40100002, 'string');
  }

  getHighEnergyDetectors(): string {
    const value = this.x40100002;
    if (value === undefined) {
      throw new Error('HighEnergyDetectors is undefined');
    }
    return value;
  }

  // Detector Geometry Sequence
  get DetectorGeometrySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x40100004;
  }

  get x40100004(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['40100004']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDetectorGeometrySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x40100004;
    if (value === undefined) {
      throw new Error('DetectorGeometrySequence is undefined');
    }
    return value;
  }

  // Threat ROI Voxel Sequence
  get ThreatROIVoxelSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x40101001;
  }

  get x40101001(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['40101001']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getThreatROIVoxelSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x40101001;
    if (value === undefined) {
      throw new Error('ThreatROIVoxelSequence is undefined');
    }
    return value;
  }

  // Threat ROI Base
  get ThreatROIBase(): Array<number | undefined> | undefined {
    return this.x40101004;
  }

  get x40101004(): Array<number | undefined> | undefined {
    const value = this.dwResponse['40101004']?.Value;
    return convert(value, 0x40101004, 'Array<number | undefined>');
  }

  getThreatROIBase(): Array<number | undefined> {
    const value = this.x40101004;
    if (value === undefined) {
      throw new Error('ThreatROIBase is undefined');
    }
    return value;
  }

  // Threat ROI Extents
  get ThreatROIExtents(): Array<number | undefined> | undefined {
    return this.x40101005;
  }

  get x40101005(): Array<number | undefined> | undefined {
    const value = this.dwResponse['40101005']?.Value;
    return convert(value, 0x40101005, 'Array<number | undefined>');
  }

  getThreatROIExtents(): Array<number | undefined> {
    const value = this.x40101005;
    if (value === undefined) {
      throw new Error('ThreatROIExtents is undefined');
    }
    return value;
  }

  // Route Segment ID
  get RouteSegmentID(): string | undefined {
    return this.x40101007;
  }

  get x40101007(): string | undefined {
    const value = this.dwResponse['40101007']?.Value;
    return convert(value?.[0], 0x40101007, 'string');
  }

  getRouteSegmentID(): string {
    const value = this.x40101007;
    if (value === undefined) {
      throw new Error('RouteSegmentID is undefined');
    }
    return value;
  }

  // Gantry Type
  get GantryType(): string | undefined {
    return this.x40101008;
  }

  get x40101008(): string | undefined {
    const value = this.dwResponse['40101008']?.Value;
    return convert(value?.[0], 0x40101008, 'string');
  }

  getGantryType(): string {
    const value = this.x40101008;
    if (value === undefined) {
      throw new Error('GantryType is undefined');
    }
    return value;
  }

  // OOI Owner Type
  get OOIOwnerType(): string | undefined {
    return this.x40101009;
  }

  get x40101009(): string | undefined {
    const value = this.dwResponse['40101009']?.Value;
    return convert(value?.[0], 0x40101009, 'string');
  }

  getOOIOwnerType(): string {
    const value = this.x40101009;
    if (value === undefined) {
      throw new Error('OOIOwnerType is undefined');
    }
    return value;
  }

  // Route Segment Sequence
  get RouteSegmentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x4010100a;
  }

  get x4010100a(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['4010100A']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getRouteSegmentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x4010100a;
    if (value === undefined) {
      throw new Error('RouteSegmentSequence is undefined');
    }
    return value;
  }

  // Potential Threat Object ID
  get PotentialThreatObjectID(): number | undefined {
    return this.x40101010;
  }

  get x40101010(): number | undefined {
    const value = this.dwResponse['40101010']?.Value;
    return convert(value?.[0], 0x40101010, 'number');
  }

  getPotentialThreatObjectID(): number {
    const value = this.x40101010;
    if (value === undefined) {
      throw new Error('PotentialThreatObjectID is undefined');
    }
    return value;
  }

  // Threat Sequence
  get ThreatSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x40101011;
  }

  get x40101011(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['40101011']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getThreatSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x40101011;
    if (value === undefined) {
      throw new Error('ThreatSequence is undefined');
    }
    return value;
  }

  // Threat Category
  get ThreatCategory(): string | undefined {
    return this.x40101012;
  }

  get x40101012(): string | undefined {
    const value = this.dwResponse['40101012']?.Value;
    return convert(value?.[0], 0x40101012, 'string');
  }

  getThreatCategory(): string {
    const value = this.x40101012;
    if (value === undefined) {
      throw new Error('ThreatCategory is undefined');
    }
    return value;
  }

  // ATD Ability Assessment
  get ATDAbilityAssessment(): string | undefined {
    return this.x40101014;
  }

  get x40101014(): string | undefined {
    const value = this.dwResponse['40101014']?.Value;
    return convert(value?.[0], 0x40101014, 'string');
  }

  getATDAbilityAssessment(): string {
    const value = this.x40101014;
    if (value === undefined) {
      throw new Error('ATDAbilityAssessment is undefined');
    }
    return value;
  }

  // ATD Assessment Flag
  get ATDAssessmentFlag(): string | undefined {
    return this.x40101015;
  }

  get x40101015(): string | undefined {
    const value = this.dwResponse['40101015']?.Value;
    return convert(value?.[0], 0x40101015, 'string');
  }

  getATDAssessmentFlag(): string {
    const value = this.x40101015;
    if (value === undefined) {
      throw new Error('ATDAssessmentFlag is undefined');
    }
    return value;
  }

  // ATD Assessment Probability
  get ATDAssessmentProbability(): number | undefined {
    return this.x40101016;
  }

  get x40101016(): number | undefined {
    const value = this.dwResponse['40101016']?.Value;
    return convert(value?.[0], 0x40101016, 'number');
  }

  getATDAssessmentProbability(): number {
    const value = this.x40101016;
    if (value === undefined) {
      throw new Error('ATDAssessmentProbability is undefined');
    }
    return value;
  }

  // Mass
  get Mass(): number | undefined {
    return this.x40101017;
  }

  get x40101017(): number | undefined {
    const value = this.dwResponse['40101017']?.Value;
    return convert(value?.[0], 0x40101017, 'number');
  }

  getMass(): number {
    const value = this.x40101017;
    if (value === undefined) {
      throw new Error('Mass is undefined');
    }
    return value;
  }

  // Density
  get Density(): number | undefined {
    return this.x40101018;
  }

  get x40101018(): number | undefined {
    const value = this.dwResponse['40101018']?.Value;
    return convert(value?.[0], 0x40101018, 'number');
  }

  getDensity(): number {
    const value = this.x40101018;
    if (value === undefined) {
      throw new Error('Density is undefined');
    }
    return value;
  }

  // Z Effective
  get ZEffective(): number | undefined {
    return this.x40101019;
  }

  get x40101019(): number | undefined {
    const value = this.dwResponse['40101019']?.Value;
    return convert(value?.[0], 0x40101019, 'number');
  }

  getZEffective(): number {
    const value = this.x40101019;
    if (value === undefined) {
      throw new Error('ZEffective is undefined');
    }
    return value;
  }

  // Boarding Pass ID
  get BoardingPassID(): string | undefined {
    return this.x4010101a;
  }

  get x4010101a(): string | undefined {
    const value = this.dwResponse['4010101A']?.Value;
    return convert(value?.[0], 0x4010101a, 'string');
  }

  getBoardingPassID(): string {
    const value = this.x4010101a;
    if (value === undefined) {
      throw new Error('BoardingPassID is undefined');
    }
    return value;
  }

  // Center of Mass
  get CenterOfMass(): Array<number | undefined> | undefined {
    return this.x4010101b;
  }

  get x4010101b(): Array<number | undefined> | undefined {
    const value = this.dwResponse['4010101B']?.Value;
    return convert(value, 0x4010101b, 'Array<number | undefined>');
  }

  getCenterOfMass(): Array<number | undefined> {
    const value = this.x4010101b;
    if (value === undefined) {
      throw new Error('CenterOfMass is undefined');
    }
    return value;
  }

  // Center of PTO
  get CenterOfPTO(): Array<number | undefined> | undefined {
    return this.x4010101c;
  }

  get x4010101c(): Array<number | undefined> | undefined {
    const value = this.dwResponse['4010101C']?.Value;
    return convert(value, 0x4010101c, 'Array<number | undefined>');
  }

  getCenterOfPTO(): Array<number | undefined> {
    const value = this.x4010101c;
    if (value === undefined) {
      throw new Error('CenterOfPTO is undefined');
    }
    return value;
  }

  // Bounding Polygon
  get BoundingPolygon(): Array<number | undefined> | undefined {
    return this.x4010101d;
  }

  get x4010101d(): Array<number | undefined> | undefined {
    const value = this.dwResponse['4010101D']?.Value;
    return convert(value, 0x4010101d, 'Array<number | undefined>');
  }

  getBoundingPolygon(): Array<number | undefined> {
    const value = this.x4010101d;
    if (value === undefined) {
      throw new Error('BoundingPolygon is undefined');
    }
    return value;
  }

  // Route Segment Start Location ID
  get RouteSegmentStartLocationID(): string | undefined {
    return this.x4010101e;
  }

  get x4010101e(): string | undefined {
    const value = this.dwResponse['4010101E']?.Value;
    return convert(value?.[0], 0x4010101e, 'string');
  }

  getRouteSegmentStartLocationID(): string {
    const value = this.x4010101e;
    if (value === undefined) {
      throw new Error('RouteSegmentStartLocationID is undefined');
    }
    return value;
  }

  // Route Segment End Location ID
  get RouteSegmentEndLocationID(): string | undefined {
    return this.x4010101f;
  }

  get x4010101f(): string | undefined {
    const value = this.dwResponse['4010101F']?.Value;
    return convert(value?.[0], 0x4010101f, 'string');
  }

  getRouteSegmentEndLocationID(): string {
    const value = this.x4010101f;
    if (value === undefined) {
      throw new Error('RouteSegmentEndLocationID is undefined');
    }
    return value;
  }

  // Route Segment Location ID Type
  get RouteSegmentLocationIDType(): string | undefined {
    return this.x40101020;
  }

  get x40101020(): string | undefined {
    const value = this.dwResponse['40101020']?.Value;
    return convert(value?.[0], 0x40101020, 'string');
  }

  getRouteSegmentLocationIDType(): string {
    const value = this.x40101020;
    if (value === undefined) {
      throw new Error('RouteSegmentLocationIDType is undefined');
    }
    return value;
  }

  // Abort Reason
  get AbortReason(): Array<string | undefined> | undefined {
    return this.x40101021;
  }

  get x40101021(): Array<string | undefined> | undefined {
    const value = this.dwResponse['40101021']?.Value;
    return convert(value, 0x40101021, 'Array<string | undefined>');
  }

  getAbortReason(): Array<string | undefined> {
    const value = this.x40101021;
    if (value === undefined) {
      throw new Error('AbortReason is undefined');
    }
    return value;
  }

  // Volume of PTO
  get VolumeOfPTO(): number | undefined {
    return this.x40101023;
  }

  get x40101023(): number | undefined {
    const value = this.dwResponse['40101023']?.Value;
    return convert(value?.[0], 0x40101023, 'number');
  }

  getVolumeOfPTO(): number {
    const value = this.x40101023;
    if (value === undefined) {
      throw new Error('VolumeOfPTO is undefined');
    }
    return value;
  }

  // Abort Flag
  get AbortFlag(): string | undefined {
    return this.x40101024;
  }

  get x40101024(): string | undefined {
    const value = this.dwResponse['40101024']?.Value;
    return convert(value?.[0], 0x40101024, 'string');
  }

  getAbortFlag(): string {
    const value = this.x40101024;
    if (value === undefined) {
      throw new Error('AbortFlag is undefined');
    }
    return value;
  }

  // Route Segment Start Time
  get RouteSegmentStartTime(): string | undefined {
    return this.x40101025;
  }

  get x40101025(): string | undefined {
    const value = this.dwResponse['40101025']?.Value;
    return convert(value?.[0], 0x40101025, 'string');
  }

  getRouteSegmentStartTime(): string {
    const value = this.x40101025;
    if (value === undefined) {
      throw new Error('RouteSegmentStartTime is undefined');
    }
    return value;
  }

  // Route Segment End Time
  get RouteSegmentEndTime(): string | undefined {
    return this.x40101026;
  }

  get x40101026(): string | undefined {
    const value = this.dwResponse['40101026']?.Value;
    return convert(value?.[0], 0x40101026, 'string');
  }

  getRouteSegmentEndTime(): string {
    const value = this.x40101026;
    if (value === undefined) {
      throw new Error('RouteSegmentEndTime is undefined');
    }
    return value;
  }

  // TDR Type
  get TDRType(): string | undefined {
    return this.x40101027;
  }

  get x40101027(): string | undefined {
    const value = this.dwResponse['40101027']?.Value;
    return convert(value?.[0], 0x40101027, 'string');
  }

  getTDRType(): string {
    const value = this.x40101027;
    if (value === undefined) {
      throw new Error('TDRType is undefined');
    }
    return value;
  }

  // International Route Segment
  get InternationalRouteSegment(): string | undefined {
    return this.x40101028;
  }

  get x40101028(): string | undefined {
    const value = this.dwResponse['40101028']?.Value;
    return convert(value?.[0], 0x40101028, 'string');
  }

  getInternationalRouteSegment(): string {
    const value = this.x40101028;
    if (value === undefined) {
      throw new Error('InternationalRouteSegment is undefined');
    }
    return value;
  }

  // Threat Detection Algorithm and Version
  get ThreatDetectionAlgorithmandVersion(): Array<string | undefined> | undefined {
    return this.x40101029;
  }

  get x40101029(): Array<string | undefined> | undefined {
    const value = this.dwResponse['40101029']?.Value;
    return convert(value, 0x40101029, 'Array<string | undefined>');
  }

  getThreatDetectionAlgorithmandVersion(): Array<string | undefined> {
    const value = this.x40101029;
    if (value === undefined) {
      throw new Error('ThreatDetectionAlgorithmandVersion is undefined');
    }
    return value;
  }

  // Assigned Location
  get AssignedLocation(): string | undefined {
    return this.x4010102a;
  }

  get x4010102a(): string | undefined {
    const value = this.dwResponse['4010102A']?.Value;
    return convert(value?.[0], 0x4010102a, 'string');
  }

  getAssignedLocation(): string {
    const value = this.x4010102a;
    if (value === undefined) {
      throw new Error('AssignedLocation is undefined');
    }
    return value;
  }

  // Alarm Decision Time
  get AlarmDecisionTime(): string | undefined {
    return this.x4010102b;
  }

  get x4010102b(): string | undefined {
    const value = this.dwResponse['4010102B']?.Value;
    return convert(value?.[0], 0x4010102b, 'string');
  }

  getAlarmDecisionTime(): string {
    const value = this.x4010102b;
    if (value === undefined) {
      throw new Error('AlarmDecisionTime is undefined');
    }
    return value;
  }

  // Alarm Decision
  get AlarmDecision(): string | undefined {
    return this.x40101031;
  }

  get x40101031(): string | undefined {
    const value = this.dwResponse['40101031']?.Value;
    return convert(value?.[0], 0x40101031, 'string');
  }

  getAlarmDecision(): string {
    const value = this.x40101031;
    if (value === undefined) {
      throw new Error('AlarmDecision is undefined');
    }
    return value;
  }

  // Number of Total Objects
  get NumberOfTotalObjects(): number | undefined {
    return this.x40101033;
  }

  get x40101033(): number | undefined {
    const value = this.dwResponse['40101033']?.Value;
    return convert(value?.[0], 0x40101033, 'number');
  }

  getNumberOfTotalObjects(): number {
    const value = this.x40101033;
    if (value === undefined) {
      throw new Error('NumberOfTotalObjects is undefined');
    }
    return value;
  }

  // Number of Alarm Objects
  get NumberOfAlarmObjects(): number | undefined {
    return this.x40101034;
  }

  get x40101034(): number | undefined {
    const value = this.dwResponse['40101034']?.Value;
    return convert(value?.[0], 0x40101034, 'number');
  }

  getNumberOfAlarmObjects(): number {
    const value = this.x40101034;
    if (value === undefined) {
      throw new Error('NumberOfAlarmObjects is undefined');
    }
    return value;
  }

  // PTO Representation Sequence
  get PTORepresentationSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x40101037;
  }

  get x40101037(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['40101037']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPTORepresentationSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x40101037;
    if (value === undefined) {
      throw new Error('PTORepresentationSequence is undefined');
    }
    return value;
  }

  // ATD Assessment Sequence
  get ATDAssessmentSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x40101038;
  }

  get x40101038(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['40101038']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getATDAssessmentSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x40101038;
    if (value === undefined) {
      throw new Error('ATDAssessmentSequence is undefined');
    }
    return value;
  }

  // TIP Type
  get TIPType(): string | undefined {
    return this.x40101039;
  }

  get x40101039(): string | undefined {
    const value = this.dwResponse['40101039']?.Value;
    return convert(value?.[0], 0x40101039, 'string');
  }

  getTIPType(): string {
    const value = this.x40101039;
    if (value === undefined) {
      throw new Error('TIPType is undefined');
    }
    return value;
  }

  // DICOS Version
  get DICOSVersion(): string | undefined {
    return this.x4010103a;
  }

  get x4010103a(): string | undefined {
    const value = this.dwResponse['4010103A']?.Value;
    return convert(value?.[0], 0x4010103a, 'string');
  }

  getDICOSVersion(): string {
    const value = this.x4010103a;
    if (value === undefined) {
      throw new Error('DICOSVersion is undefined');
    }
    return value;
  }

  // OOI Owner Creation Time
  get OOIOwnerCreationTime(): string | undefined {
    return this.x40101041;
  }

  get x40101041(): string | undefined {
    const value = this.dwResponse['40101041']?.Value;
    return convert(value?.[0], 0x40101041, 'string');
  }

  getOOIOwnerCreationTime(): string {
    const value = this.x40101041;
    if (value === undefined) {
      throw new Error('OOIOwnerCreationTime is undefined');
    }
    return value;
  }

  // OOI Type
  get OOIType(): string | undefined {
    return this.x40101042;
  }

  get x40101042(): string | undefined {
    const value = this.dwResponse['40101042']?.Value;
    return convert(value?.[0], 0x40101042, 'string');
  }

  getOOIType(): string {
    const value = this.x40101042;
    if (value === undefined) {
      throw new Error('OOIType is undefined');
    }
    return value;
  }

  // OOI Size
  get OOISize(): Array<number | undefined> | undefined {
    return this.x40101043;
  }

  get x40101043(): Array<number | undefined> | undefined {
    const value = this.dwResponse['40101043']?.Value;
    return convert(value, 0x40101043, 'Array<number | undefined>');
  }

  getOOISize(): Array<number | undefined> {
    const value = this.x40101043;
    if (value === undefined) {
      throw new Error('OOISize is undefined');
    }
    return value;
  }

  // Acquisition Status
  get AcquisitionStatus(): string | undefined {
    return this.x40101044;
  }

  get x40101044(): string | undefined {
    const value = this.dwResponse['40101044']?.Value;
    return convert(value?.[0], 0x40101044, 'string');
  }

  getAcquisitionStatus(): string {
    const value = this.x40101044;
    if (value === undefined) {
      throw new Error('AcquisitionStatus is undefined');
    }
    return value;
  }

  // Basis Materials Code Sequence
  get BasisMaterialsCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x40101045;
  }

  get x40101045(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['40101045']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getBasisMaterialsCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x40101045;
    if (value === undefined) {
      throw new Error('BasisMaterialsCodeSequence is undefined');
    }
    return value;
  }

  // Phantom Type
  get PhantomType(): string | undefined {
    return this.x40101046;
  }

  get x40101046(): string | undefined {
    const value = this.dwResponse['40101046']?.Value;
    return convert(value?.[0], 0x40101046, 'string');
  }

  getPhantomType(): string {
    const value = this.x40101046;
    if (value === undefined) {
      throw new Error('PhantomType is undefined');
    }
    return value;
  }

  // OOI Owner Sequence
  get OOIOwnerSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x40101047;
  }

  get x40101047(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['40101047']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getOOIOwnerSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x40101047;
    if (value === undefined) {
      throw new Error('OOIOwnerSequence is undefined');
    }
    return value;
  }

  // Scan Type
  get ScanType(): string | undefined {
    return this.x40101048;
  }

  get x40101048(): string | undefined {
    const value = this.dwResponse['40101048']?.Value;
    return convert(value?.[0], 0x40101048, 'string');
  }

  getScanType(): string {
    const value = this.x40101048;
    if (value === undefined) {
      throw new Error('ScanType is undefined');
    }
    return value;
  }

  // Itinerary ID
  get ItineraryID(): string | undefined {
    return this.x40101051;
  }

  get x40101051(): string | undefined {
    const value = this.dwResponse['40101051']?.Value;
    return convert(value?.[0], 0x40101051, 'string');
  }

  getItineraryID(): string {
    const value = this.x40101051;
    if (value === undefined) {
      throw new Error('ItineraryID is undefined');
    }
    return value;
  }

  // Itinerary ID Type
  get ItineraryIDType(): string | undefined {
    return this.x40101052;
  }

  get x40101052(): string | undefined {
    const value = this.dwResponse['40101052']?.Value;
    return convert(value?.[0], 0x40101052, 'string');
  }

  getItineraryIDType(): string {
    const value = this.x40101052;
    if (value === undefined) {
      throw new Error('ItineraryIDType is undefined');
    }
    return value;
  }

  // Itinerary ID Assigning Authority
  get ItineraryIDAssigningAuthority(): string | undefined {
    return this.x40101053;
  }

  get x40101053(): string | undefined {
    const value = this.dwResponse['40101053']?.Value;
    return convert(value?.[0], 0x40101053, 'string');
  }

  getItineraryIDAssigningAuthority(): string {
    const value = this.x40101053;
    if (value === undefined) {
      throw new Error('ItineraryIDAssigningAuthority is undefined');
    }
    return value;
  }

  // Route ID
  get RouteID(): string | undefined {
    return this.x40101054;
  }

  get x40101054(): string | undefined {
    const value = this.dwResponse['40101054']?.Value;
    return convert(value?.[0], 0x40101054, 'string');
  }

  getRouteID(): string {
    const value = this.x40101054;
    if (value === undefined) {
      throw new Error('RouteID is undefined');
    }
    return value;
  }

  // Route ID Assigning Authority
  get RouteIDAssigningAuthority(): string | undefined {
    return this.x40101055;
  }

  get x40101055(): string | undefined {
    const value = this.dwResponse['40101055']?.Value;
    return convert(value?.[0], 0x40101055, 'string');
  }

  getRouteIDAssigningAuthority(): string {
    const value = this.x40101055;
    if (value === undefined) {
      throw new Error('RouteIDAssigningAuthority is undefined');
    }
    return value;
  }

  // Inbound Arrival Type
  get InboundArrivalType(): string | undefined {
    return this.x40101056;
  }

  get x40101056(): string | undefined {
    const value = this.dwResponse['40101056']?.Value;
    return convert(value?.[0], 0x40101056, 'string');
  }

  getInboundArrivalType(): string {
    const value = this.x40101056;
    if (value === undefined) {
      throw new Error('InboundArrivalType is undefined');
    }
    return value;
  }

  // Carrier ID
  get CarrierID(): string | undefined {
    return this.x40101058;
  }

  get x40101058(): string | undefined {
    const value = this.dwResponse['40101058']?.Value;
    return convert(value?.[0], 0x40101058, 'string');
  }

  getCarrierID(): string {
    const value = this.x40101058;
    if (value === undefined) {
      throw new Error('CarrierID is undefined');
    }
    return value;
  }

  // Carrier ID Assigning Authority
  get CarrierIDAssigningAuthority(): string | undefined {
    return this.x40101059;
  }

  get x40101059(): string | undefined {
    const value = this.dwResponse['40101059']?.Value;
    return convert(value?.[0], 0x40101059, 'string');
  }

  getCarrierIDAssigningAuthority(): string {
    const value = this.x40101059;
    if (value === undefined) {
      throw new Error('CarrierIDAssigningAuthority is undefined');
    }
    return value;
  }

  // Source Orientation
  get SourceOrientation(): Array<number | undefined> | undefined {
    return this.x40101060;
  }

  get x40101060(): Array<number | undefined> | undefined {
    const value = this.dwResponse['40101060']?.Value;
    return convert(value, 0x40101060, 'Array<number | undefined>');
  }

  getSourceOrientation(): Array<number | undefined> {
    const value = this.x40101060;
    if (value === undefined) {
      throw new Error('SourceOrientation is undefined');
    }
    return value;
  }

  // Source Position
  get SourcePosition(): Array<number | undefined> | undefined {
    return this.x40101061;
  }

  get x40101061(): Array<number | undefined> | undefined {
    const value = this.dwResponse['40101061']?.Value;
    return convert(value, 0x40101061, 'Array<number | undefined>');
  }

  getSourcePosition(): Array<number | undefined> {
    const value = this.x40101061;
    if (value === undefined) {
      throw new Error('SourcePosition is undefined');
    }
    return value;
  }

  // Belt Height
  get BeltHeight(): number | undefined {
    return this.x40101062;
  }

  get x40101062(): number | undefined {
    const value = this.dwResponse['40101062']?.Value;
    return convert(value?.[0], 0x40101062, 'number');
  }

  getBeltHeight(): number {
    const value = this.x40101062;
    if (value === undefined) {
      throw new Error('BeltHeight is undefined');
    }
    return value;
  }

  // Algorithm Routing Code Sequence
  get AlgorithmRoutingCodeSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x40101064;
  }

  get x40101064(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['40101064']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAlgorithmRoutingCodeSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x40101064;
    if (value === undefined) {
      throw new Error('AlgorithmRoutingCodeSequence is undefined');
    }
    return value;
  }

  // Transport Classification
  get TransportClassification(): string | undefined {
    return this.x40101067;
  }

  get x40101067(): string | undefined {
    const value = this.dwResponse['40101067']?.Value;
    return convert(value?.[0], 0x40101067, 'string');
  }

  getTransportClassification(): string {
    const value = this.x40101067;
    if (value === undefined) {
      throw new Error('TransportClassification is undefined');
    }
    return value;
  }

  // Total Processing Time
  get TotalProcessingTime(): number | undefined {
    return this.x40101069;
  }

  get x40101069(): number | undefined {
    const value = this.dwResponse['40101069']?.Value;
    return convert(value?.[0], 0x40101069, 'number');
  }

  getTotalProcessingTime(): number {
    const value = this.x40101069;
    if (value === undefined) {
      throw new Error('TotalProcessingTime is undefined');
    }
    return value;
  }

  // Additional Screening Performed
  get AdditionalScreeningPerformed(): string | undefined {
    return this.x4010106d;
  }

  get x4010106d(): string | undefined {
    const value = this.dwResponse['4010106D']?.Value;
    return convert(value?.[0], 0x4010106d, 'string');
  }

  getAdditionalScreeningPerformed(): string {
    const value = this.x4010106d;
    if (value === undefined) {
      throw new Error('AdditionalScreeningPerformed is undefined');
    }
    return value;
  }

  // Additional Inspection Selection Criteria
  get AdditionalInspectionSelectionCriteria(): string | undefined {
    return this.x4010106e;
  }

  get x4010106e(): string | undefined {
    const value = this.dwResponse['4010106E']?.Value;
    return convert(value?.[0], 0x4010106e, 'string');
  }

  getAdditionalInspectionSelectionCriteria(): string {
    const value = this.x4010106e;
    if (value === undefined) {
      throw new Error('AdditionalInspectionSelectionCriteria is undefined');
    }
    return value;
  }

  // Additional Inspection Method Sequence
  get AdditionalInspectionMethodSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x4010106f;
  }

  get x4010106f(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['4010106F']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAdditionalInspectionMethodSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x4010106f;
    if (value === undefined) {
      throw new Error('AdditionalInspectionMethodSequence is undefined');
    }
    return value;
  }

  // AIT Device Type
  get AITDeviceType(): string | undefined {
    return this.x40101070;
  }

  get x40101070(): string | undefined {
    const value = this.dwResponse['40101070']?.Value;
    return convert(value?.[0], 0x40101070, 'string');
  }

  getAITDeviceType(): string {
    const value = this.x40101070;
    if (value === undefined) {
      throw new Error('AITDeviceType is undefined');
    }
    return value;
  }

  // QR Measurements Sequence
  get QRMeasurementsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x40101071;
  }

  get x40101071(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['40101071']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getQRMeasurementsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x40101071;
    if (value === undefined) {
      throw new Error('QRMeasurementsSequence is undefined');
    }
    return value;
  }

  // Target Material Sequence
  get TargetMaterialSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x40101072;
  }

  get x40101072(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['40101072']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getTargetMaterialSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x40101072;
    if (value === undefined) {
      throw new Error('TargetMaterialSequence is undefined');
    }
    return value;
  }

  // SNR Threshold
  get SNRThreshold(): number | undefined {
    return this.x40101073;
  }

  get x40101073(): number | undefined {
    const value = this.dwResponse['40101073']?.Value;
    return convert(value?.[0], 0x40101073, 'number');
  }

  getSNRThreshold(): number {
    const value = this.x40101073;
    if (value === undefined) {
      throw new Error('SNRThreshold is undefined');
    }
    return value;
  }

  // Image Scale Representation
  get ImageScaleRepresentation(): number | undefined {
    return this.x40101075;
  }

  get x40101075(): number | undefined {
    const value = this.dwResponse['40101075']?.Value;
    return convert(value?.[0], 0x40101075, 'number');
  }

  getImageScaleRepresentation(): number {
    const value = this.x40101075;
    if (value === undefined) {
      throw new Error('ImageScaleRepresentation is undefined');
    }
    return value;
  }

  // Referenced PTO Sequence
  get ReferencedPTOSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x40101076;
  }

  get x40101076(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['40101076']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedPTOSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x40101076;
    if (value === undefined) {
      throw new Error('ReferencedPTOSequence is undefined');
    }
    return value;
  }

  // Referenced TDR Instance Sequence
  get ReferencedTDRInstanceSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x40101077;
  }

  get x40101077(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['40101077']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getReferencedTDRInstanceSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x40101077;
    if (value === undefined) {
      throw new Error('ReferencedTDRInstanceSequence is undefined');
    }
    return value;
  }

  // Anomaly Locator Indicator Sequence
  get AnomalyLocatorIndicatorSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x40101079;
  }

  get x40101079(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['40101079']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getAnomalyLocatorIndicatorSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x40101079;
    if (value === undefined) {
      throw new Error('AnomalyLocatorIndicatorSequence is undefined');
    }
    return value;
  }

  // Anomaly Locator Indicator
  get AnomalyLocatorIndicator(): Array<number | undefined> | undefined {
    return this.x4010107a;
  }

  get x4010107a(): Array<number | undefined> | undefined {
    const value = this.dwResponse['4010107A']?.Value;
    return convert(value, 0x4010107a, 'Array<number | undefined>');
  }

  getAnomalyLocatorIndicator(): Array<number | undefined> {
    const value = this.x4010107a;
    if (value === undefined) {
      throw new Error('AnomalyLocatorIndicator is undefined');
    }
    return value;
  }

  // PTO Region Sequence
  get PTORegionSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x4010107b;
  }

  get x4010107b(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['4010107B']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPTORegionSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x4010107b;
    if (value === undefined) {
      throw new Error('PTORegionSequence is undefined');
    }
    return value;
  }

  // Inspection Selection Criteria
  get InspectionSelectionCriteria(): string | undefined {
    return this.x4010107c;
  }

  get x4010107c(): string | undefined {
    const value = this.dwResponse['4010107C']?.Value;
    return convert(value?.[0], 0x4010107c, 'string');
  }

  getInspectionSelectionCriteria(): string {
    const value = this.x4010107c;
    if (value === undefined) {
      throw new Error('InspectionSelectionCriteria is undefined');
    }
    return value;
  }

  // Secondary Inspection Method Sequence
  get SecondaryInspectionMethodSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x4010107d;
  }

  get x4010107d(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['4010107D']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSecondaryInspectionMethodSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x4010107d;
    if (value === undefined) {
      throw new Error('SecondaryInspectionMethodSequence is undefined');
    }
    return value;
  }

  // PRCS to RCS Orientation
  get PRCSToRCSOrientation(): Array<number | undefined> | undefined {
    return this.x4010107e;
  }

  get x4010107e(): Array<number | undefined> | undefined {
    const value = this.dwResponse['4010107E']?.Value;
    return convert(value, 0x4010107e, 'Array<number | undefined>');
  }

  getPRCSToRCSOrientation(): Array<number | undefined> {
    const value = this.x4010107e;
    if (value === undefined) {
      throw new Error('PRCSToRCSOrientation is undefined');
    }
    return value;
  }

  // MAC Parameters Sequence
  get MACParametersSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x4ffe0001;
  }

  get x4ffe0001(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['4FFE0001']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getMACParametersSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x4ffe0001;
    if (value === undefined) {
      throw new Error('MACParametersSequence is undefined');
    }
    return value;
  }

  // Curve Dimensions
  get CurveDimensions(): number | undefined {
    return this.x50xx0005;
  }

  get x50xx0005(): number | undefined {
    const value = this.dwResponse['50XX0005']?.Value;
    throw new Error('Unsupported field CurveDimensions (50xx0005)');
  }

  getCurveDimensions(): number {
    const value = this.x50xx0005;
    if (value === undefined) {
      throw new Error('CurveDimensions is undefined');
    }
    return value;
  }

  // Number of Points
  get NumberOfPoints(): number | undefined {
    return this.x50xx0010;
  }

  get x50xx0010(): number | undefined {
    const value = this.dwResponse['50XX0010']?.Value;
    throw new Error('Unsupported field NumberOfPoints (50xx0010)');
  }

  getNumberOfPoints(): number {
    const value = this.x50xx0010;
    if (value === undefined) {
      throw new Error('NumberOfPoints is undefined');
    }
    return value;
  }

  // Type of Data
  get TypeOfData(): string | undefined {
    return this.x50xx0020;
  }

  get x50xx0020(): string | undefined {
    const value = this.dwResponse['50XX0020']?.Value;
    throw new Error('Unsupported field TypeOfData (50xx0020)');
  }

  getTypeOfData(): string {
    const value = this.x50xx0020;
    if (value === undefined) {
      throw new Error('TypeOfData is undefined');
    }
    return value;
  }

  // Curve Description
  get CurveDescription(): string | undefined {
    return this.x50xx0022;
  }

  get x50xx0022(): string | undefined {
    const value = this.dwResponse['50XX0022']?.Value;
    throw new Error('Unsupported field CurveDescription (50xx0022)');
  }

  getCurveDescription(): string {
    const value = this.x50xx0022;
    if (value === undefined) {
      throw new Error('CurveDescription is undefined');
    }
    return value;
  }

  // Axis Units
  get AxisUnits(): Array<string | undefined> | undefined {
    return this.x50xx0030;
  }

  get x50xx0030(): Array<string | undefined> | undefined {
    const value = this.dwResponse['50XX0030']?.Value;
    throw new Error('Unsupported field AxisUnits (50xx0030)');
  }

  getAxisUnits(): Array<string | undefined> {
    const value = this.x50xx0030;
    if (value === undefined) {
      throw new Error('AxisUnits is undefined');
    }
    return value;
  }

  // Axis Labels
  get AxisLabels(): Array<string | undefined> | undefined {
    return this.x50xx0040;
  }

  get x50xx0040(): Array<string | undefined> | undefined {
    const value = this.dwResponse['50XX0040']?.Value;
    throw new Error('Unsupported field AxisLabels (50xx0040)');
  }

  getAxisLabels(): Array<string | undefined> {
    const value = this.x50xx0040;
    if (value === undefined) {
      throw new Error('AxisLabels is undefined');
    }
    return value;
  }

  // Data Value Representation
  get DataValueRepresentation(): number | undefined {
    return this.x50xx0103;
  }

  get x50xx0103(): number | undefined {
    const value = this.dwResponse['50XX0103']?.Value;
    throw new Error('Unsupported field DataValueRepresentation (50xx0103)');
  }

  getDataValueRepresentation(): number {
    const value = this.x50xx0103;
    if (value === undefined) {
      throw new Error('DataValueRepresentation is undefined');
    }
    return value;
  }

  // Minimum Coordinate Value
  get MinimumCoordinateValue(): Array<number | undefined> | undefined {
    return this.x50xx0104;
  }

  get x50xx0104(): Array<number | undefined> | undefined {
    const value = this.dwResponse['50XX0104']?.Value;
    throw new Error('Unsupported field MinimumCoordinateValue (50xx0104)');
  }

  getMinimumCoordinateValue(): Array<number | undefined> {
    const value = this.x50xx0104;
    if (value === undefined) {
      throw new Error('MinimumCoordinateValue is undefined');
    }
    return value;
  }

  // Maximum Coordinate Value
  get MaximumCoordinateValue(): Array<number | undefined> | undefined {
    return this.x50xx0105;
  }

  get x50xx0105(): Array<number | undefined> | undefined {
    const value = this.dwResponse['50XX0105']?.Value;
    throw new Error('Unsupported field MaximumCoordinateValue (50xx0105)');
  }

  getMaximumCoordinateValue(): Array<number | undefined> {
    const value = this.x50xx0105;
    if (value === undefined) {
      throw new Error('MaximumCoordinateValue is undefined');
    }
    return value;
  }

  // Curve Range
  get CurveRange(): Array<string | undefined> | undefined {
    return this.x50xx0106;
  }

  get x50xx0106(): Array<string | undefined> | undefined {
    const value = this.dwResponse['50XX0106']?.Value;
    throw new Error('Unsupported field CurveRange (50xx0106)');
  }

  getCurveRange(): Array<string | undefined> {
    const value = this.x50xx0106;
    if (value === undefined) {
      throw new Error('CurveRange is undefined');
    }
    return value;
  }

  // Curve Data Descriptor
  get CurveDataDescriptor(): Array<number | undefined> | undefined {
    return this.x50xx0110;
  }

  get x50xx0110(): Array<number | undefined> | undefined {
    const value = this.dwResponse['50XX0110']?.Value;
    throw new Error('Unsupported field CurveDataDescriptor (50xx0110)');
  }

  getCurveDataDescriptor(): Array<number | undefined> {
    const value = this.x50xx0110;
    if (value === undefined) {
      throw new Error('CurveDataDescriptor is undefined');
    }
    return value;
  }

  // Coordinate Start Value
  get CoordinateStartValue(): Array<number | undefined> | undefined {
    return this.x50xx0112;
  }

  get x50xx0112(): Array<number | undefined> | undefined {
    const value = this.dwResponse['50XX0112']?.Value;
    throw new Error('Unsupported field CoordinateStartValue (50xx0112)');
  }

  getCoordinateStartValue(): Array<number | undefined> {
    const value = this.x50xx0112;
    if (value === undefined) {
      throw new Error('CoordinateStartValue is undefined');
    }
    return value;
  }

  // Coordinate Step Value
  get CoordinateStepValue(): Array<number | undefined> | undefined {
    return this.x50xx0114;
  }

  get x50xx0114(): Array<number | undefined> | undefined {
    const value = this.dwResponse['50XX0114']?.Value;
    throw new Error('Unsupported field CoordinateStepValue (50xx0114)');
  }

  getCoordinateStepValue(): Array<number | undefined> {
    const value = this.x50xx0114;
    if (value === undefined) {
      throw new Error('CoordinateStepValue is undefined');
    }
    return value;
  }

  // Curve Activation Layer
  get CurveActivationLayer(): string | undefined {
    return this.x50xx1001;
  }

  get x50xx1001(): string | undefined {
    const value = this.dwResponse['50XX1001']?.Value;
    throw new Error('Unsupported field CurveActivationLayer (50xx1001)');
  }

  getCurveActivationLayer(): string {
    const value = this.x50xx1001;
    if (value === undefined) {
      throw new Error('CurveActivationLayer is undefined');
    }
    return value;
  }

  // Audio Type
  get AudioType(): number | undefined {
    return this.x50xx2000;
  }

  get x50xx2000(): number | undefined {
    const value = this.dwResponse['50XX2000']?.Value;
    throw new Error('Unsupported field AudioType (50xx2000)');
  }

  getAudioType(): number {
    const value = this.x50xx2000;
    if (value === undefined) {
      throw new Error('AudioType is undefined');
    }
    return value;
  }

  // Audio Sample Format
  get AudioSampleFormat(): number | undefined {
    return this.x50xx2002;
  }

  get x50xx2002(): number | undefined {
    const value = this.dwResponse['50XX2002']?.Value;
    throw new Error('Unsupported field AudioSampleFormat (50xx2002)');
  }

  getAudioSampleFormat(): number {
    const value = this.x50xx2002;
    if (value === undefined) {
      throw new Error('AudioSampleFormat is undefined');
    }
    return value;
  }

  // Number of Channels
  get NumberOfChannels(): number | undefined {
    return this.x50xx2004;
  }

  get x50xx2004(): number | undefined {
    const value = this.dwResponse['50XX2004']?.Value;
    throw new Error('Unsupported field NumberOfChannels (50xx2004)');
  }

  getNumberOfChannels(): number {
    const value = this.x50xx2004;
    if (value === undefined) {
      throw new Error('NumberOfChannels is undefined');
    }
    return value;
  }

  // Number of Samples
  get NumberOfSamples(): number | undefined {
    return this.x50xx2006;
  }

  get x50xx2006(): number | undefined {
    const value = this.dwResponse['50XX2006']?.Value;
    throw new Error('Unsupported field NumberOfSamples (50xx2006)');
  }

  getNumberOfSamples(): number {
    const value = this.x50xx2006;
    if (value === undefined) {
      throw new Error('NumberOfSamples is undefined');
    }
    return value;
  }

  // Sample Rate
  get SampleRate(): number | undefined {
    return this.x50xx2008;
  }

  get x50xx2008(): number | undefined {
    const value = this.dwResponse['50XX2008']?.Value;
    throw new Error('Unsupported field SampleRate (50xx2008)');
  }

  getSampleRate(): number {
    const value = this.x50xx2008;
    if (value === undefined) {
      throw new Error('SampleRate is undefined');
    }
    return value;
  }

  // Total Time
  get TotalTime(): number | undefined {
    return this.x50xx200a;
  }

  get x50xx200a(): number | undefined {
    const value = this.dwResponse['50XX200A']?.Value;
    throw new Error('Unsupported field TotalTime (50xx200A)');
  }

  getTotalTime(): number {
    const value = this.x50xx200a;
    if (value === undefined) {
      throw new Error('TotalTime is undefined');
    }
    return value;
  }

  // Curve Label
  get CurveLabel(): string | undefined {
    return this.x50xx2500;
  }

  get x50xx2500(): string | undefined {
    const value = this.dwResponse['50XX2500']?.Value;
    throw new Error('Unsupported field CurveLabel (50xx2500)');
  }

  getCurveLabel(): string {
    const value = this.x50xx2500;
    if (value === undefined) {
      throw new Error('CurveLabel is undefined');
    }
    return value;
  }

  // Curve Referenced Overlay Sequence
  get CurveReferencedOverlaySequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x50xx2600;
  }

  get x50xx2600(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['50XX2600']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getCurveReferencedOverlaySequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x50xx2600;
    if (value === undefined) {
      throw new Error('CurveReferencedOverlaySequence is undefined');
    }
    return value;
  }

  // Curve Referenced Overlay Group
  get CurveReferencedOverlayGroup(): number | undefined {
    return this.x50xx2610;
  }

  get x50xx2610(): number | undefined {
    const value = this.dwResponse['50XX2610']?.Value;
    throw new Error('Unsupported field CurveReferencedOverlayGroup (50xx2610)');
  }

  getCurveReferencedOverlayGroup(): number {
    const value = this.x50xx2610;
    if (value === undefined) {
      throw new Error('CurveReferencedOverlayGroup is undefined');
    }
    return value;
  }

  // Shared Functional Groups Sequence
  get SharedFunctionalGroupsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x52009229;
  }

  get x52009229(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['52009229']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getSharedFunctionalGroupsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x52009229;
    if (value === undefined) {
      throw new Error('SharedFunctionalGroupsSequence is undefined');
    }
    return value;
  }

  // Per-frame Functional Groups Sequence
  get PerFrameFunctionalGroupsSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x52009230;
  }

  get x52009230(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['52009230']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getPerFrameFunctionalGroupsSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x52009230;
    if (value === undefined) {
      throw new Error('PerFrameFunctionalGroupsSequence is undefined');
    }
    return value;
  }

  // Waveform Sequence
  get WaveformSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.x54000100;
  }

  get x54000100(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['54000100']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getWaveformSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.x54000100;
    if (value === undefined) {
      throw new Error('WaveformSequence is undefined');
    }
    return value;
  }

  // Waveform Bits Allocated
  get WaveformBitsAllocated(): number | undefined {
    return this.x54001004;
  }

  get x54001004(): number | undefined {
    const value = this.dwResponse['54001004']?.Value;
    return convert(value?.[0], 0x54001004, 'number');
  }

  getWaveformBitsAllocated(): number {
    const value = this.x54001004;
    if (value === undefined) {
      throw new Error('WaveformBitsAllocated is undefined');
    }
    return value;
  }

  // Waveform Sample Interpretation
  get WaveformSampleInterpretation(): string | undefined {
    return this.x54001006;
  }

  get x54001006(): string | undefined {
    const value = this.dwResponse['54001006']?.Value;
    return convert(value?.[0], 0x54001006, 'string');
  }

  getWaveformSampleInterpretation(): string {
    const value = this.x54001006;
    if (value === undefined) {
      throw new Error('WaveformSampleInterpretation is undefined');
    }
    return value;
  }

  // Overlay Rows
  get OverlayRows(): number | undefined {
    return this.x60xx0010;
  }

  get x60xx0010(): number | undefined {
    const value = this.dwResponse['60XX0010']?.Value;
    throw new Error('Unsupported field OverlayRows (60xx0010)');
  }

  getOverlayRows(): number {
    const value = this.x60xx0010;
    if (value === undefined) {
      throw new Error('OverlayRows is undefined');
    }
    return value;
  }

  // Overlay Columns
  get OverlayColumns(): number | undefined {
    return this.x60xx0011;
  }

  get x60xx0011(): number | undefined {
    const value = this.dwResponse['60XX0011']?.Value;
    throw new Error('Unsupported field OverlayColumns (60xx0011)');
  }

  getOverlayColumns(): number {
    const value = this.x60xx0011;
    if (value === undefined) {
      throw new Error('OverlayColumns is undefined');
    }
    return value;
  }

  // Overlay Planes
  get OverlayPlanes(): number | undefined {
    return this.x60xx0012;
  }

  get x60xx0012(): number | undefined {
    const value = this.dwResponse['60XX0012']?.Value;
    throw new Error('Unsupported field OverlayPlanes (60xx0012)');
  }

  getOverlayPlanes(): number {
    const value = this.x60xx0012;
    if (value === undefined) {
      throw new Error('OverlayPlanes is undefined');
    }
    return value;
  }

  // Number of Frames in Overlay
  get NumberOfFramesInOverlay(): number | undefined {
    return this.x60xx0015;
  }

  get x60xx0015(): number | undefined {
    const value = this.dwResponse['60XX0015']?.Value;
    throw new Error('Unsupported field NumberOfFramesInOverlay (60xx0015)');
  }

  getNumberOfFramesInOverlay(): number {
    const value = this.x60xx0015;
    if (value === undefined) {
      throw new Error('NumberOfFramesInOverlay is undefined');
    }
    return value;
  }

  // Overlay Description
  get OverlayDescription(): string | undefined {
    return this.x60xx0022;
  }

  get x60xx0022(): string | undefined {
    const value = this.dwResponse['60XX0022']?.Value;
    throw new Error('Unsupported field OverlayDescription (60xx0022)');
  }

  getOverlayDescription(): string {
    const value = this.x60xx0022;
    if (value === undefined) {
      throw new Error('OverlayDescription is undefined');
    }
    return value;
  }

  // Overlay Type
  get OverlayType(): string | undefined {
    return this.x60xx0040;
  }

  get x60xx0040(): string | undefined {
    const value = this.dwResponse['60XX0040']?.Value;
    throw new Error('Unsupported field OverlayType (60xx0040)');
  }

  getOverlayType(): string {
    const value = this.x60xx0040;
    if (value === undefined) {
      throw new Error('OverlayType is undefined');
    }
    return value;
  }

  // Overlay Subtype
  get OverlaySubtype(): string | undefined {
    return this.x60xx0045;
  }

  get x60xx0045(): string | undefined {
    const value = this.dwResponse['60XX0045']?.Value;
    throw new Error('Unsupported field OverlaySubtype (60xx0045)');
  }

  getOverlaySubtype(): string {
    const value = this.x60xx0045;
    if (value === undefined) {
      throw new Error('OverlaySubtype is undefined');
    }
    return value;
  }

  // Overlay Origin
  get OverlayOrigin(): Array<Uint8Array | undefined> | undefined {
    return this.x60xx0050;
  }

  get x60xx0050(): Array<Uint8Array | undefined> | undefined {
    const value = this.dwResponse['60XX0050']?.Value;
    throw new Error('Unsupported field OverlayOrigin (60xx0050)');
  }

  getOverlayOrigin(): Array<Uint8Array | undefined> {
    const value = this.x60xx0050;
    if (value === undefined) {
      throw new Error('OverlayOrigin is undefined');
    }
    return value;
  }

  // Image Frame Origin
  get ImageFrameOrigin(): number | undefined {
    return this.x60xx0051;
  }

  get x60xx0051(): number | undefined {
    const value = this.dwResponse['60XX0051']?.Value;
    throw new Error('Unsupported field ImageFrameOrigin (60xx0051)');
  }

  getImageFrameOrigin(): number {
    const value = this.x60xx0051;
    if (value === undefined) {
      throw new Error('ImageFrameOrigin is undefined');
    }
    return value;
  }

  // Overlay Plane Origin
  get OverlayPlaneOrigin(): number | undefined {
    return this.x60xx0052;
  }

  get x60xx0052(): number | undefined {
    const value = this.dwResponse['60XX0052']?.Value;
    throw new Error('Unsupported field OverlayPlaneOrigin (60xx0052)');
  }

  getOverlayPlaneOrigin(): number {
    const value = this.x60xx0052;
    if (value === undefined) {
      throw new Error('OverlayPlaneOrigin is undefined');
    }
    return value;
  }

  // Overlay Compression Code
  get OverlayCompressionCode(): string | undefined {
    return this.x60xx0060;
  }

  get x60xx0060(): string | undefined {
    const value = this.dwResponse['60XX0060']?.Value;
    throw new Error('Unsupported field OverlayCompressionCode (60xx0060)');
  }

  getOverlayCompressionCode(): string {
    const value = this.x60xx0060;
    if (value === undefined) {
      throw new Error('OverlayCompressionCode is undefined');
    }
    return value;
  }

  // Overlay Compression Originator
  get OverlayCompressionOriginator(): string | undefined {
    return this.x60xx0061;
  }

  get x60xx0061(): string | undefined {
    const value = this.dwResponse['60XX0061']?.Value;
    throw new Error('Unsupported field OverlayCompressionOriginator (60xx0061)');
  }

  getOverlayCompressionOriginator(): string {
    const value = this.x60xx0061;
    if (value === undefined) {
      throw new Error('OverlayCompressionOriginator is undefined');
    }
    return value;
  }

  // Overlay Compression Label
  get OverlayCompressionLabel(): string | undefined {
    return this.x60xx0062;
  }

  get x60xx0062(): string | undefined {
    const value = this.dwResponse['60XX0062']?.Value;
    throw new Error('Unsupported field OverlayCompressionLabel (60xx0062)');
  }

  getOverlayCompressionLabel(): string {
    const value = this.x60xx0062;
    if (value === undefined) {
      throw new Error('OverlayCompressionLabel is undefined');
    }
    return value;
  }

  // Overlay Compression Description
  get OverlayCompressionDescription(): string | undefined {
    return this.x60xx0063;
  }

  get x60xx0063(): string | undefined {
    const value = this.dwResponse['60XX0063']?.Value;
    throw new Error('Unsupported field OverlayCompressionDescription (60xx0063)');
  }

  getOverlayCompressionDescription(): string {
    const value = this.x60xx0063;
    if (value === undefined) {
      throw new Error('OverlayCompressionDescription is undefined');
    }
    return value;
  }

  // Overlay Compression Step Pointers
  get OverlayCompressionStepPointers(): Array<Uint16Array | undefined> | undefined {
    return this.x60xx0066;
  }

  get x60xx0066(): Array<Uint16Array | undefined> | undefined {
    const value = this.dwResponse['60XX0066']?.Value;
    throw new Error('Unsupported field OverlayCompressionStepPointers (60xx0066)');
  }

  getOverlayCompressionStepPointers(): Array<Uint16Array | undefined> {
    const value = this.x60xx0066;
    if (value === undefined) {
      throw new Error('OverlayCompressionStepPointers is undefined');
    }
    return value;
  }

  // Overlay Repeat Interval
  get OverlayRepeatInterval(): number | undefined {
    return this.x60xx0068;
  }

  get x60xx0068(): number | undefined {
    const value = this.dwResponse['60XX0068']?.Value;
    throw new Error('Unsupported field OverlayRepeatInterval (60xx0068)');
  }

  getOverlayRepeatInterval(): number {
    const value = this.x60xx0068;
    if (value === undefined) {
      throw new Error('OverlayRepeatInterval is undefined');
    }
    return value;
  }

  // Overlay Bits Grouped
  get OverlayBitsGrouped(): number | undefined {
    return this.x60xx0069;
  }

  get x60xx0069(): number | undefined {
    const value = this.dwResponse['60XX0069']?.Value;
    throw new Error('Unsupported field OverlayBitsGrouped (60xx0069)');
  }

  getOverlayBitsGrouped(): number {
    const value = this.x60xx0069;
    if (value === undefined) {
      throw new Error('OverlayBitsGrouped is undefined');
    }
    return value;
  }

  // Overlay Bits Allocated
  get OverlayBitsAllocated(): number | undefined {
    return this.x60xx0100;
  }

  get x60xx0100(): number | undefined {
    const value = this.dwResponse['60XX0100']?.Value;
    throw new Error('Unsupported field OverlayBitsAllocated (60xx0100)');
  }

  getOverlayBitsAllocated(): number {
    const value = this.x60xx0100;
    if (value === undefined) {
      throw new Error('OverlayBitsAllocated is undefined');
    }
    return value;
  }

  // Overlay Bit Position
  get OverlayBitPosition(): number | undefined {
    return this.x60xx0102;
  }

  get x60xx0102(): number | undefined {
    const value = this.dwResponse['60XX0102']?.Value;
    throw new Error('Unsupported field OverlayBitPosition (60xx0102)');
  }

  getOverlayBitPosition(): number {
    const value = this.x60xx0102;
    if (value === undefined) {
      throw new Error('OverlayBitPosition is undefined');
    }
    return value;
  }

  // Overlay Format
  get OverlayFormat(): string | undefined {
    return this.x60xx0110;
  }

  get x60xx0110(): string | undefined {
    const value = this.dwResponse['60XX0110']?.Value;
    throw new Error('Unsupported field OverlayFormat (60xx0110)');
  }

  getOverlayFormat(): string {
    const value = this.x60xx0110;
    if (value === undefined) {
      throw new Error('OverlayFormat is undefined');
    }
    return value;
  }

  // Overlay Location
  get OverlayLocation(): number | undefined {
    return this.x60xx0200;
  }

  get x60xx0200(): number | undefined {
    const value = this.dwResponse['60XX0200']?.Value;
    throw new Error('Unsupported field OverlayLocation (60xx0200)');
  }

  getOverlayLocation(): number {
    const value = this.x60xx0200;
    if (value === undefined) {
      throw new Error('OverlayLocation is undefined');
    }
    return value;
  }

  // Overlay Code Label
  get OverlayCodeLabel(): Array<string | undefined> | undefined {
    return this.x60xx0800;
  }

  get x60xx0800(): Array<string | undefined> | undefined {
    const value = this.dwResponse['60XX0800']?.Value;
    throw new Error('Unsupported field OverlayCodeLabel (60xx0800)');
  }

  getOverlayCodeLabel(): Array<string | undefined> {
    const value = this.x60xx0800;
    if (value === undefined) {
      throw new Error('OverlayCodeLabel is undefined');
    }
    return value;
  }

  // Overlay Number of Tables
  get OverlayNumberOfTables(): number | undefined {
    return this.x60xx0802;
  }

  get x60xx0802(): number | undefined {
    const value = this.dwResponse['60XX0802']?.Value;
    throw new Error('Unsupported field OverlayNumberOfTables (60xx0802)');
  }

  getOverlayNumberOfTables(): number {
    const value = this.x60xx0802;
    if (value === undefined) {
      throw new Error('OverlayNumberOfTables is undefined');
    }
    return value;
  }

  // Overlay Code Table Location
  get OverlayCodeTableLocation(): Array<Uint16Array | undefined> | undefined {
    return this.x60xx0803;
  }

  get x60xx0803(): Array<Uint16Array | undefined> | undefined {
    const value = this.dwResponse['60XX0803']?.Value;
    throw new Error('Unsupported field OverlayCodeTableLocation (60xx0803)');
  }

  getOverlayCodeTableLocation(): Array<Uint16Array | undefined> {
    const value = this.x60xx0803;
    if (value === undefined) {
      throw new Error('OverlayCodeTableLocation is undefined');
    }
    return value;
  }

  // Overlay Bits For Code Word
  get OverlayBitsForCodeWord(): number | undefined {
    return this.x60xx0804;
  }

  get x60xx0804(): number | undefined {
    const value = this.dwResponse['60XX0804']?.Value;
    throw new Error('Unsupported field OverlayBitsForCodeWord (60xx0804)');
  }

  getOverlayBitsForCodeWord(): number {
    const value = this.x60xx0804;
    if (value === undefined) {
      throw new Error('OverlayBitsForCodeWord is undefined');
    }
    return value;
  }

  // Overlay Activation Layer
  get OverlayActivationLayer(): string | undefined {
    return this.x60xx1001;
  }

  get x60xx1001(): string | undefined {
    const value = this.dwResponse['60XX1001']?.Value;
    throw new Error('Unsupported field OverlayActivationLayer (60xx1001)');
  }

  getOverlayActivationLayer(): string {
    const value = this.x60xx1001;
    if (value === undefined) {
      throw new Error('OverlayActivationLayer is undefined');
    }
    return value;
  }

  // Overlay Descriptor - Gray
  get OverlayDescriptorGray(): number | undefined {
    return this.x60xx1100;
  }

  get x60xx1100(): number | undefined {
    const value = this.dwResponse['60XX1100']?.Value;
    throw new Error('Unsupported field OverlayDescriptorGray (60xx1100)');
  }

  getOverlayDescriptorGray(): number {
    const value = this.x60xx1100;
    if (value === undefined) {
      throw new Error('OverlayDescriptorGray is undefined');
    }
    return value;
  }

  // Overlay Descriptor - Red
  get OverlayDescriptorRed(): number | undefined {
    return this.x60xx1101;
  }

  get x60xx1101(): number | undefined {
    const value = this.dwResponse['60XX1101']?.Value;
    throw new Error('Unsupported field OverlayDescriptorRed (60xx1101)');
  }

  getOverlayDescriptorRed(): number {
    const value = this.x60xx1101;
    if (value === undefined) {
      throw new Error('OverlayDescriptorRed is undefined');
    }
    return value;
  }

  // Overlay Descriptor - Green
  get OverlayDescriptorGreen(): number | undefined {
    return this.x60xx1102;
  }

  get x60xx1102(): number | undefined {
    const value = this.dwResponse['60XX1102']?.Value;
    throw new Error('Unsupported field OverlayDescriptorGreen (60xx1102)');
  }

  getOverlayDescriptorGreen(): number {
    const value = this.x60xx1102;
    if (value === undefined) {
      throw new Error('OverlayDescriptorGreen is undefined');
    }
    return value;
  }

  // Overlay Descriptor - Blue
  get OverlayDescriptorBlue(): number | undefined {
    return this.x60xx1103;
  }

  get x60xx1103(): number | undefined {
    const value = this.dwResponse['60XX1103']?.Value;
    throw new Error('Unsupported field OverlayDescriptorBlue (60xx1103)');
  }

  getOverlayDescriptorBlue(): number {
    const value = this.x60xx1103;
    if (value === undefined) {
      throw new Error('OverlayDescriptorBlue is undefined');
    }
    return value;
  }

  // Overlays - Gray
  get OverlaysGray(): Array<number | undefined> | undefined {
    return this.x60xx1200;
  }

  get x60xx1200(): Array<number | undefined> | undefined {
    const value = this.dwResponse['60XX1200']?.Value;
    throw new Error('Unsupported field OverlaysGray (60xx1200)');
  }

  getOverlaysGray(): Array<number | undefined> {
    const value = this.x60xx1200;
    if (value === undefined) {
      throw new Error('OverlaysGray is undefined');
    }
    return value;
  }

  // Overlays - Red
  get OverlaysRed(): Array<number | undefined> | undefined {
    return this.x60xx1201;
  }

  get x60xx1201(): Array<number | undefined> | undefined {
    const value = this.dwResponse['60XX1201']?.Value;
    throw new Error('Unsupported field OverlaysRed (60xx1201)');
  }

  getOverlaysRed(): Array<number | undefined> {
    const value = this.x60xx1201;
    if (value === undefined) {
      throw new Error('OverlaysRed is undefined');
    }
    return value;
  }

  // Overlays - Green
  get OverlaysGreen(): Array<number | undefined> | undefined {
    return this.x60xx1202;
  }

  get x60xx1202(): Array<number | undefined> | undefined {
    const value = this.dwResponse['60XX1202']?.Value;
    throw new Error('Unsupported field OverlaysGreen (60xx1202)');
  }

  getOverlaysGreen(): Array<number | undefined> {
    const value = this.x60xx1202;
    if (value === undefined) {
      throw new Error('OverlaysGreen is undefined');
    }
    return value;
  }

  // Overlays - Blue
  get OverlaysBlue(): Array<number | undefined> | undefined {
    return this.x60xx1203;
  }

  get x60xx1203(): Array<number | undefined> | undefined {
    const value = this.dwResponse['60XX1203']?.Value;
    throw new Error('Unsupported field OverlaysBlue (60xx1203)');
  }

  getOverlaysBlue(): Array<number | undefined> {
    const value = this.x60xx1203;
    if (value === undefined) {
      throw new Error('OverlaysBlue is undefined');
    }
    return value;
  }

  // ROI Area
  get ROIArea(): number | undefined {
    return this.x60xx1301;
  }

  get x60xx1301(): number | undefined {
    const value = this.dwResponse['60XX1301']?.Value;
    throw new Error('Unsupported field ROIArea (60xx1301)');
  }

  getROIArea(): number {
    const value = this.x60xx1301;
    if (value === undefined) {
      throw new Error('ROIArea is undefined');
    }
    return value;
  }

  // ROI Mean
  get ROIMean(): number | undefined {
    return this.x60xx1302;
  }

  get x60xx1302(): number | undefined {
    const value = this.dwResponse['60XX1302']?.Value;
    throw new Error('Unsupported field ROIMean (60xx1302)');
  }

  getROIMean(): number {
    const value = this.x60xx1302;
    if (value === undefined) {
      throw new Error('ROIMean is undefined');
    }
    return value;
  }

  // ROI Standard Deviation
  get ROIStandardDeviation(): number | undefined {
    return this.x60xx1303;
  }

  get x60xx1303(): number | undefined {
    const value = this.dwResponse['60XX1303']?.Value;
    throw new Error('Unsupported field ROIStandardDeviation (60xx1303)');
  }

  getROIStandardDeviation(): number {
    const value = this.x60xx1303;
    if (value === undefined) {
      throw new Error('ROIStandardDeviation is undefined');
    }
    return value;
  }

  // Overlay Label
  get OverlayLabel(): string | undefined {
    return this.x60xx1500;
  }

  get x60xx1500(): string | undefined {
    const value = this.dwResponse['60XX1500']?.Value;
    throw new Error('Unsupported field OverlayLabel (60xx1500)');
  }

  getOverlayLabel(): string {
    const value = this.x60xx1500;
    if (value === undefined) {
      throw new Error('OverlayLabel is undefined');
    }
    return value;
  }

  // Variable Next Data Group
  get VariableNextDataGroup(): number | undefined {
    return this.x7fxx0011;
  }

  get x7fxx0011(): number | undefined {
    const value = this.dwResponse['7FXX0011']?.Value;
    throw new Error('Unsupported field VariableNextDataGroup (7Fxx0011)');
  }

  getVariableNextDataGroup(): number {
    const value = this.x7fxx0011;
    if (value === undefined) {
      throw new Error('VariableNextDataGroup is undefined');
    }
    return value;
  }

  // Digital Signatures Sequence
  get DigitalSignaturesSequence(): Array<Partial<Dataset> | undefined> | undefined {
    return this.xfffafffa;
  }

  get xfffafffa(): Array<Partial<Dataset> | undefined> | undefined {
    const value = this.dwResponse['FFFAFFFA']?.Value;
    
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    
  }

  getDigitalSignaturesSequence(): Array<Partial<Dataset> | undefined> {
    const value = this.xfffafffa;
    if (value === undefined) {
      throw new Error('DigitalSignaturesSequence is undefined');
    }
    return value;
  }


  // Bulkdata ------------------------------------------------------------------

  // File Meta Information Version
  get FileMetaInformationVersion(): Uint8Array | string | undefined {
    return this.x00020001;
  }

  get x00020001(): Uint8Array | string | undefined {
    const element = this.dwResponse['00020001'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getFileMetaInformationVersion(): Promise<Uint8Array> {
    const element = this.dwResponse['00020001'];
    if (typeof element !== 'string') {
      return this.x00020001 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00020001'] = { Value: [value], vr: 'OB' };
    return value;
    
  }

  // Private Information
  get PrivateInformation(): Uint8Array | string | undefined {
    return this.x00020102;
  }

  get x00020102(): Uint8Array | string | undefined {
    const element = this.dwResponse['00020102'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getPrivateInformation(): Promise<Uint8Array> {
    const element = this.dwResponse['00020102'];
    if (typeof element !== 'string') {
      return this.x00020102 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00020102'] = { Value: [value], vr: 'OB' };
    return value;
    
  }

  // Institution Address
  get InstitutionAddress(): string | string | undefined {
    return this.x00080081;
  }

  get x00080081(): string | string | undefined {
    const element = this.dwResponse['00080081'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getInstitutionAddress(): Promise<string> {
    const element = this.dwResponse['00080081'];
    if (typeof element !== 'string') {
      return this.x00080081 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00080081'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Referring Physician's Address
  get ReferringPhysicianAddress(): string | string | undefined {
    return this.x00080092;
  }

  get x00080092(): string | string | undefined {
    const element = this.dwResponse['00080092'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getReferringPhysicianAddress(): Promise<string> {
    const element = this.dwResponse['00080092'];
    if (typeof element !== 'string') {
      return this.x00080092 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00080092'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Extended Code Meaning
  get ExtendedCodeMeaning(): string | string | undefined {
    return this.x00080108;
  }

  get x00080108(): string | string | undefined {
    const element = this.dwResponse['00080108'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getExtendedCodeMeaning(): Promise<string> {
    const element = this.dwResponse['00080108'];
    if (typeof element !== 'string') {
      return this.x00080108 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00080108'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Coding Scheme External ID
  get CodingSchemeExternalID(): string | string | undefined {
    return this.x00080114;
  }

  get x00080114(): string | string | undefined {
    const element = this.dwResponse['00080114'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCodingSchemeExternalID(): Promise<string> {
    const element = this.dwResponse['00080114'];
    if (typeof element !== 'string') {
      return this.x00080114 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00080114'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Coding Scheme Name
  get CodingSchemeName(): string | string | undefined {
    return this.x00080115;
  }

  get x00080115(): string | string | undefined {
    const element = this.dwResponse['00080115'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCodingSchemeName(): Promise<string> {
    const element = this.dwResponse['00080115'];
    if (typeof element !== 'string') {
      return this.x00080115 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00080115'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Coding Scheme Responsible Organization
  get CodingSchemeResponsibleOrganization(): string | string | undefined {
    return this.x00080116;
  }

  get x00080116(): string | string | undefined {
    const element = this.dwResponse['00080116'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCodingSchemeResponsibleOrganization(): Promise<string> {
    const element = this.dwResponse['00080116'];
    if (typeof element !== 'string') {
      return this.x00080116 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00080116'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Retrieve URL
  get RetrieveURL(): string | string | undefined {
    return this.x00081190;
  }

  get x00081190(): string | string | undefined {
    const element = this.dwResponse['00081190'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getRetrieveURL(): Promise<string> {
    const element = this.dwResponse['00081190'];
    if (typeof element !== 'string') {
      return this.x00081190 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00081190'] = { Value: [value], vr: 'UT' };
    return value;
    
  }

  // Derivation Description
  get DerivationDescription(): string | string | undefined {
    return this.x00082111;
  }

  get x00082111(): string | string | undefined {
    const element = this.dwResponse['00082111'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getDerivationDescription(): Promise<string> {
    const element = this.dwResponse['00082111'];
    if (typeof element !== 'string') {
      return this.x00082111 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00082111'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Anatomic Perspective Description (Trial)
  get AnatomicPerspectiveDescriptionTrial(): string | string | undefined {
    return this.x00082256;
  }

  get x00082256(): string | string | undefined {
    const element = this.dwResponse['00082256'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getAnatomicPerspectiveDescriptionTrial(): Promise<string> {
    const element = this.dwResponse['00082256'];
    if (typeof element !== 'string') {
      return this.x00082256 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00082256'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Anatomic Location Of Examining Instrument Description (Trial)
  get AnatomicLocationOfExaminingInstrumentDescriptionTrial(): string | string | undefined {
    return this.x00082258;
  }

  get x00082258(): string | string | undefined {
    const element = this.dwResponse['00082258'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getAnatomicLocationOfExaminingInstrumentDescriptionTrial(): Promise<string> {
    const element = this.dwResponse['00082258'];
    if (typeof element !== 'string') {
      return this.x00082258 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00082258'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Identifying Comments
  get IdentifyingComments(): string | string | undefined {
    return this.x00084000;
  }

  get x00084000(): string | string | undefined {
    const element = this.dwResponse['00084000'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getIdentifyingComments(): Promise<string> {
    const element = this.dwResponse['00084000'];
    if (typeof element !== 'string') {
      return this.x00084000 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00084000'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Additional Patient History
  get AdditionalPatientHistory(): string | string | undefined {
    return this.x001021b0;
  }

  get x001021b0(): string | string | undefined {
    const element = this.dwResponse['001021B0'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getAdditionalPatientHistory(): Promise<string> {
    const element = this.dwResponse['001021B0'];
    if (typeof element !== 'string') {
      return this.x001021b0 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['001021B0'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Patient Comments
  get PatientComments(): string | string | undefined {
    return this.x00104000;
  }

  get x00104000(): string | string | undefined {
    const element = this.dwResponse['00104000'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getPatientComments(): Promise<string> {
    const element = this.dwResponse['00104000'];
    if (typeof element !== 'string') {
      return this.x00104000 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00104000'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Clinical Trial Time Point Description
  get ClinicalTrialTimePointDescription(): string | string | undefined {
    return this.x00120051;
  }

  get x00120051(): string | string | undefined {
    const element = this.dwResponse['00120051'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getClinicalTrialTimePointDescription(): Promise<string> {
    const element = this.dwResponse['00120051'];
    if (typeof element !== 'string') {
      return this.x00120051 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00120051'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // CAD File Format
  get CADFileFormat(): Array<string | undefined> | string | undefined {
    return this.x00140023;
  }

  get x00140023(): Array<string | undefined> | string | undefined {
    const element = this.dwResponse['00140023'];
    return element === undefined || typeof element === 'string' ? element : element.Value as any;
  }

  async getCADFileFormat(): Promise<Array<string | undefined>> {
    const element = this.dwResponse['00140023'];
    if (typeof element !== 'string') {
      return this.x00140023 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Component Reference System
  get ComponentReferenceSystem(): Array<string | undefined> | string | undefined {
    return this.x00140024;
  }

  get x00140024(): Array<string | undefined> | string | undefined {
    const element = this.dwResponse['00140024'];
    return element === undefined || typeof element === 'string' ? element : element.Value as any;
  }

  async getComponentReferenceSystem(): Promise<Array<string | undefined>> {
    const element = this.dwResponse['00140024'];
    if (typeof element !== 'string') {
      return this.x00140024 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Component Manufacturing Procedure
  get ComponentManufacturingProcedure(): Array<string | undefined> | string | undefined {
    return this.x00140025;
  }

  get x00140025(): Array<string | undefined> | string | undefined {
    const element = this.dwResponse['00140025'];
    return element === undefined || typeof element === 'string' ? element : element.Value as any;
  }

  async getComponentManufacturingProcedure(): Promise<Array<string | undefined>> {
    const element = this.dwResponse['00140025'];
    if (typeof element !== 'string') {
      return this.x00140025 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Component Manufacturer
  get ComponentManufacturer(): Array<string | undefined> | string | undefined {
    return this.x00140028;
  }

  get x00140028(): Array<string | undefined> | string | undefined {
    const element = this.dwResponse['00140028'];
    return element === undefined || typeof element === 'string' ? element : element.Value as any;
  }

  async getComponentManufacturer(): Promise<Array<string | undefined>> {
    const element = this.dwResponse['00140028'];
    if (typeof element !== 'string') {
      return this.x00140028 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Material Grade
  get MaterialGrade(): Array<string | undefined> | string | undefined {
    return this.x00140042;
  }

  get x00140042(): Array<string | undefined> | string | undefined {
    const element = this.dwResponse['00140042'];
    return element === undefined || typeof element === 'string' ? element : element.Value as any;
  }

  async getMaterialGrade(): Promise<Array<string | undefined>> {
    const element = this.dwResponse['00140042'];
    if (typeof element !== 'string') {
      return this.x00140042 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Material Properties Description
  get MaterialPropertiesDescription(): Array<string | undefined> | string | undefined {
    return this.x00140044;
  }

  get x00140044(): Array<string | undefined> | string | undefined {
    const element = this.dwResponse['00140044'];
    return element === undefined || typeof element === 'string' ? element : element.Value as any;
  }

  async getMaterialPropertiesDescription(): Promise<Array<string | undefined>> {
    const element = this.dwResponse['00140044'];
    if (typeof element !== 'string') {
      return this.x00140044 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Material Properties File Format (Retired)
  get MaterialPropertiesFileFormatRetired(): Array<string | undefined> | string | undefined {
    return this.x00140045;
  }

  get x00140045(): Array<string | undefined> | string | undefined {
    const element = this.dwResponse['00140045'];
    return element === undefined || typeof element === 'string' ? element : element.Value as any;
  }

  async getMaterialPropertiesFileFormatRetired(): Promise<Array<string | undefined>> {
    const element = this.dwResponse['00140045'];
    if (typeof element !== 'string') {
      return this.x00140045 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Material Notes
  get MaterialNotes(): string | string | undefined {
    return this.x00140046;
  }

  get x00140046(): string | string | undefined {
    const element = this.dwResponse['00140046'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getMaterialNotes(): Promise<string> {
    const element = this.dwResponse['00140046'];
    if (typeof element !== 'string') {
      return this.x00140046 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00140046'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Actual Environmental Conditions
  get ActualEnvironmentalConditions(): string | string | undefined {
    return this.x00141010;
  }

  get x00141010(): string | string | undefined {
    const element = this.dwResponse['00141010'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getActualEnvironmentalConditions(): Promise<string> {
    const element = this.dwResponse['00141010'];
    if (typeof element !== 'string') {
      return this.x00141010 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00141010'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Environmental Conditions
  get EnvironmentalConditions(): string | string | undefined {
    return this.x00141040;
  }

  get x00141040(): string | string | undefined {
    const element = this.dwResponse['00141040'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getEnvironmentalConditions(): Promise<string> {
    const element = this.dwResponse['00141040'];
    if (typeof element !== 'string') {
      return this.x00141040 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00141040'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Indication Description
  get IndicationDescription(): string | string | undefined {
    return this.x00142018;
  }

  get x00142018(): string | string | undefined {
    const element = this.dwResponse['00142018'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getIndicationDescription(): Promise<string> {
    const element = this.dwResponse['00142018'];
    if (typeof element !== 'string') {
      return this.x00142018 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00142018'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Coordinate System Axis Description
  get CoordinateSystemAxisDescription(): string | string | undefined {
    return this.x00142206;
  }

  get x00142206(): string | string | undefined {
    const element = this.dwResponse['00142206'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCoordinateSystemAxisDescription(): Promise<string> {
    const element = this.dwResponse['00142206'];
    if (typeof element !== 'string') {
      return this.x00142206 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00142206'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Coordinate System Axis Values
  get CoordinateSystemAxisValues(): Uint8Array | string | undefined {
    return this.x00142210;
  }

  get x00142210(): Uint8Array | string | undefined {
    const element = this.dwResponse['00142210'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCoordinateSystemAxisValues(): Promise<Uint8Array> {
    const element = this.dwResponse['00142210'];
    if (typeof element !== 'string') {
      return this.x00142210 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00142210'] = { Value: [value], vr: 'OB' };
    return value;
    
  }

  // Transform Description
  get TransformDescription(): string | string | undefined {
    return this.x00142222;
  }

  get x00142222(): string | string | undefined {
    const element = this.dwResponse['00142222'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getTransformDescription(): Promise<string> {
    const element = this.dwResponse['00142222'];
    if (typeof element !== 'string') {
      return this.x00142222 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00142222'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Sensor Name
  get SensorName(): string | string | undefined {
    return this.x00143022;
  }

  get x00143022(): string | string | undefined {
    const element = this.dwResponse['00143022'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getSensorName(): Promise<string> {
    const element = this.dwResponse['00143022'];
    if (typeof element !== 'string') {
      return this.x00143022 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00143022'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Dark Current Counts
  get DarkCurrentCounts(): Uint8Array | string | undefined {
    return this.x00143050;
  }

  get x00143050(): Uint8Array | string | undefined {
    const element = this.dwResponse['00143050'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getDarkCurrentCounts(): Promise<Uint8Array> {
    const element = this.dwResponse['00143050'];
    if (typeof element !== 'string') {
      return this.x00143050 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00143050'] = { Value: [value], vr: 'OB or OW' };
    return value;
    
  }

  // Air Counts
  get AirCounts(): Uint8Array | string | undefined {
    return this.x00143070;
  }

  get x00143070(): Uint8Array | string | undefined {
    const element = this.dwResponse['00143070'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getAirCounts(): Promise<Uint8Array> {
    const element = this.dwResponse['00143070'];
    if (typeof element !== 'string') {
      return this.x00143070 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00143070'] = { Value: [value], vr: 'OB or OW' };
    return value;
    
  }

  // Bad Pixel Image
  get BadPixelImage(): Uint8Array | string | undefined {
    return this.x00143080;
  }

  get x00143080(): Uint8Array | string | undefined {
    const element = this.dwResponse['00143080'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getBadPixelImage(): Promise<Uint8Array> {
    const element = this.dwResponse['00143080'];
    if (typeof element !== 'string') {
      return this.x00143080 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00143080'] = { Value: [value], vr: 'OB' };
    return value;
    
  }

  // Calibration Notes
  get CalibrationNotes(): string | string | undefined {
    return this.x00143099;
  }

  get x00143099(): string | string | undefined {
    const element = this.dwResponse['00143099'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCalibrationNotes(): Promise<string> {
    const element = this.dwResponse['00143099'];
    if (typeof element !== 'string') {
      return this.x00143099 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00143099'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Pulser Notes
  get PulserNotes(): string | string | undefined {
    return this.x00144006;
  }

  get x00144006(): string | string | undefined {
    const element = this.dwResponse['00144006'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getPulserNotes(): Promise<string> {
    const element = this.dwResponse['00144006'];
    if (typeof element !== 'string') {
      return this.x00144006 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00144006'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Receiver Notes
  get ReceiverNotes(): string | string | undefined {
    return this.x0014400c;
  }

  get x0014400c(): string | string | undefined {
    const element = this.dwResponse['0014400C'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getReceiverNotes(): Promise<string> {
    const element = this.dwResponse['0014400C'];
    if (typeof element !== 'string') {
      return this.x0014400c as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['0014400C'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Pre-Amplifier Notes
  get PreAmplifierNotes(): string | string | undefined {
    return this.x0014400f;
  }

  get x0014400f(): string | string | undefined {
    const element = this.dwResponse['0014400F'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getPreAmplifierNotes(): Promise<string> {
    const element = this.dwResponse['0014400F'];
    if (typeof element !== 'string') {
      return this.x0014400f as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['0014400F'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Coupling Technique
  get CouplingTechnique(): string | string | undefined {
    return this.x00144054;
  }

  get x00144054(): string | string | undefined {
    const element = this.dwResponse['00144054'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCouplingTechnique(): Promise<string> {
    const element = this.dwResponse['00144054'];
    if (typeof element !== 'string') {
      return this.x00144054 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00144054'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Coupling Medium
  get CouplingMedium(): string | string | undefined {
    return this.x00144056;
  }

  get x00144056(): string | string | undefined {
    const element = this.dwResponse['00144056'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCouplingMedium(): Promise<string> {
    const element = this.dwResponse['00144056'];
    if (typeof element !== 'string') {
      return this.x00144056 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00144056'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Delay Law Identifier
  get DelayLawIdentifier(): string | string | undefined {
    return this.x0014405c;
  }

  get x0014405c(): string | string | undefined {
    const element = this.dwResponse['0014405C'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getDelayLawIdentifier(): Promise<string> {
    const element = this.dwResponse['0014405C'];
    if (typeof element !== 'string') {
      return this.x0014405c as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['0014405C'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Calibration Procedure
  get CalibrationProcedure(): string | string | undefined {
    return this.x00144072;
  }

  get x00144072(): string | string | undefined {
    const element = this.dwResponse['00144072'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCalibrationProcedure(): Promise<string> {
    const element = this.dwResponse['00144072'];
    if (typeof element !== 'string') {
      return this.x00144072 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00144072'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Probe Drive Notes
  get ProbeDriveNotes(): string | string | undefined {
    return this.x00144082;
  }

  get x00144082(): string | string | undefined {
    const element = this.dwResponse['00144082'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getProbeDriveNotes(): Promise<string> {
    const element = this.dwResponse['00144082'];
    if (typeof element !== 'string') {
      return this.x00144082 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00144082'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Scan Procedure
  get ScanProcedure(): string | string | undefined {
    return this.x0014409b;
  }

  get x0014409b(): string | string | undefined {
    const element = this.dwResponse['0014409B'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getScanProcedure(): Promise<string> {
    const element = this.dwResponse['0014409B'];
    if (typeof element !== 'string') {
      return this.x0014409b as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['0014409B'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Intervention Description
  get InterventionDescription(): string | string | undefined {
    return this.x0018003a;
  }

  get x0018003a(): string | string | undefined {
    const element = this.dwResponse['0018003A'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getInterventionDescription(): Promise<string> {
    const element = this.dwResponse['0018003A'];
    if (typeof element !== 'string') {
      return this.x0018003a as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['0018003A'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Acquisition Comments
  get AcquisitionComments(): string | string | undefined {
    return this.x00184000;
  }

  get x00184000(): string | string | undefined {
    const element = this.dwResponse['00184000'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getAcquisitionComments(): Promise<string> {
    const element = this.dwResponse['00184000'];
    if (typeof element !== 'string') {
      return this.x00184000 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00184000'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Detector Description
  get DetectorDescription(): string | string | undefined {
    return this.x00187006;
  }

  get x00187006(): string | string | undefined {
    const element = this.dwResponse['00187006'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getDetectorDescription(): Promise<string> {
    const element = this.dwResponse['00187006'];
    if (typeof element !== 'string') {
      return this.x00187006 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00187006'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Detector Mode
  get DetectorMode(): string | string | undefined {
    return this.x00187008;
  }

  get x00187008(): string | string | undefined {
    const element = this.dwResponse['00187008'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getDetectorMode(): Promise<string> {
    const element = this.dwResponse['00187008'];
    if (typeof element !== 'string') {
      return this.x00187008 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00187008'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Grid Absorbing Material
  get GridAbsorbingMaterial(): string | string | undefined {
    return this.x00187040;
  }

  get x00187040(): string | string | undefined {
    const element = this.dwResponse['00187040'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getGridAbsorbingMaterial(): Promise<string> {
    const element = this.dwResponse['00187040'];
    if (typeof element !== 'string') {
      return this.x00187040 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00187040'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Grid Spacing Material
  get GridSpacingMaterial(): string | string | undefined {
    return this.x00187041;
  }

  get x00187041(): string | string | undefined {
    const element = this.dwResponse['00187041'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getGridSpacingMaterial(): Promise<string> {
    const element = this.dwResponse['00187041'];
    if (typeof element !== 'string') {
      return this.x00187041 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00187041'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Exposure Control Mode Description
  get ExposureControlModeDescription(): string | string | undefined {
    return this.x00187062;
  }

  get x00187062(): string | string | undefined {
    const element = this.dwResponse['00187062'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getExposureControlModeDescription(): Promise<string> {
    const element = this.dwResponse['00187062'];
    if (typeof element !== 'string') {
      return this.x00187062 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00187062'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Metabolite Map Description
  get MetaboliteMapDescription(): string | string | undefined {
    return this.x00189080;
  }

  get x00189080(): string | string | undefined {
    const element = this.dwResponse['00189080'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getMetaboliteMapDescription(): Promise<string> {
    const element = this.dwResponse['00189080'];
    if (typeof element !== 'string') {
      return this.x00189080 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00189080'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Respiratory Motion Compensation Technique Description
  get RespiratoryMotionCompensationTechniqueDescription(): string | string | undefined {
    return this.x00189185;
  }

  get x00189185(): string | string | undefined {
    const element = this.dwResponse['00189185'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getRespiratoryMotionCompensationTechniqueDescription(): Promise<string> {
    const element = this.dwResponse['00189185'];
    if (typeof element !== 'string') {
      return this.x00189185 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00189185'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Acquisition Protocol Description
  get AcquisitionProtocolDescription(): string | string | undefined {
    return this.x00189424;
  }

  get x00189424(): string | string | undefined {
    const element = this.dwResponse['00189424'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getAcquisitionProtocolDescription(): Promise<string> {
    const element = this.dwResponse['00189424'];
    if (typeof element !== 'string') {
      return this.x00189424 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00189424'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Contribution Description
  get ContributionDescription(): string | string | undefined {
    return this.x0018a003;
  }

  get x0018a003(): string | string | undefined {
    const element = this.dwResponse['0018A003'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getContributionDescription(): Promise<string> {
    const element = this.dwResponse['0018A003'];
    if (typeof element !== 'string') {
      return this.x0018a003 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['0018A003'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Image Comments
  get ImageComments(): string | string | undefined {
    return this.x00204000;
  }

  get x00204000(): string | string | undefined {
    const element = this.dwResponse['00204000'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getImageComments(): Promise<string> {
    const element = this.dwResponse['00204000'];
    if (typeof element !== 'string') {
      return this.x00204000 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00204000'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Frame Comments
  get FrameComments(): string | string | undefined {
    return this.x00209158;
  }

  get x00209158(): string | string | undefined {
    const element = this.dwResponse['00209158'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getFrameComments(): Promise<string> {
    const element = this.dwResponse['00209158'];
    if (typeof element !== 'string') {
      return this.x00209158 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00209158'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Comments on Patient's Performance of Visual Field
  get CommentsOnPatientPerformanceOfVisualField(): string | string | undefined {
    return this.x00240044;
  }

  get x00240044(): string | string | undefined {
    const element = this.dwResponse['00240044'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCommentsOnPatientPerformanceOfVisualField(): Promise<string> {
    const element = this.dwResponse['00240044'];
    if (typeof element !== 'string') {
      return this.x00240044 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00240044'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Gray Lookup Table Data
  get GrayLookupTableData(): Array<number | undefined> | string | undefined {
    return this.x00281200;
  }

  get x00281200(): Array<number | undefined> | string | undefined {
    const element = this.dwResponse['00281200'];
    return element === undefined || typeof element === 'string' ? element : element.Value as any;
  }

  async getGrayLookupTableData(): Promise<Array<number | undefined>> {
    const element = this.dwResponse['00281200'];
    if (typeof element !== 'string') {
      return this.x00281200 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Red Palette Color Lookup Table Data
  get RedPaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281201;
  }

  get x00281201(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281201'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getRedPaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281201'];
    if (typeof element !== 'string') {
      return this.x00281201 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00281201'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Green Palette Color Lookup Table Data
  get GreenPaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281202;
  }

  get x00281202(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281202'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getGreenPaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281202'];
    if (typeof element !== 'string') {
      return this.x00281202 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00281202'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Blue Palette Color Lookup Table Data
  get BluePaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281203;
  }

  get x00281203(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281203'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getBluePaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281203'];
    if (typeof element !== 'string') {
      return this.x00281203 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00281203'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Alpha Palette Color Lookup Table Data
  get AlphaPaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281204;
  }

  get x00281204(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281204'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getAlphaPaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281204'];
    if (typeof element !== 'string') {
      return this.x00281204 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00281204'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Large Red Palette Color Lookup Table Data
  get LargeRedPaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281211;
  }

  get x00281211(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281211'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getLargeRedPaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281211'];
    if (typeof element !== 'string') {
      return this.x00281211 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00281211'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Large Green Palette Color Lookup Table Data
  get LargeGreenPaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281212;
  }

  get x00281212(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281212'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getLargeGreenPaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281212'];
    if (typeof element !== 'string') {
      return this.x00281212 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00281212'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Large Blue Palette Color Lookup Table Data
  get LargeBluePaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281213;
  }

  get x00281213(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281213'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getLargeBluePaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281213'];
    if (typeof element !== 'string') {
      return this.x00281213 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00281213'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Segmented Red Palette Color Lookup Table Data
  get SegmentedRedPaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281221;
  }

  get x00281221(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281221'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getSegmentedRedPaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281221'];
    if (typeof element !== 'string') {
      return this.x00281221 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00281221'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Segmented Green Palette Color Lookup Table Data
  get SegmentedGreenPaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281222;
  }

  get x00281222(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281222'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getSegmentedGreenPaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281222'];
    if (typeof element !== 'string') {
      return this.x00281222 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00281222'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Segmented Blue Palette Color Lookup Table Data
  get SegmentedBluePaletteColorLookupTableData(): Uint8Array | string | undefined {
    return this.x00281223;
  }

  get x00281223(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281223'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getSegmentedBluePaletteColorLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281223'];
    if (typeof element !== 'string') {
      return this.x00281223 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00281223'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Partial View Description
  get PartialViewDescription(): string | string | undefined {
    return this.x00281351;
  }

  get x00281351(): string | string | undefined {
    const element = this.dwResponse['00281351'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getPartialViewDescription(): Promise<string> {
    const element = this.dwResponse['00281351'];
    if (typeof element !== 'string') {
      return this.x00281351 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00281351'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Blending Lookup Table Data
  get BlendingLookupTableData(): Uint8Array | string | undefined {
    return this.x00281408;
  }

  get x00281408(): Uint8Array | string | undefined {
    const element = this.dwResponse['00281408'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getBlendingLookupTableData(): Promise<Uint8Array> {
    const element = this.dwResponse['00281408'];
    if (typeof element !== 'string') {
      return this.x00281408 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00281408'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // ICC Profile
  get ICCProfile(): Uint8Array | string | undefined {
    return this.x00282000;
  }

  get x00282000(): Uint8Array | string | undefined {
    const element = this.dwResponse['00282000'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getICCProfile(): Promise<Uint8Array> {
    const element = this.dwResponse['00282000'];
    if (typeof element !== 'string') {
      return this.x00282000 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00282000'] = { Value: [value], vr: 'OB' };
    return value;
    
  }

  // LUT Data
  get LUTData(): Array<number | undefined> | string | undefined {
    return this.x00283006;
  }

  get x00283006(): Array<number | undefined> | string | undefined {
    const element = this.dwResponse['00283006'];
    return element === undefined || typeof element === 'string' ? element : element.Value as any;
  }

  async getLUTData(): Promise<Array<number | undefined>> {
    const element = this.dwResponse['00283006'];
    if (typeof element !== 'string') {
      return this.x00283006 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Image Presentation Comments
  get ImagePresentationComments(): string | string | undefined {
    return this.x00284000;
  }

  get x00284000(): string | string | undefined {
    const element = this.dwResponse['00284000'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getImagePresentationComments(): Promise<string> {
    const element = this.dwResponse['00284000'];
    if (typeof element !== 'string') {
      return this.x00284000 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00284000'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Mask Operation Explanation
  get MaskOperationExplanation(): string | string | undefined {
    return this.x00286190;
  }

  get x00286190(): string | string | undefined {
    const element = this.dwResponse['00286190'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getMaskOperationExplanation(): Promise<string> {
    const element = this.dwResponse['00286190'];
    if (typeof element !== 'string') {
      return this.x00286190 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00286190'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Pixel Data Provider URL
  get PixelDataProviderURL(): string | string | undefined {
    return this.x00287fe0;
  }

  get x00287fe0(): string | string | undefined {
    const element = this.dwResponse['00287FE0'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getPixelDataProviderURL(): Promise<string> {
    const element = this.dwResponse['00287FE0'];
    if (typeof element !== 'string') {
      return this.x00287fe0 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00287FE0'] = { Value: [value], vr: 'UT' };
    return value;
    
  }

  // Study Comments
  get StudyComments(): string | string | undefined {
    return this.x00324000;
  }

  get x00324000(): string | string | undefined {
    const element = this.dwResponse['00324000'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getStudyComments(): Promise<string> {
    const element = this.dwResponse['00324000'];
    if (typeof element !== 'string') {
      return this.x00324000 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00324000'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Visit Comments
  get VisitComments(): string | string | undefined {
    return this.x00384000;
  }

  get x00384000(): string | string | undefined {
    const element = this.dwResponse['00384000'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getVisitComments(): Promise<string> {
    const element = this.dwResponse['00384000'];
    if (typeof element !== 'string') {
      return this.x00384000 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00384000'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Local Namespace Entity ID
  get LocalNamespaceEntityID(): string | string | undefined {
    return this.x00400031;
  }

  get x00400031(): string | string | undefined {
    const element = this.dwResponse['00400031'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getLocalNamespaceEntityID(): Promise<string> {
    const element = this.dwResponse['00400031'];
    if (typeof element !== 'string') {
      return this.x00400031 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00400031'] = { Value: [value], vr: 'UT' };
    return value;
    
  }

  // Universal Entity ID
  get UniversalEntityID(): string | string | undefined {
    return this.x00400032;
  }

  get x00400032(): string | string | undefined {
    const element = this.dwResponse['00400032'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getUniversalEntityID(): Promise<string> {
    const element = this.dwResponse['00400032'];
    if (typeof element !== 'string') {
      return this.x00400032 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00400032'] = { Value: [value], vr: 'UT' };
    return value;
    
  }

  // Comments on the Performed Procedure Step
  get CommentsOnThePerformedProcedureStep(): string | string | undefined {
    return this.x00400280;
  }

  get x00400280(): string | string | undefined {
    const element = this.dwResponse['00400280'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCommentsOnThePerformedProcedureStep(): Promise<string> {
    const element = this.dwResponse['00400280'];
    if (typeof element !== 'string') {
      return this.x00400280 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00400280'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Comments on Radiation Dose
  get CommentsOnRadiationDose(): string | string | undefined {
    return this.x00400310;
  }

  get x00400310(): string | string | undefined {
    const element = this.dwResponse['00400310'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCommentsOnRadiationDose(): Promise<string> {
    const element = this.dwResponse['00400310'];
    if (typeof element !== 'string') {
      return this.x00400310 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00400310'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Comments on the Scheduled Procedure Step
  get CommentsOnTheScheduledProcedureStep(): string | string | undefined {
    return this.x00400400;
  }

  get x00400400(): string | string | undefined {
    const element = this.dwResponse['00400400'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCommentsOnTheScheduledProcedureStep(): Promise<string> {
    const element = this.dwResponse['00400400'];
    if (typeof element !== 'string') {
      return this.x00400400 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00400400'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Specimen Description (Trial)
  get SpecimenDescriptionTrial(): string | string | undefined {
    return this.x00400553;
  }

  get x00400553(): string | string | undefined {
    const element = this.dwResponse['00400553'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getSpecimenDescriptionTrial(): Promise<string> {
    const element = this.dwResponse['00400553'];
    if (typeof element !== 'string') {
      return this.x00400553 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00400553'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Acquisition Context Description
  get AcquisitionContextDescription(): string | string | undefined {
    return this.x00400556;
  }

  get x00400556(): string | string | undefined {
    const element = this.dwResponse['00400556'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getAcquisitionContextDescription(): Promise<string> {
    const element = this.dwResponse['00400556'];
    if (typeof element !== 'string') {
      return this.x00400556 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00400556'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Specimen Detailed Description
  get SpecimenDetailedDescription(): string | string | undefined {
    return this.x00400602;
  }

  get x00400602(): string | string | undefined {
    const element = this.dwResponse['00400602'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getSpecimenDetailedDescription(): Promise<string> {
    const element = this.dwResponse['00400602'];
    if (typeof element !== 'string') {
      return this.x00400602 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00400602'] = { Value: [value], vr: 'UT' };
    return value;
    
  }

  // Person's Address
  get PersonAddress(): string | string | undefined {
    return this.x00401102;
  }

  get x00401102(): string | string | undefined {
    const element = this.dwResponse['00401102'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getPersonAddress(): Promise<string> {
    const element = this.dwResponse['00401102'];
    if (typeof element !== 'string') {
      return this.x00401102 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00401102'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Requested Procedure Comments
  get RequestedProcedureComments(): string | string | undefined {
    return this.x00401400;
  }

  get x00401400(): string | string | undefined {
    const element = this.dwResponse['00401400'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getRequestedProcedureComments(): Promise<string> {
    const element = this.dwResponse['00401400'];
    if (typeof element !== 'string') {
      return this.x00401400 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00401400'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Imaging Service Request Comments
  get ImagingServiceRequestComments(): string | string | undefined {
    return this.x00402400;
  }

  get x00402400(): string | string | undefined {
    const element = this.dwResponse['00402400'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getImagingServiceRequestComments(): Promise<string> {
    const element = this.dwResponse['00402400'];
    if (typeof element !== 'string') {
      return this.x00402400 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00402400'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Object Binary Identifier (Trial)
  get ObjectBinaryIdentifierTrial(): Uint8Array | string | undefined {
    return this.x0040a074;
  }

  get x0040a074(): Uint8Array | string | undefined {
    const element = this.dwResponse['0040A074'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getObjectBinaryIdentifierTrial(): Promise<Uint8Array> {
    const element = this.dwResponse['0040A074'];
    if (typeof element !== 'string') {
      return this.x0040a074 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['0040A074'] = { Value: [value], vr: 'OB' };
    return value;
    
  }

  // Object Directory Binary Identifier (Trial)
  get ObjectDirectoryBinaryIdentifierTrial(): Uint8Array | string | undefined {
    return this.x0040a089;
  }

  get x0040a089(): Uint8Array | string | undefined {
    const element = this.dwResponse['0040A089'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getObjectDirectoryBinaryIdentifierTrial(): Promise<Uint8Array> {
    const element = this.dwResponse['0040A089'];
    if (typeof element !== 'string') {
      return this.x0040a089 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['0040A089'] = { Value: [value], vr: 'OB' };
    return value;
    
  }

  // Text Value
  get TextValue(): string | string | undefined {
    return this.x0040a160;
  }

  get x0040a160(): string | string | undefined {
    const element = this.dwResponse['0040A160'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getTextValue(): Promise<string> {
    const element = this.dwResponse['0040A160'];
    if (typeof element !== 'string') {
      return this.x0040a160 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['0040A160'] = { Value: [value], vr: 'UT' };
    return value;
    
  }

  // Bibliographic Citation (Trial)
  get BibliographicCitationTrial(): string | string | undefined {
    return this.x0040a16a;
  }

  get x0040a16a(): string | string | undefined {
    const element = this.dwResponse['0040A16A'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getBibliographicCitationTrial(): Promise<string> {
    const element = this.dwResponse['0040A16A'];
    if (typeof element !== 'string') {
      return this.x0040a16a as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['0040A16A'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Identification Description (Trial)
  get IdentificationDescriptionTrial(): string | string | undefined {
    return this.x0040a224;
  }

  get x0040a224(): string | string | undefined {
    const element = this.dwResponse['0040A224'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getIdentificationDescriptionTrial(): Promise<string> {
    const element = this.dwResponse['0040A224'];
    if (typeof element !== 'string') {
      return this.x0040a224 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['0040A224'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Algorithm Description (Trial)
  get AlgorithmDescriptionTrial(): string | string | undefined {
    return this.x0040a297;
  }

  get x0040a297(): string | string | undefined {
    const element = this.dwResponse['0040A297'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getAlgorithmDescriptionTrial(): Promise<string> {
    const element = this.dwResponse['0040A297'];
    if (typeof element !== 'string') {
      return this.x0040a297 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['0040A297'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Report Status Comment (Trial)
  get ReportStatusCommentTrial(): string | string | undefined {
    return this.x0040a33a;
  }

  get x0040a33a(): string | string | undefined {
    const element = this.dwResponse['0040A33A'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getReportStatusCommentTrial(): Promise<string> {
    const element = this.dwResponse['0040A33A'];
    if (typeof element !== 'string') {
      return this.x0040a33a as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['0040A33A'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Address (Trial)
  get AddressTrial(): string | string | undefined {
    return this.x0040a353;
  }

  get x0040a353(): string | string | undefined {
    const element = this.dwResponse['0040A353'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getAddressTrial(): Promise<string> {
    const element = this.dwResponse['0040A353'];
    if (typeof element !== 'string') {
      return this.x0040a353 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['0040A353'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Uniform Resource Locator (Trial)
  get UniformResourceLocatorTrial(): string | string | undefined {
    return this.x0040a992;
  }

  get x0040a992(): string | string | undefined {
    const element = this.dwResponse['0040A992'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getUniformResourceLocatorTrial(): Promise<string> {
    const element = this.dwResponse['0040A992'];
    if (typeof element !== 'string') {
      return this.x0040a992 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['0040A992'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // HL7 Instance Identifier
  get HL7InstanceIdentifier(): string | string | undefined {
    return this.x0040e001;
  }

  get x0040e001(): string | string | undefined {
    const element = this.dwResponse['0040E001'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getHL7InstanceIdentifier(): Promise<string> {
    const element = this.dwResponse['0040E001'];
    if (typeof element !== 'string') {
      return this.x0040e001 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['0040E001'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Retrieve URI
  get RetrieveURI(): string | string | undefined {
    return this.x0040e010;
  }

  get x0040e010(): string | string | undefined {
    const element = this.dwResponse['0040E010'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getRetrieveURI(): Promise<string> {
    const element = this.dwResponse['0040E010'];
    if (typeof element !== 'string') {
      return this.x0040e010 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['0040E010'] = { Value: [value], vr: 'UT' };
    return value;
    
  }

  // Document Title
  get DocumentTitle(): string | string | undefined {
    return this.x00420010;
  }

  get x00420010(): string | string | undefined {
    const element = this.dwResponse['00420010'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getDocumentTitle(): Promise<string> {
    const element = this.dwResponse['00420010'];
    if (typeof element !== 'string') {
      return this.x00420010 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00420010'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Encapsulated Document
  get EncapsulatedDocument(): Uint8Array | string | undefined {
    return this.x00420011;
  }

  get x00420011(): Uint8Array | string | undefined {
    const element = this.dwResponse['00420011'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getEncapsulatedDocument(): Promise<Uint8Array> {
    const element = this.dwResponse['00420011'];
    if (typeof element !== 'string') {
      return this.x00420011 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00420011'] = { Value: [value], vr: 'OB' };
    return value;
    
  }

  // Product Package Identifier
  get ProductPackageIdentifier(): string | string | undefined {
    return this.x00440001;
  }

  get x00440001(): string | string | undefined {
    const element = this.dwResponse['00440001'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getProductPackageIdentifier(): Promise<string> {
    const element = this.dwResponse['00440001'];
    if (typeof element !== 'string') {
      return this.x00440001 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00440001'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Approval Status Further Description
  get ApprovalStatusFurtherDescription(): string | string | undefined {
    return this.x00440003;
  }

  get x00440003(): string | string | undefined {
    const element = this.dwResponse['00440003'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getApprovalStatusFurtherDescription(): Promise<string> {
    const element = this.dwResponse['00440003'];
    if (typeof element !== 'string') {
      return this.x00440003 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00440003'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Product Description
  get ProductDescription(): string | string | undefined {
    return this.x00440009;
  }

  get x00440009(): string | string | undefined {
    const element = this.dwResponse['00440009'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getProductDescription(): Promise<string> {
    const element = this.dwResponse['00440009'];
    if (typeof element !== 'string') {
      return this.x00440009 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00440009'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Optical Path Description
  get OpticalPathDescription(): string | string | undefined {
    return this.x00480107;
  }

  get x00480107(): string | string | undefined {
    const element = this.dwResponse['00480107'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getOpticalPathDescription(): Promise<string> {
    const element = this.dwResponse['00480107'];
    if (typeof element !== 'string') {
      return this.x00480107 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00480107'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Segment Description
  get SegmentDescription(): string | string | undefined {
    return this.x00620006;
  }

  get x00620006(): string | string | undefined {
    const element = this.dwResponse['00620006'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getSegmentDescription(): Promise<string> {
    const element = this.dwResponse['00620006'];
    if (typeof element !== 'string') {
      return this.x00620006 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00620006'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Vector Grid Data
  get VectorGridData(): Float32Array | string | undefined {
    return this.x00640009;
  }

  get x00640009(): Float32Array | string | undefined {
    const element = this.dwResponse['00640009'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getVectorGridData(): Promise<Float32Array> {
    const element = this.dwResponse['00640009'];
    if (typeof element !== 'string') {
      return this.x00640009 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Surface Comments
  get SurfaceComments(): string | string | undefined {
    return this.x00660004;
  }

  get x00660004(): string | string | undefined {
    const element = this.dwResponse['00660004'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getSurfaceComments(): Promise<string> {
    const element = this.dwResponse['00660004'];
    if (typeof element !== 'string') {
      return this.x00660004 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00660004'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Point Coordinates Data
  get PointCoordinatesData(): Float32Array | string | undefined {
    return this.x00660016;
  }

  get x00660016(): Float32Array | string | undefined {
    const element = this.dwResponse['00660016'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getPointCoordinatesData(): Promise<Float32Array> {
    const element = this.dwResponse['00660016'];
    if (typeof element !== 'string') {
      return this.x00660016 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Vector Coordinate Data
  get VectorCoordinateData(): Float32Array | string | undefined {
    return this.x00660021;
  }

  get x00660021(): Float32Array | string | undefined {
    const element = this.dwResponse['00660021'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getVectorCoordinateData(): Promise<Float32Array> {
    const element = this.dwResponse['00660021'];
    if (typeof element !== 'string') {
      return this.x00660021 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Triangle Point Index List
  get TrianglePointIndexList(): Uint8Array | string | undefined {
    return this.x00660023;
  }

  get x00660023(): Uint8Array | string | undefined {
    const element = this.dwResponse['00660023'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getTrianglePointIndexList(): Promise<Uint8Array> {
    const element = this.dwResponse['00660023'];
    if (typeof element !== 'string') {
      return this.x00660023 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00660023'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Edge Point Index List
  get EdgePointIndexList(): Uint8Array | string | undefined {
    return this.x00660024;
  }

  get x00660024(): Uint8Array | string | undefined {
    const element = this.dwResponse['00660024'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getEdgePointIndexList(): Promise<Uint8Array> {
    const element = this.dwResponse['00660024'];
    if (typeof element !== 'string') {
      return this.x00660024 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00660024'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Vertex Point Index List
  get VertexPointIndexList(): Uint8Array | string | undefined {
    return this.x00660025;
  }

  get x00660025(): Uint8Array | string | undefined {
    const element = this.dwResponse['00660025'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getVertexPointIndexList(): Promise<Uint8Array> {
    const element = this.dwResponse['00660025'];
    if (typeof element !== 'string') {
      return this.x00660025 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00660025'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Primitive Point Index List
  get PrimitivePointIndexList(): Uint8Array | string | undefined {
    return this.x00660029;
  }

  get x00660029(): Uint8Array | string | undefined {
    const element = this.dwResponse['00660029'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getPrimitivePointIndexList(): Promise<Uint8Array> {
    const element = this.dwResponse['00660029'];
    if (typeof element !== 'string') {
      return this.x00660029 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00660029'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Algorithm Parameters
  get AlgorithmParameters(): string | string | undefined {
    return this.x00660032;
  }

  get x00660032(): string | string | undefined {
    const element = this.dwResponse['00660032'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getAlgorithmParameters(): Promise<string> {
    const element = this.dwResponse['00660032'];
    if (typeof element !== 'string') {
      return this.x00660032 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00660032'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Information Summary
  get InformationSummary(): string | string | undefined {
    return this.x00686280;
  }

  get x00686280(): string | string | undefined {
    const element = this.dwResponse['00686280'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getInformationSummary(): Promise<string> {
    const element = this.dwResponse['00686280'];
    if (typeof element !== 'string') {
      return this.x00686280 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00686280'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // HPGL Document
  get HPGLDocument(): Uint8Array | string | undefined {
    return this.x00686300;
  }

  get x00686300(): Uint8Array | string | undefined {
    const element = this.dwResponse['00686300'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getHPGLDocument(): Promise<Uint8Array> {
    const element = this.dwResponse['00686300'];
    if (typeof element !== 'string') {
      return this.x00686300 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00686300'] = { Value: [value], vr: 'OB' };
    return value;
    
  }

  // HPGL Pen Description
  get HPGLPenDescription(): string | string | undefined {
    return this.x00686345;
  }

  get x00686345(): string | string | undefined {
    const element = this.dwResponse['00686345'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getHPGLPenDescription(): Promise<string> {
    const element = this.dwResponse['00686345'];
    if (typeof element !== 'string') {
      return this.x00686345 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00686345'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Unformatted Text Value
  get UnformattedTextValue(): string | string | undefined {
    return this.x00700006;
  }

  get x00700006(): string | string | undefined {
    const element = this.dwResponse['00700006'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getUnformattedTextValue(): Promise<string> {
    const element = this.dwResponse['00700006'];
    if (typeof element !== 'string') {
      return this.x00700006 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00700006'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Graphic Group Description
  get GraphicGroupDescription(): string | string | undefined {
    return this.x00700208;
  }

  get x00700208(): string | string | undefined {
    const element = this.dwResponse['00700208'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getGraphicGroupDescription(): Promise<string> {
    const element = this.dwResponse['00700208'];
    if (typeof element !== 'string') {
      return this.x00700208 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00700208'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Fill Pattern
  get FillPattern(): Uint8Array | string | undefined {
    return this.x00700256;
  }

  get x00700256(): Uint8Array | string | undefined {
    const element = this.dwResponse['00700256'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getFillPattern(): Promise<Uint8Array> {
    const element = this.dwResponse['00700256'];
    if (typeof element !== 'string') {
      return this.x00700256 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['00700256'] = { Value: [value], vr: 'OB' };
    return value;
    
  }

  // Fiducial Description
  get FiducialDescription(): string | string | undefined {
    return this.x0070030f;
  }

  get x0070030f(): string | string | undefined {
    const element = this.dwResponse['0070030F'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getFiducialDescription(): Promise<string> {
    const element = this.dwResponse['0070030F'];
    if (typeof element !== 'string') {
      return this.x0070030f as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['0070030F'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Selector LT Value
  get SelectorLTValue(): string | string | undefined {
    return this.x00720068;
  }

  get x00720068(): string | string | undefined {
    const element = this.dwResponse['00720068'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getSelectorLTValue(): Promise<string> {
    const element = this.dwResponse['00720068'];
    if (typeof element !== 'string') {
      return this.x00720068 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00720068'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Selector ST Value
  get SelectorSTValue(): string | string | undefined {
    return this.x0072006e;
  }

  get x0072006e(): string | string | undefined {
    const element = this.dwResponse['0072006E'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getSelectorSTValue(): Promise<string> {
    const element = this.dwResponse['0072006E'];
    if (typeof element !== 'string') {
      return this.x0072006e as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['0072006E'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Selector UT Value
  get SelectorUTValue(): string | string | undefined {
    return this.x00720070;
  }

  get x00720070(): string | string | undefined {
    const element = this.dwResponse['00720070'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getSelectorUTValue(): Promise<string> {
    const element = this.dwResponse['00720070'];
    if (typeof element !== 'string') {
      return this.x00720070 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00720070'] = { Value: [value], vr: 'UT' };
    return value;
    
  }

  // Procedure Step Progress Description
  get ProcedureStepProgressDescription(): string | string | undefined {
    return this.x00741006;
  }

  get x00741006(): string | string | undefined {
    const element = this.dwResponse['00741006'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getProcedureStepProgressDescription(): Promise<string> {
    const element = this.dwResponse['00741006'];
    if (typeof element !== 'string') {
      return this.x00741006 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00741006'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Contact URI
  get ContactURI(): string | string | undefined {
    return this.x0074100a;
  }

  get x0074100a(): string | string | undefined {
    const element = this.dwResponse['0074100A'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getContactURI(): Promise<string> {
    const element = this.dwResponse['0074100A'];
    if (typeof element !== 'string') {
      return this.x0074100a as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['0074100A'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Reason for Cancellation
  get ReasonForCancellation(): string | string | undefined {
    return this.x00741238;
  }

  get x00741238(): string | string | undefined {
    const element = this.dwResponse['00741238'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getReasonForCancellation(): Promise<string> {
    const element = this.dwResponse['00741238'];
    if (typeof element !== 'string') {
      return this.x00741238 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00741238'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Implant Template Group Description
  get ImplantTemplateGroupDescription(): string | string | undefined {
    return this.x00780010;
  }

  get x00780010(): string | string | undefined {
    const element = this.dwResponse['00780010'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getImplantTemplateGroupDescription(): Promise<string> {
    const element = this.dwResponse['00780010'];
    if (typeof element !== 'string') {
      return this.x00780010 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00780010'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // U Value Data
  get UValueData(): Array<Float32Array | undefined> | string | undefined {
    return this.x00800010;
  }

  get x00800010(): Array<Float32Array | undefined> | string | undefined {
    const element = this.dwResponse['00800010'];
    return element === undefined || typeof element === 'string' ? element : element.Value as any;
  }

  async getUValueData(): Promise<Array<Float32Array | undefined>> {
    const element = this.dwResponse['00800010'];
    if (typeof element !== 'string') {
      return this.x00800010 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // V Value Data
  get VValueData(): Array<Float32Array | undefined> | string | undefined {
    return this.x00800011;
  }

  get x00800011(): Array<Float32Array | undefined> | string | undefined {
    const element = this.dwResponse['00800011'];
    return element === undefined || typeof element === 'string' ? element : element.Value as any;
  }

  async getVValueData(): Promise<Array<Float32Array | undefined>> {
    const element = this.dwResponse['00800011'];
    if (typeof element !== 'string') {
      return this.x00800011 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Topic Subject
  get TopicSubject(): string | string | undefined {
    return this.x00880906;
  }

  get x00880906(): string | string | undefined {
    const element = this.dwResponse['00880906'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getTopicSubject(): Promise<string> {
    const element = this.dwResponse['00880906'];
    if (typeof element !== 'string') {
      return this.x00880906 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['00880906'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // SOP Authorization Comment
  get SOPAuthorizationComment(): string | string | undefined {
    return this.x01000424;
  }

  get x01000424(): string | string | undefined {
    const element = this.dwResponse['01000424'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getSOPAuthorizationComment(): Promise<string> {
    const element = this.dwResponse['01000424'];
    if (typeof element !== 'string') {
      return this.x01000424 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['01000424'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Certificate of Signer
  get CertificateOfSigner(): Uint8Array | string | undefined {
    return this.x04000115;
  }

  get x04000115(): Uint8Array | string | undefined {
    const element = this.dwResponse['04000115'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCertificateOfSigner(): Promise<Uint8Array> {
    const element = this.dwResponse['04000115'];
    if (typeof element !== 'string') {
      return this.x04000115 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['04000115'] = { Value: [value], vr: 'OB' };
    return value;
    
  }

  // Signature
  get Signature(): Uint8Array | string | undefined {
    return this.x04000120;
  }

  get x04000120(): Uint8Array | string | undefined {
    const element = this.dwResponse['04000120'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getSignature(): Promise<Uint8Array> {
    const element = this.dwResponse['04000120'];
    if (typeof element !== 'string') {
      return this.x04000120 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['04000120'] = { Value: [value], vr: 'OB' };
    return value;
    
  }

  // Certified Timestamp
  get CertifiedTimestamp(): Uint8Array | string | undefined {
    return this.x04000310;
  }

  get x04000310(): Uint8Array | string | undefined {
    const element = this.dwResponse['04000310'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCertifiedTimestamp(): Promise<Uint8Array> {
    const element = this.dwResponse['04000310'];
    if (typeof element !== 'string') {
      return this.x04000310 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['04000310'] = { Value: [value], vr: 'OB' };
    return value;
    
  }

  // MAC
  get MAC(): Uint8Array | string | undefined {
    return this.x04000404;
  }

  get x04000404(): Uint8Array | string | undefined {
    const element = this.dwResponse['04000404'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getMAC(): Promise<Uint8Array> {
    const element = this.dwResponse['04000404'];
    if (typeof element !== 'string') {
      return this.x04000404 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['04000404'] = { Value: [value], vr: 'OB' };
    return value;
    
  }

  // Encrypted Content
  get EncryptedContent(): Uint8Array | string | undefined {
    return this.x04000520;
  }

  get x04000520(): Uint8Array | string | undefined {
    const element = this.dwResponse['04000520'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getEncryptedContent(): Promise<Uint8Array> {
    const element = this.dwResponse['04000520'];
    if (typeof element !== 'string') {
      return this.x04000520 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['04000520'] = { Value: [value], vr: 'OB' };
    return value;
    
  }

  // Image Display Format
  get ImageDisplayFormat(): string | string | undefined {
    return this.x20100010;
  }

  get x20100010(): string | string | undefined {
    const element = this.dwResponse['20100010'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getImageDisplayFormat(): Promise<string> {
    const element = this.dwResponse['20100010'];
    if (typeof element !== 'string') {
      return this.x20100010 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['20100010'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Configuration Information
  get ConfigurationInformation(): string | string | undefined {
    return this.x20100150;
  }

  get x20100150(): string | string | undefined {
    const element = this.dwResponse['20100150'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getConfigurationInformation(): Promise<string> {
    const element = this.dwResponse['20100150'];
    if (typeof element !== 'string') {
      return this.x20100150 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['20100150'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Configuration Information Description
  get ConfigurationInformationDescription(): string | string | undefined {
    return this.x20100152;
  }

  get x20100152(): string | string | undefined {
    const element = this.dwResponse['20100152'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getConfigurationInformationDescription(): Promise<string> {
    const element = this.dwResponse['20100152'];
    if (typeof element !== 'string') {
      return this.x20100152 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['20100152'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Label Text
  get LabelText(): string | string | undefined {
    return this.x22000002;
  }

  get x22000002(): string | string | undefined {
    const element = this.dwResponse['22000002'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getLabelText(): Promise<string> {
    const element = this.dwResponse['22000002'];
    if (typeof element !== 'string') {
      return this.x22000002 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['22000002'] = { Value: [value], vr: 'UT' };
    return value;
    
  }

  // Media Disposition
  get MediaDisposition(): string | string | undefined {
    return this.x22000004;
  }

  get x22000004(): string | string | undefined {
    const element = this.dwResponse['22000004'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getMediaDisposition(): Promise<string> {
    const element = this.dwResponse['22000004'];
    if (typeof element !== 'string') {
      return this.x22000004 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['22000004'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Barcode Value
  get BarcodeValue(): string | string | undefined {
    return this.x22000005;
  }

  get x22000005(): string | string | undefined {
    const element = this.dwResponse['22000005'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getBarcodeValue(): Promise<string> {
    const element = this.dwResponse['22000005'];
    if (typeof element !== 'string') {
      return this.x22000005 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['22000005'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // RT Image Description
  get RTImageDescription(): string | string | undefined {
    return this.x30020004;
  }

  get x30020004(): string | string | undefined {
    const element = this.dwResponse['30020004'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getRTImageDescription(): Promise<string> {
    const element = this.dwResponse['30020004'];
    if (typeof element !== 'string') {
      return this.x30020004 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['30020004'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Structure Set Description
  get StructureSetDescription(): string | string | undefined {
    return this.x30060006;
  }

  get x30060006(): string | string | undefined {
    const element = this.dwResponse['30060006'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getStructureSetDescription(): Promise<string> {
    const element = this.dwResponse['30060006'];
    if (typeof element !== 'string') {
      return this.x30060006 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['30060006'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // ROI Description
  get ROIDescription(): string | string | undefined {
    return this.x30060028;
  }

  get x30060028(): string | string | undefined {
    const element = this.dwResponse['30060028'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getROIDescription(): Promise<string> {
    const element = this.dwResponse['30060028'];
    if (typeof element !== 'string') {
      return this.x30060028 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['30060028'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // ROI Observation Description
  get ROIObservationDescription(): string | string | undefined {
    return this.x30060088;
  }

  get x30060088(): string | string | undefined {
    const element = this.dwResponse['30060088'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getROIObservationDescription(): Promise<string> {
    const element = this.dwResponse['30060088'];
    if (typeof element !== 'string') {
      return this.x30060088 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['30060088'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Measured Dose Description
  get MeasuredDoseDescription(): string | string | undefined {
    return this.x30080012;
  }

  get x30080012(): string | string | undefined {
    const element = this.dwResponse['30080012'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getMeasuredDoseDescription(): Promise<string> {
    const element = this.dwResponse['30080012'];
    if (typeof element !== 'string') {
      return this.x30080012 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['30080012'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Override Reason
  get OverrideReason(): string | string | undefined {
    return this.x30080066;
  }

  get x30080066(): string | string | undefined {
    const element = this.dwResponse['30080066'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getOverrideReason(): Promise<string> {
    const element = this.dwResponse['30080066'];
    if (typeof element !== 'string') {
      return this.x30080066 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['30080066'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Calculated Dose Reference Description
  get CalculatedDoseReferenceDescription(): string | string | undefined {
    return this.x30080074;
  }

  get x30080074(): string | string | undefined {
    const element = this.dwResponse['30080074'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCalculatedDoseReferenceDescription(): Promise<string> {
    const element = this.dwResponse['30080074'];
    if (typeof element !== 'string') {
      return this.x30080074 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['30080074'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Treatment Status Comment
  get TreatmentStatusComment(): string | string | undefined {
    return this.x30080202;
  }

  get x30080202(): string | string | undefined {
    const element = this.dwResponse['30080202'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getTreatmentStatusComment(): Promise<string> {
    const element = this.dwResponse['30080202'];
    if (typeof element !== 'string') {
      return this.x30080202 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['30080202'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // RT Plan Description
  get RTPlanDescription(): string | string | undefined {
    return this.x300a0004;
  }

  get x300a0004(): string | string | undefined {
    const element = this.dwResponse['300A0004'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getRTPlanDescription(): Promise<string> {
    const element = this.dwResponse['300A0004'];
    if (typeof element !== 'string') {
      return this.x300a0004 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['300A0004'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Prescription Description
  get PrescriptionDescription(): string | string | undefined {
    return this.x300a000e;
  }

  get x300a000e(): string | string | undefined {
    const element = this.dwResponse['300A000E'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getPrescriptionDescription(): Promise<string> {
    const element = this.dwResponse['300A000E'];
    if (typeof element !== 'string') {
      return this.x300a000e as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['300A000E'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Fraction Pattern
  get FractionPattern(): string | string | undefined {
    return this.x300a007b;
  }

  get x300a007b(): string | string | undefined {
    const element = this.dwResponse['300A007B'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getFractionPattern(): Promise<string> {
    const element = this.dwResponse['300A007B'];
    if (typeof element !== 'string') {
      return this.x300a007b as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['300A007B'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Beam Description
  get BeamDescription(): string | string | undefined {
    return this.x300a00c3;
  }

  get x300a00c3(): string | string | undefined {
    const element = this.dwResponse['300A00C3'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getBeamDescription(): Promise<string> {
    const element = this.dwResponse['300A00C3'];
    if (typeof element !== 'string') {
      return this.x300a00c3 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['300A00C3'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Bolus Description
  get BolusDescription(): string | string | undefined {
    return this.x300a00dd;
  }

  get x300a00dd(): string | string | undefined {
    const element = this.dwResponse['300A00DD'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getBolusDescription(): Promise<string> {
    const element = this.dwResponse['300A00DD'];
    if (typeof element !== 'string') {
      return this.x300a00dd as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['300A00DD'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Fixation Device Description
  get FixationDeviceDescription(): string | string | undefined {
    return this.x300a0196;
  }

  get x300a0196(): string | string | undefined {
    const element = this.dwResponse['300A0196'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getFixationDeviceDescription(): Promise<string> {
    const element = this.dwResponse['300A0196'];
    if (typeof element !== 'string') {
      return this.x300a0196 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['300A0196'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Shielding Device Description
  get ShieldingDeviceDescription(): string | string | undefined {
    return this.x300a01a6;
  }

  get x300a01a6(): string | string | undefined {
    const element = this.dwResponse['300A01A6'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getShieldingDeviceDescription(): Promise<string> {
    const element = this.dwResponse['300A01A6'];
    if (typeof element !== 'string') {
      return this.x300a01a6 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['300A01A6'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Setup Technique Description
  get SetupTechniqueDescription(): string | string | undefined {
    return this.x300a01b2;
  }

  get x300a01b2(): string | string | undefined {
    const element = this.dwResponse['300A01B2'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getSetupTechniqueDescription(): Promise<string> {
    const element = this.dwResponse['300A01B2'];
    if (typeof element !== 'string') {
      return this.x300a01b2 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['300A01B2'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Setup Device Description
  get SetupDeviceDescription(): string | string | undefined {
    return this.x300a01ba;
  }

  get x300a01ba(): string | string | undefined {
    const element = this.dwResponse['300A01BA'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getSetupDeviceDescription(): Promise<string> {
    const element = this.dwResponse['300A01BA'];
    if (typeof element !== 'string') {
      return this.x300a01ba as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['300A01BA'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Setup Reference Description
  get SetupReferenceDescription(): string | string | undefined {
    return this.x300a01d0;
  }

  get x300a01d0(): string | string | undefined {
    const element = this.dwResponse['300A01D0'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getSetupReferenceDescription(): Promise<string> {
    const element = this.dwResponse['300A01D0'];
    if (typeof element !== 'string') {
      return this.x300a01d0 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['300A01D0'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Compensator Description
  get CompensatorDescription(): string | string | undefined {
    return this.x300a02eb;
  }

  get x300a02eb(): string | string | undefined {
    const element = this.dwResponse['300A02EB'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCompensatorDescription(): Promise<string> {
    const element = this.dwResponse['300A02EB'];
    if (typeof element !== 'string') {
      return this.x300a02eb as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['300A02EB'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Setup Image Comment
  get SetupImageComment(): string | string | undefined {
    return this.x300a0402;
  }

  get x300a0402(): string | string | undefined {
    const element = this.dwResponse['300A0402'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getSetupImageComment(): Promise<string> {
    const element = this.dwResponse['300A0402'];
    if (typeof element !== 'string') {
      return this.x300a0402 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['300A0402'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // General Accessory Description
  get GeneralAccessoryDescription(): string | string | undefined {
    return this.x300a0422;
  }

  get x300a0422(): string | string | undefined {
    const element = this.dwResponse['300A0422'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getGeneralAccessoryDescription(): Promise<string> {
    const element = this.dwResponse['300A0422'];
    if (typeof element !== 'string') {
      return this.x300a0422 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['300A0422'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Arbitrary
  get Arbitrary(): string | string | undefined {
    return this.x40000010;
  }

  get x40000010(): string | string | undefined {
    const element = this.dwResponse['40000010'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getArbitrary(): Promise<string> {
    const element = this.dwResponse['40000010'];
    if (typeof element !== 'string') {
      return this.x40000010 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['40000010'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Text Comments
  get TextComments(): string | string | undefined {
    return this.x40004000;
  }

  get x40004000(): string | string | undefined {
    const element = this.dwResponse['40004000'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getTextComments(): Promise<string> {
    const element = this.dwResponse['40004000'];
    if (typeof element !== 'string') {
      return this.x40004000 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['40004000'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Interpretation Text
  get InterpretationText(): string | string | undefined {
    return this.x4008010b;
  }

  get x4008010b(): string | string | undefined {
    const element = this.dwResponse['4008010B'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getInterpretationText(): Promise<string> {
    const element = this.dwResponse['4008010B'];
    if (typeof element !== 'string') {
      return this.x4008010b as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['4008010B'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Interpretation Diagnosis Description
  get InterpretationDiagnosisDescription(): string | string | undefined {
    return this.x40080115;
  }

  get x40080115(): string | string | undefined {
    const element = this.dwResponse['40080115'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getInterpretationDiagnosisDescription(): Promise<string> {
    const element = this.dwResponse['40080115'];
    if (typeof element !== 'string') {
      return this.x40080115 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['40080115'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Impressions
  get Impressions(): string | string | undefined {
    return this.x40080300;
  }

  get x40080300(): string | string | undefined {
    const element = this.dwResponse['40080300'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getImpressions(): Promise<string> {
    const element = this.dwResponse['40080300'];
    if (typeof element !== 'string') {
      return this.x40080300 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['40080300'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Results Comments
  get ResultsComments(): string | string | undefined {
    return this.x40084000;
  }

  get x40084000(): string | string | undefined {
    const element = this.dwResponse['40084000'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getResultsComments(): Promise<string> {
    const element = this.dwResponse['40084000'];
    if (typeof element !== 'string') {
      return this.x40084000 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['40084000'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Threat ROI Bitmap
  get ThreatROIBitmap(): Uint8Array | string | undefined {
    return this.x40101006;
  }

  get x40101006(): Uint8Array | string | undefined {
    const element = this.dwResponse['40101006'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getThreatROIBitmap(): Promise<Uint8Array> {
    const element = this.dwResponse['40101006'];
    if (typeof element !== 'string') {
      return this.x40101006 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['40101006'] = { Value: [value], vr: 'OB' };
    return value;
    
  }

  // Threat Category Description
  get ThreatCategoryDescription(): string | string | undefined {
    return this.x40101013;
  }

  get x40101013(): string | string | undefined {
    const element = this.dwResponse['40101013'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getThreatCategoryDescription(): Promise<string> {
    const element = this.dwResponse['40101013'];
    if (typeof element !== 'string') {
      return this.x40101013 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['40101013'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // OOI Type Descriptor
  get OOITypeDescriptor(): string | string | undefined {
    return this.x40101068;
  }

  get x40101068(): string | string | undefined {
    const element = this.dwResponse['40101068'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getOOITypeDescriptor(): Promise<string> {
    const element = this.dwResponse['40101068'];
    if (typeof element !== 'string') {
      return this.x40101068 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['40101068'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Detector Calibration Data
  get DetectorCalibrationData(): Uint8Array | string | undefined {
    return this.x4010106c;
  }

  get x4010106c(): Uint8Array | string | undefined {
    const element = this.dwResponse['4010106C'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getDetectorCalibrationData(): Promise<Uint8Array> {
    const element = this.dwResponse['4010106C'];
    if (typeof element !== 'string') {
      return this.x4010106c as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['4010106C'] = { Value: [value], vr: 'OB' };
    return value;
    
  }

  // PTO Location Description
  get PTOLocationDescription(): string | string | undefined {
    return this.x40101078;
  }

  get x40101078(): string | string | undefined {
    const element = this.dwResponse['40101078'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getPTOLocationDescription(): Promise<string> {
    const element = this.dwResponse['40101078'];
    if (typeof element !== 'string') {
      return this.x40101078 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['40101078'] = { Value: [value], vr: 'ST' };
    return value;
    
  }

  // Audio Sample Data
  get AudioSampleData(): Uint8Array | string | undefined {
    return this.x50xx200c;
  }

  get x50xx200c(): Uint8Array | string | undefined {
    const element = this.dwResponse['50XX200C'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getAudioSampleData(): Promise<Uint8Array> {
    const element = this.dwResponse['50XX200C'];
    if (typeof element !== 'string') {
      return this.x50xx200c as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['50XX200C'] = { Value: [value], vr: 'OB or OW' };
    return value;
    
  }

  // Audio Comments
  get AudioComments(): string | string | undefined {
    return this.x50xx200e;
  }

  get x50xx200e(): string | string | undefined {
    const element = this.dwResponse['50XX200E'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getAudioComments(): Promise<string> {
    const element = this.dwResponse['50XX200E'];
    if (typeof element !== 'string') {
      return this.x50xx200e as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['50XX200E'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Curve Data
  get CurveData(): Uint8Array | string | undefined {
    return this.x50xx3000;
  }

  get x50xx3000(): Uint8Array | string | undefined {
    const element = this.dwResponse['50XX3000'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCurveData(): Promise<Uint8Array> {
    const element = this.dwResponse['50XX3000'];
    if (typeof element !== 'string') {
      return this.x50xx3000 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['50XX3000'] = { Value: [value], vr: 'OB or OW' };
    return value;
    
  }

  // Channel Minimum Value
  get ChannelMinimumValue(): Uint8Array | string | undefined {
    return this.x54000110;
  }

  get x54000110(): Uint8Array | string | undefined {
    const element = this.dwResponse['54000110'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getChannelMinimumValue(): Promise<Uint8Array> {
    const element = this.dwResponse['54000110'];
    if (typeof element !== 'string') {
      return this.x54000110 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['54000110'] = { Value: [value], vr: 'OB or OW' };
    return value;
    
  }

  // Channel Maximum Value
  get ChannelMaximumValue(): Uint8Array | string | undefined {
    return this.x54000112;
  }

  get x54000112(): Uint8Array | string | undefined {
    const element = this.dwResponse['54000112'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getChannelMaximumValue(): Promise<Uint8Array> {
    const element = this.dwResponse['54000112'];
    if (typeof element !== 'string') {
      return this.x54000112 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['54000112'] = { Value: [value], vr: 'OB or OW' };
    return value;
    
  }

  // Waveform Padding Value
  get WaveformPaddingValue(): Uint8Array | string | undefined {
    return this.x5400100a;
  }

  get x5400100a(): Uint8Array | string | undefined {
    const element = this.dwResponse['5400100A'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getWaveformPaddingValue(): Promise<Uint8Array> {
    const element = this.dwResponse['5400100A'];
    if (typeof element !== 'string') {
      return this.x5400100a as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['5400100A'] = { Value: [value], vr: 'OB or OW' };
    return value;
    
  }

  // Waveform Data
  get WaveformData(): Uint8Array | string | undefined {
    return this.x54001010;
  }

  get x54001010(): Uint8Array | string | undefined {
    const element = this.dwResponse['54001010'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getWaveformData(): Promise<Uint8Array> {
    const element = this.dwResponse['54001010'];
    if (typeof element !== 'string') {
      return this.x54001010 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['54001010'] = { Value: [value], vr: 'OB or OW' };
    return value;
    
  }

  // First Order Phase Correction Angle
  get FirstOrderPhaseCorrectionAngle(): Float32Array | string | undefined {
    return this.x56000010;
  }

  get x56000010(): Float32Array | string | undefined {
    const element = this.dwResponse['56000010'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getFirstOrderPhaseCorrectionAngle(): Promise<Float32Array> {
    const element = this.dwResponse['56000010'];
    if (typeof element !== 'string') {
      return this.x56000010 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Spectroscopy Data
  get SpectroscopyData(): Float32Array | string | undefined {
    return this.x56000020;
  }

  get x56000020(): Float32Array | string | undefined {
    const element = this.dwResponse['56000020'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getSpectroscopyData(): Promise<Float32Array> {
    const element = this.dwResponse['56000020'];
    if (typeof element !== 'string') {
      return this.x56000020 as any;
    }
    const response = await this.requester.qido({ path: element });
    throw new Error('Not yet implemented');
  }

  // Overlay Data
  get OverlayData(): Uint8Array | string | undefined {
    return this.x60xx3000;
  }

  get x60xx3000(): Uint8Array | string | undefined {
    const element = this.dwResponse['60XX3000'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getOverlayData(): Promise<Uint8Array> {
    const element = this.dwResponse['60XX3000'];
    if (typeof element !== 'string') {
      return this.x60xx3000 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['60XX3000'] = { Value: [value], vr: 'OB or OW' };
    return value;
    
  }

  // Overlay Comments
  get OverlayComments(): string | string | undefined {
    return this.x60xx4000;
  }

  get x60xx4000(): string | string | undefined {
    const element = this.dwResponse['60XX4000'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getOverlayComments(): Promise<string> {
    const element = this.dwResponse['60XX4000'];
    if (typeof element !== 'string') {
      return this.x60xx4000 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = response.text();
    this.dwResponse['60XX4000'] = { Value: [value], vr: 'LT' };
    return value;
    
  }

  // Pixel Data
  get PixelData(): Uint8Array | string | undefined {
    return this.x7fe00010;
  }

  get x7fe00010(): Uint8Array | string | undefined {
    const element = this.dwResponse['7FE00010'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getPixelData(): Promise<Uint8Array> {
    const element = this.dwResponse['7FE00010'];
    if (typeof element !== 'string') {
      return this.x7fe00010 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['7FE00010'] = { Value: [value], vr: 'OB or OW' };
    return value;
    
  }

  // Coefficients SDVN
  get CoefficientsSDVN(): Uint8Array | string | undefined {
    return this.x7fe00020;
  }

  get x7fe00020(): Uint8Array | string | undefined {
    const element = this.dwResponse['7FE00020'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCoefficientsSDVN(): Promise<Uint8Array> {
    const element = this.dwResponse['7FE00020'];
    if (typeof element !== 'string') {
      return this.x7fe00020 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['7FE00020'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Coefficients SDHN
  get CoefficientsSDHN(): Uint8Array | string | undefined {
    return this.x7fe00030;
  }

  get x7fe00030(): Uint8Array | string | undefined {
    const element = this.dwResponse['7FE00030'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCoefficientsSDHN(): Promise<Uint8Array> {
    const element = this.dwResponse['7FE00030'];
    if (typeof element !== 'string') {
      return this.x7fe00030 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['7FE00030'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Coefficients SDDN
  get CoefficientsSDDN(): Uint8Array | string | undefined {
    return this.x7fe00040;
  }

  get x7fe00040(): Uint8Array | string | undefined {
    const element = this.dwResponse['7FE00040'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getCoefficientsSDDN(): Promise<Uint8Array> {
    const element = this.dwResponse['7FE00040'];
    if (typeof element !== 'string') {
      return this.x7fe00040 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['7FE00040'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Variable Pixel Data
  get VariablePixelData(): Uint8Array | string | undefined {
    return this.x7fxx0010;
  }

  get x7fxx0010(): Uint8Array | string | undefined {
    const element = this.dwResponse['7FXX0010'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getVariablePixelData(): Promise<Uint8Array> {
    const element = this.dwResponse['7FXX0010'];
    if (typeof element !== 'string') {
      return this.x7fxx0010 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['7FXX0010'] = { Value: [value], vr: 'OB or OW' };
    return value;
    
  }

  // Variable Coefficients SDVN
  get VariableCoefficientsSDVN(): Uint8Array | string | undefined {
    return this.x7fxx0020;
  }

  get x7fxx0020(): Uint8Array | string | undefined {
    const element = this.dwResponse['7FXX0020'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getVariableCoefficientsSDVN(): Promise<Uint8Array> {
    const element = this.dwResponse['7FXX0020'];
    if (typeof element !== 'string') {
      return this.x7fxx0020 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['7FXX0020'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Variable Coefficients SDHN
  get VariableCoefficientsSDHN(): Uint8Array | string | undefined {
    return this.x7fxx0030;
  }

  get x7fxx0030(): Uint8Array | string | undefined {
    const element = this.dwResponse['7FXX0030'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getVariableCoefficientsSDHN(): Promise<Uint8Array> {
    const element = this.dwResponse['7FXX0030'];
    if (typeof element !== 'string') {
      return this.x7fxx0030 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['7FXX0030'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Variable Coefficients SDDN
  get VariableCoefficientsSDDN(): Uint8Array | string | undefined {
    return this.x7fxx0040;
  }

  get x7fxx0040(): Uint8Array | string | undefined {
    const element = this.dwResponse['7FXX0040'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getVariableCoefficientsSDDN(): Promise<Uint8Array> {
    const element = this.dwResponse['7FXX0040'];
    if (typeof element !== 'string') {
      return this.x7fxx0040 as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['7FXX0040'] = { Value: [value], vr: 'OW' };
    return value;
    
  }

  // Data Set Trailing Padding
  get DataSetTrailingPadding(): Uint8Array | string | undefined {
    return this.xfffcfffc;
  }

  get xfffcfffc(): Uint8Array | string | undefined {
    const element = this.dwResponse['FFFCFFFC'];
    return element === undefined || typeof element === 'string' ? element : element.Value[0];
  }

  async getDataSetTrailingPadding(): Promise<Uint8Array> {
    const element = this.dwResponse['FFFCFFFC'];
    if (typeof element !== 'string') {
      return this.xfffcfffc as any;
    }
    const response = await this.requester.qido({ path: element });
    const value = new Uint8Array(await response.arrayBuffer());
    this.dwResponse['FFFCFFFC'] = { Value: [value], vr: 'OB' };
    return value;
    
  }

}

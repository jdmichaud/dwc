// Copyright (c) 2023 Jean-Daniel Michaud
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

/* eslint-disable */
import { Dataset } from '@jdmichaud/dicom-model';

import { DICOMWebResponse, Element } from './dicom-web-response';
import { Requester } from './requester';

import { convert } from './converter';

/**
 * Implements a Dataset. All the fields are optional and can thus be undefined.
 */
export class DICOMWebDataset implements Dataset {
  constructor(public readonly dwResponse: DICOMWebResponse, protected readonly requester: Requester) {
    if (dwResponse === undefined) {
      throw new Error('DICOMWebDataset requires a DICOM valid DICOMWeb response as parameter');
    }
  }

  private async retrieveWideField<T>(element: string): Promise<Response> {
    return await (async () => {
      const response = await this.requester.qido({
        path: element,
      });
      return await response;
    })();
  }

  // Metadata ------------------------------------------------------------------
{{~ it.elements :element}}{{? !element.isLinkable }}
  // {{=element.prettyName }}
  get {{=element.keyword}}(): {{=element.returnedType}} | undefined {
    return this.x{{=element.tag.toLowerCase()}};
  }

  get x{{=element.tag.toLowerCase()}}(): {{=element.returnedType}} | undefined {
    const value = this.dwResponse['{{=element.tag.toLowerCase()}}']?.Value;
    {{? element.vr === 'SQ' }}
      return value?.map(v => new DICOMWebDataset(v, this.requester));
    {{??}}{{? !element.tag.toLowerCase().includes('x') }}return convert(value{{? element.onlyOneElement }}?.[0]{{?}}, 0x{{=element.tag.toLowerCase()}}, '{{=element.returnedType}}');{{??}}throw new Error('Unsupported field {{=element.keyword}} ({{=element.tag}})');{{?}}{{?}}
  }

  get{{=element.keyword}}(): {{=element.returnedType}} {
    const value = this.x{{=element.tag.toLowerCase()}};
    if (value === undefined) {
      throw new Error('{{=element.keyword}} is undefined');
    }
    return value;
  }
{{?}}{{~}}

  // Bulkdata ------------------------------------------------------------------
{{~ it.elements :element}}{{? element.isLinkable }}
  // {{=element.prettyName }}
  get {{=element.keyword}}(): {{=element.returnedType}} | string | undefined {
    return this.x{{=element.tag.toLowerCase()}};
  }

  get x{{=element.tag.toLowerCase()}}(): {{=element.returnedType}} | string | undefined {
    const element = this.dwResponse['{{=element.tag.toLowerCase()}}'];
    return element === undefined || typeof element === 'string' ? element : element.Value{{? element.onlyOneElement }}[0]{{??}} as any{{?}};
  }

  async get{{=element.keyword}}(): Promise<{{=element.returnedType}}> {
    const element = this.dwResponse['{{=element.tag.toLowerCase()}}'];
    if (typeof element !== 'string') {
      return this.x{{=element.tag.toLowerCase()}} as any;
    }
    const response = await this.requester.qido({ path: element });
    {{? element.returnedType === 'string' }}const value = response.text();
    this.dwResponse['{{=element.tag.toLowerCase()}}'] = { Value: [value], vr: '{{=element.vr}}' };
    return value;
    {{??}}{{? element.returnedType === 'Uint8Array' }}const value = new {{=element.returnedType}}(await response.arrayBuffer());
    this.dwResponse['{{=element.tag.toLowerCase()}}'] = { Value: [value], vr: '{{=element.vr}}' };
    return value;
    {{??}}throw new Error('Not yet implemented');{{?}}{{?}}
  }
{{?}}{{~}}
}
